name: "Prepare Cloudflare Secrets"
description: "Decrypts an env file (if needed), exports variables to GITHUB_ENV, and outputs secret names for wrangler-action."

inputs:
  env_path:
    description: "Path to the .env file to use (e.g., apps/www/.env or apps/www/.env.production)"
    required: true

outputs:
  secret_names:
    description: "Newline-separated list of secret variable names for wrangler-action"
    value: ${{ steps.compute.outputs.secret_names }}

runs:
  using: composite
  steps:
    - name: Validate env file exists
      shell: bash
      run: |
        if [ ! -f "${{ inputs.env_path }}" ]; then
          echo "::error::Environment file not found: ${{ inputs.env_path }}"
          exit 1
        fi

    - name: Compute secret names
      id: compute
      shell: bash
      run: |
        ENV_FILE="${{ inputs.env_path }}"
        # Extract key names (ignore comments and dotenvx key material)
        SECRET_NAMES=$(awk -F= '!/^#/ && !/^\s*$/ && !/^DOTENV_PUBLIC_KEY/ && !/^DOTENV_PRIVATE_KEY/ {print $1}' "$ENV_FILE")
        if [ -z "$SECRET_NAMES" ]; then
          echo "::warning::No secret names found in $ENV_FILE after filtering."
          echo "secret_names=" >> "$GITHUB_OUTPUT"
        else
          echo "secret_names<<EOF" >> "$GITHUB_OUTPUT"
          echo "$SECRET_NAMES" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
        fi

    # - name: Export decrypted variables to GITHUB_ENV
    #   shell: bash
    #   run: |
    #     ENV_FILE="${{ inputs.env_path }}"
    #     TMP_FILE=$(mktemp)
    #     # Try to decrypt with dotenvx; if it fails (or not encrypted), fallback to the file as-is
    #     if pnpm dotenvx decrypt --stdout -f "$ENV_FILE" > "$TMP_FILE" 2>/dev/null; then
    #       echo "Using decrypted content from dotenvx."
    #     else
    #       echo "::notice::dotenvx decrypt failed or not needed; using file as-is."
    #       cp "$ENV_FILE" "$TMP_FILE"
    #     fi

    #     # Remove comments/blank lines and filter out dotenvx key material, then strip surrounding quotes
    #     while IFS= read -r line; do
    #       # Skip comments and empty lines
    #       if [[ -z "$line" || "$line" =~ ^# ]]; then
    #         continue
    #       fi

    #       # Skip dotenvx key and public env var material
    #       if [[ "$line" =~ ^DOTENV_PUBLIC_KEY ]]; then
    #         continue
    #       fi

    #       key="${line%%=*}"
    #       value="${line#*=}"
    #       # Trim potential CR from Windows line endings
    #       value="${value%$'\r'}"

    #       # Strip matching surrounding single or double quotes
    #       if [[ ( "${value:0:1}" == '"' && "${value: -1}" == '"' ) || ( "${value:0:1}" == "'" && "${value: -1}" == "'" ) ]]; then
    #         value="${value:1:-1}"
    #       fi

    #       echo "${key}=${value}" >> "$GITHUB_ENV"
    #     done < "$TMP_FILE"
    #     echo "Exported environment variables to GITHUB_ENV."
