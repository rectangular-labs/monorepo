/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DocsRouteRouteImport } from './routes/docs/route'
import { Route as BlogRouteRouteImport } from './routes/blog/route'
import { Route as AuthedRouteRouteImport } from './routes/_authed/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DocsIndexRouteImport } from './routes/docs/index'
import { Route as BlogIndexRouteImport } from './routes/blog/index'
import { Route as DocsSplatRouteImport } from './routes/docs/$'
import { Route as BlogSplatRouteImport } from './routes/blog/$'
import { Route as AuthedOrpcRouteImport } from './routes/_authed/orpc'
import { ServerRoute as BlogRssDotxmlServerRouteImport } from './routes/blog/rss[.]xml'
import { ServerRoute as ApiSplatServerRouteImport } from './routes/api/$'
import { ServerRoute as ApiRpcSplatServerRouteImport } from './routes/api/rpc.$'

const rootServerRouteImport = createServerRootRoute()

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DocsRouteRoute = DocsRouteRouteImport.update({
  id: '/docs',
  path: '/docs',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogRouteRoute = BlogRouteRouteImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRouteRoute = AuthedRouteRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DocsIndexRoute = DocsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DocsRouteRoute,
} as any)
const BlogIndexRoute = BlogIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => BlogRouteRoute,
} as any)
const DocsSplatRoute = DocsSplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => DocsRouteRoute,
} as any)
const BlogSplatRoute = BlogSplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => BlogRouteRoute,
} as any)
const AuthedOrpcRoute = AuthedOrpcRouteImport.update({
  id: '/orpc',
  path: '/orpc',
  getParentRoute: () => AuthedRouteRoute,
} as any)
const BlogRssDotxmlServerRoute = BlogRssDotxmlServerRouteImport.update({
  id: '/blog/rss.xml',
  path: '/blog/rss.xml',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiSplatServerRoute = ApiSplatServerRouteImport.update({
  id: '/api/$',
  path: '/api/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiRpcSplatServerRoute = ApiRpcSplatServerRouteImport.update({
  id: '/api/rpc/$',
  path: '/api/rpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/blog': typeof BlogRouteRouteWithChildren
  '/docs': typeof DocsRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/orpc': typeof AuthedOrpcRoute
  '/blog/$': typeof BlogSplatRoute
  '/docs/$': typeof DocsSplatRoute
  '/blog/': typeof BlogIndexRoute
  '/docs/': typeof DocsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/orpc': typeof AuthedOrpcRoute
  '/blog/$': typeof BlogSplatRoute
  '/docs/$': typeof DocsSplatRoute
  '/blog': typeof BlogIndexRoute
  '/docs': typeof DocsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteRouteWithChildren
  '/blog': typeof BlogRouteRouteWithChildren
  '/docs': typeof DocsRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/_authed/orpc': typeof AuthedOrpcRoute
  '/blog/$': typeof BlogSplatRoute
  '/docs/$': typeof DocsSplatRoute
  '/blog/': typeof BlogIndexRoute
  '/docs/': typeof DocsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/blog'
    | '/docs'
    | '/login'
    | '/orpc'
    | '/blog/$'
    | '/docs/$'
    | '/blog/'
    | '/docs/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/orpc' | '/blog/$' | '/docs/$' | '/blog' | '/docs'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/blog'
    | '/docs'
    | '/login'
    | '/_authed/orpc'
    | '/blog/$'
    | '/docs/$'
    | '/blog/'
    | '/docs/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRouteRoute: typeof AuthedRouteRouteWithChildren
  BlogRouteRoute: typeof BlogRouteRouteWithChildren
  DocsRouteRoute: typeof DocsRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}
export interface FileServerRoutesByFullPath {
  '/api/$': typeof ApiSplatServerRoute
  '/blog/rss.xml': typeof BlogRssDotxmlServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/$': typeof ApiSplatServerRoute
  '/blog/rss.xml': typeof BlogRssDotxmlServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/$': typeof ApiSplatServerRoute
  '/blog/rss.xml': typeof BlogRssDotxmlServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/$' | '/blog/rss.xml' | '/api/rpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/$' | '/blog/rss.xml' | '/api/rpc/$'
  id: '__root__' | '/api/$' | '/blog/rss.xml' | '/api/rpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiSplatServerRoute: typeof ApiSplatServerRoute
  BlogRssDotxmlServerRoute: typeof BlogRssDotxmlServerRoute
  ApiRpcSplatServerRoute: typeof ApiRpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docs': {
      id: '/docs'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog': {
      id: '/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docs/': {
      id: '/docs/'
      path: '/'
      fullPath: '/docs/'
      preLoaderRoute: typeof DocsIndexRouteImport
      parentRoute: typeof DocsRouteRoute
    }
    '/blog/': {
      id: '/blog/'
      path: '/'
      fullPath: '/blog/'
      preLoaderRoute: typeof BlogIndexRouteImport
      parentRoute: typeof BlogRouteRoute
    }
    '/docs/$': {
      id: '/docs/$'
      path: '/$'
      fullPath: '/docs/$'
      preLoaderRoute: typeof DocsSplatRouteImport
      parentRoute: typeof DocsRouteRoute
    }
    '/blog/$': {
      id: '/blog/$'
      path: '/$'
      fullPath: '/blog/$'
      preLoaderRoute: typeof BlogSplatRouteImport
      parentRoute: typeof BlogRouteRoute
    }
    '/_authed/orpc': {
      id: '/_authed/orpc'
      path: '/orpc'
      fullPath: '/orpc'
      preLoaderRoute: typeof AuthedOrpcRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/blog/rss.xml': {
      id: '/blog/rss.xml'
      path: '/blog/rss.xml'
      fullPath: '/blog/rss.xml'
      preLoaderRoute: typeof BlogRssDotxmlServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/$': {
      id: '/api/$'
      path: '/api/$'
      fullPath: '/api/$'
      preLoaderRoute: typeof ApiSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/rpc/$': {
      id: '/api/rpc/$'
      path: '/api/rpc/$'
      fullPath: '/api/rpc/$'
      preLoaderRoute: typeof ApiRpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AuthedRouteRouteChildren {
  AuthedOrpcRoute: typeof AuthedOrpcRoute
}

const AuthedRouteRouteChildren: AuthedRouteRouteChildren = {
  AuthedOrpcRoute: AuthedOrpcRoute,
}

const AuthedRouteRouteWithChildren = AuthedRouteRoute._addFileChildren(
  AuthedRouteRouteChildren,
)

interface BlogRouteRouteChildren {
  BlogSplatRoute: typeof BlogSplatRoute
  BlogIndexRoute: typeof BlogIndexRoute
}

const BlogRouteRouteChildren: BlogRouteRouteChildren = {
  BlogSplatRoute: BlogSplatRoute,
  BlogIndexRoute: BlogIndexRoute,
}

const BlogRouteRouteWithChildren = BlogRouteRoute._addFileChildren(
  BlogRouteRouteChildren,
)

interface DocsRouteRouteChildren {
  DocsSplatRoute: typeof DocsSplatRoute
  DocsIndexRoute: typeof DocsIndexRoute
}

const DocsRouteRouteChildren: DocsRouteRouteChildren = {
  DocsSplatRoute: DocsSplatRoute,
  DocsIndexRoute: DocsIndexRoute,
}

const DocsRouteRouteWithChildren = DocsRouteRoute._addFileChildren(
  DocsRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRouteRoute: AuthedRouteRouteWithChildren,
  BlogRouteRoute: BlogRouteRouteWithChildren,
  DocsRouteRoute: DocsRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiSplatServerRoute: ApiSplatServerRoute,
  BlogRssDotxmlServerRoute: BlogRssDotxmlServerRoute,
  ApiRpcSplatServerRoute: ApiRpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
