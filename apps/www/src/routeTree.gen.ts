/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DocsRouteRouteImport } from './routes/docs/route'
import { Route as MarketingRouteRouteImport } from './routes/_marketing/route'
import { Route as DocsIndexRouteImport } from './routes/docs/index'
import { Route as MarketingIndexRouteImport } from './routes/_marketing/index'
import { Route as DocsSplatRouteImport } from './routes/docs/$'
import { Route as MarketingBlogRouteRouteImport } from './routes/_marketing/blog/route'
import { Route as MarketingBlogIndexRouteImport } from './routes/_marketing/blog/index'
import { Route as MarketingBlogRssDotxmlRouteImport } from './routes/_marketing/blog/rss[.]xml'
import { Route as MarketingBlogSplatRouteImport } from './routes/_marketing/blog/$'

const DocsRouteRoute = DocsRouteRouteImport.update({
  id: '/docs',
  path: '/docs',
  getParentRoute: () => rootRouteImport,
} as any)
const MarketingRouteRoute = MarketingRouteRouteImport.update({
  id: '/_marketing',
  getParentRoute: () => rootRouteImport,
} as any)
const DocsIndexRoute = DocsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DocsRouteRoute,
} as any)
const MarketingIndexRoute = MarketingIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MarketingRouteRoute,
} as any)
const DocsSplatRoute = DocsSplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => DocsRouteRoute,
} as any)
const MarketingBlogRouteRoute = MarketingBlogRouteRouteImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => MarketingRouteRoute,
} as any)
const MarketingBlogIndexRoute = MarketingBlogIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MarketingBlogRouteRoute,
} as any)
const MarketingBlogRssDotxmlRoute = MarketingBlogRssDotxmlRouteImport.update({
  id: '/rss.xml',
  path: '/rss.xml',
  getParentRoute: () => MarketingBlogRouteRoute,
} as any)
const MarketingBlogSplatRoute = MarketingBlogSplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => MarketingBlogRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/docs': typeof DocsRouteRouteWithChildren
  '/blog': typeof MarketingBlogRouteRouteWithChildren
  '/docs/$': typeof DocsSplatRoute
  '/': typeof MarketingIndexRoute
  '/docs/': typeof DocsIndexRoute
  '/blog/$': typeof MarketingBlogSplatRoute
  '/blog/rss.xml': typeof MarketingBlogRssDotxmlRoute
  '/blog/': typeof MarketingBlogIndexRoute
}
export interface FileRoutesByTo {
  '/docs/$': typeof DocsSplatRoute
  '/': typeof MarketingIndexRoute
  '/docs': typeof DocsIndexRoute
  '/blog/$': typeof MarketingBlogSplatRoute
  '/blog/rss.xml': typeof MarketingBlogRssDotxmlRoute
  '/blog': typeof MarketingBlogIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_marketing': typeof MarketingRouteRouteWithChildren
  '/docs': typeof DocsRouteRouteWithChildren
  '/_marketing/blog': typeof MarketingBlogRouteRouteWithChildren
  '/docs/$': typeof DocsSplatRoute
  '/_marketing/': typeof MarketingIndexRoute
  '/docs/': typeof DocsIndexRoute
  '/_marketing/blog/$': typeof MarketingBlogSplatRoute
  '/_marketing/blog/rss.xml': typeof MarketingBlogRssDotxmlRoute
  '/_marketing/blog/': typeof MarketingBlogIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/docs'
    | '/blog'
    | '/docs/$'
    | '/'
    | '/docs/'
    | '/blog/$'
    | '/blog/rss.xml'
    | '/blog/'
  fileRoutesByTo: FileRoutesByTo
  to: '/docs/$' | '/' | '/docs' | '/blog/$' | '/blog/rss.xml' | '/blog'
  id:
    | '__root__'
    | '/_marketing'
    | '/docs'
    | '/_marketing/blog'
    | '/docs/$'
    | '/_marketing/'
    | '/docs/'
    | '/_marketing/blog/$'
    | '/_marketing/blog/rss.xml'
    | '/_marketing/blog/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  MarketingRouteRoute: typeof MarketingRouteRouteWithChildren
  DocsRouteRoute: typeof DocsRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/docs': {
      id: '/docs'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_marketing': {
      id: '/_marketing'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MarketingRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/docs/': {
      id: '/docs/'
      path: '/'
      fullPath: '/docs/'
      preLoaderRoute: typeof DocsIndexRouteImport
      parentRoute: typeof DocsRouteRoute
    }
    '/_marketing/': {
      id: '/_marketing/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MarketingIndexRouteImport
      parentRoute: typeof MarketingRouteRoute
    }
    '/docs/$': {
      id: '/docs/$'
      path: '/$'
      fullPath: '/docs/$'
      preLoaderRoute: typeof DocsSplatRouteImport
      parentRoute: typeof DocsRouteRoute
    }
    '/_marketing/blog': {
      id: '/_marketing/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof MarketingBlogRouteRouteImport
      parentRoute: typeof MarketingRouteRoute
    }
    '/_marketing/blog/': {
      id: '/_marketing/blog/'
      path: '/'
      fullPath: '/blog/'
      preLoaderRoute: typeof MarketingBlogIndexRouteImport
      parentRoute: typeof MarketingBlogRouteRoute
    }
    '/_marketing/blog/rss.xml': {
      id: '/_marketing/blog/rss.xml'
      path: '/rss.xml'
      fullPath: '/blog/rss.xml'
      preLoaderRoute: typeof MarketingBlogRssDotxmlRouteImport
      parentRoute: typeof MarketingBlogRouteRoute
    }
    '/_marketing/blog/$': {
      id: '/_marketing/blog/$'
      path: '/$'
      fullPath: '/blog/$'
      preLoaderRoute: typeof MarketingBlogSplatRouteImport
      parentRoute: typeof MarketingBlogRouteRoute
    }
  }
}

interface MarketingBlogRouteRouteChildren {
  MarketingBlogSplatRoute: typeof MarketingBlogSplatRoute
  MarketingBlogRssDotxmlRoute: typeof MarketingBlogRssDotxmlRoute
  MarketingBlogIndexRoute: typeof MarketingBlogIndexRoute
}

const MarketingBlogRouteRouteChildren: MarketingBlogRouteRouteChildren = {
  MarketingBlogSplatRoute: MarketingBlogSplatRoute,
  MarketingBlogRssDotxmlRoute: MarketingBlogRssDotxmlRoute,
  MarketingBlogIndexRoute: MarketingBlogIndexRoute,
}

const MarketingBlogRouteRouteWithChildren =
  MarketingBlogRouteRoute._addFileChildren(MarketingBlogRouteRouteChildren)

interface MarketingRouteRouteChildren {
  MarketingBlogRouteRoute: typeof MarketingBlogRouteRouteWithChildren
  MarketingIndexRoute: typeof MarketingIndexRoute
}

const MarketingRouteRouteChildren: MarketingRouteRouteChildren = {
  MarketingBlogRouteRoute: MarketingBlogRouteRouteWithChildren,
  MarketingIndexRoute: MarketingIndexRoute,
}

const MarketingRouteRouteWithChildren = MarketingRouteRoute._addFileChildren(
  MarketingRouteRouteChildren,
)

interface DocsRouteRouteChildren {
  DocsSplatRoute: typeof DocsSplatRoute
  DocsIndexRoute: typeof DocsIndexRoute
}

const DocsRouteRouteChildren: DocsRouteRouteChildren = {
  DocsSplatRoute: DocsSplatRoute,
  DocsIndexRoute: DocsIndexRoute,
}

const DocsRouteRouteWithChildren = DocsRouteRoute._addFileChildren(
  DocsRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  MarketingRouteRoute: MarketingRouteRouteWithChildren,
  DocsRouteRoute: DocsRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
