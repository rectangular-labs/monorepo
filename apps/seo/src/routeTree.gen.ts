/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as MarketingRouteRouteImport } from './routes/_marketing/route'
import { Route as AuthedRouteRouteImport } from './routes/_authed/route'
import { Route as MarketingIndexRouteImport } from './routes/_marketing/index'
import { Route as AuthedOrganizationRouteImport } from './routes/_authed/organization'
import { Route as MarketingBlogRouteRouteImport } from './routes/_marketing/blog/route'
import { Route as AuthedOrganizationSlugRouteRouteImport } from './routes/_authed/$organizationSlug/route'
import { Route as MarketingBlogIndexRouteImport } from './routes/_marketing/blog/index'
import { Route as AuthedOnboardingIndexRouteImport } from './routes/_authed/onboarding/index'
import { Route as AuthedOrganizationSlugIndexRouteImport } from './routes/_authed/$organizationSlug/index'
import { Route as MarketingBlogSplatRouteImport } from './routes/_marketing/blog/$'
import { Route as AuthedOrganizationSlugSettingRouteImport } from './routes/_authed/$organizationSlug/setting'
import { ServerRoute as ApiSplatServerRouteImport } from './routes/api/$'
import { ServerRoute as ApiRpcSplatServerRouteImport } from './routes/api/rpc.$'
import { ServerRoute as MarketingBlogRssDotxmlServerRouteImport } from './routes/_marketing/blog/rss[.]xml'

const rootServerRouteImport = createServerRootRoute()

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const MarketingRouteRoute = MarketingRouteRouteImport.update({
  id: '/_marketing',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRouteRoute = AuthedRouteRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const MarketingIndexRoute = MarketingIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MarketingRouteRoute,
} as any)
const AuthedOrganizationRoute = AuthedOrganizationRouteImport.update({
  id: '/organization',
  path: '/organization',
  getParentRoute: () => AuthedRouteRoute,
} as any)
const MarketingBlogRouteRoute = MarketingBlogRouteRouteImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => MarketingRouteRoute,
} as any)
const AuthedOrganizationSlugRouteRoute =
  AuthedOrganizationSlugRouteRouteImport.update({
    id: '/$organizationSlug',
    path: '/$organizationSlug',
    getParentRoute: () => AuthedRouteRoute,
  } as any)
const MarketingBlogIndexRoute = MarketingBlogIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MarketingBlogRouteRoute,
} as any)
const AuthedOnboardingIndexRoute = AuthedOnboardingIndexRouteImport.update({
  id: '/onboarding/',
  path: '/onboarding/',
  getParentRoute: () => AuthedRouteRoute,
} as any)
const AuthedOrganizationSlugIndexRoute =
  AuthedOrganizationSlugIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthedOrganizationSlugRouteRoute,
  } as any)
const MarketingBlogSplatRoute = MarketingBlogSplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => MarketingBlogRouteRoute,
} as any)
const AuthedOrganizationSlugSettingRoute =
  AuthedOrganizationSlugSettingRouteImport.update({
    id: '/setting',
    path: '/setting',
    getParentRoute: () => AuthedOrganizationSlugRouteRoute,
  } as any)
const ApiSplatServerRoute = ApiSplatServerRouteImport.update({
  id: '/api/$',
  path: '/api/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiRpcSplatServerRoute = ApiRpcSplatServerRouteImport.update({
  id: '/api/rpc/$',
  path: '/api/rpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const MarketingBlogRssDotxmlServerRoute =
  MarketingBlogRssDotxmlServerRouteImport.update({
    id: '/_marketing/blog/rss.xml',
    path: '/blog/rss.xml',
    getParentRoute: () => rootServerRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/$organizationSlug': typeof AuthedOrganizationSlugRouteRouteWithChildren
  '/blog': typeof MarketingBlogRouteRouteWithChildren
  '/organization': typeof AuthedOrganizationRoute
  '/': typeof MarketingIndexRoute
  '/$organizationSlug/setting': typeof AuthedOrganizationSlugSettingRoute
  '/blog/$': typeof MarketingBlogSplatRoute
  '/$organizationSlug/': typeof AuthedOrganizationSlugIndexRoute
  '/onboarding': typeof AuthedOnboardingIndexRoute
  '/blog/': typeof MarketingBlogIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/organization': typeof AuthedOrganizationRoute
  '/': typeof MarketingIndexRoute
  '/$organizationSlug/setting': typeof AuthedOrganizationSlugSettingRoute
  '/blog/$': typeof MarketingBlogSplatRoute
  '/$organizationSlug': typeof AuthedOrganizationSlugIndexRoute
  '/onboarding': typeof AuthedOnboardingIndexRoute
  '/blog': typeof MarketingBlogIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authed': typeof AuthedRouteRouteWithChildren
  '/_marketing': typeof MarketingRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/_authed/$organizationSlug': typeof AuthedOrganizationSlugRouteRouteWithChildren
  '/_marketing/blog': typeof MarketingBlogRouteRouteWithChildren
  '/_authed/organization': typeof AuthedOrganizationRoute
  '/_marketing/': typeof MarketingIndexRoute
  '/_authed/$organizationSlug/setting': typeof AuthedOrganizationSlugSettingRoute
  '/_marketing/blog/$': typeof MarketingBlogSplatRoute
  '/_authed/$organizationSlug/': typeof AuthedOrganizationSlugIndexRoute
  '/_authed/onboarding/': typeof AuthedOnboardingIndexRoute
  '/_marketing/blog/': typeof MarketingBlogIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/$organizationSlug'
    | '/blog'
    | '/organization'
    | '/'
    | '/$organizationSlug/setting'
    | '/blog/$'
    | '/$organizationSlug/'
    | '/onboarding'
    | '/blog/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/organization'
    | '/'
    | '/$organizationSlug/setting'
    | '/blog/$'
    | '/$organizationSlug'
    | '/onboarding'
    | '/blog'
  id:
    | '__root__'
    | '/_authed'
    | '/_marketing'
    | '/login'
    | '/_authed/$organizationSlug'
    | '/_marketing/blog'
    | '/_authed/organization'
    | '/_marketing/'
    | '/_authed/$organizationSlug/setting'
    | '/_marketing/blog/$'
    | '/_authed/$organizationSlug/'
    | '/_authed/onboarding/'
    | '/_marketing/blog/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthedRouteRoute: typeof AuthedRouteRouteWithChildren
  MarketingRouteRoute: typeof MarketingRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
}
export interface FileServerRoutesByFullPath {
  '/api/$': typeof ApiSplatServerRoute
  '/blog/rss.xml': typeof MarketingBlogRssDotxmlServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/$': typeof ApiSplatServerRoute
  '/blog/rss.xml': typeof MarketingBlogRssDotxmlServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/$': typeof ApiSplatServerRoute
  '/_marketing/blog/rss.xml': typeof MarketingBlogRssDotxmlServerRoute
  '/api/rpc/$': typeof ApiRpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/$' | '/blog/rss.xml' | '/api/rpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/$' | '/blog/rss.xml' | '/api/rpc/$'
  id: '__root__' | '/api/$' | '/_marketing/blog/rss.xml' | '/api/rpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiSplatServerRoute: typeof ApiSplatServerRoute
  MarketingBlogRssDotxmlServerRoute: typeof MarketingBlogRssDotxmlServerRoute
  ApiRpcSplatServerRoute: typeof ApiRpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_marketing': {
      id: '/_marketing'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MarketingRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_marketing/': {
      id: '/_marketing/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MarketingIndexRouteImport
      parentRoute: typeof MarketingRouteRoute
    }
    '/_authed/organization': {
      id: '/_authed/organization'
      path: '/organization'
      fullPath: '/organization'
      preLoaderRoute: typeof AuthedOrganizationRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/_marketing/blog': {
      id: '/_marketing/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof MarketingBlogRouteRouteImport
      parentRoute: typeof MarketingRouteRoute
    }
    '/_authed/$organizationSlug': {
      id: '/_authed/$organizationSlug'
      path: '/$organizationSlug'
      fullPath: '/$organizationSlug'
      preLoaderRoute: typeof AuthedOrganizationSlugRouteRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/_marketing/blog/': {
      id: '/_marketing/blog/'
      path: '/'
      fullPath: '/blog/'
      preLoaderRoute: typeof MarketingBlogIndexRouteImport
      parentRoute: typeof MarketingBlogRouteRoute
    }
    '/_authed/onboarding/': {
      id: '/_authed/onboarding/'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof AuthedOnboardingIndexRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/_authed/$organizationSlug/': {
      id: '/_authed/$organizationSlug/'
      path: '/'
      fullPath: '/$organizationSlug/'
      preLoaderRoute: typeof AuthedOrganizationSlugIndexRouteImport
      parentRoute: typeof AuthedOrganizationSlugRouteRoute
    }
    '/_marketing/blog/$': {
      id: '/_marketing/blog/$'
      path: '/$'
      fullPath: '/blog/$'
      preLoaderRoute: typeof MarketingBlogSplatRouteImport
      parentRoute: typeof MarketingBlogRouteRoute
    }
    '/_authed/$organizationSlug/setting': {
      id: '/_authed/$organizationSlug/setting'
      path: '/setting'
      fullPath: '/$organizationSlug/setting'
      preLoaderRoute: typeof AuthedOrganizationSlugSettingRouteImport
      parentRoute: typeof AuthedOrganizationSlugRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/$': {
      id: '/api/$'
      path: '/api/$'
      fullPath: '/api/$'
      preLoaderRoute: typeof ApiSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/rpc/$': {
      id: '/api/rpc/$'
      path: '/api/rpc/$'
      fullPath: '/api/rpc/$'
      preLoaderRoute: typeof ApiRpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/_marketing/blog/rss.xml': {
      id: '/_marketing/blog/rss.xml'
      path: '/blog/rss.xml'
      fullPath: '/blog/rss.xml'
      preLoaderRoute: typeof MarketingBlogRssDotxmlServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AuthedOrganizationSlugRouteRouteChildren {
  AuthedOrganizationSlugSettingRoute: typeof AuthedOrganizationSlugSettingRoute
  AuthedOrganizationSlugIndexRoute: typeof AuthedOrganizationSlugIndexRoute
}

const AuthedOrganizationSlugRouteRouteChildren: AuthedOrganizationSlugRouteRouteChildren =
  {
    AuthedOrganizationSlugSettingRoute: AuthedOrganizationSlugSettingRoute,
    AuthedOrganizationSlugIndexRoute: AuthedOrganizationSlugIndexRoute,
  }

const AuthedOrganizationSlugRouteRouteWithChildren =
  AuthedOrganizationSlugRouteRoute._addFileChildren(
    AuthedOrganizationSlugRouteRouteChildren,
  )

interface AuthedRouteRouteChildren {
  AuthedOrganizationSlugRouteRoute: typeof AuthedOrganizationSlugRouteRouteWithChildren
  AuthedOrganizationRoute: typeof AuthedOrganizationRoute
  AuthedOnboardingIndexRoute: typeof AuthedOnboardingIndexRoute
}

const AuthedRouteRouteChildren: AuthedRouteRouteChildren = {
  AuthedOrganizationSlugRouteRoute:
    AuthedOrganizationSlugRouteRouteWithChildren,
  AuthedOrganizationRoute: AuthedOrganizationRoute,
  AuthedOnboardingIndexRoute: AuthedOnboardingIndexRoute,
}

const AuthedRouteRouteWithChildren = AuthedRouteRoute._addFileChildren(
  AuthedRouteRouteChildren,
)

interface MarketingBlogRouteRouteChildren {
  MarketingBlogSplatRoute: typeof MarketingBlogSplatRoute
  MarketingBlogIndexRoute: typeof MarketingBlogIndexRoute
}

const MarketingBlogRouteRouteChildren: MarketingBlogRouteRouteChildren = {
  MarketingBlogSplatRoute: MarketingBlogSplatRoute,
  MarketingBlogIndexRoute: MarketingBlogIndexRoute,
}

const MarketingBlogRouteRouteWithChildren =
  MarketingBlogRouteRoute._addFileChildren(MarketingBlogRouteRouteChildren)

interface MarketingRouteRouteChildren {
  MarketingBlogRouteRoute: typeof MarketingBlogRouteRouteWithChildren
  MarketingIndexRoute: typeof MarketingIndexRoute
}

const MarketingRouteRouteChildren: MarketingRouteRouteChildren = {
  MarketingBlogRouteRoute: MarketingBlogRouteRouteWithChildren,
  MarketingIndexRoute: MarketingIndexRoute,
}

const MarketingRouteRouteWithChildren = MarketingRouteRoute._addFileChildren(
  MarketingRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthedRouteRoute: AuthedRouteRouteWithChildren,
  MarketingRouteRoute: MarketingRouteRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiSplatServerRoute: ApiSplatServerRoute,
  MarketingBlogRssDotxmlServerRoute: MarketingBlogRssDotxmlServerRoute,
  ApiRpcSplatServerRoute: ApiRpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
