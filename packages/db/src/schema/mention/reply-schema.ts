import { relations } from "drizzle-orm";
import { boolean, index, text, timestamp, uuid } from "drizzle-orm/pg-core";
import { timestamps, uuidv7 } from "../_helper";
import { pgMentionTable } from "../_table";
import { smMention } from "./mention-schema";
import { smProject } from "./project-schema";
import { smPrompt } from "./prompt-schema";

export const smReply = pgMentionTable(
  "reply",
  {
    id: uuid("sm_reply_id").primaryKey().$defaultFn(uuidv7),
    projectId: uuid()
      .notNull()
      .references(() => smProject.id, {
        onDelete: "cascade",
        onUpdate: "cascade",
      }),
    mentionId: uuid()
      .notNull()
      .references(() => smMention.id, {
        onDelete: "cascade",
        onUpdate: "cascade",
      }),

    // Generation snapshot
    model: text(),
    promptOverrideId: uuid().references(() => smPrompt.id, {
      onDelete: "set null",
      onUpdate: "cascade",
    }),
    replyText: text(),
    isAutoGenerated: boolean().notNull().default(false),

    // Lifecycle
    status: text({
      enum: [
        "draft",
        "approved",
        "publishing",
        "published",
        "failed",
        "discarded",
      ],
    })
      .notNull()
      .default("draft"),
    error: text(),
    // Publish info
    providerPublishedId: text(),
    providerUrl: text(),
    publishedAt: timestamp({
      withTimezone: true,
      mode: "date",
    }),
    ...timestamps,
  },
  (table) => [
    index("sm_reply_project_idx").on(table.projectId),
    index("sm_reply_mention_idx").on(table.mentionId),
    index("sm_reply_status_idx").on(table.status),
    index("sm_reply_created_at_idx").on(table.createdAt),
  ],
);

export const smReplyRelations = relations(smReply, ({ one }) => ({
  project: one(smProject, {
    fields: [smReply.projectId],
    references: [smProject.id],
  }),
  mention: one(smMention, {
    fields: [smReply.mentionId],
    references: [smMention.id],
  }),
}));
