// Curated list of allowed locales (language_Region) from https://help.sap.com/docs/SAP_BUSINESSOBJECTS_BUSINESS_INTELLIGENCE_PLATFORM/09382741061c40a989fae01e61d54202/46758c5e6e041014910aba7db0e91070.html. Non exhaustive but should be enough for most cases.
const ALLOWED_LOCALES = [
  "af_za",
  "sq_al",
  "ar_dz",
  "ar_bh",
  "ar_eg",
  "ar_iq",
  "ar_jo",
  "ar_kw",
  "ar_lb",
  "ar_ly",
  "ar_ma",
  "ar_om",
  "ar_qa",
  "ar_sa",
  "ar_sy",
  "ar_tn",
  "ar_ae",
  "ar_ye",
  "hy_am",
  "az_az",
  "eu_es",
  "be_by",
  "bn_in",
  "bs_ba",
  "bg_bg",
  "ca_es",
  "zh_cn",
  "zh_hk",
  "zh_mo",
  "zh_sg",
  "zh_tw",
  "hr_hr",
  "cs_cz",
  "da_dk",
  "nl_be",
  "nl_nl",
  "en_au",
  "en_bz",
  "en_ca",
  "en_ie",
  "en_jm",
  "en_nz",
  "en_ph",
  "en_za",
  "en_tt",
  "en_vi",
  "en_gb",
  "en_us",
  "en_zw",
  "et_ee",
  "fo_fo",
  "fi_fi",
  "fr_be",
  "fr_ca",
  "fr_fr",
  "fr_lu",
  "fr_mc",
  "fr_ch",
  "gl_es",
  "ka_ge",
  "de_at",
  "de_de",
  "de_li",
  "de_lu",
  "de_ch",
  "el_gr",
  "gu_in",
  "he_il",
  "hi_in",
  "hu_hu",
  "is_is",
  "id_id",
  "it_it",
  "it_ch",
  "ja_jp",
  "kn_in",
  "kk_kz",
  "kok_in",
  "ko_kr",
  "lv_lv",
  "lt_lt",
  "mk_mk",
  "ms_bn",
  "ms_my",
  "ml_in",
  "mt_mt",
  "mr_in",
  "mn_mn",
  "se_no",
  "nb_no",
  "nn_no",
  "fa_ir",
  "pl_pl",
  "pt_br",
  "pt_pt",
  "pa_in",
  "ro_ro",
  "ru_ru",
  "sr_ba",
  "sr_cs",
  "sk_sk",
  "sl_si",
  "es_ar",
  "es_bo",
  "es_cl",
  "es_co",
  "es_cr",
  "es_do",
  "es_ec",
  "es_sv",
  "es_gt",
  "es_hn",
  "es_mx",
  "es_ni",
  "es_pa",
  "es_py",
  "es_pe",
  "es_pr",
  "es_es",
  "es_uy",
  "es_ve",
  "sw_ke",
  "sv_fi",
  "sv_se",
  "syr_sy",
  "ta_in",
  "te_in",
  "th_th",
  "tn_za",
  "tr_tr",
  "uk_ua",
  "uz_uz",
  "vi_vn",
  "cy_gb",
  "xh_za",
  "zu_za",
  "af-za",
  "sq-al",
  "ar-dz",
  "ar-bh",
  "ar-eg",
  "ar-iq",
  "ar-jo",
  "ar-kw",
  "ar-lb",
  "ar-ly",
  "ar-ma",
  "ar-om",
  "ar-qa",
  "ar-sa",
  "ar-sy",
  "ar-tn",
  "ar-ae",
  "ar-ye",
  "hy-am",
  "az-az",
  "eu-es",
  "be-by",
  "bn-in",
  "bs-ba",
  "bg-bg",
  "ca-es",
  "zh-cn",
  "zh-hk",
  "zh-mo",
  "zh-sg",
  "zh-tw",
  "hr-hr",
  "cs-cz",
  "da-dk",
  "nl-be",
  "nl-nl",
  "en-au",
  "en-bz",
  "en-ca",
  "en-ie",
  "en-jm",
  "en-nz",
  "en-ph",
  "en-za",
  "en-tt",
  "en-vi",
  "en-gb",
  "en-us",
  "en-zw",
  "et-ee",
  "fo-fo",
  "fi-fi",
  "fr-be",
  "fr-ca",
  "fr-fr",
  "fr-lu",
  "fr-mc",
  "fr-ch",
  "gl-es",
  "ka-ge",
  "de-at",
  "de-de",
  "de-li",
  "de-lu",
  "de-ch",
  "el-gr",
  "gu-in",
  "he-il",
  "hi-in",
  "hu-hu",
  "is-is",
  "id-id",
  "it-it",
  "it-ch",
  "ja-jp",
  "kn-in",
  "kk-kz",
  "kok-in",
  "ko-kr",
  "lv-lv",
  "lt-lt",
  "mk-mk",
  "ms-bn",
  "ms-my",
  "ml-in",
  "mt-mt",
  "mr-in",
  "mn-mn",
  "se-no",
  "nb-no",
  "nn-no",
  "fa-ir",
  "pl-pl",
  "pt-br",
  "pt-pt",
  "pa-in",
  "ro-ro",
  "ru-ru",
  "sr-ba",
  "sr-cs",
  "sk-sk",
  "sl-si",
  "es-ar",
  "es-bo",
  "es-cl",
  "es-co",
  "es-cr",
  "es-do",
  "es-ec",
  "es-sv",
  "es-gt",
  "es-hn",
  "es-mx",
  "es-ni",
  "es-pa",
  "es-py",
  "es-pe",
  "es-pr",
  "es-es",
  "es-uy",
  "es-ve",
  "sw-ke",
  "sv-fi",
  "sv-se",
  "syr-sy",
  "ta-in",
  "te-in",
  "th-th",
  "tn-za",
  "tr-tr",
  "uk-ua",
  "uz-uz",
  "vi-vn",
  "cy-gb",
  "xh-za",
  "zu-za",
  "af",
  "sq",
  "ar",
  "hy",
  "az",
  "eu",
  "be",
  "bn",
  "bs",
  "bg",
  "ca",
  "zh",
  "hr",
  "cs",
  "da",
  "nl",
  "en",
  "et",
  "fo",
  "fi",
  "fr",
  "gl",
  "ka",
  "de",
  "el",
  "gu",
  "he",
  "hi",
  "hu",
  "is",
  "id",
  "it",
  "ja",
  "kn",
  "kk",
  "ko",
  "lv",
  "lt",
  "mk",
  "ms",
  "ml",
  "mt",
  "mr",
  "mn",
  "se",
  "nb",
  "nn",
  "fa",
  "pl",
  "pt",
  "pa",
  "ro",
  "ru",
  "sr",
  "sk",
  "sl",
  "es",
  "sw",
  "sv",
  "sy",
  "ta",
  "te",
  "th",
  "tn",
  "tr",
  "uk",
  "uz",
  "vi",
  "cy",
  "xh",
  "zu",
] as const;
const ALLOWED_NORMALIZED = new Set<string>(ALLOWED_LOCALES);
export type Locales = (typeof ALLOWED_LOCALES)[number];

export function extractUrlLocale(url: string) {
  try {
    const parsed = new URL(url);
    const hostLabels = parsed.hostname.split(".");
    const firstLabel = hostLabels[0] ?? null;
    const firstPathSegment =
      parsed.pathname.split("/").filter((item) => item !== "")[0] ?? null;

    const candidates = [firstLabel, firstPathSegment].filter(
      (item): item is string => !!item,
    );
    for (const candidate of candidates) {
      const lower = candidate.toLowerCase();
      if (ALLOWED_NORMALIZED.has(lower)) {
        // Return a normalized hyphenated form, e.g., en-us
        return lower;
      }
    }
  } catch {
    // noop since url is invalid,we simply return null
  }
  return null;
}
