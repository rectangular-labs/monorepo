// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: 'https://api.dataforseo.com' | 'https://sandbox.dataforseo.com' | (string & {});
};

export type BaseResponseTaskInfo = {
    /**
     * task identifier
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * status code of the task
     * generated by DataForSEO, can be within the following range: 10000-60000
     * you can find the full list of the response codes here
     */
    status_code?: number | null;
    /**
     * informational message of the task
     * you can find the full list of general informational messages here
     */
    status_message?: string | null;
    /**
     * execution time, seconds
     */
    time?: string | null;
    /**
     * total tasks cost, USD
     */
    cost?: number | null;
    /**
     * number of elements in the result array
     */
    result_count?: number | null;
    /**
     * URL path
     */
    path?: Array<string | null> | null;
    /**
     * contains the same parameters that you specified in the POST request
     */
    data?: {
        [key: string]: {
            [key: string]: unknown;
        } | null;
    } | null;
};

export type BaseResponseInfo = {
    /**
     * the current version of the API
     */
    version?: string | null;
    /**
     * general status code
     * you can find the full list of the response codes here
     */
    status_code?: number | null;
    /**
     * general informational message
     * you can find the full list of general informational messages here
     */
    status_message?: string | null;
    /**
     * total execution time, seconds
     */
    time?: string | null;
    /**
     * total tasks cost, USD
     */
    cost?: number | null;
    /**
     * the number of tasks in the tasks array
     */
    tasks_count?: number | null;
    /**
     * the number of tasks in the tasks array returned with an error
     */
    tasks_error?: number | null;
};

export type SpellInfo = {
    /**
     * keyword obtained as a result of search engine autocorrection
     * the results will be provided for the corrected keyword
     */
    keyword?: string | null;
    /**
     * type of autocorrection
     * possible values:
     * did_you_mean, showing_results_for, no_results_found_for, including_results_for
     * note: Yahoo and Yandex support only the following autocorrection type:
     * including_results_for
     */
    type?: string | null;
};

export type MonthlySearchesInfo = {
    /**
     * year
     */
    year?: number | null;
    /**
     * month
     */
    month?: number | null;
    /**
     * monthly average search volume rate
     */
    search_volume?: number | null;
};

export type SearchIntentInfo = {
    /**
     * search engine type
     * possible values: google
     */
    se_type?: string | null;
    /**
     * main search intent
     * possible values: informational, navigational, commercial, transactional
     */
    main_intent?: string | null;
    /**
     * supplementary search intents
     * possible values: informational, navigational, commercial, transactional
     */
    foreign_intent?: Array<string | null> | null;
    /**
     * date and time when the dataset was updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    last_updated_time?: string | null;
};

export type AvgBacklinksInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * average number of backlinks
     */
    backlinks?: number | null;
    /**
     * average number of dofollow links
     */
    dofollow?: number | null;
    /**
     * average number of referring pages
     */
    referring_pages?: number | null;
    /**
     * average number of referring domains
     */
    referring_domains?: number | null;
    /**
     * average number of referring main domains
     */
    referring_main_domains?: number | null;
    /**
     * average rank
     * learn more about the metric and its calculation formula in this help center article
     */
    rank?: number | null;
    /**
     * average main domain rank
     * learn more about the metric and its calculation formula in this help center article
     */
    main_domain_rank?: number | null;
    /**
     * date and time when the dataset was updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    last_updated_time?: string | null;
};

export type SerpInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP
     * possible item types:
     * answer_box, app, carousel, multi_carousel, featured_snippet, google_flights, google_reviews, third_party_reviews, google_posts, images, jobs, knowledge_graph, local_pack, hotels_pack, map, organic, paid, people_also_ask, related_searches, people_also_search, shopping, top_stories, twitter, video, events, mention_carousel, recipes, top_sights, scholarly_articles, popular_products, podcasts, questions_and_answers, find_results_on, stocks_box, visual_stories, commercial_units, local_services, google_hotels, math_solver, currency_box, product_considerations, found_on_web, short_videos, refine_products, explore_brands, perspectives, discussions_and_forums, compare_sites, courses, ai_overview;
     * note that the actual results will be returned only for organic, paid, featured_snippet, and local_pack elements
     */
    serp_item_types?: Array<string | null> | null;
    /**
     * number of search results for the returned keyword
     */
    se_results_count?: number | null;
    /**
     * date and time when search intent data was last updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    last_updated_time?: string | null;
    /**
     * previous to the most recent date and time when SERP data was updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-10-15 12:57:46 +00:00
     */
    previous_updated_time?: string | null;
};

export type KeywordProperties = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * main keyword in a group
     * contains the main keyword in a group determined by the synonym clustering algorithm
     * if the value is null, our database does not contain any keywords the corresponding algorithm could identify as synonymous with keyword
     */
    core_keyword?: string | null;
    /**
     * the algorithm used to identify synonyms
     * possible values:
     * keyword_metrics – indicates the algorithm based on keyword_info parameters
     * text_processing – indicates the text-based algorithm
     * if the value is null, our database does not contain any keywords the corresponding algorithm could identify as synonymous with keyword
     */
    synonym_clustering_algorithm?: string | null;
    /**
     * difficulty of ranking in the first top-10 organic results for a keyword
     * indicates the chance of getting in top-10 organic results for a keyword on a logarithmic scale from 0 to 100;
     * calculated by analysing, among other parameters, link profiles of the first 10 pages in SERP;
     * learn more about the metric in this help center guide
     */
    keyword_difficulty?: number | null;
    /**
     * detected language of the keyword
     * indicates the language of the keyword as identified by our system
     */
    detected_language?: string | null;
    /**
     * detected language of the keyword is different from the set language
     * if true, the language set in the request does not match the language determined by our system for a given keyword
     */
    is_another_language?: boolean | null;
};

export type ClickstreamKeywordInfo = {
    /**
     * current search volume rate of a keyword
     */
    search_volume?: number | null;
    /**
     * date and time when backlink data was updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    last_updated_time?: string | null;
    /**
     * distribution of estimated clickstream-based metrics by gender
     * learn more about how the metric is calculated in this help center article
     */
    gender_distribution?: {
        [key: string]: number | null;
    } | null;
    /**
     * distribution of clickstream-based metrics by age
     * learn more about how the metric is calculated in this help center article
     */
    age_distribution?: {
        [key: string]: number | null;
    } | null;
    /**
     * monthly searches
     * represents the (approximate) number of searches on this keyword idea (as available for the past twelve months), targeted to the specified geographic locations
     */
    monthly_searches?: Array<MonthlySearchesInfo | null> | null;
};

export type KeywordInfoNormalizedWithInfo = {
    /**
     * date and time when the dataset was updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    last_updated_time?: string | null;
    /**
     * current search volume rate of a keyword
     */
    search_volume?: number | null;
    /**
     * keyword info is normalized
     * if true, values are normalized with Bing data
     */
    is_normalized?: boolean | null;
    /**
     * monthly search volume rates
     * array of objects with search volume rates in a certain month of a year
     */
    monthly_searches?: Array<MonthlySearchesInfo | null> | null;
};

export type SearchVolumeTrend = {
    /**
     * search volume change in percent compared to the previous month
     */
    monthly?: number | null;
    /**
     * search volume change in percent compared to the previous quarter
     */
    quarterly?: number | null;
    /**
     * search volume change in percent compared to the previous year
     */
    yearly?: number | null;
};

export type KeywordInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * date and time when keyword data was updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    last_updated_time?: string | null;
    /**
     * competition
     * represents the relative amount of competition associated with the given keyword. This value is based on Google Ads data and can be between 0 and 1 (inclusive)
     */
    competition?: number | null;
    /**
     * competition level
     * represents the relative level of competition associated with the given keyword in paid SERP only;
     * possible values: LOW, MEDIUM, HIGH
     * if competition level is unknown, the value is null;
     * learn more about the metric in this help center article
     */
    competition_level?: string | null;
    /**
     * cost-per-click
     * represents the average cost per click (USD) historically paid for the keyword
     */
    cpc?: number | null;
    /**
     * average monthly search volume rate
     * represents the (approximate) number of searches for the given keyword idea on google.com
     */
    search_volume?: number | null;
    /**
     * minimum bid for the ad to be displayed at the top of the first page
     * indicates the value greater than about 20% of the lowest bids for which ads were displayed (based on Google Ads statistics for advertisers)
     * the value may differ depending on the location specified in a POST request
     */
    low_top_of_page_bid?: number | null;
    /**
     * maximum bid for the ad to be displayed at the top of the first page
     * indicates the value greater than about 80% of the lowest bids for which ads were displayed (based on Google Ads statistics for advertisers)
     * the value may differ depending on the location specified in a POST request
     */
    high_top_of_page_bid?: number | null;
    /**
     * product and service categories
     * you can download the full list of possible categories
     */
    categories?: Array<number> | null;
    /**
     * monthly searches
     * represents the (approximate) number of searches on this keyword idea (as available for the past twelve months), targeted to the specified geographic locations
     */
    monthly_searches?: Array<MonthlySearchesInfo | null> | null;
    /**
     * search volume trend changes
     * represents search volume change in percent compared to the previous period
     */
    search_volume_trend?: SearchVolumeTrend | null;
};

export type KeywordDataInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * returned keyword idea
     */
    keyword?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * keyword data for the returned keyword idea
     */
    keyword_info?: KeywordInfo | null;
    /**
     * contains keyword search volume normalized with Bing search volume
     */
    keyword_info_normalized_with_bing?: KeywordInfoNormalizedWithInfo | null;
    /**
     * contains keyword search volume normalized with clickstream data
     */
    keyword_info_normalized_with_clickstream?: KeywordInfoNormalizedWithInfo | null;
    /**
     * clickstream data for the returned keyword
     * to retrieve results for this field, the parameter include_clickstream_data must be set to true
     */
    clickstream_keyword_info?: ClickstreamKeywordInfo | null;
    /**
     * additional information about the keyword
     */
    keyword_properties?: KeywordProperties | null;
    /**
     * SERP data
     * the value will be null if you didn’t set the field include_serp_info to true in the POST array or if there is no SERP data for this keyword in our database
     */
    serp_info?: SerpInfo | null;
    /**
     * backlink data for the returned keyword
     * this object provides the average number of backlinks, referring pages and domains, as well as the average rank values among the top-10 webpages ranking organically for the keyword
     */
    avg_backlinks_info?: AvgBacklinksInfo | null;
    /**
     * search intent info for the returned keyword
     * learn about search intent in this help center article
     */
    search_intent_info?: SearchIntentInfo | null;
};

export type DataforseoLabsMetricsInfo = {
    /**
     * number of organic SERPs where the domain or subdomain ranks #1
     */
    pos_1?: number | null;
    /**
     * number of organic SERPs where the domain or subdomain ranks #2-3
     */
    pos_2_3?: number | null;
    /**
     * number of organic SERPs where the domain or subdomain ranks #4-10
     */
    pos_4_10?: number | null;
    /**
     * number of organic SERPs where the domain or subdomain ranks #11-20
     */
    pos_11_20?: number | null;
    /**
     * number of organic SERPs where the domain or subdomain ranks #21-30
     */
    pos_21_30?: number | null;
    /**
     * number of organic SERPs where the domain or subdomain ranks #31-40
     */
    pos_31_40?: number | null;
    /**
     * number of organic SERPs where the domain or subdomain ranks #41-50
     */
    pos_41_50?: number | null;
    /**
     * number of organic SERPs where the domain or subdomain ranks #51-60
     */
    pos_51_60?: number | null;
    /**
     * number of organic SERPs where the domain or subdomain ranks #61-70
     */
    pos_61_70?: number | null;
    /**
     * number of organic SERPs where the domain or subdomain ranks #71-80
     */
    pos_71_80?: number | null;
    /**
     * number of organic SERPs where the domain or subdomain ranks #81-90
     */
    pos_81_90?: number | null;
    /**
     * number of organic SERPs where the domain or subdomain ranks #91-100
     */
    pos_91_100?: number | null;
    /**
     * estimated traffic volume
     * estimated organic monthly traffic to the domain or subdomain
     * calculated as the product of CTR (click-through-rate) and search volume values of all keywords in the category that the domain or subdomain ranks for
     * learn more about how the metric is calculated in this help center article
     */
    etv?: number | null;
    /**
     * total count of organic SERPs that contain the domain or subdomain
     */
    count?: number | null;
    /**
     * estimated cost of converting organic search traffic into paid
     * represents the estimated monthly cost (USD) of running ads for all keywords in the category that the domain or subdomain ranks for
     * the metric is calculated as the product of organic etv and paid cpc values and indicates the cost of driving the estimated volume of monthly organic traffic through PPC advertising in Google Search
     * learn more about how the metric is calculated in this help center article
     */
    estimated_paid_traffic_cost?: number | null;
    /**
     * number of new ranked elements
     * indicates how many new ranked elements were found for the indicated target
     */
    is_new?: number | null;
    /**
     * rank went up
     * indicates how many ranked elements of the indicated target went up
     */
    is_up?: number | null;
    /**
     * rank went down
     * indicates how many ranked elements of the indicated target went down
     */
    is_down?: number | null;
    /**
     * lost ranked elements
     * indicates how many ranked elements of the indicated target were previously presented in SERPs, but weren’t found during the last check
     */
    is_lost?: number | null;
    /**
     * estimated traffic volume based on clickstream data
     * calculated as the product of click-through-rate and clickstream search volume values of all keywords the domain ranks for
     * to retrieve results for this field, the parameter include_clickstream_data must be set to true
     * learn more about how the metric is calculated in this help center article
     */
    clickstream_etv?: number | null;
    /**
     * distribution of estimated clickstream-based metrics by gender
     * to retrieve results for this field, the parameter include_clickstream_data must be set to true
     * learn more about how the metric is calculated in this help center article
     */
    clickstream_gender_distribution?: {
        [key: string]: number | null;
    } | null;
    /**
     * distribution of clickstream-based metrics by age
     * to retrieve results for this field, the parameter include_clickstream_data must be set to true
     * learn more about how the metric is calculated in this help center article
     */
    clickstream_age_distribution?: {
        [key: string]: number | null;
    } | null;
};

export type BaseDataforseoLabsApiElementItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * the alignment of the element in SERP
     * can take the following values:
     * left, right
     */
    position?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
};

export type RankedSerpElement = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * contains data on the SERP element
     * the list of supported SERP elements can be found below
     */
    serp_item?: BaseDataforseoLabsApiElementItem | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP
     * all possible item types can be found here, they include:
     * answer_box, app, carousel, multi_carousel, featured_snippet, google_flights, google_reviews, images, jobs, knowledge_graph, local_pack, map, organic, paid, people_also_ask, related_searches, people_also_search, shopping, top_stories, twitter, video, events, mention_carousel, recipes, top_sights, scholarly_articles, popular_products, podcasts, questions_and_answers, find_results_on, stocks_box;
     * note that the actual results will be returned only for organic, paid, featured_snippet, local_pack, and ai_overview_reference elements
     */
    serp_item_types?: Array<string | null> | null;
    /**
     * number of search results for the returned keyword
     */
    se_results_count?: number | null;
    /**
     * difficulty of ranking in the first top-10 organic results for a keyword
     * indicates the chance of getting in top-10 organic results for a keyword on a logarithmic scale from 0 to 100;
     * calculated by analysing, among other parameters, link profiles of the first 10 pages in SERP;
     * learn more about the metric in this help center guide
     */
    keyword_difficulty?: number | null;
    /**
     * lost ranked elements
     * indicates how many ranked elements of this target were previously presented in SERPs, but weren’t found during the last check
     */
    is_lost?: boolean | null;
    /**
     * date and time when SERP data was updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    last_updated_time?: string | null;
    /**
     * previous to the most recent date and time when SERP data was updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-10-15 12:57:46 +00:00
     */
    previous_updated_time?: string | null;
};

export type DataforseoLabsRankedKeywordsLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * keyword data for the returned keyword
     */
    keyword_data?: KeywordDataInfo | null;
    /**
     * contains data on the domain’s SERP element found for the returned keyword
     */
    ranked_serp_element?: RankedSerpElement | null;
};

export type DataforseoLabsGoogleRankedKeywordsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleRankedKeywordsLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleRankedKeywordsLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * target domain or webpage in a POST array
     */
    target?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * total number of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * ranking data relevant to the specified domain or webpage
     * ranking data is provided by the rank_group parameters that show the result’s rank considering only equivalent SERP elements
     */
    metrics?: {
        [key: string]: DataforseoLabsMetricsInfo;
    } | null;
    /**
     * ranking data relevant to the specified domain or webpage
     * ranking data is provided by the rank_absolute parameters that indicate the result’s position among all SERP elements
     */
    metrics_absolute?: {
        [key: string]: DataforseoLabsMetricsInfo;
    } | null;
    /**
     * contains ranked keywords and related data
     */
    items?: Array<DataforseoLabsRankedKeywordsLiveItem | null> | null;
};

export type DataforseoLabsGoogleRankedKeywordsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleRankedKeywordsLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleRankedKeywordsLiveRequestInfo = {
    /**
     * domain name or page url
     * required field
     * the domain name of the target website or URL of the target webpage;
     * the domain name must be specified without https:// or www.;
     * the webpage URL must be specified with https:// or www.
     * Note: if you specify the webpage URL without https:// or www., the result will be returned for the entire domain rather than the specific page
     */
    target?: string;
    /**
     * full name of the location
     * optional field
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations with their location_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available locations
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * optional field
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations with their location_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * optional field
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * optional field
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * ignore highly similar keywords
     * optional field
     * if set to true only core keywords will be returned, all highly similar keywords will be excluded;
     * default value: false
     */
    ignore_synonyms?: boolean | null;
    /**
     * display results by item type
     * optional field
     * indicates the type of search results included in the response
     * Note: if the item_types array contains item types that are different from organic, the results will be ordered by the first item type in the array; you will not be able to sort and filter results by the types of search results not included in the response;
     * possible values:
     * ["organic", "paid", "featured_snippet", "local_pack", "ai_overview_reference"]
     * default value:
     * ["organic", "paid"]
     */
    item_types?: Array<string> | null;
    /**
     * include or exclude data from clickstream-based metrics in the result
     * optional field
     * if the parameter is set to true, you will receive clickstream_keyword_info, clickstream_etv, clickstream_gender_distribution, clickstream_age_distribution, keyword_info_normalized_with_clickstream, and keyword_info_normalized_with_bing fields in the response
     * default value: false
     * with this parameter enabled, you will be charged double the price for the request
     * learn more about how clickstream-based metrics are calculated in this help center article
     */
    include_clickstream_data?: boolean | null;
    /**
     * the maximum number of returned keywords
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned keywords
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * return rankings distribution by rank_absolute
     * optional field
     * default value: false
     * if set to true, we will return the field metrics_absolute containing rankings distribution by the rank_absolute parameter that indicates the result’s position among all SERP elements
     */
    load_rank_absolute?: boolean | null;
    /**
     * data collection mode
     * optional field
     * you can use this field to filter the results;
     * possible types of filtering:
     * live — return keywords for which the specified target currently has ranking results in SERP;
     * lost — return keywords for which the specified target had previously had ranking results in SERP, but didn’t have them during the last check;
     * all — return both types of keywords.
     * default value: live
     */
    historical_serp_mode?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, match, not_match, ilike, not_ilike, like, not_like
     * you can use the % operator with like and not_like, as well as ilike and not_ilike to match any string of zero or more characters
     * example:
     * ["ranked_serp_element.serp_item.rank_group","<=",10]
     * [["ranked_serp_element.serp_item.rank_group","<=",10],
     * "and",
     * ["ranked_serp_element.serp_item.type","<>","paid"]]
     * [["keyword_data.keyword_info.search_volume","<>",0],
     * "and",
     * [["ranked_serp_element.serp_item.type","<>","paid"],"or",["ranked_serp_element.serp_item.is_malicious","=",false]]]
     * if you want to get the keywords a particular webpage ranks for, you can use a target field or filter by the ranked_serp_element.serp_item.relative_url parameter
     * example:
     * ["ranked_serp_element.serp_item.relative_url", "=", "/apis/rank-tracker-api"]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<string | string[]> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting type
     * example:
     * ["keyword_data.keyword_info.competition,desc"]
     * default rule:
     * ["ranked_serp_element.serp_item.rank_group,asc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["keyword_data.keyword_info.search_volume,desc","keyword_data.keyword_info.cpc,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsGoogleKeywordSuggestionsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleKeywordSuggestionsLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleKeywordSuggestionsLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * keyword in a POST array
     */
    seed_keyword?: string | null;
    /**
     * keyword data for the seed keyword
     * fields in this object are identical to those of the items array
     */
    seed_keyword_data?: KeywordDataInfo | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * current offset value
     */
    offset?: number | null;
    /**
     * offset token for subsequent requests
     * you can use the string provided in this field to get the subsequent results of the initial task;
     * note: offset_token values are unique for each subsequent task
     */
    offset_token?: string | null;
    /**
     * contains keywords and related data
     */
    items?: Array<KeywordDataInfo | null> | null;
};

export type DataforseoLabsGoogleKeywordSuggestionsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleKeywordSuggestionsLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleKeywordSuggestionsLiveRequestInfo = {
    /**
     * keyword
     * required field
     * UTF-8 encoding
     * the keywords will be converted to lowercase format;
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of the location
     * optional field
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations with their location_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available locations
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * optional field
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations with their location_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * optional field
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     * Note: if omitted, results default to the language with the most keyword records in the specified location;
     * refer to the available_languages.keywords field of the Locations and Languages endpoint to determine the default language
     */
    language_name?: string | null;
    /**
     * language code
     * optional field
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     * Note: if omitted, results default to the language with the most keyword records in the specified location;
     * refer to the available_languages.keywords field of the Locations and Languages endpoint to determine the default language
     */
    language_code?: string | null;
    /**
     * include data for the seed keyword
     * optional field
     * if set to true, data for the seed keyword specified in the keyword field will be provided in the seed_keyword_data array of the response
     * default value: false
     */
    include_seed_keyword?: boolean | null;
    /**
     * include data from SERP for each keyword
     * optional field
     * if set to true, we will return a serp_info array containing SERP data (number of search results, relevant URL, and SERP features) for every keyword in the response
     * default value: false
     */
    include_serp_info?: boolean | null;
    /**
     * include or exclude data from clickstream-based metrics in the result
     * optional field
     * if the parameter is set to true, you will receive clickstream_keyword_info, keyword_info_normalized_with_clickstream, and keyword_info_normalized_with_bing fields in the response
     * default value: false
     * with this parameter enabled, you will be charged double the price for the request
     * learn more about how clickstream-based metrics are calculated in this help center article
     */
    include_clickstream_data?: boolean | null;
    /**
     * search for the exact phrase
     * optional field
     * if set to true, the returned keywords will include the exact keyword phrase you specified, with potentially other words before or after that phrase
     * default value: false
     */
    exact_match?: boolean | null;
    /**
     * ignore highly similar keywords
     * optional field
     * if set to true only core keywords will be returned, all highly similar keywords will be excluded;
     * default value: false
     */
    ignore_synonyms?: boolean | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, match, not_match, ilike, not_ilike, like, not_like
     * you can use the % operator with like and not_like, as well as ilike and not_ilike to match any string of zero or more characters
     * example:
     * ["keyword_info.search_volume",">",0]
     * [["keyword_info.search_volume","in",[0,1000]],
     * "and",
     * ["keyword_info.competition_level","=","LOW"]][["keyword_info.search_volume",">",100],
     * "and",
     * [["keyword_info.cpc","<",0.5],
     * "or",
     * ["keyword_info.high_top_of_page_bid","<=",0.5]]]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * a comma is used as a separator
     * example:
     * ["keyword_info.competition,desc"]
     * default rule:
     * ["keyword_info.search_volume,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["keyword_info.search_volume,desc","keyword_info.cpc,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * the maximum number of returned keywords
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned keywords
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * offset token for subsequent requests
     * optional field
     * provided in the identical filed of the response to each request;
     * use this parameter to avoid timeouts while trying to obtain over 10,000 results in a single request;
     * by specifying the unique offset_token value from the response array, you will get the subsequent results of the initial task;
     * offset_token values are unique for each subsequent task
     * Note: if the offset_token is specified in the request, all other parameters except limit will not be taken into account when processing a task.
     */
    offset_token?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsStatusResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsStatusTaskInfo | null> | null;
};

export type DataforseoLabsStatusInfo = {
    /**
     * update date of the Google endpoints
     * indicates the last date when the Google endpoints of DataForSEO Labs API were updated;
     * example:
     * 2022-05-16
     */
    date_update?: string | null;
};

export type DataforseoLabsStatusResultInfo = {
    /**
     * update information for the Google endpoints
     */
    google?: DataforseoLabsStatusInfo | null;
    /**
     * update information for the Bing endpoints
     */
    bing?: DataforseoLabsStatusInfo | null;
    /**
     * update information for the Amazon endpoints
     */
    amazon?: DataforseoLabsStatusInfo | null;
};

export type DataforseoLabsStatusTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsStatusResultInfo | null> | null;
};

export type LicensesElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of the element
     */
    title?: string | null;
    /**
     * search URL with refinement parameters
     */
    url?: string | null;
    /**
     * domain in SERP
     */
    domain?: string | null;
};

export type RefinementChipsElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of the element
     */
    title?: string | null;
    /**
     * search URL with refinement parameters
     */
    url?: string | null;
    /**
     * domain in SERP
     */
    domain?: string | null;
    /**
     * further search refinement options
     */
    options?: Array<LicensesElement | null> | null;
};

export type RefinementChipsInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
    /**
     * items of the element
     */
    items?: Array<RefinementChipsElement | null> | null;
};

export type AiModeRectangleInfo = {
    /**
     * x-axis coordinate
     * x-axis coordinate of the top-left corner of the result’s snippet, where top-left corner of the screen is the origin
     */
    x?: number | null;
    /**
     * y-axis coordinate
     * y-axis coordinate of the top-left corner of the result’s snippet, where top-left corner of the screen is the origin
     */
    y?: number | null;
    /**
     * width of the element in pixels
     */
    width?: number | null;
    /**
     * height of the element in pixels
     */
    height?: number | null;
};

export type BaseSerpApiElementItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search results page number
     * indicates the number of the SERP page on which the element is located
     */
    page?: number | null;
    /**
     * the alignment of the element in SERP
     * can take the following values:
     * left, right
     */
    position?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
    /**
     * rectangle parameters
     * contains cartesian coordinates and pixel dimensions of the result’s snippet in SERP
     * equals null if calculate_rectangles in the POST request is not set to true
     */
    rectangle?: AiModeRectangleInfo | null;
};

export type SerpGoogleOrganicLiveRegularResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleOrganicLiveRegularTaskInfo | null> | null;
};

export type SerpGoogleOrganicLiveRegularResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided exact results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results found in SERP
     * contains types of all search results (items) found in the returned SERP
     * possible item types:
     * answer_box, app, carousel, multi_carousel, featured_snippet, google_flights, google_reviews, images, jobs, knowledge_graph, local_pack, map, organic, paid, people_also_ask, related_searches, people_also_search, shopping, top_stories, twitter, video, events, mention_carousel, ai_overview
     * note that this array contains all types of search results found in the returned SERP;
     * however, this endpoint provides data for featured_snippet, organic and paid types only
     * to get all items (inlcuding SERP features and rich snippets) found in the returned SERP, please refer to the Google Organiс Advanced SERP endpoint
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * total search results pages retrieved
     * total number of retrieved SERPs in the result
     */
    pages_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items in SERP
     */
    items?: Array<BaseSerpApiElementItem | null> | null;
};

export type SerpGoogleOrganicLiveRegularTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleOrganicLiveRegularResultInfo | null> | null;
};

export type SerpGoogleOrganicLiveRegularRequestInfo = {
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://www.google.co.uk/search?q=%20rank%20tracker%20api&hl=en&gl=GB&uule=w+CAIQIFISCXXeIa8LoNhHEZkq1d1aOpZS
     */
    url?: string | null;
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * if this field contains such parameters as ‘allinanchor:’, ‘allintext:’, ‘allintitle:’, ‘allinurl:’, ‘define:’, ‘filetype:’, ‘id:’, ‘inanchor:’, ‘info:’, ‘intext:’, ‘intitle:’, ‘inurl:’, ‘link:’, ‘site:’, the charge per task will be multiplied by 5
     * Note: queries containing the ‘cache:’ parameter are not supported and will return a validation error
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9 (mm)
     * the maximum value for “radius”: 199999 (mm)
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * can take the values:desktop, mobile
     * default value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * if you specify desktop in the device field, choose from the following values: windows, macos
     * default value: windows
     * if you specify mobile in the device field, choose from the following values: android, ios
     * default value: android
     */
    os?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * google.co.uk, google.com.au, google.de, etc.
     */
    se_domain?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 10
     * max value: 700
     * Your account will be billed per each SERP containing up to 10 results;
     * Setting depth above 10 may result in additional charges if the search engine returns more than 10 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * target domain, subdomain, or webpage to get results for
     * optional field
     * a domain or a subdomain should be specified without https:// and www.
     * note that the results of target-specific tasks will only include SERP elements that contain a url string;
     * you can also use a wildcard (‘*’) character to specify the search pattern in SERP and narrow down the results;
     * examples:
     * example.com  – returns results for the website’s home page with URLs, such as https://example.com, or https://www.example.com/, or https://example.com/;
     * example.com* – returns results for the domain, including all its pages;
     * *example.com* – returns results for the entire domain, including all its pages and subdomains;
     * *example.com  – returns results for the home page regardless of the subdomain, such as https://en.example.com;
     * example.com/example-page  – returns results for the exact URL;
     * example.com/example-page*  – returns results for all domain’s URLs that start with the specified string
     */
    target?: string | null;
    /**
     * display related results
     * optional field
     * if set to true, the related_result element in the response will be provided as a snippet of its parent organic result;
     * if set to false, the related_result element will be provided as a separate organic result;
     * default value: true
     */
    group_organic_results?: boolean | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * max value: 100
     * Note: you will be charged for each page crawled (10 organic results per page);
     * learn more about pricing on our Pricing page;
     * Note#2: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * additional parameters of the search query
     * optional field
     * get the list of available parameters and additional details here
     */
    search_param?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type GoogleOrganicLiveRegularData = {
    body?: Array<SerpGoogleOrganicLiveRegularRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/organic/live/regular';
};

export type GoogleOrganicLiveRegularResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleOrganicLiveRegularResponseInfo | null;
};

export type GoogleOrganicLiveRegularResponse = GoogleOrganicLiveRegularResponses[keyof GoogleOrganicLiveRegularResponses];

export type DataforseoLabsStatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/status';
};

export type DataforseoLabsStatusResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsStatusResponseInfo | null;
};

export type DataforseoLabsStatusResponse = DataforseoLabsStatusResponses[keyof DataforseoLabsStatusResponses];

export type GoogleKeywordSuggestionsLiveData = {
    body?: Array<DataforseoLabsGoogleKeywordSuggestionsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/keyword_suggestions/live';
};

export type GoogleKeywordSuggestionsLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleKeywordSuggestionsLiveResponseInfo | null;
};

export type GoogleKeywordSuggestionsLiveResponse = GoogleKeywordSuggestionsLiveResponses[keyof GoogleKeywordSuggestionsLiveResponses];

export type GoogleRankedKeywordsLiveData = {
    body?: Array<DataforseoLabsGoogleRankedKeywordsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/ranked_keywords/live';
};

export type GoogleRankedKeywordsLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleRankedKeywordsLiveResponseInfo | null;
};

export type GoogleRankedKeywordsLiveResponse = GoogleRankedKeywordsLiveResponses[keyof GoogleRankedKeywordsLiveResponses];
