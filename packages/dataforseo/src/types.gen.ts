// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: 'https://api.dataforseo.com' | 'https://sandbox.dataforseo.com' | (string & {});
};

export type BaseBingSerpApiElementItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * search results page number
     * indicates the number of the SERP page on which the element is located
     */
    page?: number | null;
    /**
     * the alignment of the element in SERP
     * can take the following values:
     * left, right
     */
    position?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
    /**
     * rectangle parameters
     * contains cartesian coordinates and pixel dimensions of the result’s snippet in SERP
     * equals null if calculate_rectangles in the POST request is not set to true
     */
    rectangle?: AiModeRectangleInfo | null;
};

export type BaseSerpApiElementItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search results page number
     * indicates the number of the SERP page on which the element is located
     */
    page?: number | null;
    /**
     * the alignment of the element in SERP
     * can take the following values:
     * left, right
     */
    position?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
    /**
     * rectangle parameters
     * contains cartesian coordinates and pixel dimensions of the result’s snippet in SERP
     * equals null if calculate_rectangles in the POST request is not set to true
     */
    rectangle?: AiModeRectangleInfo | null;
};

export type BaseSerpApiKnowledgeGraphElementItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search results page number
     * indicates the number of the SERP page on which the element is located
     */
    page?: number | null;
    /**
     * the alignment of the element in SERP
     * can take the following values:
     * left, right
     */
    position?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
    /**
     * rectangle parameters
     * contains cartesian coordinates and pixel dimensions of the result’s snippet in SERP
     * equals null if calculate_rectangles in the POST request is not set to true
     */
    rectangle?: AiModeRectangleInfo | null;
};

export type BaseSerpApiProductConsiderationExpandedElementItem = {
    /**
     * type of element
     */
    type?: string | null;
};

export type BaseSerpApiBingPeopleAlsoAskExpandedElementItem = {
    /**
     * type of element
     */
    type?: string | null;
};

export type BaseSerpApiPeopleAlsoAskExpandedElementItem = {
    /**
     * type of element
     */
    type?: string | null;
};

export type BaseSerpApiBingAiOverviewElementItem = {
    /**
     * type of element
     */
    type?: string | null;
};

export type BaseSerpApiAiOverviewElementItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * the alignment of the element in SERP
     * can take the following values:
     * left, right
     */
    position?: string | null;
};

export type BaseSerpApiGoogleMapsElementItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * domain in SERP
     */
    domain?: string | null;
    /**
     * title of the element
     */
    title?: string | null;
    /**
     * search URL with refinement parameters
     */
    url?: string | null;
    /**
     * the element’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
    /**
     * the distribution of ratings of the business entity
     * the object displays the number of 1-star to 5-star ratings, as reviewed by users
     */
    rating_distribution?: {
        [key: string]: number | null;
    } | null;
};

export type BaseSerpApiAiModeAiOverviewElementItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * the alignment of the element in SERP
     * can take the following values:
     * left, right
     */
    position?: string | null;
};

export type BaseSerpApiGoogleNewsElementItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
    /**
     * title of the element
     */
    title?: string | null;
    /**
     * rectangle parameters
     * contains cartesian coordinates and pixel dimensions of the result’s snippet in SERP
     * equals null if calculate_rectangles in the POST request is not set to true
     */
    rectangle?: AiModeRectangleInfo | null;
};

export type BaseSerpApiGoogleImagesElementItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP for the target domain
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
};

export type BaseSerpApiAdsAdvertiserElementItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
};

export type BaseSerpApiGoogleSearchByImagesElementItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    page?: number | null;
    /**
     * the alignment of the element in SERP
     * can take the following values:
     * left, right
     */
    position?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
    /**
     * title of the element
     */
    title?: string | null;
    /**
     * search URL with refinement parameters
     */
    url?: string | null;
    /**
     * rectangle parameters
     * contains cartesian coordinates and pixel dimensions of the result’s snippet in SERP
     * equals null if calculate_rectangles in the POST request is not set to true
     */
    rectangle?: AiModeRectangleInfo | null;
};

export type BaseSerpApiGoogleFinanceElementItem = {
    /**
     * type of element
     */
    type?: string | null;
};

export type BaseSerpApiGoogleFinanceTickerSearchElementItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * identifier of the element
     * full identifier of the element that consists from ticker and market_identifier
     * example: PX1:INDEXDB
     */
    identifier?: string | null;
    /**
     * name of the market index as displayed on Google Finance
     * example: CAC 40
     */
    displayed_name?: string | null;
    /**
     * URL to the page of the market index on Google Finance
     */
    url?: string | null;
    /**
     * location of the market index
     * example: Europe/Paris
     */
    location?: string | null;
    /**
     * growth trend of the market index
     * possible values: up, down, stable
     */
    trend?: string | null;
    /**
     * date and time of the value readout
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2025-02-10 09:40:00 +00:00
     */
    timestamp?: string | null;
    /**
     * percentage of change in value of the market index
     */
    percentage_delta?: number | null;
};

export type BaseDataforseoLabsApiElementItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * the alignment of the element in SERP
     * can take the following values:
     * left, right
     */
    position?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
};

export type BaseDataforseoLabsKnowledgeGraphElementItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * the alignment of the element in SERP
     * can take the following values:
     * left, right
     */
    position?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
};

export type BaseMerchantAmazonElementItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements found in Amazon SERP
     */
    rank_absolute?: number | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
};

export type BaseMerchantAmazonSellersElementItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements found in Amazon Sellers SERP
     */
    rank_absolute?: number | null;
    /**
     * alignment of the element in SERP
     * possible values:
     * left, right
     */
    position?: string | null;
    /**
     * XPath of the element
     */
    xpath?: string | null;
    /**
     * business name of the seller
     */
    seller_name?: string | null;
    /**
     * url forwarding to the seller’s page on Amazon
     */
    seller_url?: string | null;
    /**
     * sender company name
     */
    ships_from?: string | null;
    /**
     * product pricing details
     * if there are no details, the value will be null
     */
    price?: PriceInfo | null;
    /**
     * value of the percentage discount
     */
    percentage_discount?: number | null;
    /**
     * array of objects containing information about applicable vouchers
     */
    applicable_vouchers?: Array<AmazonApplicableVouchersItem | null> | null;
    /**
     * seller rating details
     * seller popularity rate based on customer reviews
     */
    rating?: RatingElement | null;
    /**
     * product condition
     * condition of the product offered by the seller
     */
    condition?: string | null;
    /**
     * product condition details
     * expanded details on the condition of the product offered by the seller
     */
    condition_description?: string | null;
    /**
     * delivery information
     * delivery information including free and fast delivery date ranges
     */
    delivery_info?: AmazonDeliveryInfo | null;
};

export type BaseMerchantAmazonProductInformationElementItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * name of the section related to product information specified in the contents
     */
    section_name?: string | null;
};

export type BaseMerchantAmazonProductInformationRowElementItem = {
    /**
     * type of element
     */
    type?: string | null;
};

export type BaseMerchantGoogleShoppingSellersElementItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements found in Google Shopping SERP
     */
    rank_absolute?: number | null;
    /**
     * the alignment of the element in Google Shopping SERP
     * possible values:
     * left, right
     */
    position?: string | null;
    /**
     * XPath of the element
     */
    xpath?: string | null;
    /**
     * domain in SERP
     */
    domain?: string | null;
    /**
     * product title
     */
    title?: string | null;
    /**
     * Google Shopping URL forwarding to the product page on the seller’s website
     * if you want to obtain a URL of the advertisement forwarding to the product page on the seller’s website, please refer to the Google Shopping Sellers Ad URL endpoint
     */
    url?: string | null;
    /**
     * details and special offers
     * if there are no details, the value will be null
     */
    details?: string | null;
    /**
     * product price without tax and shipping
     */
    base_price?: number | null;
    /**
     * the amount of tax
     * tax is specified as the actual amount of money, not as the percentage
     */
    tax?: number | null;
    /**
     * product shipping price
     */
    shipping_price?: number | null;
    /**
     * product price including tax and shipping
     */
    total_price?: number | null;
    /**
     * currency in the ISO format
     * example:
     * USD
     */
    currency?: string | null;
    /**
     * name of the seller
     * the name of the company that placed a corresponding product on Google Shopping
     */
    seller_name?: string | null;
    /**
     * shop rating
     * the shop popularity rate based on product reviews
     */
    rating?: RatingElement | null;
    /**
     * unique ad click referral parameter
     * using this parameter you can get a URL of the advertisement in Google Shopping Sellers Ad URL
     */
    shop_ad_aclk?: string | null;
};

export type BaseMerchantGoogleShoppingProductsElementItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements found in Google Shopping SERP
     */
    rank_absolute?: number | null;
    /**
     * alignment of the element in SERP
     * can take the following values:
     * left, right
     */
    position?: string | null;
    /**
     * XPath of the element
     */
    xpath?: string | null;
};

export type BaseOnPageResourceItem = {
    /**
     * type of element
     */
    resource_type?: string | null;
    /**
     * status code of the page
     */
    status_code?: number | null;
    /**
     * location header
     * indicates the URL to redirect a page to
     */
    location?: string | null;
    /**
     * page URL
     */
    url?: string | null;
    /**
     * resource errors and warnings
     */
    resource_errors?: OnPageResourceIssueInfo | null;
    /**
     * resource size
     * indicates the size of a given page measured in bytes
     */
    size?: number | null;
    /**
     * page size after encoding
     * indicates the size of the encoded page measured in bytes
     */
    encoded_size?: number | null;
    /**
     * compressed page size
     * indicates the compressed size of a given page
     */
    total_transfer_size?: number | null;
    /**
     * date and time when a resource was fetched
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    fetch_time?: string | null;
    /**
     * instructions for caching
     */
    cache_control?: CacheControl | null;
    /**
     * website checks
     * on-page check-ups related to the page
     */
    checks?: {
        [key: string]: boolean | null;
    } | null;
    /**
     * type of encoding
     */
    content_encoding?: string | null;
    /**
     * types of media used to display a page
     */
    media_type?: string | null;
    /**
     * server version
     */
    server?: string | null;
    /**
     * contains data on changes related to the resource
     * if there is no data, the value will be null
     */
    last_modified?: LastModified | null;
};

export type BaseOnPageLinkItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * referring domain
     * the link was found on this domain
     */
    domain_from?: string | null;
    /**
     * referenced domain
     * the link is pointing to this domain
     */
    domain_to?: string | null;
    /**
     * referring page
     * relative URL of the page on which the link was found
     */
    page_from?: string | null;
    /**
     * referenced page
     * relative URL of the page to which the link is pointing
     */
    page_to?: string | null;
    /**
     * referring page
     * absolute URL of the page on which the link was found
     */
    link_from?: string | null;
    /**
     * referenced page
     * absolute URL of the page to which the link is pointing
     */
    link_to?: string | null;
    /**
     * indicates whether the link is dofollow
     * if the value is true, the link doesn’t have a rel="nofollow" attribute
     */
    dofollow?: boolean | null;
    /**
     * url scheme of the referring page
     */
    page_from_scheme?: string | null;
    /**
     * url scheme of the referenced page
     */
    page_to_scheme?: string | null;
    /**
     * direction of the link
     * possible values: internal, external
     */
    direction?: string | null;
    /**
     * link is broken
     * indicates whether a link is directing to a broken page or resource
     */
    is_broken?: boolean | null;
    /**
     * indicates that the link may have a conflict with another link
     * if true, at least one link pointing to link_to has a rel="nofollow" attribute and at least one is dofollow
     */
    is_link_relation_conflict?: boolean | null;
    /**
     * status code of the referenced page
     * status code of the page to which the link is pointing
     */
    page_to_status_code?: number | null;
};

export type BaseKeywordDataDataforseoTrendsItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * the alignment of the element
     * can take the following values: 1, 2, 3, 4, etc.
     */
    position?: number | null;
    /**
     * relevant keywords
     * the data included in the dataforseo_trends_graph element is based on the keywords listed in this array
     */
    keywords?: Array<string | null> | null;
};

export type BaseKeywordDataGoogleTrendsItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * the alignment of the element in Google Trends
     * can take the following values: 1, 2, 3, 4, etc.
     */
    position?: number | null;
    /**
     * title of the element in Google Trends
     */
    title?: string | null;
    /**
     * relevant keywords
     * the data included in the google_trends_graph element is based on the keywords listed in this array
     */
    keywords?: Array<string | null> | null;
};

export type LlmMessageChainItem = {
    /**
     * role of the user from whom the message originates
     */
    role?: string | null;
    /**
     * message text
     */
    message?: string | null;
};

export type DemographyComparisonInfo = {
    /**
     * type of element
     */
    age?: {
        [key: string]: Array<number | null> | null;
    } | null;
    /**
     * type of element
     */
    gender?: {
        [key: string]: Array<number | null> | null;
    } | null;
};

export type ResourceMetaInfo = {
    /**
     * content of the image alt attribute
     */
    alternative_text?: string | null;
    /**
     * title
     */
    title?: string | null;
    /**
     * original image width in px
     */
    original_width?: number | null;
    /**
     * original image height in px
     */
    original_height?: number | null;
    /**
     * image width in px
     */
    width?: number | null;
    /**
     * image height in px
     */
    height?: number | null;
};

export type VideoElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * URL to the video source
     */
    source?: string | null;
    /**
     * URL to the video preview image
     */
    preview?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * date and time when the result was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
    /**
     * URL
     */
    url?: string | null;
};

export type RatingElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * the alignment of the element in Google Shopping SERP
     * possible values:
     * left, right
     */
    position?: string | null;
    /**
     * the type of rating
     * here you can find the following elements: Max5, Percents, CustomMax
     */
    rating_type?: string | null;
    /**
     * value of the rating
     */
    value?: number | null;
    /**
     * the amount of feedback
     */
    votes_count?: number | null;
    /**
     * the maximum value for a rating_type
     */
    rating_max?: number | null;
};

export type RefinementChipsInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
    /**
     * items of the element
     */
    items?: Array<RefinementChipsElement | null> | null;
};

export type RefinementChipsElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of the element
     */
    title?: string | null;
    /**
     * search URL with refinement parameters
     */
    url?: string | null;
    /**
     * domain in SERP
     */
    domain?: string | null;
    /**
     * further search refinement options
     */
    options?: Array<LicensesElement | null> | null;
};

export type LicensesElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of the element
     */
    title?: string | null;
    /**
     * search URL with refinement parameters
     */
    url?: string | null;
    /**
     * domain in SERP
     */
    domain?: string | null;
};

export type ReviewResponseItemInfo = {
    /**
     * the title of response
     */
    title?: string | null;
    /**
     * the content of response
     */
    text?: string | null;
    /**
     * the time of publication
     */
    timestamp?: string | null;
};

export type WorkDayInfo = {
    /**
     * opening time
     */
    open?: TimeInfo | null;
    /**
     * closing time
     */
    close?: TimeInfo | null;
};

export type TimeInfo = {
    /**
     * hours in the 24-hour format
     */
    hour?: number | null;
    /**
     * minutes
     */
    minute?: number | null;
};

export type PopularWorkTimeInfo = {
    /**
     * hours in the 24-hour format
     */
    time?: TimeInfo | null;
    /**
     * popularity index
     * relative time-bound popularity index measured from 0 to 100;
     * higher value corresponds to a busier time of a day
     */
    popular_index?: number | null;
};

export type AboutThisResultElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * result’s URL
     */
    url?: string | null;
    /**
     * source of additional information about the result
     */
    source?: string | null;
    /**
     * additional information about the result
     * description of the website from Wikipedia or another additional context
     */
    source_info?: string | null;
    /**
     * URL to full information from the 'source'
     */
    source_url?: string | null;
    /**
     * the language of the result
     */
    language?: string | null;
    /**
     * location for which the result is relevant
     */
    location?: string | null;
    /**
     * matching search terms that appear in the result
     */
    search_terms?: Array<string | null> | null;
    /**
     * related search terms that appear in the result
     */
    related_terms?: Array<string | null> | null;
};

export type AiModeRectangleInfo = {
    /**
     * x-axis coordinate
     * x-axis coordinate of the top-left corner of the result’s snippet, where top-left corner of the screen is the origin
     */
    x?: number | null;
    /**
     * y-axis coordinate
     * y-axis coordinate of the top-left corner of the result’s snippet, where top-left corner of the screen is the origin
     */
    y?: number | null;
    /**
     * width of the element in pixels
     */
    width?: number | null;
    /**
     * height of the element in pixels
     */
    height?: number | null;
};

export type CrawlStatusInfo = {
    /**
     * maximum number of pages to crawl
     * indicates the max_crawl_pages limit you specified when setting a task
     */
    max_crawl_pages?: number | null;
    /**
     * number of pages that are currently in the crawling queue
     */
    pages_in_queue?: number | null;
    /**
     * number of crawled pages
     */
    pages_crawled?: number | null;
};

export type RelatedSearchesElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * product title
     */
    title?: string | null;
    /**
     * the URL of the product page
     */
    url?: string | null;
    /**
     * the alt tag of the product image featured in the results
     */
    image_alt?: string | null;
    /**
     * URL of the product image featured in the results
     */
    image_url?: string | null;
};

export type LinkElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * text alongside the link title
     */
    snippet?: string | null;
    /**
     * description of the results element
     */
    description?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * domain where a link points
     */
    domain?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
};

export type AmazonDeliveryInfo = {
    /**
     * message accompanying the delivery information as posted by the seller
     */
    delivery_message?: string | null;
    /**
     * the earliest date when the product can be shipped
     */
    delivery_date_from?: string | null;
    /**
     * the latest date when the product can be delivered
     */
    delivery_date_to?: string | null;
    /**
     * the earliest date when the product can be delivered with a fast delivery option
     */
    fastest_delivery_date_from?: string | null;
    /**
     * the latest date when the product can be delivered with a fast delivery option
     */
    fastest_delivery_date_to?: string | null;
    /**
     * price for the delivery
     * price of the delivery based on the location you specified in the POST request;
     * if free delivery is available, the value is null
     */
    delivery_price?: PriceInfo | null;
};

export type Table = {
    /**
     * name assigned to the table element
     * possible values:
     * table_element
     */
    table_element?: string | null;
    /**
     * column names
     */
    table_header?: Array<string | null> | null;
    /**
     * the content of the table
     * one line of the table in this element of the array
     */
    table_content?: Array<Array<string | null> | null> | null;
};

export type AmazonKeywordData = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * related keyword
     */
    keyword?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * keyword info for the returned keyword
     */
    keyword_info?: AmazonKeywordInfo | null;
};

export type AmazonKeywordInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * date and time when keyword data was updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:    '2019-11-15 12:57:46 +00:00'
     */
    last_updated_time?: string | null;
    /**
     * average monthly search volume rate
     * represents the (approximate) number of searches for the provided keyword idea on Amazon
     */
    search_volume?: number | null;
};

export type PriceInfo = {
    /**
     * current price
     * indicates the current price of the product or service featured in the result
     */
    current?: number | null;
    /**
     * regular price
     * indicates the regular price of the product or service with no discounts applied
     */
    regular?: number | null;
    /**
     * the maximum price
     * the maximum price of the product or service as indicated in the result
     */
    max_value?: number | null;
    /**
     * currency of the listed price
     * ISO code of the currency applied to the price
     */
    currency?: string | null;
    /**
     * price is provided as a range
     * indicates whether a price is provided in a range
     */
    is_price_range?: boolean | null;
    /**
     * price string in the result
     * raw price string as provided in the result
     */
    displayed_price?: string | null;
};

export type RatingInfo = {
    /**
     * the type of rating
     * here you can find the following elements: Max5, Percents, CustomMax
     */
    rating_type?: string | null;
    /**
     * the value of the rating
     */
    value?: number | null;
    /**
     * the amount of feedback
     */
    votes_count?: number | null;
    /**
     * the maximum value for a rating_type
     */
    rating_max?: number | null;
};

export type SocialMetricsInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * likes count
     */
    like_count?: number | null;
};

export type TopDomainInfo = {
    domain?: string | null;
    count?: number | null;
};

export type ContentAnalysisCategoriesInfo = {
    category?: Array<number | null> | null;
    count?: number | null;
};

export type SpellInfo = {
    /**
     * keyword obtained as a result of search engine autocorrection
     * the results will be provided for the corrected keyword
     */
    keyword?: string | null;
    /**
     * type of autocorrection
     * possible values:
     * did_you_mean, showing_results_for, no_results_found_for, including_results_for
     * note: Yahoo and Yandex support only the following autocorrection type:
     * including_results_for
     */
    type?: string | null;
};

export type TechnologiesInfo = {
    add_ons?: {
        [key: string]: Array<string | null> | null;
    } | null;
    analytics?: {
        [key: string]: Array<string | null> | null;
    } | null;
    web_development?: {
        [key: string]: Array<string | null> | null;
    } | null;
    security?: {
        [key: string]: Array<string | null> | null;
    } | null;
    business_tools?: {
        [key: string]: Array<string | null> | null;
    } | null;
    sales?: {
        [key: string]: Array<string | null> | null;
    } | null;
    other?: {
        [key: string]: Array<string | null> | null;
    } | null;
    user_generated_content?: {
        [key: string]: Array<string | null> | null;
    } | null;
    booking?: {
        [key: string]: Array<string | null> | null;
    } | null;
    privacy?: {
        [key: string]: Array<string | null> | null;
    } | null;
    servers?: {
        [key: string]: Array<string | null> | null;
    } | null;
    location?: {
        [key: string]: Array<string | null> | null;
    } | null;
    content?: {
        [key: string]: Array<string | null> | null;
    } | null;
    media?: {
        [key: string]: Array<string | null> | null;
    } | null;
    marketing?: {
        [key: string]: Array<string | null> | null;
    } | null;
    communication?: {
        [key: string]: Array<string | null> | null;
    } | null;
    utilities?: {
        [key: string]: Array<string | null> | null;
    } | null;
};

export type AuthorsElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * name of the dataset author
     */
    name?: string | null;
    /**
     * author’s link URL
     */
    url?: string | null;
    /**
     * author’s link domain
     */
    domain?: string | null;
};

export type MessageInfo = {
    /**
     * level of error
     * can take the following values: fatal, error, warning, info
     */
    level?: string | null;
    /**
     * message associated with an error
     * message providing the details of the detected error
     */
    message?: string | null;
};

export type ClickstreamKeywordInfo = {
    /**
     * current search volume rate of a keyword
     */
    search_volume?: number | null;
    /**
     * date and time when backlink data was updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    last_updated_time?: string | null;
    /**
     * distribution of estimated clickstream-based metrics by gender
     * learn more about how the metric is calculated in this help center article
     */
    gender_distribution?: {
        [key: string]: number | null;
    } | null;
    /**
     * distribution of clickstream-based metrics by age
     * learn more about how the metric is calculated in this help center article
     */
    age_distribution?: {
        [key: string]: number | null;
    } | null;
    /**
     * monthly searches
     * represents the (approximate) number of searches on this keyword idea (as available for the past twelve months), targeted to the specified geographic locations
     */
    monthly_searches?: Array<MonthlySearchesInfo | null> | null;
};

export type BaseLocalBusinessLink = {
    /**
     * type of element
     */
    type?: string | null;
};

export type LocalBusinessReservationLink = BaseLocalBusinessLink & {
    type?: 'reservation';
} & {
    /**
     * title of the element
     * domain of the reservation software
     */
    title?: string | null;
    /**
     * URL to make a reservation
     */
    url?: string | null;
};

export type LocalBusinessOrderLink = BaseLocalBusinessLink & {
    type?: 'order';
} & {
    /**
     * lists available delivery services
     */
    delivery_services?: Array<LocalBusinessDeliveryServiceInfo | null> | null;
};

export type LocalBusinessDeliveryServiceInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of the element
     * domain of the online food ordering system
     */
    title?: string | null;
    /**
     * URL to place an order
     */
    url?: string | null;
};

export type LocalBusinessMenuLink = BaseLocalBusinessLink & {
    type?: 'menu';
} & {
    /**
     * title of the element
     * domain of the online menu system
     */
    title?: string | null;
    /**
     * URL to view the menu
     */
    url?: string | null;
};

export type BaseResponseInfo = {
    /**
     * the current version of the API
     */
    version?: string | null;
    /**
     * general status code
     * you can find the full list of the response codes here
     */
    status_code?: number | null;
    /**
     * general informational message
     * you can find the full list of general informational messages here
     */
    status_message?: string | null;
    /**
     * total execution time, seconds
     */
    time?: string | null;
    /**
     * total tasks cost, USD
     */
    cost?: number | null;
    /**
     * the number of tasks in the tasks array
     */
    tasks_count?: number | null;
    /**
     * the number of tasks in the tasks array returned with an error
     */
    tasks_error?: number | null;
};

export type BaseResponseTaskInfo = {
    /**
     * task identifier
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * status code of the task
     * generated by DataForSEO, can be within the following range: 10000-60000
     * you can find the full list of the response codes here
     */
    status_code?: number | null;
    /**
     * informational message of the task
     * you can find the full list of general informational messages here
     */
    status_message?: string | null;
    /**
     * execution time, seconds
     */
    time?: string | null;
    /**
     * total tasks cost, USD
     */
    cost?: number | null;
    /**
     * number of elements in the result array
     */
    result_count?: number | null;
    /**
     * URL path
     */
    path?: Array<string | null> | null;
    /**
     * contains the same parameters that you specified in the POST request
     */
    data?: {
        [key: string]: {
            [key: string]: unknown;
        } | null;
    } | null;
};

export type SectionContentItemInfo = {
    /**
     * secondary content on the page
     * you can find more information about content priority calculation in this help center article
     */
    text?: string | null;
    /**
     * page URL.
     * displayed in case the text is a link anchor
     */
    url?: string | null;
    /**
     * contains other URLs and anchors found in the content element
     */
    urls?: Array<ContentUrlInfo | null> | null;
};

export type KeywordInfoNormalizedWithInfo = {
    /**
     * date and time when the dataset was updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    last_updated_time?: string | null;
    /**
     * current search volume rate of a keyword
     */
    search_volume?: number | null;
    /**
     * keyword info is normalized
     * if true, values are normalized with Bing data
     */
    is_normalized?: boolean | null;
    /**
     * monthly search volume rates
     * array of objects with search volume rates in a certain month of a year
     */
    monthly_searches?: Array<MonthlySearchesInfo | null> | null;
};

export type MonthlySearchesInfo = {
    /**
     * year
     */
    year?: number | null;
    /**
     * month
     */
    month?: number | null;
    /**
     * monthly average search volume rate
     */
    search_volume?: number | null;
};

export type ContentUrlInfo = {
    /**
     * contains other URLs and anchors found in the content element
     */
    url?: string | null;
    /**
     * text of the URL’s anchor
     */
    anchor_text?: string | null;
};

export type TableContentInfo = {
    /**
     * parsed content of the header
     */
    header?: Array<TableContentItemInfo | null> | null;
    /**
     * content of the body of the table
     */
    body?: Array<TableContentItemInfo | null> | null;
    /**
     * content of the footer of the table
     */
    footer?: Array<TableContentItemInfo | null> | null;
};

export type TableContentItemInfo = {
    /**
     * content of the row cells of the header
     */
    row_cells?: Array<RowCellInfo | null> | null;
};

export type RowCellInfo = {
    /**
     * content of the row cells of the header
     */
    text?: string | null;
    /**
     * contains other URLs and anchors found in the content element
     */
    urls?: Array<ContentUrlInfo | null> | null;
    /**
     * content of the row cells of the header
     */
    is_header?: boolean | null;
};

export type ContentRatingInfo = {
    /**
     * rating name
     * here you can find the following elements: Max5, Percents, CustomMax
     */
    name?: string | null;
    /**
     * the value of the rating
     */
    rating_value?: string | null;
    /**
     * number of votes
     */
    rating_count?: string | null;
    /**
     * maximum value for the rating name
     */
    max_rating_value?: string | null;
    /**
     * relative rating
     */
    relative_rating?: string | null;
};

export type ContentOfferInfo = {
    /**
     * name of the product
     */
    name?: string | null;
    /**
     * price of the product
     */
    price?: number | null;
    /**
     * price currency
     */
    price_currency?: string | null;
    /**
     * displays the date and time until which the price is valid
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example: "2022-11-01 10:02:52 +00:00"
     */
    price_valid_until?: string | null;
};

export type ContentCommentInfo = {
    /**
     * product’s rating
     * contains information about the rating a customer has given to the product
     */
    rating?: ContentRatingInfo | null;
    /**
     * title of the customer’s comment
     */
    title?: string | null;
    /**
     * date when the comment was published
     */
    publish_date?: string | null;
    /**
     * author of the comment
     */
    author?: string | null;
    have_form?: boolean | null;
    /**
     * primary content on the page
     * you can find more information about content priority calculation in this help center article
     */
    primary_content?: Array<SectionContentItemInfo | null> | null;
};

export type SerpIdListRequestInfo = {
    /**
     * start time for filtering results
     * required field
     * if include_metadata is set to true, maximum value: a month from current datetime;
     * if include_metadata is set to false, maximum value: six months from current datetime;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_from?: string;
    /**
     * finish time for filtering results
     * required field
     * maximum value: current datetime;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-31 13:57:46 +00:00
     */
    datetime_to?: string;
    /**
     * the maximum number of returned task IDs
     * optional field
     * default value: 1000
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned task IDs
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten tasks in the results array will be omitted
     */
    offset?: number | null;
    /**
     * sorting by task execution time
     * optional field
     * possible values: "asc", "desc"
     * default value: "asc"
     */
    sort?: string | null;
    /**
     * include task metadata in the respond
     * optional field
     * default value: false
     */
    include_metadata?: boolean | null;
};

export type SerpIdListResultInfo = {
    /**
     * id of the task
     */
    id?: string | null;
    /**
     * URL of the task
     * URL you used for making an API call
     */
    url?: string | null;
    /**
     * date and time when the task was made
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_posted?: string | null;
    /**
     * date and time when the task was completed
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_done?: string | null;
    /**
     * informational message of the task
     * you can find the full list of general informational messages here
     */
    status?: string | null;
    /**
     * cost of the task, USD
     */
    cost?: number | null;
    /**
     * contains parameters you specified in the POST request
     */
    metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | null;
    } | null;
};

export type SerpIdListTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpIdListResultInfo | null> | null;
};

export type SerpIdListResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpIdListTaskInfo | null> | null;
};

export type SerpErrorsRequestInfo = {
    /**
     * the maximum number of returned tasks that responded with an error
     * optional field
     * default value: 1000
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned tasks
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten tasks in the results array will be omitted and the data will be provided for the successive tasks
     */
    offset?: number | null;
    /**
     * return tasks with a certain function
     * use this field to obtain a list of tasks that returned an error filtered by a certain function
     * you can filter the results by the values you receive in the function fields of the API response
     * i.e., once you receive unfiltered results, you can call this API again to filter them by function
     * example: serp/task_get/advanced, postback_url, pingback_url
     */
    filtered_function?: string | null;
    /**
     * start time for filtering results
     * optional field
     * allows filtering results by the datetime parameter within the range of the last 7 days;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2021-11-15 12:57:46 +00:00
     */
    datetime_from?: string | null;
    /**
     * finish time for filtering results
     * optional field
     * allows filtering results by the datetime parameter within the range of the last 7 days;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2021-11-15 13:57:46 +00:00
     */
    datetime_to?: string | null;
};

export type SerpErrorsResultInfo = {
    /**
     * id of the task
     */
    id?: string | null;
    /**
     * date and time when an error occurred
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * corresponding API function
     */
    function?: string | null;
    /**
     * error code
     */
    error_code?: number | null;
    /**
     * error message or error URL
     * error message (see full list) or URL that caused an error
     */
    error_message?: string | null;
    /**
     * URL that caused an error
     * URL you used for making an API call or pingback/postback URL
     */
    http_url?: string | null;
    /**
     * HTTP method
     */
    http_method?: string | null;
    /**
     * HTTP status code
     */
    http_code?: number | null;
    /**
     * time taken by HTTP request
     * for tasks set with a pingback/postback, this field will show the time it took your server to respond
     */
    http_time?: number | null;
    /**
     * HTTP response
     * server response
     */
    http_response?: string | null;
};

export type SerpErrorsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpErrorsResultInfo | null> | null;
};

export type SerpErrorsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpErrorsTaskInfo | null> | null;
};

export type SerpScreenshotRequestInfo = {
    /**
     * task identifier
     * required field
     * unique identifier of the associated task in the UUID format
     * you will be able to use it within 7 days to request the results of the task at any time
     */
    task_id?: string;
    /**
     * browser resolution preset
     * optional field
     * browser preset associated with a certain device type
     * can take the following values: desktop, tablet, mobile
     * note: by default, browser preset corresponds to the device type specified in the POST request
     */
    browser_preset?: string | null;
    /**
     * width of the browser resolution
     * optional field
     * can be specified in the following range: 240-9999
     */
    browser_screen_width?: number | null;
    /**
     * height of the browser resolution
     * optional field
     * can be specified in the following range: 240-9999
     */
    browser_screen_height?: number | null;
    /**
     * browser scale factor
     * optional field
     * can be specified in the following range: 0.5-3
     */
    browser_screen_scale_factor?: number | null;
    /**
     * number of SERP pages
     * optional field
     * if depth in the corresponding Task POST request exceeds 100 results (or 1 SERP page), specify the number of SERP pages to screenshot;
     * default value: 1
     */
    page?: number | null;
};

export type ScreenshotItem = {
    /**
     * screenshot of the requested page
     * URL of the page screenshot on the DataForSEO storage
     * note: the page screenshot saved on the DataForSEO storage only remains accessible for one day after making the request
     */
    image?: string | null;
};

export type SerpScreenshotResultInfo = {
    /**
     * number of items in the results array
     */
    items_count?: number | null;
    /**
     * items array
     */
    items?: Array<ScreenshotItem | null> | null;
};

export type SerpScreenshotTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpScreenshotResultInfo | null> | null;
};

export type SerpScreenshotResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpScreenshotTaskInfo | null> | null;
};

export type SerpAiSummaryRequestInfo = {
    /**
     * task identifier
     * required field
     * unique identifier of the associated task in the UUID format
     * you will be able to use it within 30 days to request the results of the task at any time
     */
    task_id?: string;
    /**
     * AI prompt
     * optional field
     * additional task for AI summariser;
     * any form of text, question or information that communicates to AI what response you’re looking for;
     * max number of symbols or characters you can specify: 2000;
     * note: your prompt has to be relevant to the keyword specified in the POST request to SERP API
     */
    prompt?: string | null;
    /**
     * support extra SERP features
     * optional field
     * if set to true, the AI model will consider the following extra SERP features, in addition to organic results: answer_box, knowledge_graph, featured_snippet;
     * default value: true
     */
    support_extra?: boolean | null;
    /**
     * fetch content from pages in SERPs
     * optional field
     * if set to true, the API will fetch the content from pages featured in SERP results, and the AI model will consider this content when generating the summary in the result;
     * default value: false
     */
    fetch_content?: boolean | null;
    /**
     * include source links in the summary
     * optional field
     * if set to true, the summary field in the API response will contain links to sources of the generated summary;
     * default value: false
     */
    include_links?: boolean | null;
};

export type SerpAiSummaryItem = {
    /**
     * generated summary
     * summary generated by the AI model according to the parameters specified in the request
     */
    summary?: string | null;
};

export type SerpAiSummaryResultInfo = {
    /**
     * number of items in the results array
     */
    items_count?: number | null;
    /**
     * items array
     */
    items?: Array<SerpAiSummaryItem | null> | null;
};

export type SerpAiSummaryTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpAiSummaryResultInfo | null> | null;
};

export type SerpAiSummaryResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpAiSummaryTaskInfo | null> | null;
};

export type SerpGoogleLocationsResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the code of the superordinate location
     * example:
     * "location_code": 9041134,
     * "location_name": "Vienna International Airport,Lower Austria,Austria",
     * "location_code_parent": 20044
     * where location_code_parent corresponds to:
     * "location_code": 20044,
     * "location_name": "Lower Austria,Austria"
     */
    location_code_parent?: number | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     */
    location_type?: string | null;
};

export type SerpGoogleLocationsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleLocationsResultInfo | null> | null;
};

export type SerpGoogleLocationsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleLocationsTaskInfo | null> | null;
};

export type SerpGoogleLocationsCountryResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the code of the superordinate location
     * example:
     * "location_code": 9041134,
     * "location_name": "Vienna International Airport,Lower Austria,Austria",
     * "location_code_parent": 20044
     * where location_code_parent corresponds to:
     * "location_code": 20044,
     * "location_name": "Lower Austria,Austria"
     */
    location_code_parent?: number | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     */
    location_type?: string | null;
};

export type SerpGoogleLocationsCountryTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleLocationsCountryResultInfo | null> | null;
};

export type SerpGoogleLocationsCountryResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleLocationsCountryTaskInfo | null> | null;
};

export type SerpGoogleLanguagesResultInfo = {
    /**
     * language name
     */
    language_name?: string | null;
    /**
     * language code according to ISO 639-1
     */
    language_code?: string | null;
};

export type SerpGoogleLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleLanguagesResultInfo | null> | null;
};

export type SerpGoogleLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleLanguagesTaskInfo | null> | null;
};

export type SerpGoogleOrganicTaskPostRequestInfo = {
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * if this field contains such parameters as ‘allinanchor:’, ‘allintext:’, ‘allintitle:’, ‘allinurl:’, ‘define:’, ‘filetype:’, ‘id:’, ‘inanchor:’, ‘info:’, ‘intext:’, ‘intitle:’, ‘inurl:’, ‘link:’, ‘site:’, the charge per task will be multiplied by 5
     * Note: queries containing the ‘cache:’ parameter are not supported and will return a validation error
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://www.google.co.uk/search?q=%20rank%20tracker%20api&hl=en&gl=GB&uule=w+CAIQIFISCXXeIa8LoNhHEZkq1d1aOpZS
     */
    url?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default);
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 10
     * max value: 700
     * Your account will be billed per each SERP containing up to 10 results;
     * Setting depth above 10 may result in additional charges if the search engine returns more than 10 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * max value: 100
     * Note: you will be charged for each page crawled (10 organic results per page);
     * learn more about pricing on our Pricing page;
     * Note#2: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9 (mm)
     * the maximum value for “radius”: 199999 (mm)
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * google.co.uk, google.com.au, google.de, etc.
     */
    se_domain?: string | null;
    /**
     * device type
     * optional field
     * can take the values:desktop, mobile
     * default value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * if you specify desktop in the device field, choose from the following values: windows, macos
     * default value: windows
     * if you specify mobile in the device field, choose from the following values: android, ios
     * default value: android
     */
    os?: string | null;
    /**
     * display related results
     * optional field
     * if set to true, the related_result element in the response will be provided as a snippet of its parent organic result;
     * if set to false, the related_result element will be provided as a separate organic result;
     * default value: true
     */
    group_organic_results?: boolean | null;
    /**
     * calcualte pixel rankings for SERP elements in advanced results
     * optional field
     * pixel ranking refers to the distance between the result snippet and top left corner of the screen;
     * Visit Help Center to learn more>>
     * by default, the parameter is set to false
     * Note: you will be charged extra $0.0006 for using this parameter
     */
    calculate_rectangles?: boolean | null;
    /**
     * browser screen width
     * optional field
     * you can set a custom browser screen width to calculate pixel rankings for a particular device;
     * by default, the parameter is set to:
     * 1920 for desktop;
     * 360 for mobile on android;
     * 375 for mobile on iOS;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_width?: number | null;
    /**
     * browser screen height
     * optional field
     * you can set a custom browser screen height to calculate pixel rankings for a particular device;
     * by default, the parameter is set to:
     * 1080 for desktop;
     * 640 for mobile on android;
     * 812 for mobile on iOS;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_height?: number | null;
    /**
     * browser screen resolution ratio
     * optional field
     * you can set a custom browser screen resolution ratio to calculate pixel rankings for a particular device;
     * by default, the parameter is set to:
     * 1 for desktop;
     * 3 for mobile on android;
     * 3 for mobile on iOS;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_resolution_ratio?: number | null;
    /**
     * clicks on the corresponding element
     * optional field
     * specify the click depth on the people_also_ask element to get additional people_also_ask_element items;
     * Note your account will be billed $0.00015 extra for each click regardless of task priority;
     * if the element is absent or we perform fewer clicks than you specified, all extra charges will be returned to your account balance
     * possible values: from 1 to 4
     */
    people_also_ask_click_depth?: number | null;
    /**
     * load asynchronous ai overview
     * optional field
     * set to true to obtain ai_overview items is SERPs even if they are loaded asynchronically;
     * if set to false, you will only obtain ai_overview items from cache;
     * default value: false
     * Note: you will be charged extra $0.0006 for using this parameter;
     * if the element is absent or contains "asynchronous_ai_overview": false, all extra charges will be returned to your account balance
     */
    load_async_ai_overview?: boolean | null;
    /**
     * expand ai overview
     * optional field
     * set to true to expand the ai_overview item;
     * default value: false;
     * Note: this parameter applies only to HTML task results
     */
    expand_ai_overview?: boolean | null;
    /**
     * additional parameters of the search query
     * optional field
     * get the list of available parameters and additional details here
     */
    search_param?: string | null;
    /**
     * remove specific parameters from URLs
     * optional field
     * using this field, you can specify up to 10 parameters to remove from URLs in the result
     * example:
     * "remove_from_url": ["srsltid"]
     * Note: if the target field is specified, the specified URL parameters will be removed before the search
     */
    remove_from_url?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * regular, advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpGoogleOrganicTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpGoogleOrganicTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleOrganicTaskPostTaskInfo | null> | null;
};

export type SerpGoogleOrganicTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: organic
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleOrganicTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleOrganicTasksReadyResultInfo | null> | null;
};

export type SerpGoogleOrganicTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleOrganicTasksReadyTaskInfo | null> | null;
};

export type SerpTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: finance_ticker_search
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpTasksReadyResultInfo | null> | null;
};

export type SerpTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpTasksReadyTaskInfo | null> | null;
};

export type SerpGoogleOrganicTasksFixedResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: organic
     */
    se_type?: string | null;
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleOrganicTasksFixedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleOrganicTasksFixedResultInfo | null> | null;
};

export type SerpGoogleOrganicTasksFixedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleOrganicTasksFixedTaskInfo | null> | null;
};

export type PaidSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements found in SERP
     * note values are returned in the ascending order, with values corresponding to advanced SERP features omitted from the results;
     * to get all items (including SERP features and rich snippets) with their positions, please refer to the Google Organiс Advanced SERP endpoint
     */
    rank_absolute?: number | null;
    /**
     * domain in SERP
     */
    domain?: string | null;
    /**
     * title of the results element in SERP
     */
    title?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * relevant URL in SERP
     */
    url?: string | null;
    /**
     * breadcrumb in SERP
     */
    breadcrumb?: string | null;
    /**
     * name of the website in SERP
     */
    website_name?: string | null;
    /**
     * indicates whether the element contains an image
     */
    is_image?: boolean | null;
    /**
     * indicates whether the element contains a video
     */
    is_video?: boolean | null;
    /**
     * images of the element
     * if there are none, equals null
     */
    images?: Array<AiModeImagesElementInfo | null> | null;
    /**
     * words highlighted in bold within the results description
     */
    highlighted?: Array<string | null> | null;
    /**
     * additional information about the result
     */
    extra?: {
        [key: string]: string | null;
    } | null;
    /**
     * extended description
     * if there is none, equals null
     */
    description_rows?: Array<string | null> | null;
    /**
     * sitelinks
     * the links shown below some of Google’s search results
     * if there are none, equals null
     */
    links?: Array<AdLinkElement | null> | null;
    /**
     * pricing details
     * contains the pricing details of the product or service featured in the result
     */
    price?: PriceInfo | null;
    /**
     * the item’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
};

export type OrganicSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements found in SERP
     * note values are returned in the ascending order, with values corresponding to advanced SERP features omitted from the results;
     * to get all items (including SERP features and rich snippets) with their positions, please refer to the Google Organiс Advanced SERP endpoint
     */
    rank_absolute?: number | null;
    /**
     * domain in SERP
     */
    domain?: string | null;
    /**
     * title of the results element in SERP
     */
    title?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * relevant URL in SERP
     */
    url?: string | null;
    /**
     * breadcrumb in SERP
     */
    breadcrumb?: string | null;
    /**
     * cached version of the page
     */
    cache_url?: string | null;
    /**
     * URL to a similar search
     * URL to a new search for the same keyword(s) on related sites
     */
    related_search_url?: string | null;
    /**
     * name of the website in SERP
     */
    website_name?: string | null;
    /**
     * indicates whether the element contains an image
     */
    is_image?: boolean | null;
    /**
     * indicates whether the element contains a video
     */
    is_video?: boolean | null;
    /**
     * indicates whether the element is a featured_snippet
     */
    is_featured_snippet?: boolean | null;
    /**
     * indicates whether the element is marked as malicious
     */
    is_malicious?: boolean | null;
    /**
     * indicates whether the element is marked as Google web story
     */
    is_web_story?: boolean | null;
    /**
     * includes additional information appended before the result description in SERP
     */
    pre_snippet?: string | null;
    /**
     * includes additional information appended after the result description in SERP
     */
    extended_snippet?: string | null;
    /**
     * images of the element
     * if there are none, equals null
     */
    images?: Array<AiModeImagesElementInfo | null> | null;
    /**
     * Accelerated Mobile Pages
     * indicates whether an item has the Accelerated Mobile Page (AMP) version
     */
    amp_version?: boolean | null;
    /**
     * the item’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingInfo | null;
    /**
     * pricing details
     * contains the pricing details of the product or service featured in the result
     */
    price?: PriceInfo | null;
    /**
     * words highlighted in bold within the results description
     */
    highlighted?: Array<string | null> | null;
    /**
     * sitelinks
     * the links shown below some of Google’s search results
     * if there are none, equals null
     */
    links?: Array<LinkElement | null> | null;
    /**
     * frequently asked questions
     * questions and answers extension shown below some of Google’s search results
     * if there are none, equals null
     */
    faq?: FaqBox | null;
    /**
     * extension of the organic element
     * extension of the organic result containing related search queries
     * Note: extension appears in SERP upon clicking on the result and then bouncing back to search results
     */
    extended_people_also_search?: Array<string | null> | null;
    /**
     * contains information from the ‘About this result’ panel
     * ‘About this result’ panel provides additional context about why Google returned this result for the given query;
     * this feature appears after clicking on the three dots next to most results
     */
    about_this_result?: AboutThisResultElement | null;
    /**
     * related result from the same domain
     * related result from the same domain appears as a part of the main result snippet;
     * you can derive the related_result snippets as "type": "organic" results by setting the group_organic_results parameter to false in the POST request
     */
    related_result?: Array<RelatedResult | null> | null;
    /**
     * date and time when the result was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
};

export type FeaturedSnippetSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements found in SERP
     * note values are returned in the ascending order, with values corresponding to advanced SERP features omitted from the results;
     * to get all items (including SERP features and rich snippets) with their positions, please refer to the Google Organiс Advanced SERP endpoint
     */
    rank_absolute?: number | null;
    /**
     * domain of the ad element in SERP
     */
    domain?: string | null;
    /**
     * title of the ad element in SERP
     */
    title?: string | null;
    /**
     * description of the ad element in SERP
     */
    description?: string | null;
    /**
     * relevant URL of the ad element in SERP
     */
    url?: string | null;
    /**
     * breadcrumb of the ad element in SERP
     */
    breadcrumb?: string | null;
    /**
     * title
     */
    featured_title?: string | null;
    /**
     * date and time when the result was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
    /**
     * images of the element
     * if there are none, equals null
     */
    images?: Array<AiModeImagesElementInfo | null> | null;
    /**
     * table present in the element
     * the header and content of the table present in the element
     */
    table?: Table | null;
};

export type SerpGoogleOrganicTaskGetRegularResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results found in SERP
     * contains types of all search results (items) found in the returned SERP
     * possible item types:
     * answer_box, app, carousel, multi_carousel, featured_snippet, google_flights, google_reviews, images, jobs, knowledge_graph, local_pack, map, organic, paid, people_also_ask, related_searches, people_also_search, shopping, top_stories, twitter, video, events, mention_carousel, ai_overview
     * note that this array contains all types of search results found in the returned SERP;
     * however, this endpoint provides data for featured_snippet, organic and paid types only;
     * to get all items (including SERP features and rich snippets) found in the returned SERP, please refer to the Google Organiс Advanced SERP endpoint
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * total search results pages retrieved
     * total number of retrieved SERPs in the result
     */
    pages_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items in SERP
     */
    items?: Array<BaseSerpApiElementItem | null> | null;
};

export type SerpGoogleOrganicTaskGetRegularTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleOrganicTaskGetRegularResultInfo | null> | null;
};

export type SerpGoogleOrganicTaskGetRegularResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleOrganicTaskGetRegularTaskInfo | null> | null;
};

export type KnowledgeGraphListElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * link anchor text
     */
    title?: string | null;
    /**
     * subtitle of the item
     */
    subtitle?: string | null;
    /**
     * sitelink URL
     */
    url?: string | null;
    /**
     * domain in SERP
     */
    domain?: string | null;
    /**
     * URL of the image
     * the URL leading to the image on the original resource or DataForSEO storage (in case the original source is not available)
     */
    image_url?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
};

export type SerpApiKnowledgeGraphCarouselItemElementItem = (BaseSerpApiKnowledgeGraphElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * google defined data attribute ID
     * example:
     * action:listen_artist
     */
    data_attrid?: string | null;
    /**
     * link of the element
     */
    link?: LinkElement | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<KnowledgeGraphListElement | null> | null;
};

export type SerpApiKnowledgeGraphDescriptionItemElementItem = (BaseSerpApiKnowledgeGraphElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * text or description of the element in SERP
     */
    text?: string | null;
    /**
     * sitelinks
     * the links shown below some of Google’s search results
     * if there are none, equals null
     */
    links?: Array<LinkElement | null> | null;
};

export type KnowledgeGraphImagesElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * relevant URL in SERP
     */
    url?: string | null;
    /**
     * domain in SERP of the ad element
     */
    domain?: string | null;
    /**
     * alt tag of the image
     */
    alt?: string | null;
    /**
     * URL of the image
     * the URL leading to the image on the original resource or DataForSEO storage (in case the original source is not available)
     */
    image_url?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
};

export type SerpApiKnowledgeGraphImagesItemElementItem = (BaseSerpApiKnowledgeGraphElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * link of the element
     */
    link?: LinkElement | null;
    /**
     * items featured in the faq_box
     */
    items?: Array<KnowledgeGraphImagesElement | null> | null;
};

export type SerpApiKnowledgeGraphListItemElementItem = (BaseSerpApiKnowledgeGraphElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * title of the link element
     */
    title?: string | null;
    /**
     * google defined data attribute ID
     * example:
     * ss:/webfacts:net_worth
     */
    data_attrid?: string | null;
    /**
     * link of the element
     */
    link?: LinkElement | null;
    /**
     * additional items present in the element
     * if there are none, equals null
     */
    items?: Array<KnowledgeGraphListElement | null> | null;
};

export type SerpApiKnowledgeGraphRowItemElementItem = (BaseSerpApiKnowledgeGraphElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * title of the item
     */
    title?: string | null;
    /**
     * google defined data attribute ID
     * example:
     * kc:/common/topic:social media presence
     */
    data_attrid?: string | null;
    /**
     * reference text
     * text snippet from the page that was used to generate the ai_overview_element
     */
    text?: string | null;
    /**
     * links featured in the faq_box_element
     */
    links?: Array<LinkElement | null> | null;
};

export type AiModeImagesElementInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * alt tag of the image
     */
    alt?: string | null;
    /**
     * URL link
     */
    url?: string | null;
    /**
     * URL of the image
     * the URL leading to the image on the original resource or DataForSEO storage (in case the original source is not available)
     */
    image_url?: string | null;
};

export type KnowledgeGraphExpandedElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given element
     */
    featured_title?: string | null;
    /**
     * relevant URL
     */
    url?: string | null;
    /**
     * domain in SERP
     */
    domain?: string | null;
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * text alongside the link title
     */
    snippet?: string | null;
    /**
     * images of the element
     */
    images?: Array<AiModeImagesElementInfo | null> | null;
    /**
     * date and time when the result was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
    /**
     * table present in the element
     * the header and content of the table present in the element
     */
    table?: Table | null;
};

export type SerpApiKnowledgeGraphExpandedItemElementItem = (BaseSerpApiKnowledgeGraphElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * title of the link
     */
    title?: string | null;
    /**
     * google defined data attribute ID
     * example:
     * kc:/local:place qa
     */
    data_attrid?: string | null;
    /**
     * link of the element
     */
    expanded_element?: Array<KnowledgeGraphExpandedElement | null> | null;
};

export type SerpApiKnowledgeGraphPartItemElementItem = (BaseSerpApiKnowledgeGraphElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * google defined data attribute ID
     * example:
     * kc:/local:place qa
     */
    data_attrid?: string | null;
    /**
     * reference text
     * text snippet from the page that was used to generate the ai_overview_element
     */
    text?: string | null;
    /**
     * sitelinks
     * the links shown below some of Google’s search results
     * if there are none, equals null
     */
    links?: Array<LinkElement | null> | null;
};

export type KnowledgeGraphShoppingElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * relevant URL
     */
    url?: string | null;
    /**
     * website domain
     */
    domain?: string | null;
    /**
     * pricing details
     * contains the pricing details of the product or service featured in the result
     */
    price?: PriceInfo | null;
    /**
     * source of additional information about the result
     */
    source?: string | null;
    /**
     * text alongside the link title
     */
    snippet?: string | null;
    /**
     * merchant account provider
     * ecommerce site that hosts products or websites of individual sellers under the same merchant account
     * example:
     * by Google
     */
    marketplace?: string | null;
    /**
     * URL to the merchant account provider
     * ecommerce site that hosts products or websites of individual sellers under the same merchant account
     */
    marketplace_url?: string | null;
};

export type SerpApiKnowledgeGraphShoppingItemElementItem = (BaseSerpApiKnowledgeGraphElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * title of the place
     */
    title?: string | null;
    /**
     * google defined data attribute ID
     * example:
     * kc:/shopping/gpc:organic-offers
     */
    data_attrid?: string | null;
    /**
     * additional items present in the element
     * if there are none, equals null
     */
    items?: Array<KnowledgeGraphShoppingElement | null> | null;
};

export type KnowledgeGraphHotelsBookingElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * source of additional information about the result
     */
    source?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * relevant URL
     */
    url?: string | null;
    /**
     * domain where a link points
     */
    domain?: string | null;
    /**
     * pricing details
     * contains the pricing details of the product or service featured in the result
     */
    price?: PriceInfo | null;
    /**
     * indicates whether the element is an ad
     */
    is_paid?: boolean | null;
};

export type SerpApiKnowledgeGraphHotelsBookingItemElementItem = (BaseSerpApiKnowledgeGraphElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * starting date of stay
     * in the format “year-month-date”
     * example:
     * 2019-11-15
     */
    date_from?: string | null;
    /**
     * ending date of stay
     * in the format “year-month-date”
     * example:
     * 2019-11-17
     */
    date_to?: string | null;
    /**
     * google defined data attribute ID
     * example:
     * kc:/local:hotel booking
     */
    data_attrid?: string | null;
    /**
     * additional items present in the element
     * if there are none, equals null
     */
    items?: Array<KnowledgeGraphHotelsBookingElement | null> | null;
};

export type AiModeAiOverviewReferenceInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * the alignment of the element in SERP
     * can take the following values:
     * left, right
     */
    position?: string | null;
    /**
     * reference source name or title
     */
    source?: string | null;
    /**
     * domain in SERP
     */
    domain?: string | null;
    /**
     * image source URL
     */
    url?: string | null;
    /**
     * title of the element
     */
    title?: string | null;
    /**
     * text of the component
     */
    text?: string | null;
};

export type SerpApiAiOverviewElementItem = (BaseSerpApiAiOverviewElementItem | null) & {
    /**
     * title of the element
     */
    title?: string | null;
    /**
     * additional text of the element in SERP
     */
    text?: string | null;
    /**
     * content of the element in markdown format
     */
    markdown?: string | null;
    /**
     * sitelinks
     * the links shown below some of Google’s search results
     * if there are none, equals null
     */
    links?: Array<LinkElement | null> | null;
    /**
     * images of the element
     */
    images?: Array<AiModeImagesElementInfo | null> | null;
    /**
     * references relevant to the element
     * includes references to webpages that were used to generate the ai_overview_element
     */
    references?: Array<AiModeAiOverviewReferenceInfo | null> | null;
};

export type AiOverviewExpandedComponent = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of the element
     */
    title?: string | null;
    /**
     * reference text
     * text snippet from the page that was used to generate the ai_overview_element
     */
    text?: string | null;
    /**
     * content of the element in markdown format
     */
    markdown?: string | null;
    /**
     * images of the element
     */
    images?: Array<AiModeImagesElementInfo | null> | null;
    /**
     * website links featured in the element
     */
    links?: Array<LinkElement | null> | null;
    /**
     * references relevant to the element
     * includes references to webpages that were used to generate the ai_overview_element
     */
    references?: Array<AiModeAiOverviewReferenceInfo | null> | null;
};

export type SerpApiAiOverviewExpandedElementItem = (BaseSerpApiAiOverviewElementItem | null) & {
    /**
     * title of the element
     */
    title?: string | null;
    /**
     * additional text of the element in SERP
     */
    text?: string | null;
    /**
     * array of components of the element
     */
    components?: Array<AiOverviewExpandedComponent | null> | null;
    /**
     * references relevant to the element
     * includes references to webpages that were used to generate the ai_overview_element
     */
    references?: Array<AiModeAiOverviewReferenceInfo | null> | null;
};

export type SerpApiAiOverviewVideoElementItem = (BaseSerpApiAiOverviewElementItem | null) & {
    /**
     * title of the element
     */
    title?: string | null;
    /**
     * additional information for the video
     */
    snippet?: string | null;
    /**
     * relevant URL
     */
    url?: string | null;
    /**
     * domain name of the reference
     */
    domain?: string | null;
    /**
     * URL of the image
     */
    image_url?: string | null;
    /**
     * reference source name or title
     */
    source?: string | null;
    /**
     * date when the video was published or indexed
     * example:
     * Apr 26, 2024
     */
    date?: string | null;
    /**
     * date and time when the result was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
};

export type SerpApiAiOverviewTableElementItem = (BaseSerpApiAiOverviewElementItem | null) & {
    /**
     * content of the element in markdown format
     */
    markdown?: string | null;
    /**
     * table element
     */
    table?: Table | null;
    /**
     * references relevant to the element
     */
    references?: Array<AiModeAiOverviewReferenceInfo | null> | null;
};

export type SerpApiKnowledgeGraphAiOverviewItemElementItem = (BaseSerpApiKnowledgeGraphElementItem | null) & {
    /**
     * indicates whether the element is loaded asynchronically
     * if true, the ai_overview element is loaded asynchronically;
     * if false, the ai_overview element is loaded from cache;
     */
    asynchronous_ai_overview?: boolean | null;
    /**
     * additional items present in the element
     * if there are none, equals null
     */
    items?: Array<BaseSerpApiAiOverviewElementItem | null> | null;
    /**
     * additional references relevant to the item
     * includes references to webpages that may have been used to generate the ai_overview
     */
    references?: Array<AiModeAiOverviewReferenceInfo | null> | null;
};

export type KnowledgeGraphSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * subtitle of the item
     */
    subtitle?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * card id
     */
    card_id?: string | null;
    /**
     * relevant URL in SERP
     */
    url?: string | null;
    /**
     * URL of the image
     * the URL leading to the image on the original resource or DataForSEO storage (in case the original source is not available)
     */
    image_url?: string | null;
    /**
     * URL of the logo from knowledge graph
     */
    logo_url?: string | null;
    /**
     * google-defined client id
     * unique id of a local establishment;
     * can be used with Google Reviews API to get a full list of reviews
     */
    cid?: string | null;
    /**
     * contains results featured in the ‘hotels_pack’ element of SERP
     */
    items?: Array<BaseSerpApiKnowledgeGraphElementItem | null> | null;
};

export type AdLinkElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * link description
     */
    description?: string | null;
    /**
     * reference page URL
     */
    url?: string | null;
    /**
     * domain where a link points
     */
    domain?: string | null;
    /**
     * the identifier of the ad
     */
    ad_aclk?: string | null;
};

export type FaqBoxElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of the element in SERP
     */
    title?: string | null;
    /**
     * description of the link
     */
    description?: string | null;
    /**
     * link of the element
     */
    links?: Array<LinkElement | null> | null;
};

export type FaqBox = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * additional items present in the element
     * if there are none, equals null
     */
    items?: Array<FaqBoxElement | null> | null;
};

export type RelatedResult = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search results page number
     * indicates the number of the SERP page on which the element is located
     */
    page?: number | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
    /**
     * domain where a link points
     */
    domain?: string | null;
    /**
     * title of the link
     */
    title?: string | null;
    /**
     * reference page URL
     */
    url?: string | null;
    /**
     * cached version of the page
     */
    cache_url?: string | null;
    /**
     * URL to a similar search
     * URL to a new search for the same keyword(s) on related sites
     */
    related_search_url?: string | null;
    /**
     * breadcrumb in SERP
     */
    breadcrumb?: string | null;
    /**
     * name of the website in the ad element
     */
    website_name?: string | null;
    /**
     * indicates whether the element contains an image
     */
    is_image?: boolean | null;
    /**
     * indicates whether the element contains a video
     */
    is_video?: boolean | null;
    /**
     * description of the hotel booking element
     */
    description?: string | null;
    /**
     * includes additional information appended before the result description in SERP
     */
    pre_snippet?: string | null;
    /**
     * includes additional information appended after the result description in SERP
     */
    extended_snippet?: string | null;
    /**
     * images of the component
     * if there are none, equals null
     */
    images?: Array<AiModeImagesElementInfo | null> | null;
    /**
     * Accelerated Mobile Pages
     * indicates whether an item has the Accelerated Mobile Page (AMP) version
     */
    amp_version?: boolean | null;
    /**
     * the item’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
    /**
     * price of booking a place for the specified dates of stay
     */
    price?: PriceInfo | null;
    /**
     * words highlighted in bold within the results description
     */
    highlighted?: Array<string | null> | null;
    /**
     * contains information from the ‘About this result’ panel
     * ‘About this result’ panel provides additional context about why Google returned this result for the given query;
     * this feature appears after clicking on the three dots next to most results
     */
    about_this_result?: AboutThisResultElement | null;
    /**
     * date and time when the video was published or indexed
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
};

export type TopStoriesElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * source of the element
     * indicates the source of information included in the top_stories_element
     */
    source?: string | null;
    /**
     * website domain
     */
    domain?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * the date when the page source of the element was published
     */
    date?: string | null;
    /**
     * Accelerated Mobile Pages
     * indicates whether an item has the Accelerated Mobile Page (AMP) version
     */
    amp_version?: boolean | null;
    /**
     * date and time when the result was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * URL of the image
     * the URL leading to the image on the original resource or DataForSEO storage (in case the original source is not available)
     */
    image_url?: string | null;
    /**
     * badges relevant to the element
     */
    badges?: Array<string | null> | null;
};

export type TopStoriesSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<TopStoriesElement | null> | null;
};

export type SerpApiPeopleAlsoAskExpandedElementItem = (BaseSerpApiPeopleAlsoAskExpandedElementItem | null) & {
    /**
     * the title of the featured snippets source page
     */
    featured_title?: string | null;
    /**
     * URL of element
     */
    url?: string | null;
    /**
     * domain where a link points
     */
    domain?: string | null;
    /**
     * title of the row
     */
    title?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * images of the element
     */
    images?: Array<AiModeImagesElementInfo | null> | null;
    /**
     * date and time when the result was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
    /**
     * results table
     * if there are none, equals null
     */
    table?: Table | null;
};

export type SerpApiPeopleAlsoAskAiOverviewExpandedElementItem = (BaseSerpApiPeopleAlsoAskExpandedElementItem | null) & {
    /**
     * contains arrays of elements available in the list
     */
    items?: Array<BaseSerpApiAiOverviewElementItem | null> | null;
    /**
     * additional references relevant to the item
     * includes references to webpages that may have been used to generate the ai_overview
     */
    references?: Array<AiModeAiOverviewReferenceInfo | null> | null;
};

export type PeopleAlsoAskElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * question that triggered additional expanded elements
     */
    seed_question?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
    /**
     * expanded element
     */
    expanded_element?: Array<BaseSerpApiPeopleAlsoAskExpandedElementItem | null> | null;
};

export type PeopleAlsoAskSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<PeopleAlsoAskElement | null> | null;
};

export type PeopleAlsoSearchSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<string | null> | null;
};

export type RelatedImageSearchesElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given shopping element
     */
    title?: string | null;
    /**
     * alt tag of the image
     */
    alt?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * URL of the image
     * the URL leading to the image on the original resource or DataForSEO storage (in case the original source is not available)
     */
    image_url?: string | null;
};

export type ImagesSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<AiModeImagesElementInfo | null> | null;
    /**
     * contains keywords and images related to the specified search term
     * if there are none, equals null
     */
    related_image_searches?: Array<RelatedImageSearchesElement | null> | null;
};

export type TwitterElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * tweet message
     */
    tweet?: string | null;
    /**
     * the date when the page source of the element was published
     */
    date?: string | null;
    /**
     * date and time when the result was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
    /**
     * URL
     */
    url?: string | null;
};

export type TwitterSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<TwitterElement | null> | null;
};

export type GoogleReviewsSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * the number of reviews
     */
    reviews_count?: number | null;
    /**
     * the element’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
    /**
     * the identifier of a place
     */
    place_id?: string | null;
    /**
     * the additional feature of the review
     */
    feature?: string | null;
    /**
     * google-defined client id
     */
    cid?: string | null;
};

export type JobsElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * location for which the job vacancy is posted
     */
    location?: string | null;
    /**
     * author
     */
    author?: string | null;
    /**
     * the time when the job was posted
     */
    job_posted_time?: string | null;
    /**
     * date and time when the result was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
    /**
     * contract type
     */
    contract_type?: string | null;
    /**
     * salary
     */
    salary?: string | null;
    /**
     * URL
     */
    url?: string | null;
};

export type JobsSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<JobsElement | null> | null;
};

export type MapSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * URL
     */
    url?: string | null;
};

export type AppElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * price indicated in the element
     */
    price?: PriceInfo | null;
};

export type AppSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<AppElement | null> | null;
};

export type LocalPackSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * link description
     */
    description?: string | null;
    /**
     * domain name of the reference
     */
    domain?: string | null;
    /**
     * phone number
     */
    phone?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * indicates whether the element is an ad
     */
    is_paid?: boolean | null;
    /**
     * the element’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
    /**
     * google-defined client id
     */
    cid?: string | null;
};

export type SerpApiCarouselElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * subtitle of the element
     */
    subtitle?: string | null;
    /**
     * URL of the image
     * the URL leading to the image on the original resource or DataForSEO storage (in case the original source is not available)
     */
    image_url?: string | null;
};

export type CarouselSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<SerpApiCarouselElement | null> | null;
};

export type VideoSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<VideoElement | null> | null;
};

export type AnswerBoxSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * text
     * if there is none, equals null
     */
    text?: Array<string | null> | null;
    /**
     * website links featured in the element
     */
    links?: Array<LinkElement | null> | null;
};

export type ShoppingElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * price indicated in the element
     */
    price?: PriceInfo | null;
    /**
     * source of the element
     * indicates the source of information included in the top_stories_element
     */
    source?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * merchant account provider
     * commerce site that hosts products or websites of individual sellers under the same merchant account
     * example:
     * by Google
     */
    marketplace?: string | null;
    /**
     * relevant marketplace URL
     * URL of the page on the marketplace website where the product is hosted
     */
    marketplace_url?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * the item’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
};

export type ShoppingSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<ShoppingElement | null> | null;
};

export type GoogleFlightsElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * URL
     */
    url?: string | null;
};

export type GoogleFlightsSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<GoogleFlightsElement | null> | null;
};

export type MentionCarouselElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * price indicated in the element
     */
    price?: PriceInfo | null;
    /**
     * the item’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
    /**
     * additional elements in the mention_carousel item
     */
    mentioned_in?: Array<LinkElement | null> | null;
};

export type MentionCarouselSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<MentionCarouselElement | null> | null;
};

export type EventsElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * text alongside the link title
     */
    snippet?: string | null;
    /**
     * URL
     */
    url?: string | null;
};

export type EventsSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<EventsElement | null> | null;
};

export type RelatedSearchesSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<string | null> | null;
};

export type MultiCarouselElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * multi_carousel_snippet results
     */
    multi_carousel_snippets?: Array<SerpApiCarouselElement | null> | null;
};

export type MultiCarouselSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<MultiCarouselElement | null> | null;
};

export type RecipesElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * website domain
     */
    domain?: string | null;
    /**
     * source of the element
     * indicates the source of information included in the top_stories_element
     */
    source?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * the total time it takes to prepare the cook the dish
     */
    time?: string | null;
    /**
     * the item’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
};

export type RecipesSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<RecipesElement | null> | null;
};

export type TopSightsElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * the item’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
};

export type TopSightsSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<TopSightsElement | null> | null;
};

export type ScholarlyArticlesElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * author
     */
    author?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
};

export type ScholarlyArticlesSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<ScholarlyArticlesElement | null> | null;
};

export type PopularProductsElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * seller of the product
     */
    seller?: string | null;
    /**
     * URL of the image
     * the URL leading to the image on the original resource or DataForSEO storage (in case the original source is not available)
     */
    image_url?: string | null;
    /**
     * price indicated in the element
     */
    price?: PriceInfo | null;
    /**
     * the item’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
};

export type PopularProductsSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<PopularProductsElement | null> | null;
};

export type PodcastsElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * date and time when the result was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
    /**
     * the total time it will take to play an episode
     */
    time_to_play?: string | null;
};

export type PodcastsSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<PodcastsElement | null> | null;
};

export type GraphElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * date when the video was published or indexed
     * example:
     * Apr 26, 2024
     */
    date?: string | null;
    /**
     * the value of the rating
     */
    value?: number | null;
};

export type Graph = {
    /**
     * items present in the element
     */
    items?: Array<GraphElement | null> | null;
    /**
     * previous close data
     * contains stock price data based on the preceding time period
     */
    previous_items?: Array<GraphElement | null> | null;
};

export type StocksBoxSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * reference source name or title
     */
    source?: string | null;
    /**
     * text alongside the link title
     */
    snippet?: string | null;
    /**
     * price indicated in the element
     */
    price?: PriceInfo | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * domain name of the reference
     */
    domain?: string | null;
    /**
     * table present in the element
     * the header and content of the table present in the element
     */
    table?: Table | null;
    /**
     * contains data provided in the graph of the element
     */
    graph?: Graph | null;
};

export type FindResultsOnElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * website domain
     */
    domain?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * source of the element
     * indicates the source of information included in the top_stories_element
     */
    source?: string | null;
};

export type FindResultsOnSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<FindResultsOnElement | null> | null;
};

export type QuestionsAndAnswersElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * question included in the item
     */
    question_text?: string | null;
    /**
     * answer included in the item
     */
    answer_text?: string | null;
    /**
     * source of the element
     * indicates the source of information included in the top_stories_element
     */
    source?: string | null;
    /**
     * website domain
     */
    domain?: string | null;
    /**
     * answer upvotes from the source
     */
    votes?: number | null;
};

export type QuestionsAndAnswersSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<QuestionsAndAnswersElement | null> | null;
};

export type HotelsPackElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * price indicated in the element
     */
    price?: PriceInfo | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * unique hotel identifier
     * unique hotel identifier assigned by Google;
     * example: "CgoIjaeSlI6CnNpVEAE"
     */
    hotel_identifier?: string | null;
    /**
     * website domain
     */
    domain?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * indicates whether the element is an ad
     */
    is_paid?: boolean | null;
    /**
     * the item’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
};

export type HotelsPackSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * starting date of stay
     * in the format “year-month-date”
     * example:
     * 2019-11-15
     */
    date_from?: string | null;
    /**
     * ending date of stay
     * in the format “year-month-date”
     * example:
     * 2019-11-17
     */
    date_to?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<HotelsPackElement | null> | null;
};

export type VisualStoriesSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<LicensesElement | null> | null;
};

export type CommercialUnitsElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * website domain
     */
    domain?: string | null;
    /**
     * price indicated in the element
     */
    price?: PriceInfo | null;
    /**
     * source of the element
     * indicates the source of information included in the top_stories_element
     */
    source?: string | null;
    /**
     * the item’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
};

export type CommercialUnitsSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<CommercialUnitsElement | null> | null;
};

export type LocalServicesElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * website domain
     */
    domain?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * the item’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
    /**
     * URL of the image featured in the element
     */
    profile_image_url?: string | null;
};

export type LocalServicesSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * domain name of the reference
     */
    domain?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<LocalServicesElement | null> | null;
};

export type GoogleHotelsSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * unique hotel identifier
     * unique hotel identifier assigned by Google;
     * example: "CgoIjaeSlI6CnNpVEAE"
     */
    hotel_identifier?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * google-defined client id
     */
    cid?: string | null;
};

export type MathSolverExpandedElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of the row
     */
    title?: string | null;
    /**
     * solution of the element
     * displays steps to solve the mathematical equation as specified in the element
     */
    solution?: Array<string | null> | null;
};

export type MathSolverElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * expanded element
     */
    expanded_element?: Array<MathSolverExpandedElement | null> | null;
};

export type MathSolverSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * solution to the equation
     * solution to the mathematical equation specified in the keyword field when setting a task
     */
    result?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<MathSolverElement | null> | null;
    /**
     * website links featured in the element
     */
    links?: Array<LinkElement | null> | null;
};

export type CurrencyBoxSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * the value of the rating
     */
    value?: number | null;
    /**
     * value converted to a requested currency
     * indicates the exact value based on Google Fincance data at the time when our API pulled the results
     * note that exchange rates displayed in the currency_box element may be delayed according to the Google Finance disclaimer
     */
    converted_value?: number | null;
    /**
     * currency of the listed price
     * ISO code of the currency applied to the price
     */
    currency?: string | null;
    /**
     * converted currency
     */
    converted_currency?: string | null;
    /**
     * date and time when the result was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
    /**
     * table present in the element
     * the header and content of the table present in the element
     */
    table?: Table | null;
    /**
     * contains data provided in the graph of the element
     */
    graph?: Graph | null;
};

export type GooglePostsSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * the identifier of the google_posts feature
     */
    posts_id?: string | null;
    /**
     * the additional feature of the review
     */
    feature?: string | null;
    /**
     * google-defined client id
     */
    cid?: string | null;
};

export type SerpApiProductConsiderationsExpandedElementItem = (BaseSerpApiProductConsiderationExpandedElementItem | null) & {
    /**
     * title of the row
     */
    title?: string | null;
    /**
     * the title of the featured snippets source page
     */
    featured_title?: string | null;
    /**
     * breadcrumb of the Ad element in SERP
     */
    breadcrumb?: string | null;
    /**
     * text alongside the title
     */
    snippet?: string | null;
    /**
     * domain where a link points
     */
    domain?: string | null;
    /**
     * URL of element
     */
    url?: string | null;
    /**
     * date and time when the result was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
    /**
     * search queries related to the elment
     */
    related_searches?: Array<string | null> | null;
    /**
     * contains information from the ‘About this result’ panel
     * ‘About this result’ panel provides additional context about why Google returned this result for the given query;
     * this feature appears after clicking on the three dots next to most results
     */
    about_this_result?: AboutThisResultElement | null;
};

export type AiOverviewElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * content within the item
     */
    text?: string | null;
    /**
     * images of the element
     */
    images?: Array<AiModeImagesElementInfo | null> | null;
    /**
     * references relevant to the element
     * includes references to webpages that were used to generate the ai_overview_element
     */
    references?: Array<AiModeAiOverviewReferenceInfo | null> | null;
};

export type SerpApiProductConsiderationsAiOverviewExpandedElementItem = (BaseSerpApiProductConsiderationExpandedElementItem | null) & {
    /**
     * contains arrays of elements available in the list
     */
    items?: Array<AiOverviewElement | null> | null;
    /**
     * additional references relevant to the item
     * includes references to webpages that may have been used to generate the ai_overview
     */
    references?: Array<AiModeAiOverviewReferenceInfo | null> | null;
};

export type ProductConsiderationsElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * category of the consideration element
     * the category is indicated just above the title fo the consideration element
     */
    consideration_category?: string | null;
    /**
     * expanded element
     */
    expanded_element?: Array<BaseSerpApiProductConsiderationExpandedElementItem | null> | null;
};

export type ProductConsiderationsSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<ProductConsiderationsElement | null> | null;
};

export type FoundOnWebElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * subtitle of the element
     */
    subtitle?: string | null;
    /**
     * image of the element
     */
    image?: AiModeImagesElementInfo | null;
};

export type FoundOnWebSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * search queries related to the elment
     */
    related_searches?: Array<string | null> | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<FoundOnWebElement | null> | null;
};

export type ShortVideosElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * website domain
     */
    domain?: string | null;
    /**
     * source of the element
     * indicates the source of information included in the top_stories_element
     */
    source?: string | null;
};

export type ShortVideosSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<ShortVideosElement | null> | null;
};

export type RefineProductsElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * URL of the image
     * the URL leading to the image on the original resource or DataForSEO storage (in case the original source is not available)
     */
    image_url?: string | null;
    /**
     * keyword for the related refined search
     */
    keyword?: string | null;
    /**
     * type of search refinement
     */
    refine_type?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
};

export type RefineProductsSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<RefineProductsElement | null> | null;
};

export type ExploreBrandsElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * website domain
     */
    domain?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * URL of the image
     * the URL leading to the image on the original resource or DataForSEO storage (in case the original source is not available)
     */
    image_url?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
};

export type ExploreBrandsSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<ExploreBrandsElement | null> | null;
};

export type PerspectivesElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * website domain
     */
    domain?: string | null;
    /**
     * the date when the page source of the element was published
     */
    date?: string | null;
    /**
     * source of the element
     * indicates the source of information included in the top_stories_element
     */
    source?: string | null;
    /**
     * date and time when the result was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
};

export type PerspectivesSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<PerspectivesElement | null> | null;
};

export type DiscussionsAndForumsElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * website domain
     */
    domain?: string | null;
    /**
     * source of the element
     * indicates the source of information included in the top_stories_element
     */
    source?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * date and time when the result was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
    /**
     * number of posts from the discussion on the related source
     */
    posts_count?: number | null;
};

export type DiscussionsAndForumsSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<DiscussionsAndForumsElement | null> | null;
};

export type CompareSitesElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * website domain
     */
    domain?: string | null;
    /**
     * URL of the image
     * the URL leading to the image on the original resource or DataForSEO storage (in case the original source is not available)
     */
    image_url?: string | null;
    /**
     * source of the element
     * indicates the source of information included in the top_stories_element
     */
    source?: string | null;
};

export type CompareSitesSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<CompareSitesElement | null> | null;
};

export type CoursesElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * website domain
     */
    domain?: string | null;
    /**
     * source of the element
     * indicates the source of information included in the top_stories_element
     */
    source?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * the date when the page source of the element was published
     */
    date?: string | null;
    /**
     * URL of the image
     * the URL leading to the image on the original resource or DataForSEO storage (in case the original source is not available)
     */
    image_url?: string | null;
    /**
     * the item’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
};

export type CoursesSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * array of course categories
     * contains a list of categories relevant to courses
     */
    categories?: Array<string | null> | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<CoursesElement | null> | null;
};

export type KnowledgeGraphCarouselItemSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * google defined data attribute ID
     * example:
     * action:listen_artist
     */
    data_attrid?: string | null;
    /**
     * link of the element
     */
    link?: LinkElement | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<KnowledgeGraphListElement | null> | null;
};

export type KnowledgeGraphDescriptionItemSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference text
     * text snippet from the page that was used to generate the ai_overview_element
     */
    text?: string | null;
    /**
     * website links featured in the element
     */
    links?: Array<LinkElement | null> | null;
};

export type KnowledgeGraphImagesItemSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * link of the element
     */
    link?: LinkElement | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<KnowledgeGraphImagesElement | null> | null;
};

export type KnowledgeGraphListItemSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * google defined data attribute ID
     * example:
     * action:listen_artist
     */
    data_attrid?: string | null;
    /**
     * link of the element
     */
    link?: LinkElement | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<KnowledgeGraphListElement | null> | null;
};

export type KnowledgeGraphRowItemSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * google defined data attribute ID
     * example:
     * action:listen_artist
     */
    data_attrid?: string | null;
    /**
     * reference text
     * text snippet from the page that was used to generate the ai_overview_element
     */
    text?: string | null;
    /**
     * website links featured in the element
     */
    links?: Array<LinkElement | null> | null;
};

export type KnowledgeGraphHotelsBookingItemSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * starting date of stay
     * in the format “year-month-date”
     * example:
     * 2019-11-15
     */
    date_from?: string | null;
    /**
     * ending date of stay
     * in the format “year-month-date”
     * example:
     * 2019-11-17
     */
    date_to?: string | null;
    /**
     * google defined data attribute ID
     * example:
     * action:listen_artist
     */
    data_attrid?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<KnowledgeGraphHotelsBookingElement | null> | null;
};

export type KnowledgeGraphExpandedItemSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * google defined data attribute ID
     * example:
     * action:listen_artist
     */
    data_attrid?: string | null;
    /**
     * expanded element
     */
    expanded_element?: Array<KnowledgeGraphExpandedElement | null> | null;
};

export type KnowledgeGraphPartItemSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * google defined data attribute ID
     * example:
     * action:listen_artist
     */
    data_attrid?: string | null;
    /**
     * reference text
     * text snippet from the page that was used to generate the ai_overview_element
     */
    text?: string | null;
    /**
     * website links featured in the element
     */
    links?: Array<LinkElement | null> | null;
};

export type KnowledgeGraphShoppingItemSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * google defined data attribute ID
     * example:
     * action:listen_artist
     */
    data_attrid?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<KnowledgeGraphShoppingElement | null> | null;
};

export type KnowledgeGraphAiOverviewItemSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * indicates whether the element is loaded asynchronically
     * if true, the ai_overview element is loaded asynchronically;
     * if false, the ai_overview element is loaded from cache
     */
    asynchronous_ai_overview?: boolean | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<BaseSerpApiAiOverviewElementItem | null> | null;
    /**
     * references relevant to the element
     * includes references to webpages that were used to generate the ai_overview_element
     */
    references?: Array<AiModeAiOverviewReferenceInfo | null> | null;
};

export type AiOverviewSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * indicates whether the element is loaded asynchronically
     * if true, the ai_overview element is loaded asynchronically;
     * if false, the ai_overview element is loaded from cache;
     */
    asynchronous_ai_overview?: boolean | null;
    /**
     * content of the element in markdown format
     * the text of the ai_overview formatted in the markdown markup language
     */
    markdown?: string | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<BaseSerpApiAiOverviewElementItem | null> | null;
    /**
     * references relevant to the element
     * includes references to webpages that were used to generate the ai_overview_element
     */
    references?: Array<AiModeAiOverviewReferenceInfo | null> | null;
};

export type ThirdPartyReviewsSerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values;
     * positions of elements with different type values are omitted from rank_group;
     * always equals 0 for desktop
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     * always equals 0 for desktop
     */
    rank_absolute?: number | null;
    /**
     * the number of reviews
     */
    reviews_count?: number | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * the element’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
};

export type SerpGoogleOrganicTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * answer_box, app, carousel, multi_carousel, featured_snippet, google_flights, google_reviews, third_party_reviews, google_posts, images, jobs, knowledge_graph, local_pack, hotels_pack, map, organic, paid, people_also_ask, related_searches, people_also_search, shopping, top_stories, twitter, video, events, mention_carousel, recipes, top_sights, scholarly_articles, popular_products, podcasts, questions_and_answers, find_results_on, stocks_box, visual_stories, commercial_units, local_services, google_hotels, math_solver, currency_box,product_considerations, found_on_web, short_videos, refine_products, explore_brands, perspectives, discussions_and_forums, compare_sites, courses, ai_overview
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * total search results pages retrieved
     * total number of retrieved SERPs in the result
     */
    pages_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains arrays of elements available in the list
     */
    items?: Array<BaseSerpApiElementItem | null> | null;
};

export type SerpGoogleOrganicTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleOrganicTaskGetAdvancedResultInfo | null> | null;
};

export type SerpGoogleOrganicTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleOrganicTaskGetAdvancedTaskInfo | null> | null;
};

export type HtmlItemInfo = {
    /**
     * serial number of the returned HTML page
     */
    page?: number | null;
    /**
     * date and time when the HTML page was scanned
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    date?: string | null;
    /**
     * HTML page
     */
    html?: string | null;
};

export type SerpGoogleOrganicTaskGetHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpGoogleOrganicTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleOrganicTaskGetHtmlResultInfo | null> | null;
};

export type SerpGoogleOrganicTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleOrganicTaskGetHtmlTaskInfo | null> | null;
};

export type SerpGoogleOrganicLiveRegularRequestInfo = {
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://www.google.co.uk/search?q=%20rank%20tracker%20api&hl=en&gl=GB&uule=w+CAIQIFISCXXeIa8LoNhHEZkq1d1aOpZS
     */
    url?: string | null;
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * if this field contains such parameters as ‘allinanchor:’, ‘allintext:’, ‘allintitle:’, ‘allinurl:’, ‘define:’, ‘filetype:’, ‘id:’, ‘inanchor:’, ‘info:’, ‘intext:’, ‘intitle:’, ‘inurl:’, ‘link:’, ‘site:’, the charge per task will be multiplied by 5
     * Note: queries containing the ‘cache:’ parameter are not supported and will return a validation error
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9 (mm)
     * the maximum value for “radius”: 199999 (mm)
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * can take the values:desktop, mobile
     * default value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * if you specify desktop in the device field, choose from the following values: windows, macos
     * default value: windows
     * if you specify mobile in the device field, choose from the following values: android, ios
     * default value: android
     */
    os?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * google.co.uk, google.com.au, google.de, etc.
     */
    se_domain?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 10
     * max value: 700
     * Your account will be billed per each SERP containing up to 10 results;
     * Setting depth above 10 may result in additional charges if the search engine returns more than 10 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * target domain, subdomain, or webpage to get results for
     * optional field
     * a domain or a subdomain should be specified without https:// and www.
     * note that the results of target-specific tasks will only include SERP elements that contain a url string;
     * you can also use a wildcard (‘*’) character to specify the search pattern in SERP and narrow down the results;
     * examples:
     * example.com  – returns results for the website’s home page with URLs, such as https://example.com, or https://www.example.com/, or https://example.com/;
     * example.com* – returns results for the domain, including all its pages;
     * *example.com* – returns results for the entire domain, including all its pages and subdomains;
     * *example.com  – returns results for the home page regardless of the subdomain, such as https://en.example.com;
     * example.com/example-page  – returns results for the exact URL;
     * example.com/example-page*  – returns results for all domain’s URLs that start with the specified string
     */
    target?: string | null;
    /**
     * display related results
     * optional field
     * if set to true, the related_result element in the response will be provided as a snippet of its parent organic result;
     * if set to false, the related_result element will be provided as a separate organic result;
     * default value: true
     */
    group_organic_results?: boolean | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * max value: 100
     * Note: you will be charged for each page crawled (10 organic results per page);
     * learn more about pricing on our Pricing page;
     * Note#2: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * additional parameters of the search query
     * optional field
     * get the list of available parameters and additional details here
     */
    search_param?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpGoogleOrganicLiveRegularResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided exact results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results found in SERP
     * contains types of all search results (items) found in the returned SERP
     * possible item types:
     * answer_box, app, carousel, multi_carousel, featured_snippet, google_flights, google_reviews, images, jobs, knowledge_graph, local_pack, map, organic, paid, people_also_ask, related_searches, people_also_search, shopping, top_stories, twitter, video, events, mention_carousel, ai_overview
     * note that this array contains all types of search results found in the returned SERP;
     * however, this endpoint provides data for featured_snippet, organic and paid types only
     * to get all items (inlcuding SERP features and rich snippets) found in the returned SERP, please refer to the Google Organiс Advanced SERP endpoint
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * total search results pages retrieved
     * total number of retrieved SERPs in the result
     */
    pages_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items in SERP
     */
    items?: Array<BaseSerpApiElementItem | null> | null;
};

export type SerpGoogleOrganicLiveRegularTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleOrganicLiveRegularResultInfo | null> | null;
};

export type SerpGoogleOrganicLiveRegularResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleOrganicLiveRegularTaskInfo | null> | null;
};

export type SerpGoogleOrganicLiveAdvancedRequestInfo = {
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * if this field contains such parameters as ‘allinanchor:’, ‘allintext:’, ‘allintitle:’, ‘allinurl:’, ‘define:’, ‘definition:’, ‘filetype:’, ‘id:’, ‘inanchor:’, ‘info:’, ‘intext:’, ‘intitle:’, ‘inurl:’, ‘link:’, ‘site:’, the charge per task will be multiplied by 5
     * Note: queries containing the ‘cache:’ parameter are not supported and will return a validation error
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://www.google.co.uk/search?q=%20rank%20tracker%20api&hl=en&gl=GB&uule=w+CAIQIFISCXXeIa8LoNhHEZkq1d1aOpZS
     */
    url?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 10
     * max value: 700
     * Your account will be billed per each SERP containing up to 10 results;
     * Setting depth above 10 may result in additional charges if the search engine returns more than 10 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * max value: 100
     * Note: you will be charged for each page crawled (10 organic results per page);
     * learn more about pricing on our Pricing page;
     * Note#2: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * optional field if you specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9 (mm)
     * the maximum value for “radius”: 199999 (mm)
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * optional field if you specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * optional field if you specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * google.co.uk, google.com.au, google.de, etc.
     */
    se_domain?: string | null;
    /**
     * device type
     * optional field
     * can take the values:desktop, mobile
     * default value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * if you specify desktop in the device field, choose from the following values: windows, macos
     * default value: windows
     * if you specify mobile in the device field, choose from the following values: android, ios
     * default value: android
     */
    os?: string | null;
    /**
     * target domain, subdomain, or webpage to get results for
     * optional field
     * a domain or a subdomain should be specified without https:// and www.
     * note that the results of target-specific tasks will only include SERP elements that contain a url string;
     * you can also use a wildcard (‘*’) character to specify the search pattern in SERP and narrow down the results;
     * examples:
     * example.com  – returns results for the website’s home page with URLs, such as https://example.com, or https://www.example.com/, or https://example.com/;
     * example.com* – returns results for the domain, including all its pages;
     * *example.com* – returns results for the entire domain, including all its pages and subdomains;
     * *example.com  – returns results for the home page regardless of the subdomain, such as https://en.example.com;
     * example.com/example-page  – returns results for the exact URL;
     * example.com/example-page*  – returns results for all domain’s URLs that start with the specified string
     */
    target?: string | null;
    /**
     * display related results
     * optional field
     * if set to true, the related_result element in the response will be provided as a snippet of its parent organic result;
     * if set to false, the related_result element will be provided as a separate organic result;
     * default value: true
     */
    group_organic_results?: boolean | null;
    /**
     * calcualte pixel rankings for SERP elements in advanced results
     * optional field
     * pixel ranking refers to the distance between the result snippet and top left corner of the screen;
     * Visit Help Center to learn more>>
     * by default, the parameter is set to false;
     * Note: you will be charged extra $0.002 for using this parameter
     */
    calculate_rectangles?: boolean | null;
    /**
     * browser screen width
     * optional field
     * you can set a custom browser screen width to calculate pixel rankings for a particular device;
     * by default, the parameter is set to:
     * 1920 for desktop;
     * 360 for mobile on android;
     * 375 for mobile on iOS;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_width?: number | null;
    /**
     * browser screen height
     * optional field
     * you can set a custom browser screen height to calculate pixel rankings for a particular device;
     * by default, the parameter is set to:
     * 1080 for desktop;
     * 640 for mobile on android;
     * 812 for mobile on iOS;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_height?: number | null;
    /**
     * browser screen resolution ratio
     * optional field
     * you can set a custom browser screen resolution ratio to calculate pixel rankings for a particular device;
     * possible values: from 1 to 3;
     * by default, the parameter is set to:
     * 1 for desktop;
     * 3 for mobile on android;
     * 3 for mobile on iOS;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_resolution_ratio?: number | null;
    /**
     * clicks on the corresponding element
     * optional field
     * specify the click depth on the people_also_ask element to get additional people_also_ask_element items;
     * Note your account will be billed $0.00015 extra for each click;
     * if the element is absent or we perform fewer clicks than you specified, all extra charges will be returned to your account balance
     * possible values: from 1 to 4
     */
    people_also_ask_click_depth?: number | null;
    /**
     * load asynchronous ai overview
     * optional field
     * set to true to obtain ai_overview items is SERPs even if they are loaded asynchronically;
     * if set to false, you will only obtain ai_overview items from cache;
     * default value: false
     * Note: you will be charged extra $0.002 for using this parameter;
     * if the element is absent or contains "asynchronous_ai_overview": false, all extra charges will be returned to your account balance
     */
    load_async_ai_overview?: boolean | null;
    /**
     * additional parameters of the search query
     * optional field
     * get the list of available parameters and additional details here
     */
    search_param?: string | null;
    /**
     * remove specific parameters from URLs
     * optional field
     * using this field, you can specify up to 10 parameters to remove from URLs in the result
     * example:
     * "remove_from_url": ["srsltid"]
     * Note: if the target field is specified, the specified URL parameters will be removed before the search
     */
    remove_from_url?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpGoogleOrganicLiveAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * answer_box, app, carousel, multi_carousel, featured_snippet, google_flights, google_reviews, third_party_reviews, google_posts, images, jobs, knowledge_graph, local_pack, hotels_pack, map, organic, paid, people_also_ask, related_searches, people_also_search, shopping, top_stories, twitter, video, events, mention_carousel, recipes, top_sights, scholarly_articles, popular_products, podcasts, questions_and_answers, find_results_on, stocks_box, visual_stories, commercial_units, local_services, google_hotels, math_solver, currency_box,product_considerations, found_on_web, short_videos, refine_products, explore_brands, perspectives, discussions_and_forums, compare_sites, courses, ai_overview
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * total search results pages retrieved
     * total number of retrieved SERPs in the result
     */
    pages_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains arrays of elements available in the list
     */
    items?: Array<BaseSerpApiElementItem | null> | null;
};

export type SerpGoogleOrganicLiveAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleOrganicLiveAdvancedResultInfo | null> | null;
};

export type SerpGoogleOrganicLiveAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleOrganicLiveAdvancedTaskInfo | null> | null;
};

export type SerpGoogleOrganicLiveHtmlRequestInfo = {
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://www.google.co.uk/search?q=%20rank%20tracker%20api&hl=en&gl=GB&uule=w+CAIQIFISCXXeIa8LoNhHEZkq1d1aOpZS
     */
    url?: string | null;
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * if this field contains such parameters as ‘allinanchor:’, ‘allintext:’, ‘allintitle:’, ‘allinurl:’, ‘define:’, ‘filetype:’, ‘id:’, ‘inanchor:’, ‘info:’, ‘intext:’, ‘intitle:’, ‘inurl:’, ‘link:’, ‘related:’, ‘site:’, the charge per task will be multiplied by 5
     * Note: queries containing the ‘cache:’ parameter are not supported and will return a validation error
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9 (mm)
     * the maximum value for “radius”: 199999 (mm)
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * can take the values:desktop, mobile
     * default value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * if you specify desktop in the device field, choose from the following values: windows, macos
     * default value: windows
     * if you specify mobile in the device field, choose from the following values: android, ios
     * default value: android
     */
    os?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * google.co.uk, google.com.au, google.de, etc.
     */
    se_domain?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 10
     * max value: 700
     * Your account will be billed per each SERP containing up to 10 results;
     * Setting depth above 10 may result in additional charges if the search engine returns more than 10 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * max value: 100
     * Note: you will be charged for each page crawled (10 organic results per page);
     * learn more about pricing on our Pricing page;
     * Note#2: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * additional parameters of the search query
     * optional field
     * get the list of available parameters and additional details here
     */
    search_param?: string | null;
    /**
     * load asynchronous ai overview
     * optional field
     * set to true to obtain ai_overview items is SERPs even if they are loaded asynchronically;
     * if set to false, you will only obtain ai_overview items from cache;
     * default value: false
     * Note your account will be billed $0.002 extra for each request;
     * if the element is absent or contains "asynchronous_ai_overview": false, all extra charges will be returned to your account balance
     */
    load_async_ai_overview?: boolean | null;
    /**
     * expand ai overview
     * optional field
     * set to true to expand the ai_overview item;
     * default value: false
     */
    expand_ai_overview?: boolean | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpGoogleOrganicLiveHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpGoogleOrganicLiveHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleOrganicLiveHtmlResultInfo | null> | null;
};

export type SerpGoogleOrganicLiveHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleOrganicLiveHtmlTaskInfo | null> | null;
};

export type SerpGoogleAiModeLanguagesResultInfo = {
    /**
     * language name
     */
    language_name?: string | null;
    /**
     * language code according to ISO 639-1
     */
    language_code?: string | null;
};

export type SerpGoogleAiModeLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleAiModeLanguagesResultInfo | null> | null;
};

export type SerpGoogleAiModeLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleAiModeLanguagesTaskInfo | null> | null;
};

export type SerpGoogleAiModeTaskPostRequestInfo = {
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * Note: check  Google Search Help for the list of countries where AI Mode is currently available
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * Note: check  Google Search Help for the list of countries where AI Mode is currently available
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,zoom” format
     * if “zoom” is not specified, 9z will be applied as a default value
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “zoom”: 4z
     * the maximum value for “zoom”: 18z
     * example:
     * 52.6178549,-155.352142,18z
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code;
     * if you use this field, you don’t need to specify language_code;
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/ai_mode/languages;
     * Note: currently, the only supported value is English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name;
     * if you use this field, you don’t need to specify language_name;
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/ai_mode/languages
     * Note: currently, the only supported value is en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * can take the values:desktop, mobile
     * default value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * if you specify desktop in the device field, choose from the following values: windows, macos
     * default value: windows
     * if you specify mobile in the device field, choose from the following values: android, ios
     * default value: android
     */
    os?: string | null;
    /**
     * calculate pixel rankings for SERP elements in advanced results
     * optional field
     * pixel ranking refers to the distance between the result snippet and top left corner of the screen;
     * Visit Help Center to learn more>>
     * by default, the parameter is set to false
     * Note: if set to true, the charge per task will be multiplied by 2
     */
    calculate_rectangles?: boolean | null;
    /**
     * browser screen width
     * optional field
     * you can set a custom browser screen width to calculate pixel rankings for a particular device;
     * by default, the parameter is set to:
     * 1920 for desktop;
     * 360 for mobile on android;
     * 375 for mobile on iOS;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_width?: number | null;
    /**
     * browser screen height
     * optional field
     * you can set a custom browser screen height to calculate pixel rankings for a particular device;
     * by default, the parameter is set to:
     * 1080 for desktop;
     * 640 for mobile on android;
     * 812 for mobile on iOS;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_height?: number | null;
    /**
     * browser screen resolution ratio
     * optional field
     * you can set a custom browser screen resolution ratio to calculate pixel rankings for a particular device;
     * by default, the parameter is set to:
     * 1 for desktop;
     * 3 for mobile on android;
     * 3 for mobile on iOS;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_resolution_ratio?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the function you used for setting a task
     * possible values:
     * advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpGoogleAiModeTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpGoogleAiModeTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleAiModeTaskPostTaskInfo | null> | null;
};

export type SerpGoogleAiModeTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: ai_mode
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleAiModeTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleAiModeTasksReadyResultInfo | null> | null;
};

export type SerpGoogleAiModeTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleAiModeTasksReadyTaskInfo | null> | null;
};

export type SerpGoogleAiModeTasksFixedResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: ai_mode
     */
    se_type?: string | null;
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleAiModeTasksFixedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleAiModeTasksFixedResultInfo | null> | null;
};

export type SerpGoogleAiModeTasksFixedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleAiModeTasksFixedTaskInfo | null> | null;
};

export type AiModeLinkElementInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of the element
     */
    title?: string | null;
    /**
     * link description
     */
    description?: string | null;
    /**
     * search URL with refinement parameters
     */
    url?: string | null;
    /**
     * domain in SERP
     */
    domain?: string | null;
};

export type SerpApiAiModeAiOverviewElementItem = (BaseSerpApiAiModeAiOverviewElementItem | null) & {
    /**
     * title of the element
     */
    title?: string | null;
    /**
     * text or description of the element in SERP
     */
    text?: string | null;
    /**
     * content of the element in markdown format
     */
    markdown?: string | null;
    /**
     * website links featured in the element
     */
    links?: Array<AiModeLinkElementInfo | null> | null;
    /**
     * images of the element
     * if there are none, equals null
     */
    images?: Array<AiModeImagesElementInfo | null> | null;
    /**
     * references relevant to the element
     * includes references to webpages that were used to generate the ai_overview_element
     */
    references?: Array<AiModeAiOverviewReferenceInfo | null> | null;
};

export type AiModeAiOverviewExpandedComponentInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * reference page title
     */
    title?: string | null;
    /**
     * additional text of the element in SERP
     */
    text?: string | null;
    /**
     * content of the element in markdown format
     */
    markdown?: string | null;
    /**
     * images of the component
     * if there are none, equals null
     */
    images?: Array<AiModeImagesElementInfo | null> | null;
    /**
     * sitelinks
     * the links shown below some of Google’s search results
     * if there are none, equals null
     */
    links?: Array<AiModeLinkElementInfo | null> | null;
    /**
     * references relevant to the element
     * includes references to webpages that were used to generate the ai_overview_element
     */
    references?: Array<AiModeAiOverviewReferenceInfo | null> | null;
};

export type SerpApiAiModeAiOverviewExpandedElementItem = (BaseSerpApiAiModeAiOverviewElementItem | null) & {
    /**
     * link anchor text
     */
    title?: string | null;
    /**
     * reference text
     * text snippet from the page that was used to generate the ai_overview_element
     */
    text?: string | null;
    /**
     * array of components of the element
     */
    components?: Array<AiModeAiOverviewExpandedComponentInfo | null> | null;
    /**
     * additional references relevant to the item
     * includes references to webpages that may have been used to generate the ai_overview
     */
    references?: Array<AiModeAiOverviewReferenceInfo | null> | null;
};

export type SerpApiAiModeAiOverviewVideoElementItem = (BaseSerpApiAiModeAiOverviewElementItem | null) & {
    /**
     * title of the element in SERP
     */
    title?: string | null;
    /**
     * additional information for the video
     */
    snippet?: string | null;
    /**
     * relevant URL
     */
    url?: string | null;
    /**
     * domain name of the reference
     */
    domain?: string | null;
    /**
     * URL of the image
     * the URL leading to the image on the original resource or DataForSEO storage (in case the original source is not available)
     */
    image_url?: string | null;
    /**
     * reference source name or title
     */
    source?: string | null;
    /**
     * date when the video was published or indexed
     * example:
     * Apr 26, 2024
     */
    date?: string | null;
    /**
     * date and time when the video was published or indexed
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
};

export type AiModeTableInfo = {
    /**
     * content in the header of the table
     */
    table_header?: Array<string | null> | null;
    /**
     * array of contents of the table present in the element
     * each array represents the table row
     */
    table_content?: Array<Array<string | null> | null> | null;
};

export type SerpApiAiModeAiOverviewTableElementItem = (BaseSerpApiAiModeAiOverviewElementItem | null) & {
    /**
     * text of the component in the markdwon format
     */
    markdown?: string | null;
    /**
     * table present in the element
     * the header and content of the table present in the element
     */
    table?: AiModeTableInfo | null;
    /**
     * references relevant to the element
     */
    references?: Array<AiModeAiOverviewReferenceInfo | null> | null;
};

export type AiModeAiOverviewInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    page?: number | null;
    /**
     * the alignment of the element in SERP
     * can take the following values:
     * left, right
     */
    position?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
    /**
     * content of the element in markdown format
     * the text of the ai_overview formatted in the markdown markup language
     */
    markdown?: string | null;
    /**
     * items of the element
     */
    items?: Array<BaseSerpApiAiModeAiOverviewElementItem | null> | null;
    /**
     * additional references relevant to the item
     * includes references to webpages that may have been used to generate the ai_overview
     */
    references?: Array<AiModeAiOverviewReferenceInfo | null> | null;
    /**
     * rectangle parameters
     * contains cartesian coordinates and pixel dimensions of the result’s snippet in SERP
     * equals null if calculate_rectangles in the POST request is not set to true
     */
    rectangle?: AiModeRectangleInfo | null;
};

export type SerpGoogleAiModeTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided exact results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * ai_overview
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<AiModeAiOverviewInfo | null> | null;
};

export type SerpGoogleAiModeTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleAiModeTaskGetAdvancedResultInfo | null> | null;
};

export type SerpGoogleAiModeTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleAiModeTaskGetAdvancedTaskInfo | null> | null;
};

export type SerpGoogleAiModeTaskGetHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpGoogleAiModeTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleAiModeTaskGetHtmlResultInfo | null> | null;
};

export type SerpGoogleAiModeTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleAiModeTaskGetHtmlTaskInfo | null> | null;
};

export type SerpGoogleAiModeLiveAdvancedRequestInfo = {
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * Note: check  Google Search Help for the list of countries where AI Mode is currently available
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * Note: check  Google Search Help for the list of countries where AI Mode is currently available
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,zoom” format
     * if “zoom” is not specified, 9z will be applied as a default value
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “zoom”: 4z
     * the maximum value for “zoom”: 18z
     * example:
     * 52.6178549,-155.352142,18z
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code;
     * if you use this field, you don’t need to specify language_code;
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/ai_mode/languages;
     * Note: currently, the only supported value is English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name;
     * if you use this field, you don’t need to specify language_name;
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/ai_mode/languages
     * Note: currently, the only supported value is en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * can take the values:desktop, mobile
     * default value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * if you specify desktop in the device field, choose from the following values: windows, macos
     * default value: windows
     * if you specify mobile in the device field, choose from the following values: android, ios
     * default value: android
     */
    os?: string | null;
    /**
     * calculate pixel rankings for SERP elements in advanced results
     * optional field
     * pixel ranking refers to the distance between the result snippet and top left corner of the screen;
     * Visit Help Center to learn more>>
     * by default, the parameter is set to false
     * Note: if set to true, the charge per task will be multiplied by 2
     */
    calculate_rectangles?: boolean | null;
    /**
     * browser screen width
     * optional field
     * you can set a custom browser screen width to calculate pixel rankings for a particular device;
     * by default, the parameter is set to:
     * 1920 for desktop;
     * 360 for mobile on android;
     * 375 for mobile on iOS;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_width?: number | null;
    /**
     * browser screen height
     * optional field
     * you can set a custom browser screen height to calculate pixel rankings for a particular device;
     * by default, the parameter is set to:
     * 1080 for desktop;
     * 640 for mobile on android;
     * 812 for mobile on iOS;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_height?: number | null;
    /**
     * browser screen resolution ratio
     * optional field
     * you can set a custom browser screen resolution ratio to calculate pixel rankings for a particular device;
     * by default, the parameter is set to:
     * 1 for desktop;
     * 3 for mobile on android;
     * 3 for mobile on iOS;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_resolution_ratio?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpGoogleAiModeLiveAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided exact results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * ai_overview
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<AiModeAiOverviewInfo | null> | null;
};

export type SerpGoogleAiModeLiveAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleAiModeLiveAdvancedResultInfo | null> | null;
};

export type SerpGoogleAiModeLiveAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleAiModeLiveAdvancedTaskInfo | null> | null;
};

export type SerpGoogleAiModeLiveHtmlRequestInfo = {
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://www.google.co.uk/search?q=%20rank%20tracker%20api&hl=en&gl=GB&uule=w+CAIQIFISCXXeIa8LoNhHEZkq1d1aOpZS
     */
    url?: string | null;
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * if this field contains such parameters as ‘allinanchor:’, ‘allintext:’, ‘allintitle:’, ‘allinurl:’, ‘define:’, ‘filetype:’, ‘id:’, ‘inanchor:’, ‘info:’, ‘intext:’, ‘intitle:’, ‘inurl:’, ‘link:’, ‘related:’, ‘site:’, the charge per task will be multiplied by 5
     * Note: queries containing the ‘cache:’ parameter are not supported and will return a validation error
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9 (mm)
     * the maximum value for “radius”: 199999 (mm)
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code;
     * if you use this field, you don’t need to specify language_code;
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/ai_mode/languages;
     * Note: currently, the only supported value is English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name;
     * if you use this field, you don’t need to specify language_name;
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/ai_mode/languages
     * Note: currently, the only supported value is en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * can take the values:desktop, mobile
     * default value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * if you specify desktop in the device field, choose from the following values: windows, macos
     * default value: windows
     * if you specify mobile in the device field, choose from the following values: android, ios
     * default value: android
     */
    os?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * google.co.uk, google.com.au, google.de, etc.
     */
    se_domain?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 100
     * max value: 700
     * Note: your account will be billed per each SERP containing up to 100 results;
     * thus, setting a depth above 100 may result in additional charges if the search engine returns more than 100 results;
     * if the specified depth is higher than the number of results in the response, the difference will be refunded automatically to your account balance
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * max value: 100
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * additional parameters of the search query
     * optional field
     * get the list of available parameters and additional details here
     */
    search_param?: string | null;
    /**
     * load asynchronous ai overview
     * optional field
     * set to true to obtain ai_overview items is SERPs even if they are loaded asynchronically;
     * if set to false, you will only obtain ai_overview items from cache;
     * default value: false
     * Note your account will be billed $0.002 extra for each request;
     * if the element is absent or contains "asynchronous_ai_overview": false, all extra charges will be returned to your account balance
     */
    load_async_ai_overview?: boolean | null;
    /**
     * expand ai overview
     * optional field
     * set to true to expand the ai_overview item;
     * default value: false
     */
    expand_ai_overview?: boolean | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpGoogleAiModeLiveHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpGoogleAiModeLiveHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleAiModeLiveHtmlResultInfo | null> | null;
};

export type SerpGoogleAiModeLiveHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleAiModeLiveHtmlTaskInfo | null> | null;
};

export type SerpGoogleMapsTaskPostRequestInfo = {
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://google.com/maps/search/pizza/@37.09024,-95.712891,4z
     */
    url?: string | null;
    /**
     * keyword
     * required field
     * you can specify up to 700 characters  in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * if this field contains such parameters as ‘allinanchor:’, ‘allintext:’, ‘allintitle:’, ‘allinurl:’, ‘define:’, ‘filetype:’, ‘id:’, ‘inanchor:’, ‘info:’, ‘intext:’, ‘intitle:’, ‘inurl:’, ‘link:’, ‘related:’, ‘site:’, the charge per task will be multiplied by 5
     * Note: queries containing the ‘cache:’ parameter are not supported and will return a validation error
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,zoom” format
     * if “zoom” is not specified, 17z will be applied as a default value
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “zoom”: 3z
     * the maximum value for “zoom”: 21z
     * example:
     * 52.6178549,-155.352142,20z
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * can take the values:desktop, mobile
     * default value: desktop
     * note: for mobile device, only 20 results are returned for every SERP
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * if you specify desktop in the device field, choose from the following values: windows, macos
     * default value: windows
     * if you specify mobile in the device field, choose from the following values: android, ios
     * default value: android
     */
    os?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * google.co.uk, google.com.au, google.de, etc.
     */
    se_domain?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 100
     * max value: 700
     * Your account will be billed per each SERP containing up to 100 results;
     * Setting depth above 100 may result in additional charges if the search engine returns more than 100 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * max value: 100
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * search this area
     * optional field
     * can take the values:true, false
     * default value: trueif set to false, the search_this_area mode will be turned off
     * Note: if the search_this_area mode is turned off, Google Maps listings might contain results beyond the displayed area
     */
    search_this_area?: boolean | null;
    /**
     * search places mode
     * optional field
     * the search places mode allows to obtain Google Maps results on a certain place (e.g., Apple Store in New York)
     * however, due to the pecularities of our data mining algorithm, this mode might interfere with some local-intent queries – and display results for a location that is different from that specified in the request;
     * to prevent this interference and obtain correct results for keywords with local intent you may set this parameter to false;default value: true
     * Note: if the search_places mode is turned off and no results were found in the search area, the results array will be empty
     */
    search_places?: boolean | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the function you used for setting a task
     * possible values:
     * advanced
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpGoogleMapsTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpGoogleMapsTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleMapsTaskPostTaskInfo | null> | null;
};

export type SerpGoogleMapsTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: maps
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleMapsTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleMapsTasksReadyResultInfo | null> | null;
};

export type SerpGoogleMapsTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleMapsTasksReadyTaskInfo | null> | null;
};

export type SerpGoogleMapsTasksFixedResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: maps
     */
    se_type?: string | null;
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleMapsTasksFixedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleMapsTasksFixedResultInfo | null> | null;
};

export type SerpGoogleMapsTasksFixedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleMapsTasksFixedTaskInfo | null> | null;
};

export type AddressInfo = {
    /**
     * administrative unit or district the local establishment belongs to
     */
    borough?: string | null;
    /**
     * street address of the local establishment
     */
    address?: string | null;
    /**
     * name of the city where the local establishment is located
     */
    city?: string | null;
    /**
     * ZIP code of the local establishment
     */
    zip?: string | null;
    /**
     * DMA region the local establishment belongs to
     */
    region?: string | null;
    /**
     * ISO country code of the local establishment
     */
    country_code?: string | null;
};

export type WorkHours = {
    /**
     * work hours timetable
     */
    timetable?: {
        [key: string]: Array<WorkDayInfo | null> | null;
    } | null;
    /**
     * current status of the establishment
     * indicates whether the establishment is opened or closed
     */
    current_status?: string | null;
};

export type LocalJustificationInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * text snippet of local justification
     */
    text?: string | null;
};

export type SerpApiMapsSearchElementItem = (BaseSerpApiGoogleMapsElementItem | null) & {
    /**
     * original title of the element
     * original title not translated by Google
     */
    original_title?: string | null;
    /**
     * URL of the preferred contact page
     */
    contact_url?: string | null;
    /**
     * URL of the user’s or entity’s Local Guides profile, if available
     */
    contributor_url?: string | null;
    /**
     * URL in the ‘book online’ button of the element
     * URL directing users to the online booking or order page of the business entity
     */
    book_online_url?: string | null;
    /**
     * hotel class rating
     * class ratings range between 1-5 stars, learn more
     * if there is no hotel class rating information, the value will be null
     */
    hotel_rating?: number | null;
    /**
     * property price level
     * can take values: inexpensive, moderate, expensive, very_expensive
     * if there is no price level information, the value will be null
     */
    price_level?: string | null;
    /**
     * element snippet
     * contains the address and other information about the local establishment featured in the element
     */
    snippet?: string | null;
    /**
     * address line
     * address of the local establishment featured in the element
     */
    address?: string | null;
    /**
     * object containing address components of the local establishment
     */
    address_info?: AddressInfo | null;
    /**
     * unique place identifier
     * place id of the local establishment featured in the element
     */
    place_id?: string | null;
    /**
     * phone number
     * phone number of the local establishment featured in the element
     */
    phone?: string | null;
    /**
     * URL of the main image featured in Google My Business profile
     */
    main_image?: string | null;
    /**
     * total count of images featured in Google My Business profile
     */
    total_photos?: number | null;
    /**
     * business category
     * Google My Business general category that best describes the services provided by the business entity
     */
    category?: string | null;
    /**
     * additional business categories
     * additional Google My Business categories that describe the services provided by the business entity in more detail
     */
    additional_categories?: Array<string | null> | null;
    /**
     * global category IDs
     * universal category IDs that do not change based on the selected country
     */
    category_ids?: Array<string | null> | null;
    /**
     * open hours
     * information about work hours of the local establishment
     */
    work_hours?: WorkHours | null;
    /**
     * the unique identifier of the element in SERP
     */
    feature_id?: string | null;
    /**
     * google-defined client id
     * unique id of a local establishment;
     * can be used with Google Reviews API to get a full list of reviews
     */
    cid?: string | null;
    /**
     * latitude coordinate of the local establishments in google maps
     * example:
     * "latitude": 51.584091
     */
    latitude?: number | null;
    /**
     * longitude coordinate of the local establishment in google maps
     * example:
     * "longitude": -0.31365919999999997
     */
    longitude?: number | null;
    /**
     * indicates whether ownership of this local establishment is claimed
     */
    is_claimed?: boolean | null;
    /**
     * Google local justifications
     * snippets of text that “justify” why the business is showing up for search query
     */
    local_justifications?: Array<LocalJustificationInfo | null> | null;
    /**
     * indicates whether this local establishment is a directory
     */
    is_directory_item?: boolean | null;
};

export type SerpApiMapsPaidItemElementItem = (BaseSerpApiGoogleMapsElementItem | null) & {
    [key: string]: unknown;
};

export type SerpGoogleMapsTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided exact results
     * Note: to check location-specific results, follow the provided check url, scroll up and down, then click the “Search this area” button
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * maps_search, maps_paid_item
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items of the element
     */
    items?: Array<BaseSerpApiGoogleMapsElementItem | null> | null;
};

export type SerpGoogleMapsTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleMapsTaskGetAdvancedResultInfo | null> | null;
};

export type SerpGoogleMapsTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleMapsTaskGetAdvancedTaskInfo | null> | null;
};

export type SerpGoogleMapsLiveAdvancedRequestInfo = {
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://google.com/maps/search/pizza/@37.09024,-95.712891,4z
     */
    url?: string | null;
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * if this field contains such parameters as ‘allinanchor:’, ‘allintext:’, ‘allintitle:’, ‘allinurl:’, ‘define:’, ‘filetype:’, ‘id:’, ‘inanchor:’, ‘info:’, ‘intext:’, ‘intitle:’, ‘inurl:’, ‘link:’, ‘related:’, ‘site:’, the charge per task will be multiplied by 5
     * Note: queries containing the ‘cache:’ parameter are not supported and will return a validation error
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,zoom” format
     * if “zoom” is not specified, 17z will be applied as a default value
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “zoom”: 3z
     * the maximum value for “zoom”: 21z
     * example:
     * 52.6178549,-155.352142,20z
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages  of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * can take the values:desktop, mobile
     * default value: desktop
     * note: for mobile device, only 20 results are returned for every SERP
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * if you specify desktop in the device field, choose from the following values: windows, macos
     * default value: windows
     * if you specify mobile in the device field, choose from the following values: android, ios
     * default value: android
     */
    os?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * google.co.uk, google.com.au, google.de, etc.
     */
    se_domain?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 100
     * max value: 700
     * Your account will be billed per each SERP containing up to 100 results;
     * Setting depth above 100 may result in additional charges if the search engine returns more than 100 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * max value: 100
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * search this area
     * optional field
     * can take the values:true, false
     * default value: true
     * if set to false, the search_this_area mode will be turned off
     * Note: if the search_this_area mode is turned off, Google Maps listings might contain results beyond the displayed area
     */
    search_this_area?: boolean | null;
    /**
     * search places mode
     * optional field
     * the search places mode allows to obtain Google Maps results on a certain place (e.g., Apple Store in New York)
     * however, due to the pecularities of our data mining algorithm, this mode might interfere with some local-intent queries – and display results for a location that is different from that specified in the request;
     * to prevent this interference and obtain correct results for keywords with local intent you may set this parameter to false;
     * default value: true
     * Note: if the search_places mode is turned off and no results were found in the search area, the results array will be empty
     */
    search_places?: boolean | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpGoogleMapsLiveAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided exact results
     * Note: to check location-specific results, follow the provided check url, scroll up and down, then click the “Search this area” button
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * maps_search, maps_paid_item
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items of the element
     */
    items?: Array<BaseSerpApiGoogleMapsElementItem | null> | null;
};

export type SerpGoogleMapsLiveAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleMapsLiveAdvancedResultInfo | null> | null;
};

export type SerpGoogleMapsLiveAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleMapsLiveAdvancedTaskInfo | null> | null;
};

export type SerpGoogleLocalFinderTaskPostRequestInfo = {
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,zoom” format
     * if “zoom” is not specified, 9z will be applied as a default value
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “zoom”: 4z
     * the maximum value for “zoom”: 18z
     * example:
     * 52.6178549,-155.352142,18z
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * can take the values:desktop, mobile
     * default value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * if you specify desktop in the device field, choose from the following values: windows, macos
     * default value: windows
     * if you specify mobile in the device field, choose from the following values: android, ios
     * default value: android
     */
    os?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value for desktop: 20
     * max value for desktop: 500
     * default value for mobile: 10
     * max value for mobile: 350
     * Your account will be billed per each SERP containing up to 20 results for desktop or up to 10 results for a mobile device;
     * Setting depth above 20 for desktop or above 10 for mobile may result in additional charges if the search engine returns more than 20 or 10 results respectively;
     * If the specified depth is higher than the number of results in the response, the difference will be refunded to your account balance automatically
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * filter results by minimum rating
     * optional field
     * possible values for desktop: 3.5, 4, 4.5;
     * possible values for mobile: 2, 2.5, 3, 3.5, 4, 4.5
     */
    min_rating?: number | null;
    /**
     * filter results by open hours
     * optional field
     * using this field, you can filter places in the results by the time a place is open for visitors
     * note that Google may also provide results that do not match this filter
     * possible values: "open_now", "24_hours", "$day_value", "$day_value;$time_value";
     * instead of $day_value use one of these values: "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday";
     * instead of $time_value use one of these values: "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23"
     * example: "tuesday;18"
     */
    time_filter?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the function you used for setting a task
     * possible values:
     * advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpGoogleLocalFinderTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpGoogleLocalFinderTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleLocalFinderTaskPostTaskInfo | null> | null;
};

export type SerpGoogleLocalFinderTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: local_finder
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleLocalFinderTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleLocalFinderTasksReadyResultInfo | null> | null;
};

export type SerpGoogleLocalFinderTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleLocalFinderTasksReadyTaskInfo | null> | null;
};

export type SerpGoogleLocalFinderTasksFixedResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: local_finder
     */
    se_type?: string | null;
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleLocalFinderTasksFixedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleLocalFinderTasksFixedResultInfo | null> | null;
};

export type SerpGoogleLocalFinderTasksFixedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleLocalFinderTasksFixedTaskInfo | null> | null;
};

export type SerpGoogleLocalFinderTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided exact results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * local_pack
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items of the element
     */
    items?: Array<LocalPackSerpElementItem | null> | null;
};

export type SerpGoogleLocalFinderTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleLocalFinderTaskGetAdvancedResultInfo | null> | null;
};

export type SerpGoogleLocalFinderTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleLocalFinderTaskGetAdvancedTaskInfo | null> | null;
};

export type SerpGoogleLocalFinderTaskGetHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpGoogleLocalFinderTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleLocalFinderTaskGetHtmlResultInfo | null> | null;
};

export type SerpGoogleLocalFinderTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleLocalFinderTaskGetHtmlTaskInfo | null> | null;
};

export type SerpGoogleLocalFinderLiveAdvancedRequestInfo = {
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,zoom” format
     * if “zoom” is not specified, 9z will be applied as a default value
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “zoom”: 4z
     * the maximum value for “zoom”: 18z
     * example:
     * 52.6178549,-155.352142,20z
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * can take the values:desktop, mobile
     * default value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * if you specify desktop in the device field, choose from the following values: windows, macos
     * default value: windows
     * if you specify mobile in the device field, choose from the following values: android, ios
     * default value: android
     */
    os?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value for desktop: 20
     * max value for desktop: 100
     * default value for mobile: 10
     * max value for mobile: 100
     * Your account will be billed per each SERP containing up to 20 results for desktop or up to 10 results for a mobile device;
     * Setting depth above 20 for desktop or above 10 for mobile may result in additional charges if the search engine returns more than 20 or 10 results respectively;;
     * If the specified depth is higher than the number of results in the response, the difference will be refunded to your account balance automatically
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * filter results by minimum rating
     * optional field
     * possible values for desktop: 3.5, 4, 4.5;
     * possible values for mobile: 2, 2.5, 3, 3.5, 4, 4.5
     */
    min_rating?: number | null;
    /**
     * filter results by open hours
     * optional field
     * using this field, you can filter places in the results by the time a place is open for visitors
     * note that Google may also provide results that do not match this filter
     * possible values: "open_now", "24_hours", "$day_value", "$day_value;$time_value";
     * instead of $day_value use one of these values: "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday";
     * instead of $time_value use one of these values: "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23"
     * example: "tuesday;18"
     */
    time_filter?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpGoogleLocalFinderLiveAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided exact results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * local_pack
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items of the element
     */
    items?: Array<LocalPackSerpElementItem | null> | null;
};

export type SerpGoogleLocalFinderLiveAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleLocalFinderLiveAdvancedResultInfo | null> | null;
};

export type SerpGoogleLocalFinderLiveAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleLocalFinderLiveAdvancedTaskInfo | null> | null;
};

export type SerpGoogleLocalFinderLiveHtmlRequestInfo = {
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”
     */
    keyword?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,zoom” format
     * if “zoom” is not specified, 9z will be applied as a default value
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “zoom”: 4z
     * the maximum value for “zoom”: 18z
     * example:
     * 52.6178549,-155.352142,20z
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * can take the values:desktop, mobile
     * default value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * if you specify desktop in the device field, choose from the following values: windows, macos
     * default value: windows
     * if you specify mobile in the device field, choose from the following values: android, ios
     * default value: android
     */
    os?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value for desktop: 20
     * max value for desktop: 100
     * default value for mobile: 10
     * max value for mobile: 100
     * Your account will be billed per each SERP containing up to 20 results for desktop or up to 10 results for a mobile device;
     * Setting depth above 20 for desktop or above 10 for mobile may result in additional charges if the search engine returns more than 20 or 10 results respectively;
     * If the specified depth is higher than the number of results in the response, the difference will be refunded to your account balance automatically
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * filter results by minimum rating
     * optional field
     * possible values for desktop: 3.5, 4, 4.5;
     * possible values for mobile: 2, 2.5, 3, 3.5, 4, 4.5
     */
    min_rating?: number | null;
    /**
     * filter results by open hours
     * optional field
     * using this field, you can filter places in the results by the time a place is open for visitors
     * note that Google may also provide results that do not match this filter
     * possible values: "open_now", "24_hours", "$day_value", "$day_value;$time_value";
     * instead of $day_value use one of these values: "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday";
     * instead of $time_value use one of these values: "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23"
     * example: "tuesday;18"
     */
    time_filter?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpGoogleLocalFinderLiveHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpGoogleLocalFinderLiveHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleLocalFinderLiveHtmlResultInfo | null> | null;
};

export type SerpGoogleLocalFinderLiveHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleLocalFinderLiveHtmlTaskInfo | null> | null;
};

export type SerpGoogleNewsTaskPostRequestInfo = {
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * if this field contains such parameters as ‘allinanchor:’, ‘allintext:’, ‘allintitle:’, ‘allinurl:’, ‘define:’, ‘filetype:’, ‘id:’, ‘inanchor:’, ‘info:’, ‘intext:’, ‘intitle:’, ‘inurl:’, ‘link:’, ‘related:’, ‘site:’, the charge per task will be multiplied by 5
     * Note: queries containing the ‘cache:’ parameter are not supported and will return a validation error
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields;
     * Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method;
     * example:
     * https://www.google.co.uk/search?q=%20rank%20tracker%20api&hl=en&gl=GB&uule=w+CAIQIFISCXXeIa8LoNhHEZkq1d1aOpZS
     */
    url?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9 (mm)
     * the maximum value for “radius”: 199999 (mm)
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device operating system
     * optional field
     * note that this API provides results for desktop only
     * choose from the following values: windows, macos
     * default value: windows
     */
    os?: string | null;
    /**
     * calculate pixel rankings for SERP elements in advanced results
     * optional field
     * pixel ranking refers to the distance between the result snippet and top left corner of the screen;
     * Visit Help Center to learn more>>
     * by default, the parameter is set to false
     * Note: if set to true, the charge per task will be multiplied by 2
     */
    calculate_rectangles?: boolean | null;
    /**
     * browser screen width
     * optional field
     * you can set a custom browser screen width to calculate pixel rankings for a particular device;
     * by default, the parameter is set to 1920;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_width?: number | null;
    /**
     * browser screen height
     * optional field
     * you can set a custom browser screen height to calculate pixel rankings for a particular device;
     * by default, the parameter is set to 1080;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_height?: number | null;
    /**
     * browser screen resolution ratio
     * optional field
     * you can set a custom browser screen resolution ratio to calculate pixel rankings for a particular device;
     * by default, the parameter is set to 1;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_resolution_ratio?: number | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * google.co.uk, google.com.au, google.de, etc.
     */
    se_domain?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 100
     * max value: 700
     * Your account will be billed per each SERP containing up to 100 results;
     * Setting depth above 100 may result in additional charges if the search engine returns more than 100 results;
     * If the specified depth is higher than the number of results in the response, the difference will be refunded to your account balance automatically;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * max value: 100
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * additional parameters of the search query
     * optional field
     * get the list of available parameters and additional details here
     */
    search_param?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpGoogleNewsTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpGoogleNewsTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleNewsTaskPostTaskInfo | null> | null;
};

export type SerpGoogleNewsTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: news
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleNewsTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleNewsTasksReadyResultInfo | null> | null;
};

export type SerpGoogleNewsTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleNewsTasksReadyTaskInfo | null> | null;
};

export type SerpGoogleNewsTasksFixedResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: news
     */
    se_type?: string | null;
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleNewsTasksFixedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleNewsTasksFixedResultInfo | null> | null;
};

export type SerpGoogleNewsTasksFixedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleNewsTasksFixedTaskInfo | null> | null;
};

export type SerpApiGoogleNewsNewsSearchElementItem = (BaseSerpApiGoogleNewsElementItem | null) & {
    /**
     * domain in SERP
     */
    domain?: string | null;
    /**
     * search URL with refinement parameters
     */
    url?: string | null;
    /**
     * URL of the image
     * the URL leading to the image on the original resource or DataForSEO storage (in case the original source is not available)
     */
    image_url?: string | null;
    /**
     * snippet of the result in SERP
     */
    snippet?: string | null;
    /**
     * indicates the time the result was published
     */
    time_published?: string | null;
    /**
     * date and time when the news was published
     * in the format “year-month-date:minutes:UTC_difference_hours:UTC_difference_minutes”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
};

export type SerpApiGoogleNewsTopStoriesElementItem = (BaseSerpApiGoogleNewsElementItem | null) & {
    page?: number | null;
    /**
     * the alignment of the element in SERP
     * can take the following values:
     * left
     */
    position?: string | null;
    /**
     * items of the element
     */
    items?: Array<TopStoriesElement | null> | null;
};

export type SerpGoogleNewsTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * indicates whether the response contains non-news search results in addition to news content
     */
    includes_non_news_search_results?: boolean | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * top_stories, news_search
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<BaseSerpApiGoogleNewsElementItem | null> | null;
};

export type SerpGoogleNewsTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleNewsTaskGetAdvancedResultInfo | null> | null;
};

export type SerpGoogleNewsTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleNewsTaskGetAdvancedTaskInfo | null> | null;
};

export type SerpGoogleNewsTaskGetHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpGoogleNewsTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleNewsTaskGetHtmlResultInfo | null> | null;
};

export type SerpGoogleNewsTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleNewsTaskGetHtmlTaskInfo | null> | null;
};

export type SerpGoogleNewsLiveAdvancedRequestInfo = {
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * if this field contains such parameters as ‘allinanchor:’, ‘allintext:’, ‘allintitle:’, ‘allinurl:’, ‘define:’, ‘filetype:’, ‘id:’, ‘inanchor:’, ‘info:’, ‘intext:’, ‘intitle:’, ‘inurl:’, ‘link:’, ‘related:’, ‘site:’, the charge per task will be multiplied by 5
     * Note: queries containing the ‘cache:’ parameter are not supported and will return a validation error
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://www.google.co.uk/search?q=%20rank%20tracker%20api&hl=en&gl=GB&uule=w+CAIQIFISCXXeIa8LoNhHEZkq1d1aOpZS
     */
    url?: string | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9 (mm)
     * the maximum value for “radius”: 199999 (mm)
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device operating system
     * optional field
     * note that this API provides results for desktop only
     * choose from the following values: windows, macos
     * default value: windows
     */
    os?: string | null;
    /**
     * calculate pixel rankings for SERP elements in advanced results
     * optional field
     * pixel ranking refers to the distance between the result snippet and top left corner of the screen;
     * Visit Help Center to learn more>>
     * by default, the parameter is set to false
     * Note: if set to true, the charge per task will be multiplied by 2
     */
    calculate_rectangles?: boolean | null;
    /**
     * browser screen width
     * optional field
     * you can set a custom browser screen width to calculate pixel rankings for a particular device;
     * by default, the parameter is set to 1920;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_width?: number | null;
    /**
     * browser screen height
     * optional field
     * you can set a custom browser screen height to calculate pixel rankings for a particular device;
     * by default, the parameter is set to 1080;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_height?: number | null;
    /**
     * browser screen resolution ratio
     * optional field
     * you can set a custom browser screen resolution ratio to calculate pixel rankings for a particular device;
     * by default, the parameter is set to 1;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_resolution_ratio?: number | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * google.co.uk, google.com.au, google.de, etc.
     */
    se_domain?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 100
     * max value: 700
     * Your account will be billed per each SERP containing up to 100 results;
     * Setting depth above 100 may result in additional charges if the search engine returns more than 100 results;
     * If the specified depth is higher than the number of results in the response, the difference will be refunded to your account balance automatically
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * max value: 100
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * additional parameters of the search query
     * optional field
     * Get the list of available parameters and additional details here.
     */
    search_param?: string | null;
};

export type SerpGoogleNewsLiveAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * indicates whether the response contains non-news search results in addition to news content
     */
    includes_non_news_search_results?: boolean | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * top_stories, news_search
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<BaseSerpApiGoogleNewsElementItem | null> | null;
};

export type SerpGoogleNewsLiveAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleNewsLiveAdvancedResultInfo | null> | null;
};

export type SerpGoogleNewsLiveAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleNewsLiveAdvancedTaskInfo | null> | null;
};

export type SerpGoogleNewsLiveHtmlRequestInfo = {
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://www.google.co.uk/search?q=%20rank%20tracker%20api&hl=en&gl=GB&uule=w+CAIQIFISCXXeIa8LoNhHEZkq1d1aOpZS
     */
    url?: string | null;
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * if this field contains such parameters as ‘allinanchor:’, ‘allintext:’, ‘allintitle:’, ‘allinurl:’, ‘define:’, ‘filetype:’, ‘id:’, ‘inanchor:’, ‘info:’, ‘intext:’, ‘intitle:’, ‘inurl:’, ‘link:’, ‘related:’, ‘site:’, the charge per task will be multiplied by 5
     * Note: queries containing the ‘cache:’ parameter are not supported and will return a validation error
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9 (mm)
     * the maximum value for “radius”: 199999 (mm)
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available locations of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available locations of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device operating system
     * optional field
     * note that this API provides results for desktop only
     * choose from the following values: windows, macos
     * default value: windows
     */
    os?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * google.co.uk, google.com.au, google.de, etc.
     */
    se_domain?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 100
     * max value: 700
     * Your account will be billed per each SERP containing up to 100 results;
     * Setting depth above 100 may result in additional charges if the search engine returns more than 100 results;
     * If the specified depth is higher than the number of results in the response, the difference will be refunded to your account balance automatically
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * max value: 100
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * additional parameters of the search query
     * optional field
     * get the list of available parameters and additional details here
     */
    search_param?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpGoogleNewsLiveHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpGoogleNewsLiveHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleNewsLiveHtmlResultInfo | null> | null;
};

export type SerpGoogleNewsLiveHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleNewsLiveHtmlTaskInfo | null> | null;
};

export type SerpGoogleEventsTaskPostRequestInfo = {
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default);
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority;
     * The cost can be calculated on the Pricing page
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/events/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/events/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * data will be provided for the country the specified coordinates belong to
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9 (mm)
     * the maximum value for “radius”: 199999 (mm)
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * optional field
     * if you use this field, you don’t need to specify language_code
     * by default, language settings correspond to one of the local official languages of the specified location
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * optional field
     * if you use this field, you don’t need to specify language_name
     * by default, language settings correspond to one of the local official languages of the specified location
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * date range to get events for
     * optional field
     * if you do not use this field, we will return all events
     * possible values: today, tomorrow, week, weekend, next_week, month, next_month
     */
    date_range?: string | null;
    /**
     * device operating system
     * optional field
     * note that this API provides results for desktop only
     * choose from the following values: windows, macos
     * default value: windows
     */
    os?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * google.co.uk, google.com.au, google.de, etc.
     */
    se_domain?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 10
     * max value: 700
     * Your account will be billed per each SERP containing up to 10 results;
     * Setting depth above 10 may result in additional charges if the search engine returns more than 10 results;
     * If the specified depth is higher than the number of results in the response, the difference will be refunded to your account balance automatically;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * max value: 100
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * advanced
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpGoogleEventsTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpGoogleEventsTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleEventsTaskPostTaskInfo | null> | null;
};

export type SerpGoogleEventsTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: events
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleEventsTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleEventsTasksReadyResultInfo | null> | null;
};

export type SerpGoogleEventsTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleEventsTasksReadyTaskInfo | null> | null;
};

export type SerpGoogleEventsTasksFixedResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: events
     */
    se_type?: string | null;
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleEventsTasksFixedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleEventsTasksFixedResultInfo | null> | null;
};

export type SerpGoogleEventsTasksFixedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleEventsTasksFixedTaskInfo | null> | null;
};

export type EventDates = {
    /**
     * date and time when the event starts
     * if time zone is specified in the event, value will be returned in the UTC format:
     * “yyyy-mm-ddThh-mm-ss+00:00”
     * example:
     * 2019-11-15T12:57:46+00:00
     * if time zone is not specified in the event, unspecified local time will be returned in the following format:
     * “yyyy-mm-ddThh-mm-ss”
     * example:
     * 2019-11-15T12:57:46
     */
    start_datetime?: string | null;
    /**
     * date and time when the event ends
     * if time zone is specified in the event, value will be returned in the UTC format:
     * “yyyy-mm-ddThh-mm-ss+00:00”
     * example:
     * 2019-11-15T12:57:46+00:00
     * if time zone is not specified in the event, unspecified local time will be returned in the following format:
     * “yyyy-mm-ddThh-mm-ss”
     * example:
     * 2019-11-15T12:57:46
     */
    end_datetime?: string | null;
    /**
     * date or date range as it is displayed in SERP
     */
    displayed_dates?: string | null;
};

export type LocationInfo = {
    /**
     * name of the event’s venue
     */
    name?: string | null;
    /**
     * address of the event’s venue
     */
    address?: string | null;
    /**
     * search URL with refinement parameters
     */
    url?: string | null;
    /**
     * google-defined client id
     * can be used with Google Reviews API to get a full list of reviews
     */
    cid?: string | null;
    /**
     * the unique identifier of the element in SERP
     */
    feature_id?: string | null;
};

export type EventItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * the alignment of the element in SERP
     * can take the following values:
     * left, right
     */
    position?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
    /**
     * title of the element
     */
    title?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * search URL with refinement parameters
     */
    url?: string | null;
    /**
     * URL of the image featured in the element
     */
    image_url?: string | null;
    /**
     * dates when the event takes place
     * if there are none, equals null
     */
    event_dates?: EventDates | null;
    /**
     * information about the event’s venue
     */
    location_info?: LocationInfo | null;
    /**
     * additional information and ticket purchase options
     */
    information_and_tickets?: Array<AiModeLinkElementInfo | null> | null;
};

export type SerpGoogleEventsTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code
     * in this case, the value will be null
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results found in SERP
     * possible item types:
     * event_item
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     * in this case, the value will be 0
     * this search engine does not indicate the total number of results
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items of the element
     */
    items?: Array<EventItem | null> | null;
};

export type SerpGoogleEventsTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleEventsTaskGetAdvancedResultInfo | null> | null;
};

export type SerpGoogleEventsTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleEventsTaskGetAdvancedTaskInfo | null> | null;
};

export type SerpGoogleEventsLiveAdvancedRequestInfo = {
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/events/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/events/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * data will be provided for the country the specified coordinates belong to
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9 (mm)
     * the maximum value for “radius”: 199999 (mm)
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * optional field
     * if you use this field, you don’t need to specify language_code
     * by default, language settings correspond to one of the local official languages of the specified location
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * optional field
     * if you use this field, you don’t need to specify language_name
     * by default, language settings correspond to one of the local official languages of the specified location
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * date range to get events for
     * optional field
     * if you do not use this field, we will return all events
     * possible values: today, tomorrow, week, weekend, next_week, month, next_month
     */
    date_range?: string | null;
    /**
     * device operating system
     * optional field
     * note that this API provides results for desktop only
     * choose from the following values: windows, macos
     * default value: windows
     */
    os?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * google.co.uk, google.com.au, google.de, etc.
     */
    se_domain?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 10
     * max value: 700
     * Your account will be billed per each SERP containing up to 10 results;
     * Setting depth above 10 may result in additional charges if the search engine returns more than 10 results;
     * If the specified depth is higher than the number of results in the response, the difference will be refunded to your account balance automatically;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * max value: 100
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpGoogleEventsLiveAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code
     * in this case, the value will be null
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results found in SERP
     * possible item types:
     * event_item
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     * in this case, the value will be 0
     * this search engine does not indicate the total number of results
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items of the element
     */
    items?: Array<EventItem | null> | null;
};

export type SerpGoogleEventsLiveAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleEventsLiveAdvancedResultInfo | null> | null;
};

export type SerpGoogleEventsLiveAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleEventsLiveAdvancedTaskInfo | null> | null;
};

export type SerpGoogleImagesTaskPostRequestInfo = {
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://www.google.co.uk/search?q=%20rank%20tracker%20api&hl=en&gl=GB&uule=w+CAIQIFISCXXeIa8LoNhHEZkq1d1aOpZS
     */
    url?: string | null;
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * if this field contains such parameters as ‘allinanchor:’, ‘allintext:’, ‘allintitle:’, ‘allinurl:’, ‘define:’, ‘filetype:’, ‘id:’, ‘inanchor:’, ‘info:’, ‘intext:’, ‘intitle:’, ‘inurl:’, ‘link:’, ‘related:’, ‘site:’, the charge per task will be multiplied by 5
     * Note: queries containing the ‘cache:’ parameter are not supported and will return a validation error
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9 (mm)
     * the maximum value for “radius”: 199999 (mm)
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device operating system
     * optional field
     * note that this API provides results for desktop only
     * choose from the following values: windows, macos
     * default value: windows
     */
    os?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * google.co.uk, google.com.au, google.de, etc.
     */
    se_domain?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 100
     * max value: 700
     * Your account will be billed per each SERP containing up to 100 results;
     * Setting depth above 100 may result in additional charges if the search engine returns more than 100 results;
     * If the specified depth is higher than the number of results in the response, the difference will be refunded to your account balance automatically;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * max value: 100
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * additional parameters of the search query
     * optional field
     * get the list of available parameters and additional details here
     */
    search_param?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpGoogleImagesTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpGoogleImagesTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleImagesTaskPostTaskInfo | null> | null;
};

export type SerpGoogleImagesTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: images
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleImagesTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleImagesTasksReadyResultInfo | null> | null;
};

export type SerpGoogleImagesTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleImagesTasksReadyTaskInfo | null> | null;
};

export type SerpGoogleImagesTasksFixedResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: images
     */
    se_type?: string | null;
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleImagesTasksFixedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleImagesTasksFixedResultInfo | null> | null;
};

export type SerpGoogleImagesTasksFixedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleImagesTasksFixedTaskInfo | null> | null;
};

export type SerpApiGoogleImagesCarouselElementItem = (BaseSerpApiGoogleImagesElementItem | null) & {
    page?: number | null;
    /**
     * the alignment of the element in SERP
     * can take the following values:
     * left, right
     */
    position?: string | null;
    /**
     * title of the element
     */
    title?: string | null;
    /**
     * items of the element
     */
    items?: Array<SerpApiCarouselElement | null> | null;
    /**
     * rectangle parameters
     * contains cartesian coordinates and pixel dimensions of the result’s snippet in SERP
     * note: calculate_rectangles parameter is not yet available when setting tasks for this search engine type, that’s why rectangle always equals null
     */
    rectangle?: AiModeRectangleInfo | null;
};

export type SerpApiGoogleImagesImagesSearchElementItem = (BaseSerpApiGoogleImagesElementItem | null) & {
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * subtitle of the result in SERP
     */
    subtitle?: string | null;
    /**
     * the alt tag of the image
     */
    alt?: string | null;
    /**
     * search URL with refinement parameters
     */
    url?: string | null;
    /**
     * the URL of the source image
     */
    source_url?: string | null;
    /**
     * the URL of the cached version of the image stored on Google’s servers
     */
    encoded_url?: string | null;
};

export type SerpApiGoogleImagesRelatedSearchesElementItem = (BaseSerpApiGoogleImagesElementItem | null) & {
    page?: number | null;
    /**
     * the alignment of the element in SERP
     * can take the following values:
     * left, right
     */
    position?: string | null;
    /**
     * items of the element
     */
    items?: Array<string | null> | null;
    /**
     * rectangle parameters
     * contains cartesian coordinates and pixel dimensions of the result’s snippet in SERP
     * note: calculate_rectangles parameter is not yet available when setting tasks for this search engine type, that’s why rectangle always equals null
     */
    rectangle?: AiModeRectangleInfo | null;
};

export type SerpGoogleImagesTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * carousel, images_search, related_searches
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<BaseSerpApiGoogleImagesElementItem | null> | null;
};

export type SerpGoogleImagesTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleImagesTaskGetAdvancedResultInfo | null> | null;
};

export type SerpGoogleImagesTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleImagesTaskGetAdvancedTaskInfo | null> | null;
};

export type SerpGoogleImagesTaskGetHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpGoogleImagesTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleImagesTaskGetHtmlResultInfo | null> | null;
};

export type SerpGoogleImagesTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleImagesTaskGetHtmlTaskInfo | null> | null;
};

export type SerpGoogleImagesLiveAdvancedRequestInfo = {
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://www.google.co.uk/search?q=%20rank%20tracker%20api&hl=en&gl=GB&uule=w+CAIQIFISCXXeIa8LoNhHEZkq1d1aOpZS
     */
    url?: string | null;
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * if this field contains such parameters as ‘allinanchor:’, ‘allintext:’, ‘allintitle:’, ‘allinurl:’, ‘define:’, ‘filetype:’, ‘id:’, ‘inanchor:’, ‘info:’, ‘intext:’, ‘intitle:’, ‘inurl:’, ‘link:’, ‘related:’, ‘site:’, the charge per task will be multiplied by 5
     * Note: queries containing the ‘cache:’ parameter are not supported and will return a validation error
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9 (mm)
     * the maximum value for “radius”: 199999 (mm)
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device operating system
     * optional field
     * note that this API provides results for desktop only
     * choose from the following values: windows, macos
     * default value: windows
     */
    os?: string | null;
    /**
     * search engine domain
     * optional field
     * We choose the relevant search engine domain automatically according to the location and language you specify. However, you can set a custom search engine domain in this field
     * example:
     * google.co.uk, google.com.au, google.de, etc.
     */
    se_domain?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 100
     * max value: 700
     * Your account will be billed per each SERP containing up to 100 results;
     * Setting depth above 100 may result in additional charges if the search engine returns more than 100 results;
     * If the specified depth is higher than the number of results in the response, the difference will be refunded to your account balance automatically;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * max value: 100
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * additional parameters of the search query
     * optional field
     * Get the list of available parameters and additional details here.
     */
    search_param?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpGoogleImagesLiveAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * carousel, images_search, related_searches
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<BaseSerpApiGoogleImagesElementItem | null> | null;
};

export type SerpGoogleImagesLiveAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleImagesLiveAdvancedResultInfo | null> | null;
};

export type SerpGoogleImagesLiveAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleImagesLiveAdvancedTaskInfo | null> | null;
};

export type SerpGoogleImagesLiveHtmlRequestInfo = {
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://www.google.co.uk/search?q=%20rank%20tracker%20api&hl=en&gl=GB&uule=w+CAIQIFISCXXeIa8LoNhHEZkq1d1aOpZS
     */
    url?: string | null;
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * if this field contains such parameters as ‘allinanchor:’, ‘allintext:’, ‘allintitle:’, ‘allinurl:’, ‘define:’, ‘filetype:’, ‘id:’, ‘inanchor:’, ‘info:’, ‘intext:’, ‘intitle:’, ‘inurl:’, ‘link:’, ‘related:’, ‘site:’, the charge per task will be multiplied by 5
     * Note: queries containing the ‘cache:’ parameter are not supported and will return a validation error
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9 (mm)
     * the maximum value for “radius”: 199999 (mm)
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device operating system
     * optional field
     * note that this API provides results for desktop only
     * choose from the following values: windows, macos
     * default value: windows
     */
    os?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * google.co.uk, google.com.au, google.de, etc.
     */
    se_domain?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 100
     * max value: 700
     * Your account will be billed per each SERP containing up to 100 results;
     * Setting depth above 100 may result in additional charges if the search engine returns more than 100 results;
     * If the specified depth is higher than the number of results in the response, the difference will be refunded to your account balance automatically;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * max value: 100
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * additional parameters of the search query
     * optional field
     * get the list of available parameters and additional details here
     */
    search_param?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpGoogleImagesLiveHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpGoogleImagesLiveHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleImagesLiveHtmlResultInfo | null> | null;
};

export type SerpGoogleImagesLiveHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleImagesLiveHtmlTaskInfo | null> | null;
};

export type SerpGoogleSearchByImageTaskPostRequestInfo = {
    /**
     * URL of the image
     * required field
     * the results will be based on the image you specified in this field
     * example:
     * https://upload.wikimedia.org/wikipedia/commons/e/ed/Elon_Musk_Royal_Society.jpg
     */
    image_url?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * max value: 100
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9 (mm)
     * the maximum value for “radius”: 199999 (mm)
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * google.co.uk, google.com.au, google.de, etc.
     */
    se_domain?: string | null;
    /**
     * calculate pixel rankings for SERP elements in advanced results
     * optional field
     * pixel ranking refers to the distance between the result snippet and top left corner of the screen;
     * Visit Help Center to learn more>>
     * by default, the parameter is set to false
     * Note: if set to true, the charge per task will be multiplied by 2
     */
    calculate_rectangles?: boolean | null;
    /**
     * browser screen width
     * optional field
     * you can set a custom browser screen width to calculate pixel rankings for a particular device;
     * by default, the parameter is set to 1920;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_width?: number | null;
    /**
     * browser screen height
     * optional field
     * you can set a custom browser screen height to calculate pixel rankings for a particular device;
     * by default, the parameter is set to 1080;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_height?: number | null;
    /**
     * browser screen resolution ratio
     * optional field
     * you can set a custom browser screen resolution ratio to calculate pixel rankings for a particular device;
     * by default, the parameter is set to 1;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_resolution_ratio?: number | null;
    /**
     * additional parameters of the search query
     * optional field
     * get the list of available parameters and additional details here
     */
    search_param?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpGoogleSearchByImageTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpGoogleSearchByImageTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleSearchByImageTaskPostTaskInfo | null> | null;
};

export type SerpGoogleSearchByImageTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: search_by_image
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleSearchByImageTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleSearchByImageTasksReadyResultInfo | null> | null;
};

export type SerpGoogleSearchByImageTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleSearchByImageTasksReadyTaskInfo | null> | null;
};

export type SerpGoogleSearchByImageTasksFixedResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: search_by_image
     */
    se_type?: string | null;
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleSearchByImageTasksFixedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleSearchByImageTasksFixedResultInfo | null> | null;
};

export type SerpGoogleSearchByImageTasksFixedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleSearchByImageTasksFixedTaskInfo | null> | null;
};

export type SerpApiGoogleSearchByImagesOrganicElementItem = (BaseSerpApiGoogleSearchByImagesElementItem | null) & {
    /**
     * domain in SERP
     */
    domain?: string | null;
    /**
     * cached version of the page
     */
    cache_url?: string | null;
    /**
     * URL to a similar search
     * URL to a new search for the same keyword(s) on related sites
     */
    related_search_url?: string | null;
    /**
     * breadcrumb in SERP
     */
    breadcrumb?: string | null;
    /**
     * name of the website in SERP
     */
    website_name?: string | null;
    /**
     * indicates whether the element contains an image
     */
    is_image?: boolean | null;
    /**
     * indicates whether the element contains a video
     */
    is_video?: boolean | null;
    /**
     * indicates whether the element is a featured_snippet
     */
    is_featured_snippet?: boolean | null;
    /**
     * indicates whether the element is marked as malicious
     */
    is_malicious?: boolean | null;
    /**
     * indicates whether the element is marked as Google web story
     */
    is_web_story?: boolean | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * includes additional information appended before the result description in SERP
     */
    pre_snippet?: string | null;
    /**
     * includes additional information appended after the result description in SERP
     */
    extended_snippet?: string | null;
    /**
     * images of the element
     */
    images?: Array<AiModeImagesElementInfo | null> | null;
    /**
     * Accelerated Mobile Pages
     * indicates whether an item has the Accelerated Mobile Page (AMP) version
     */
    amp_version?: boolean | null;
    /**
     * the item’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
    /**
     * pricing details
     * contains the pricing details of the product or service featured in the result
     */
    price?: PriceInfo | null;
    /**
     * words highlighted in bold within the results description
     */
    highlighted?: Array<string | null> | null;
    /**
     * sitelinks
     * the links shown below some of Google’s search results
     * if there are none, equals null
     */
    links?: Array<LinkElement | null> | null;
    /**
     * frequently asked questions
     * questions and answers extension shown below some of Google’s search results
     * if there are none, equals null
     */
    faq?: FaqBox | null;
    /**
     * extension of the organic element
     * extension of the organic result containing related search queries
     * Note: extension appears in SERP upon clicking on the result and then bouncing back to search results
     */
    extended_people_also_search?: Array<string | null> | null;
    /**
     * contains information from the ‘About this result’ panel
     * ‘About this result’ panel provides additional context about why Google returned this result for the given query;
     * this feature appears after clicking on the three dots next to most results
     */
    about_this_result?: AboutThisResultElement | null;
    /**
     * related result from the same domain
     * related result from the same domain appears as a part of the main result snippet;
     * you can derive the related_result snippets as "type": "organic" results by setting the group_organic_results parameter to false in the POST request
     */
    related_result?: Array<RelatedResult | null> | null;
    /**
     * date and time when the result was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
};

export type SerpApiGoogleSearchByImagesImagesElementItem = (BaseSerpApiGoogleSearchByImagesElementItem | null) & {
    /**
     * elements of search results found in SERP
     */
    items?: Array<AiModeImagesElementInfo | null> | null;
    /**
     * contains keywords and images related to the specified search term
     * if there are none, equals null
     */
    related_image_searches?: Array<RelatedImageSearchesElement | null> | null;
};

export type SerpGoogleSearchByImageTaskGetAdvancedResultInfo = {
    /**
     * URL specified in a POST array
     */
    image_url?: string | null;
    /**
     * keyword Google associated with the specified image
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * organic,
     * images
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items featured in the faq_box
     */
    items?: Array<BaseSerpApiGoogleSearchByImagesElementItem | null> | null;
};

export type SerpGoogleSearchByImageTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleSearchByImageTaskGetAdvancedResultInfo | null> | null;
};

export type SerpGoogleSearchByImageTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleSearchByImageTaskGetAdvancedTaskInfo | null> | null;
};

export type SerpGoogleJobsTaskPostRequestInfo = {
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * Note: the keyword you specify must indicate the job title;
     * example: .net developer
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default);
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority;
     * The cost can be calculated on the Pricing page
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code;
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/serp/google/jobs/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name;
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/serp/google/jobs/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * location search radius
     * optional field
     * location search radius in kilometers;
     * Note: for countries that use the imperial system of units, you will need to convert miles to kilometers by multiplying the value in miles by 1.609;
     * if value is not specified, search is executed anywhere within the specified location;
     * maximal value: 300
     * minimal value: > 0
     */
    location_radius?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code;
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name;
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP;
     * default value: 10
     * max value: 200
     * Your account will be billed per each SERP containing up to 10 results;
     * Setting depth above 10 may result in additional charges if the search engine returns more than 10 results;
     * If the specified depth is higher than the number of results in the response, the difference will be refunded to your account balance automatically;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * employment contract type
     * optional field
     * type of employment contract for which the search results will be returned;
     * possible values:
     * fulltime, partime, contractor, intern
     */
    employment_type?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * regular, advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpGoogleJobsTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpGoogleJobsTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleJobsTaskPostTaskInfo | null> | null;
};

export type SerpGoogleJobsTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: jobs
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleJobsTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleJobsTasksReadyResultInfo | null> | null;
};

export type SerpGoogleJobsTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleJobsTasksReadyTaskInfo | null> | null;
};

export type SerpGoogleJobsTasksFixedResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: jobs
     */
    se_type?: string | null;
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleJobsTasksFixedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleJobsTasksFixedResultInfo | null> | null;
};

export type SerpGoogleJobsTasksFixedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleJobsTasksFixedTaskInfo | null> | null;
};

export type GoogleJobsItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * the alignment of the element in SERP
     * can take the following values:
     * left, right
     */
    position?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
    /**
     * ID of the job on Google Jobs
     */
    job_id?: string | null;
    /**
     * title of the element
     */
    title?: string | null;
    /**
     * name of the employer
     */
    employer_name?: string | null;
    /**
     * URL to the employer’s website
     */
    employer_url?: string | null;
    /**
     * URL to the image used in the job posting
     */
    employer_image_url?: string | null;
    /**
     * location for which the job vacancy is posted
     */
    location?: string | null;
    /**
     * original source of the job vacancy
     */
    source_name?: string | null;
    /**
     * URL to the original source of the job vacancy
     */
    source_url?: string | null;
    /**
     * the salary indicated in the job vacancy
     * if the salary isn’t indicated, this field will equal null
     */
    salary?: string | null;
    /**
     * employment contract type
     */
    contract_type?: string | null;
    /**
     * date and time when the result was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
    /**
     * indicates how long ago the job vacancy was posted
     */
    time_ago?: string | null;
    /**
     * rectangle parameters
     * contains cartesian coordinates and pixel dimensions of the result’s snippet in SERP;
     * in this case, will equal null
     */
    rectangle?: AiModeRectangleInfo | null;
};

export type SerpGoogleJobsTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection;
     * in this case, equals null
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * google_jobs_item
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items of the element
     */
    items?: Array<GoogleJobsItem | null> | null;
};

export type SerpGoogleJobsTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleJobsTaskGetAdvancedResultInfo | null> | null;
};

export type SerpGoogleJobsTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleJobsTaskGetAdvancedTaskInfo | null> | null;
};

export type SerpGoogleJobsTaskGetHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpGoogleJobsTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleJobsTaskGetHtmlResultInfo | null> | null;
};

export type SerpGoogleJobsTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleJobsTaskGetHtmlTaskInfo | null> | null;
};

export type SerpGoogleAutocompleteTaskPostRequestInfo = {
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default);
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority;
     * The cost can be calculated on the Pricing page
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code;
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/serp/google/autocomplete/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name;
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code;
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name;
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * search bar cursor pointer
     * optional field
     * the horizontal numerical position of the cursor pointer within the keyword in the search bar;
     * by modifying the position of the cursor pointer, you will obtain different autocomplete suggestions for the same seed keyword;
     * minimal value: 0
     * default value: the number of the last character of the specified keyword
     * example:
     * |which query are s – "cursor_pointer": 0
     * which query is s| – "cursor_pointer": 16
     * which que|ry is s – "cursor_pointer": 9
     */
    cursor_pointer?: number | null;
    /**
     * search client for autocomplete
     * optional field
     * autocomplete results may differ depending on the search client;
     * possible values:
     * chrome — used when google search is opened in google chrome;
     * chrome-omni — used in the address bar in chrome;
     * gws-wiz — used in google search home page;
     * gws-wiz-serp — used in google search engine results page;
     * safari — used when google search is opened in safari browser;
     * firefox — used when google search is opened in firefox browser;
     * psy-ab — may be used when google search is opened in google chrome browser;
     * toolbar — returns XML;
     * youtube — returns JSONP;
     * gws-wiz-local — used in google local;
     * img — used in google’s image search;
     * products-cc — used in google shopping search
     */
    client?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be url-encoded;
     * i.e., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * advanced
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpGoogleAutocompleteTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpGoogleAutocompleteTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleAutocompleteTaskPostTaskInfo | null> | null;
};

export type SerpGoogleAutocompleteTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: autocomplete
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleAutocompleteTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleAutocompleteTasksReadyResultInfo | null> | null;
};

export type SerpGoogleAutocompleteTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleAutocompleteTasksReadyTaskInfo | null> | null;
};

export type SerpGoogleAutocompleteTasksFixedResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: autocomplete
     */
    se_type?: string | null;
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleAutocompleteTasksFixedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleAutocompleteTasksFixedResultInfo | null> | null;
};

export type SerpGoogleAutocompleteTasksFixedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleAutocompleteTasksFixedTaskInfo | null> | null;
};

export type Autocomplete = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * relevance of suggested keyword
     * represents the relevant of the autocomplete suggestion to the target keyword
     * can take values from 500 to 2000
     * the higher the value, the more relevant is the suggestion
     * Note: only available for the following client:
     * chrome/chrome-omni
     */
    relevance?: number | null;
    /**
     * google autocomplete keyword suggestion
     */
    suggestion?: string | null;
    /**
     * google autocomplete suggestion type
     * Note: only available for the following client:
     * chrome/chrome-omni
     */
    suggestion_type?: string | null;
    /**
     * url to search results
     * url to search results relevant to the google autocomplete suggestion
     */
    search_query_url?: string | null;
    /**
     * url of the thumbnail image
     * url of the thumbnail image of the google autocomplete suggestion
     * Note: only available for the following client:
     * gws-wiz
     * gws-wiz-serp
     */
    thumbnail_url?: string | null;
    /**
     * keywords highlighted in autocomplete
     * contains a list of google autocomplete suggestions that are highlighted in the search bar;
     * Note: array is only available for the following client:
     * gws-wiz
     * psy-ab
     * gws-wiz-local
     */
    highlighted?: Array<string | null> | null;
};

export type SerpGoogleAutocompleteTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection;
     * in this case, will equal null
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * autocomplete
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items of the element
     */
    items?: Array<Autocomplete | null> | null;
};

export type SerpGoogleAutocompleteTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleAutocompleteTaskGetAdvancedResultInfo | null> | null;
};

export type SerpGoogleAutocompleteTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleAutocompleteTaskGetAdvancedTaskInfo | null> | null;
};

export type SerpGoogleAutocompleteLiveAdvancedRequestInfo = {
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code;
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/serp/google/autocomplete/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name;
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code;
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name;
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * search bar cursor pointer
     * optional field
     * the horizontal numerical position of the cursor pointer within the keyword in the search bar;
     * by modifying the position of the cursor pointer, you will obtain different autocomplete suggestions for the same seed keyword;
     * minimal value: 0
     * default value: the number of the last character of the specified keyword
     * example:
     * |which query are s – "cursor_pointer": 0
     * which query is s| – "cursor_pointer": 16
     * which que|ry is s – "cursor_pointer": 9
     */
    cursor_pointer?: number | null;
    /**
     * search client for autocomplete
     * optional field
     * autocomplete results may differ depending on the search client;
     * possible values:
     * chrome — used when google search is opened in google chrome;
     * chrome-omni — used in the address bar in chrome;
     * gws-wiz — used in google search home page;
     * gws-wiz-serp — used in google search engine results page;
     * safari — used when google search is opened in safari browser;
     * firefox — used when google search is opened in firefox browser;
     * psy-ab — may be used when google search is opened in google chrome browser;
     * toolbar — returns XML;
     * youtube — returns JSONP;
     * gws-wiz-local — used in google local;
     * img — used in google’s image search;
     * products-cc — used in google shopping search
     */
    client?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpGoogleAutocompleteLiveAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection;
     * in this case, will equal null
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * autocomplete
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items of the element
     */
    items?: Array<Autocomplete | null> | null;
};

export type SerpGoogleAutocompleteLiveAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleAutocompleteLiveAdvancedResultInfo | null> | null;
};

export type SerpGoogleAutocompleteLiveAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleAutocompleteLiveAdvancedTaskInfo | null> | null;
};

export type SerpGoogleDatasetSearchTaskPostRequestInfo = {
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”.
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 20
     * max value: 700
     * Your account will be billed per each SERP containing up to 20 results;
     * Setting depth above 20 may result in additional charges if the search engine returns more than 20 results;
     * If the specified depth is higher than the number of results in the response, the difference will be refunded to your account balance automatically;
     */
    depth?: number | null;
    /**
     * full name of search engine language
     * optional field
     * if you use this field, you don’t need to specify language_code
     * possible value:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * optional field
     * possible value:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * possible value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * possible values: windows, macos
     * default value: windows
     */
    os?: string | null;
    /**
     * last time the dataset was updated
     * optional field
     * possible values: 1m, 1y, 3y
     */
    last_updated?: string | null;
    /**
     * file formats of the dataset
     * optional field
     * possible values: other, archive, text, image, document, tabular
     */
    file_formats?: Array<string> | null;
    /**
     * usage rights of the dataset
     * optional field
     * possible values: commercial, noncommercial
     */
    usage_rights?: string | null;
    /**
     * indicates whether displayed datasets are free
     * optional field
     * possible values: true, false
     */
    is_free?: boolean | null;
    /**
     * dataset topics
     * optional field
     * possible values: humanities, social_sciences, life_sciences, agriculture, natural_sciences, geo, computer, architecture_and_urban_planning, engineering
     */
    topics?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * only value: advanced
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpGoogleDatasetSearchTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpGoogleDatasetSearchTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleDatasetSearchTaskPostTaskInfo | null> | null;
};

export type SerpGoogleDatasetSearchTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: dataset_search
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleDatasetSearchTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleDatasetSearchTasksReadyResultInfo | null> | null;
};

export type SerpGoogleDatasetSearchTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleDatasetSearchTasksReadyTaskInfo | null> | null;
};

export type SerpGoogleDatasetSearchTasksFixedResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: dataset_search
     */
    se_type?: string | null;
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleDatasetSearchTasksFixedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleDatasetSearchTasksFixedResultInfo | null> | null;
};

export type SerpGoogleDatasetSearchTasksFixedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleDatasetSearchTasksFixedTaskInfo | null> | null;
};

export type FormatsElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * type of file format of the dataset
     * for example: zip, html, csv
     */
    format?: string | null;
    /**
     * file size in bytes
     */
    size?: number | null;
};

export type PeriodCovered = {
    /**
     * date and time when the period starts
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2020-03-02 02:00:00 +00:00
     */
    start_date?: string | null;
    /**
     * date and time when the period ends
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2022-12-09 02:00:00 +00:00
     */
    end_date?: string | null;
    /**
     * period displayed in SERP
     * example:
     * Mar 2, 2020 - Dec 9, 2022
     */
    displayed_date?: string | null;
};

export type DatasetDescription = {
    /**
     * text of the description
     */
    text?: string | null;
    /**
     * links featured in the ‘dataset_description’
     */
    links?: Array<LinkElement | null> | null;
};

export type Dataset = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * the alignment of the element in SERP
     * can take the following values:
     * left, right
     */
    position?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
    /**
     * ID of the dataset
     */
    dataset_id?: string | null;
    /**
     * title of the element
     */
    title?: string | null;
    /**
     * URL of the image
     * the URL leading to the image on the original resource or DataForSEO storage (in case the original source is not available)
     */
    image_url?: string | null;
    /**
     * count of articles that refer to the dataset
     */
    scholarly_citations_count?: number | null;
    /**
     * url of scholarly articles
     * link to the list of scholarly articles on Google Scholar
     * example: https://scholar.google.com/scholar?q=%2210.6084%20m9%20figshare%207427933%20v1%22
     */
    scholarly_articles_url?: string | null;
    /**
     * digital identifier of an object
     * unique digital identifier of the dataset
     * example: https://doi.org/10.5061/dryad.hmgqnk9m3
     */
    unique_identifier?: string | null;
    /**
     * link to related article
     * link to the published article that is related to the dataset
     */
    related_article?: string | null;
    /**
     * sitelinks
     * the links shown below some of Google Dataset’s search results
     * if there are none, equals null
     */
    links?: Array<LinkElement | null> | null;
    /**
     * the list of institutions that provided the dataset
     */
    dataset_providers?: Array<LicensesElement | null> | null;
    /**
     * the list of file formats of the dataset
     */
    formats?: Array<FormatsElement | null> | null;
    /**
     * the list of authors of the dataset
     */
    authors?: Array<AuthorsElement | null> | null;
    /**
     * the list of licenses issued to the dataset
     */
    licenses?: Array<LicensesElement | null> | null;
    /**
     * date and time when the result was last updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2022-11-27 02:00:00 +00:00
     */
    updated_date?: string | null;
    /**
     * the list of areas covered in the dataset
     * for example: Africa, Global
     */
    area_covered?: Array<string | null> | null;
    /**
     * period covered in the dataset
     */
    period_covered?: PeriodCovered | null;
    /**
     * description of the dataset
     */
    dataset_description?: DatasetDescription | null;
};

export type SerpGoogleDatasetSearchTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item type: dataset
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items of the element
     */
    items?: Array<Dataset | null> | null;
};

export type SerpGoogleDatasetSearchTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleDatasetSearchTaskGetAdvancedResultInfo | null> | null;
};

export type SerpGoogleDatasetSearchTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleDatasetSearchTaskGetAdvancedTaskInfo | null> | null;
};

export type SerpGoogleDatasetSearchLiveAdvancedRequestInfo = {
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine language
     * optional field
     * if you use this field, you don’t need to specify language_code
     * possible value:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * optional field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * possible value:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * possible value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * choose from the following values: windows, macos
     * default value: windows
     */
    os?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 20
     * max value: 700
     * Your account will be billed per each SERP containing up to 20 results;
     * Setting depth above 20 may result in additional charges if the search engine returns more than 20 results;
     * If the specified depth is higher than the number of results in the response, the difference will be refunded to your account balance automatically.
     */
    depth?: number | null;
    /**
     * last time the dataset was updated
     * optional field
     * possible values: 1m, 1y, 3y
     */
    last_updated?: string | null;
    /**
     * file formats of the dataset
     * optional field
     * possible values: other, archive, text, image, document, tabular
     */
    file_formats?: Array<string> | null;
    /**
     * usage rights of the dataset
     * optional field
     * possible values: commercial, noncommercial
     */
    usage_rights?: string | null;
    /**
     * indicates whether displayed datasets are free
     * optional field
     * possible values: true, false
     */
    is_free?: boolean | null;
    /**
     * dataset topics
     * optional field
     * possible values: humanities, social_sciences, life_sciences, agriculture, natural_sciences, geo, computer, architecture_and_urban_planning, engineering
     */
    topics?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpGoogleDatasetSearchLiveAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item type: dataset
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items of the element
     */
    items?: Array<Dataset | null> | null;
};

export type SerpGoogleDatasetSearchLiveAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleDatasetSearchLiveAdvancedResultInfo | null> | null;
};

export type SerpGoogleDatasetSearchLiveAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleDatasetSearchLiveAdvancedTaskInfo | null> | null;
};

export type SerpGoogleDatasetInfoTaskPostRequestInfo = {
    /**
     * ID of the dataset
     * required field
     * you can find dataset ID in the dataset URL or dataset item of Google Dataset Search result
     * example:
     * L2cvMTFqbl85ZHN6MQ==
     */
    dataset_id?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine language
     * optional field
     * if you use this field, you don’t need to specify language_code
     * possible value:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * optional field
     * if you use this field, you don’t need to specify language_name
     * possible value:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * possible value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * choose from the following values: windows, macos
     * default value: windows
     */
    os?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible value: advanced
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpGoogleDatasetInfoTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpGoogleDatasetInfoTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleDatasetInfoTaskPostTaskInfo | null> | null;
};

export type SerpGoogleDatasetInfoTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: dataset_info
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleDatasetInfoTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleDatasetInfoTasksReadyResultInfo | null> | null;
};

export type SerpGoogleDatasetInfoTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleDatasetInfoTasksReadyTaskInfo | null> | null;
};

export type SerpGoogleDatasetInfoTasksFixedResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: dataset_info
     */
    se_type?: string | null;
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleDatasetInfoTasksFixedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleDatasetInfoTasksFixedResultInfo | null> | null;
};

export type SerpGoogleDatasetInfoTasksFixedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleDatasetInfoTasksFixedTaskInfo | null> | null;
};

export type SerpGoogleDatasetInfoTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item type: dataset
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<Dataset | null> | null;
};

export type SerpGoogleDatasetInfoTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleDatasetInfoTaskGetAdvancedResultInfo | null> | null;
};

export type SerpGoogleDatasetInfoTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleDatasetInfoTaskGetAdvancedTaskInfo | null> | null;
};

export type SerpGoogleDatasetInfoLiveAdvancedRequestInfo = {
    /**
     * ID of the dataset
     * required field
     * you can find dataset ID in the dataset URL or dataset item of Google Dataset Search result
     * example:
     * L2cvMTFqbl85ZHN6MQ==
     */
    dataset_id?: string;
    /**
     * full name of search engine language
     * optional field
     * if you use this field, you don’t need to specify language_code
     * possible value:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * optional field
     * if you use this field, you don’t need to specify language_name
     * possible value:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * possible value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * possible values: windows, macos
     * default value: windows
     */
    os?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpGoogleDatasetInfoLiveAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item type: dataset
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<Dataset | null> | null;
};

export type SerpGoogleDatasetInfoLiveAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleDatasetInfoLiveAdvancedResultInfo | null> | null;
};

export type SerpGoogleDatasetInfoLiveAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleDatasetInfoLiveAdvancedTaskInfo | null> | null;
};

export type SerpGoogleAdsAdvertisersLocationsResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the code of the superordinate location
     * example:
     * "location_code": 9041134,
     * "location_name": "Vienna International Airport,Lower Austria,Austria",
     * "location_code_parent": 20044
     * where location_code_parent corresponds to:
     * "location_code": 20044,
     * "location_name": "Lower Austria,Austria"
     */
    location_code_parent?: number | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     */
    location_type?: string | null;
};

export type SerpGoogleAdsAdvertisersLocationsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleAdsAdvertisersLocationsResultInfo | null> | null;
};

export type SerpGoogleAdsAdvertisersLocationsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleAdsAdvertisersLocationsTaskInfo | null> | null;
};

export type SerpGoogleAdsAdvertisersTaskPostRequestInfo = {
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine location
     * optional field
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/ads_advertisers/locations
     * example:
     * London,England,United Kingdom
     * Note: if you don’t specify location_name, location_code, or location_coordinate, advertisers will be searched across all the available locations
     */
    location_name?: string | null;
    /**
     * search engine location code
     * optional field
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/ads_advertisers/locations
     * example:
     * 2840
     * Note: if you don’t specify location_name, location_code, or location_coordinate, advertisers will be searched across all the available locations
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * optional field
     * if you use this field, you don’t need to specify location_name or location_code
     * example:
     * 52.6178549,-155.352142
     * Note: if you don’t specify location_name, location_code, or location_coordinate, advertisers will be searched across all the available locations
     */
    location_coordinate?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the function you used for setting a task
     * possible values:
     * advanced
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpGoogleAdsAdvertisersTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpGoogleAdsAdvertisersTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleAdsAdvertisersTaskPostTaskInfo | null> | null;
};

export type SerpGoogleAdsAdvertisersTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: ads_advertisers
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleAdsAdvertisersTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleAdsAdvertisersTasksReadyResultInfo | null> | null;
};

export type SerpGoogleAdsAdvertisersTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleAdsAdvertisersTasksReadyTaskInfo | null> | null;
};

export type Advertiser = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * unique identifier of the advertiser account
     * can be used to obtain data on advertising campaigns from the Google Ads Search endpoint
     */
    advertiser_id?: string | null;
    /**
     * location of the advertiser account
     * country code associated with the advertiser account
     */
    location?: string | null;
    /**
     * verified advertiser account
     * equals true if advertiser account is verified by Google Ads
     */
    verified?: boolean | null;
    /**
     * ads count
     * the approximate number of ads that are run by the advertiser account across all available Google Ads platforms
     */
    approx_ads_count?: number | null;
};

export type SerpApiAdsMultiAccountAdvertiserElementItem = (BaseSerpApiAdsAdvertiserElementItem | null) & {
    /**
     * title of the element
     */
    title?: string | null;
    /**
     * advertiser location
     */
    location?: string | null;
    /**
     * ads count
     * the approximate number of ads that are run by the advertiser across all available Google Ads platforms
     */
    approx_ads_count?: number | null;
    /**
     * associated advertiser accounts
     * contains objects with data on associated advertiser accounts
     */
    advertisers?: Array<Advertiser | null> | null;
};

export type SerpApiAdsAdvertiserElementItem = (BaseSerpApiAdsAdvertiserElementItem | null) & {
    /**
     * title of the element
     */
    title?: string | null;
    /**
     * unique identifier of the advertiser account
     * can be used to obtain data on advertising campaigns from the Google Ads Search endpoint
     */
    advertiser_id?: string | null;
    /**
     * advertiser location
     */
    location?: string | null;
    /**
     * verified advertiser account
     * equals true if advertiser account is verified by Google Ads
     */
    verified?: boolean | null;
    /**
     * ads count
     * the approximate number of ads that are run by the advertiser across all available Google Ads platforms
     */
    approx_ads_count?: number | null;
};

export type SerpApiAdsDomainElementItem = (BaseSerpApiAdsAdvertiserElementItem | null) & {
    /**
     * domain in SERP
     */
    domain?: string | null;
};

export type SerpGoogleAdsAdvertisersTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection;
     * in this case, equals null
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * ads_muti_account_advertiser, ads_advertiser, ads_domain
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items of the element
     */
    items?: Array<BaseSerpApiAdsAdvertiserElementItem | null> | null;
};

export type SerpGoogleAdsAdvertisersTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleAdsAdvertisersTaskGetAdvancedResultInfo | null> | null;
};

export type SerpGoogleAdsAdvertisersTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleAdsAdvertisersTaskGetAdvancedTaskInfo | null> | null;
};

export type SerpGoogleAdsSearchLocationsResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the code of the superordinate location
     * example:
     * "location_code": 9041134,
     * "location_name": "Vienna International Airport,Lower Austria,Austria",
     * "location_code_parent": 20044
     * where location_code_parent corresponds to:
     * "location_code": 20044,
     * "location_name": "Lower Austria,Austria"
     */
    location_code_parent?: number | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     */
    location_type?: string | null;
};

export type SerpGoogleAdsSearchLocationsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleAdsSearchLocationsResultInfo | null> | null;
};

export type SerpGoogleAdsSearchLocationsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleAdsSearchLocationsTaskInfo | null> | null;
};

export type SerpGoogleAdsSearchTaskPostRequestInfo = {
    /**
     * domain name
     * required field if advertiser_ids is not specified
     * domain name associated with an advertiser account
     */
    target?: string | null;
    /**
     * advertiser identifiers
     * required field if target is not specified
     * you can specify the maximum of 25 values in this array;
     * advertiser_ids values for this parameter can be found in the Google Ads Advertisers endpoint;
     */
    advertiser_ids?: Array<string> | null;
    /**
     * full name of search engine location
     * optional field
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/ads_search/locations
     * example:
     * London,England,United Kingdom
     * Note: if you don’t specify location_name, location_code, or location_coordinate, the ads will be searched across all the available locations
     */
    location_name?: string | null;
    /**
     * search engine location code
     * optional field
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/ads_search/locations
     * example:
     * 2840
     * Note: if you don’t specify location_name, location_code, or location_coordinate, the ads will be searched across all the available locations
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * optional field
     * if you use this field, you don’t need to specify location_name or location_code
     * example:
     * 52.6178549,-155.352142
     * Note: if you don’t specify location_name, location_code, or location_coordinate, the ads will be searched across all the available locations
     */
    location_coordinate?: string | null;
    /**
     * advertising platform
     * optional field
     * possible values: all, google_play, google_maps, google_search, google_shopping, youtube
     * default value: all
     */
    platform?: string | null;
    /**
     * ad format
     * optional field
     * possible values: all, text, image, video
     */
    format?: string | null;
    /**
     * starting date of the time range
     * optional field
     * required field if date_to is specified;
     * date format: "yyyy-mm-dd"
     * minimum value: 2018-05-31
     * maximum value: today’s date
     * example:
     * "2020-01-01"
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * required field if date_from is specified;
     * date format: "yyyy-mm-dd"
     * minimum value: 2018-05-31
     * maximum value: today’s date
     * example:
     * "2020-01-01"
     */
    date_to?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 40
     * max value: 700
     * Your account will be billed per each SERP containing up to 40 results;
     * Setting depth above 40 may result in additional charges if the search engine returns more than 40 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the function you used for setting a task
     * possible values:
     * advanced
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpGoogleAdsSearchTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpGoogleAdsSearchTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleAdsSearchTaskPostTaskInfo | null> | null;
};

export type SerpGoogleAdsSearchTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: ads_search
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleAdsSearchTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleAdsSearchTasksReadyResultInfo | null> | null;
};

export type SerpGoogleAdsSearchTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleAdsSearchTasksReadyTaskInfo | null> | null;
};

export type PreviewImage = {
    /**
     * search URL with refinement parameters
     */
    url?: string | null;
    /**
     * height of the preview image
     */
    height?: number | null;
    /**
     * width of the preview image
     */
    width?: number | null;
};

export type AdsSearch = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * unique identifier of the advertiser account
     */
    advertiser_id?: string | null;
    /**
     * unique identifier of the advertisement
     */
    creative_id?: string | null;
    /**
     * title of the element
     */
    title?: string | null;
    /**
     * search URL with refinement parameters
     */
    url?: string | null;
    /**
     * verified advertiser account
     * equals true if advertiser account is verified by Google Ads
     */
    verified?: boolean | null;
    /**
     * format of the advertisement
     * possible values: text, image, video
     */
    format?: string | null;
    /**
     * preview image of the advertisement
     */
    preview_image?: PreviewImage | null;
    /**
     * url pointing to the ad preview
     */
    preview_url?: string | null;
    /**
     * date and time when the ad was shown for the first time
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     */
    first_shown?: string | null;
    /**
     * date and time when the ad was shown the last time
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     */
    last_shown?: string | null;
};

export type SerpGoogleAdsSearchTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * in this case, equals null
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection;
     * in this case, equals null
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * ads_search
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items of the element
     */
    items?: Array<AdsSearch | null> | null;
};

export type SerpGoogleAdsSearchTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleAdsSearchTaskGetAdvancedResultInfo | null> | null;
};

export type SerpGoogleAdsSearchTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleAdsSearchTaskGetAdvancedTaskInfo | null> | null;
};

export type SerpBingLocationsResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the code of the superordinate location
     * example:
     * "location_code": 9041134,
     * "location_name": "Vienna International Airport,Lower Austria,Austria",
     * "location_code_parent": 20044
     * where location_code_parent corresponds to:
     * "location_code": 20044,
     * "location_name": "Lower Austria,Austria"
     */
    location_code_parent?: number | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     */
    location_type?: string | null;
};

export type SerpBingLocationsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpBingLocationsResultInfo | null> | null;
};

export type SerpBingLocationsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBingLocationsTaskInfo | null> | null;
};

export type SerpBingLocationsCountryResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the code of the superordinate location
     * example:
     * "location_code": 9041134,
     * "location_name": "Vienna International Airport,Lower Austria,Austria",
     * "location_code_parent": 20044
     * where location_code_parent corresponds to:
     * "location_code": 20044,
     * "location_name": "Lower Austria,Austria"
     */
    location_code_parent?: number | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     */
    location_type?: string | null;
};

export type SerpBingLocationsCountryTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpBingLocationsCountryResultInfo | null> | null;
};

export type SerpBingLocationsCountryResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBingLocationsCountryTaskInfo | null> | null;
};

export type SerpBingLanguagesResultInfo = {
    /**
     * language name
     */
    language_name?: string | null;
    /**
     * language code according to ISO 639-1
     */
    language_code?: string | null;
};

export type SerpBingLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpBingLanguagesResultInfo | null> | null;
};

export type SerpBingLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBingLanguagesTaskInfo | null> | null;
};

export type SerpBingOrganicTaskPostRequestInfo = {
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://www.bing.com/search?q=rank%20checker&count=50&first=1&setlang=en&cc=US&safesearch=Moderate&FORM=SEPAGE
     */
    url?: string | null;
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”
     * if this field contains such parameters as ‘allinanchor:’, ‘allintext:’, ‘allintitle:’, ‘allinurl:’, ‘define:’, ‘filetype:’, ‘id:’, ‘inanchor:’, ‘info:’, ‘intext:’, ‘intitle:’, ‘inurl:’, ‘link:’, ‘related:’, ‘site:’ the charge per task will be multiplied by 5
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/bing/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/bing/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * example:
     * 53.476225,-2.243572
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/bing/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/bing/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * can take the values:desktop, mobile
     * default value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * if you specify desktop in the device field, choose from the following values: windows, macos
     * default value: windows
     * if you specify mobile in the device field, choose from the following values: android, ios
     * default value: android
     */
    os?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 10
     * max value: 700
     * Your account will be billed per each SERP containing up to 10 results;
     * Setting depth above 10 may result in additional charges if the search engine returns more than 10 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * default value: 1
     * max value: 100
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * calcualte pixel rankings for SERP elements in advanced results
     * optional field
     * pixel ranking refers to the distance between the result snippet and top left corner of the screen;
     * Visit Help Center to learn more>>
     * by default, the parameter is set to false
     * Note: you will be charged extra $0.0006 for using this parameter
     */
    calculate_rectangles?: boolean | null;
    /**
     * browser screen width
     * optional field
     * you can set a custom browser screen width to calculate pixel rankings for a particular device;
     * by default, the parameter is set to:
     * 1920 for desktop;
     * 360 for mobile on android;
     * 375 for mobile on iOS;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_width?: number | null;
    /**
     * browser screen height
     * optional field
     * you can set a custom browser screen height to calculate pixel rankings for a particular device;
     * by default, the parameter is set to:
     * 1080 for desktop;
     * 640 for mobile on android;
     * 812 for mobile on iOS;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_height?: number | null;
    /**
     * browser screen resolution ratio
     * optional field
     * you can set a custom browser screen resolution ratio to calculate pixel rankings for a particular device;
     * by default, the parameter is set to:
     * 1 for desktop;
     * 3 for mobile on android;
     * 3 for mobile on iOS;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_resolution_ratio?: number | null;
    /**
     * additional parameters of the search query
     * optional field
     * get the list of available parameters and additional details here
     */
    search_param?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * regular, advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpBingOrganicTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpBingOrganicTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBingOrganicTaskPostTaskInfo | null> | null;
};

export type SerpBingOrganicTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: organic
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpBingOrganicTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpBingOrganicTasksReadyResultInfo | null> | null;
};

export type SerpBingOrganicTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBingOrganicTasksReadyTaskInfo | null> | null;
};

export type SerpBingOrganicTasksFixedResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: organic
     */
    se_type?: string | null;
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpBingOrganicTasksFixedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpBingOrganicTasksFixedResultInfo | null> | null;
};

export type SerpBingOrganicTasksFixedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBingOrganicTasksFixedTaskInfo | null> | null;
};

export type BingOrganicSerpElementItem = (BaseBingSerpApiElementItem | null) & {
    /**
     * domain in SERP
     */
    domain?: string | null;
    /**
     * title of the results element in SERP
     */
    title?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * relevant URL in SERP
     */
    url?: string | null;
    /**
     * breadcrumb in SERP
     */
    breadcrumb?: string | null;
    /**
     * cached version of the page
     */
    cache_url?: string | null;
    /**
     * URL to a similar search
     * URL to a new search for the same keyword(s) on related sites
     */
    related_search_url?: string | null;
    /**
     * name of the source website
     */
    website_name?: string | null;
    /**
     * indicates whether the element contains an image
     */
    is_image?: boolean | null;
    /**
     * indicates whether the element contains a video
     */
    is_video?: boolean | null;
    /**
     * indicates whether the element is a featured_snippet
     */
    is_featured_snippet?: boolean | null;
    /**
     * indicates whether the element is marked as malicious
     */
    is_malicious?: boolean | null;
    /**
     * indicates whether the element is marked as a web story
     */
    is_web_story?: boolean | null;
    /**
     * includes additional information appended before the result description in SERP
     */
    pre_snippet?: string | null;
    /**
     * includes additional information appended after the result description in SERP
     */
    extended_snippet?: string | null;
    /**
     * images of the element
     */
    images?: Array<AiModeImagesElementInfo | null> | null;
    /**
     * Accelerated Mobile Pages
     * indicates whether an item has the Accelerated Mobile Page (AMP) version
     */
    amp_version?: boolean | null;
    /**
     * the item’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
    /**
     * pricing details
     * contains the pricing details of the product or service featured in the result
     */
    price?: PriceInfo | null;
    /**
     * words highlighted in bold within the results description
     */
    highlighted?: Array<string | null> | null;
    /**
     * sitelinks
     * the links shown below some search results
     * if there are none, equals null
     */
    links?: Array<LinkElement | null> | null;
    /**
     * frequently asked questions
     * questions and answers extension shown below some search results
     * if there are none, equals null
     */
    faq?: FaqBox | null;
    /**
     * extension of the organic element
     * extension of the organic result containing related search queries
     * Note: extension appears in SERP upon clicking on the result and then bouncing back to search results
     */
    extended_people_also_search?: Array<string | null> | null;
    /**
     * contains information from the ‘About this result’ panel
     * note: about_this_result feature is not available in Bing search engine, that’s why it always equals null
     */
    about_this_result?: AboutThisResultElement | null;
    /**
     * related result from the same domain
     * related result from the same domain appears as a part of the main result snippet;
     * note: related_result feature is not available in Bing search engine, that’s why it always equals null
     */
    related_result?: Array<RelatedResult | null> | null;
    /**
     * date and time when the result was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
};

export type BingPaidSerpElementItem = (BaseBingSerpApiElementItem | null) & {
    /**
     * domain of the ad element in SERP
     */
    domain?: string | null;
    /**
     * title of the ad element in SERP
     */
    title?: string | null;
    /**
     * description of the ad element in SERP
     */
    description?: string | null;
    /**
     * relevant URL of the ad element in SERP
     */
    url?: string | null;
    /**
     * breadcrumb of the ad element in SERP
     */
    breadcrumb?: string | null;
    /**
     * website name in SERP
     */
    website_name?: string | null;
    /**
     * indicates whether the element contains an image
     */
    is_image?: boolean | null;
    /**
     * indicates whether the element contains a video
     */
    is_video?: boolean | null;
    /**
     * images of the element
     */
    images?: Array<AiModeImagesElementInfo | null> | null;
    /**
     * words highlighted in bold within the results description
     */
    highlighted?: Array<string | null> | null;
    /**
     * additional information about the result
     */
    extra?: {
        [key: string]: string | null;
    } | null;
    /**
     * extended description
     * if there is none, equals null
     */
    description_rows?: Array<string | null> | null;
    /**
     * links featured in the organic result
     */
    links?: Array<AdLinkElement | null> | null;
    /**
     * price of booking a place for the specified dates of stay
     */
    price?: PriceInfo | null;
    /**
     * the item’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
};

export type BingFeaturedSnippetSerpElementItem = (BaseBingSerpApiElementItem | null) & {
    /**
     * domain of the ad element in SERP
     */
    domain?: string | null;
    /**
     * title of the ad element in SERP
     */
    title?: string | null;
    /**
     * description of the ad element in SERP
     */
    description?: string | null;
    /**
     * relevant URL of the ad element in SERP
     */
    url?: string | null;
    /**
     * breadcrumb of the ad element in SERP
     */
    breadcrumb?: string | null;
    /**
     * the title of the featured snippets source page
     */
    featured_title?: string | null;
    /**
     * date and time when the result was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
    /**
     * images of the element
     */
    images?: Array<AiModeImagesElementInfo | null> | null;
    /**
     * results table
     * if there are none, equals null
     */
    table?: Table | null;
};

export type BingRelatedSearchesSerpElementItem = (BaseBingSerpApiElementItem | null) & {
    /**
     * items in SERP
     */
    items?: Array<string | null> | null;
};

export type SerpBingOrganicTaskGetRegularResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     * equals null
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types: organic, paid
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * total pages retrieved
     * total number of retrieved SERPs in the result
     */
    pages_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items inside the element
     * array of 8 search queries related to the keyword
     */
    items?: Array<BaseBingSerpApiElementItem | null> | null;
};

export type SerpBingOrganicTaskGetRegularTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpBingOrganicTaskGetRegularResultInfo | null> | null;
};

export type SerpBingOrganicTaskGetRegularResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBingOrganicTaskGetRegularTaskInfo | null> | null;
};

export type SerpApiBingAiOverviewElementItem = (BaseSerpApiBingAiOverviewElementItem | null) & {
    /**
     * the alignment of the element in SERP
     * can take the following values:
     * left, right
     */
    position?: string | null;
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * text or description of the element in SERP
     */
    text?: string | null;
    /**
     * content of the element in markdown format
     */
    markdown?: string | null;
    /**
     * sitelinks
     * the links shown below some search results
     * if there are none, equals null
     */
    links?: Array<LinkElement | null> | null;
    /**
     * images of the element
     */
    images?: Array<AiModeImagesElementInfo | null> | null;
    /**
     * references relevant to the element
     * includes references to webpages that were used to generate the ai_overview_element
     */
    references?: Array<AiModeAiOverviewReferenceInfo | null> | null;
};

export type SerpApiBingAiOverviewVideoElementItem = (BaseSerpApiBingAiOverviewElementItem | null) & {
    /**
     * the alignment of the element in SERP
     * can take the following values:
     * left, right
     */
    position?: string | null;
    /**
     * link anchor text
     */
    title?: string | null;
    /**
     * text snippet of the video
     */
    snippet?: string | null;
    /**
     * link URL
     */
    url?: string | null;
    /**
     * domain in SERP
     */
    domain?: string | null;
    /**
     * URL of the image
     * the URL leading to the image on the original resource or DataForSEO storage (in case the original source is not available)
     */
    image_url?: string | null;
    /**
     * source of the element
     * indicates the source of information included in the questions_and_answers_element
     */
    source?: string | null;
    /**
     * the date when the page source of the element was published
     */
    date?: string | null;
    /**
     * date and time when the result was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
};

export type SerpApiBingAiOverviewVideosElementItem = (BaseSerpApiBingAiOverviewElementItem | null) & {
    /**
     * elements of search results found in SERP
     */
    items?: Array<VideoElement | null> | null;
};

export type SerpApiBingAiOverviewImagesElementItem = (BaseSerpApiBingAiOverviewElementItem | null) & {
    /**
     * URL link
     */
    url?: string | null;
    /**
     * title of the link element
     */
    title?: string | null;
    /**
     * items featured in the faq_box
     */
    items?: Array<AiModeImagesElementInfo | null> | null;
};

export type SerpApiBingAiOverviewOrganicElementItem = (BaseSerpApiBingAiOverviewElementItem | null) & {
    /**
     * title of the link
     */
    title?: string | null;
    /**
     * relevant URL
     */
    url?: string | null;
    /**
     * domain in SERP
     */
    domain?: string | null;
    /**
     * text snippet from the organic result
     */
    snippet?: string | null;
    /**
     * breadcrumb in SERP
     */
    breadcrumb?: string | null;
    /**
     * website name in SERP
     */
    website_name?: string | null;
    /**
     * links featured in the faq_box_element
     */
    links?: Array<LinkElement | null> | null;
    /**
     * words highlighted in bold within the results description
     */
    highlighted?: Array<string | null> | null;
};

export type BingAiOverviewSerpElementItem = (BaseBingSerpApiElementItem | null) & {
    /**
     * content of the element in markdown format
     */
    markdown?: string | null;
    /**
     * additional items present in the element
     * if there are none, equals null
     */
    items?: Array<BaseSerpApiBingAiOverviewElementItem | null> | null;
    /**
     * additional references relevant to the item
     * includes references to webpages that may have been used to generate the ai_overview
     */
    references?: Array<AiModeAiOverviewReferenceInfo | null> | null;
};

export type BingImagesSerpElementItem = (BaseBingSerpApiElementItem | null) & {
    /**
     * title of the item
     */
    title?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * contains results featured in the ‘hotels_pack’ element of SERP
     */
    items?: Array<AiModeImagesElementInfo | null> | null;
    /**
     * contains keywords and images related to the specified search term
     * if there are none, equals null
     */
    related_image_searches?: Array<RelatedImageSearchesElement | null> | null;
};

export type BingVideoSerpElementItem = (BaseBingSerpApiElementItem | null) & {
    /**
     * contains results featured in the ‘hotels_pack’ element of SERP
     */
    items?: Array<VideoElement | null> | null;
};

export type BingShoppingSerpElementItem = (BaseBingSerpApiElementItem | null) & {
    /**
     * title of the item
     */
    title?: string | null;
    /**
     * contains results featured in the ‘hotels_pack’ element of SERP
     */
    items?: Array<ShoppingElement | null> | null;
};

export type BingAnswerBoxSerpElementItem = (BaseBingSerpApiElementItem | null) & {
    /**
     * text
     * if there is none, equals null
     */
    text?: Array<string | null> | null;
    /**
     * links featured in the organic result
     */
    links?: Array<LinkElement | null> | null;
};

export type BingLocalPackSerpElementItem = (BaseBingSerpApiElementItem | null) & {
    /**
     * title of the item
     */
    title?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * domain where the video is hosted
     */
    domain?: string | null;
    /**
     * phone number
     */
    phone?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * indicates whether the element is an ad
     */
    is_paid?: boolean | null;
    /**
     * the item’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
    /**
     * bing-defined client id
     * unique id of a local establishment
     */
    cid?: string | null;
};

export type BingQuestionsAndAnswersSerpElementItem = (BaseBingSerpApiElementItem | null) & {
    /**
     * contains results featured in the ‘hotels_pack’ element of SERP
     */
    items?: Array<QuestionsAndAnswersElement | null> | null;
};

export type BingHotelsPackSerpElementItem = (BaseBingSerpApiElementItem | null) & {
    /**
     * title of the item
     */
    title?: string | null;
    /**
     * starting date of stay
     * in the format “year-month-date”
     * example:
     * 2019-11-15
     */
    date_from?: string | null;
    /**
     * ending date of stay
     * in the format “year-month-date”
     * example:
     * 2019-11-17
     */
    date_to?: string | null;
    /**
     * contains results featured in the ‘hotels_pack’ element of SERP
     */
    items?: Array<HotelsPackElement | null> | null;
};

export type BingJobsSerpElementItem = (BaseBingSerpApiElementItem | null) & {
    /**
     * title of the item
     */
    title?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * contains results featured in the ‘hotels_pack’ element of SERP
     */
    items?: Array<JobsElement | null> | null;
};

export type BingTopStoriesSerpElementItem = (BaseBingSerpApiElementItem | null) & {
    /**
     * title of the item
     */
    title?: string | null;
    /**
     * contains results featured in the ‘hotels_pack’ element of SERP
     */
    items?: Array<TopStoriesElement | null> | null;
};

export type BingCarouselSerpElementItem = (BaseBingSerpApiElementItem | null) & {
    /**
     * title of the item
     */
    title?: string | null;
    /**
     * contains results featured in the ‘hotels_pack’ element of SERP
     */
    items?: Array<SerpApiCarouselElement | null> | null;
};

export type BingMapSerpElementItem = (BaseBingSerpApiElementItem | null) & {
    /**
     * title of the item
     */
    title?: string | null;
    /**
     * URL
     */
    url?: string | null;
};

export type BingEventsSerpElementItem = (BaseBingSerpApiElementItem | null) & {
    /**
     * title of the item
     */
    title?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * contains results featured in the ‘hotels_pack’ element of SERP
     */
    items?: Array<EventsElement | null> | null;
};

export type BingRecipesSerpElementItem = (BaseBingSerpApiElementItem | null) & {
    /**
     * contains results featured in the ‘hotels_pack’ element of SERP
     */
    items?: Array<RecipesElement | null> | null;
};

export type SerpApiBingPeopleAlsoAskExpandedElementItem = (BaseSerpApiBingPeopleAlsoAskExpandedElementItem | null) & {
    /**
     * title
     */
    featured_title?: string | null;
    /**
     * URL
     */
    url?: string | null;
    /**
     * domain name of the reference
     */
    domain?: string | null;
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * images of the element
     */
    images?: Array<AiModeImagesElementInfo | null> | null;
    /**
     * date and time when the video was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example: 2009-01-01 00:00:00 +00:00
     */
    timestamp?: string | null;
    /**
     * results table
     * if there are none, equals null
     */
    table?: Table | null;
};

export type SerpApiBingPeopleAlsoAskAiOverviewExpandedElementItem = (BaseSerpApiBingPeopleAlsoAskExpandedElementItem | null) & {
    /**
     * additional items present in the element
     * if there are none, equals null
     */
    items?: Array<BaseSerpApiBingAiOverviewElementItem | null> | null;
    /**
     * references relevant to the element
     * includes references to webpages that were used to generate the ai_overview_element
     */
    references?: Array<AiModeAiOverviewReferenceInfo | null> | null;
};

export type BingPeopleAlsoAskSerpElementItem = (BaseBingSerpApiElementItem | null) & {
    /**
     * contains results featured in the ‘hotels_pack’ element of SERP
     */
    items?: Array<PeopleAlsoAskElement | null> | null;
};

export type BingPeopleAlsoSearchSerpElementItem = (BaseBingSerpApiElementItem | null) & {
    /**
     * title of the item
     */
    title?: string | null;
    /**
     * contains results featured in the ‘hotels_pack’ element of SERP
     */
    items?: Array<string | null> | null;
};

export type SerpBingOrganicTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     * equals null
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * answer_box, carousel, events, featured_snippet, hotels_pack, images, jobs, local_pack, map, organic, paid, people_also_ask, people_also_search, questions_and_answers,recipes, related_searches, shopping, top_stories, video, ai_overview
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * total pages retrieved
     * total number of retrieved SERPs in the result
     */
    pages_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * additional items present in the element
     * if there are none, equals null
     */
    items?: Array<BaseBingSerpApiElementItem | null> | null;
};

export type SerpBingOrganicTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpBingOrganicTaskGetAdvancedResultInfo | null> | null;
};

export type SerpBingOrganicTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBingOrganicTaskGetAdvancedTaskInfo | null> | null;
};

export type SerpBingOrganicTaskGetHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpBingOrganicTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpBingOrganicTaskGetHtmlResultInfo | null> | null;
};

export type SerpBingOrganicTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBingOrganicTaskGetHtmlTaskInfo | null> | null;
};

export type SerpBingOrganicLiveRegularRequestInfo = {
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://www.bing.com/search?q=rank%20checker&count=50&first=1&setlang=en&cc=US&safesearch=Moderate&FORM=SEPAGE
     */
    url?: string | null;
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * if this field contains such parameters as ‘allinanchor:’, ‘allintext:’, ‘allintitle:’, ‘allinurl:’, ‘define:’, ‘filetype:’, ‘id:’, ‘inanchor:’, ‘info:’, ‘intext:’, ‘intitle:’, ‘inurl:’, ‘link:’, ‘related:’, ‘site:’ the charge per task will be multiplied by 5
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/bing/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/bing/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * example:
     * 53.476225,-2.243572
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/bing/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/bing/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * can take the values:desktop, mobile
     * default value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * if you specify desktop in the device field, choose from the following values: windows, macos
     * default value: windows
     * if you specify mobile in the device field, choose from the following values: android, ios
     * default value: android
     */
    os?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 10
     * max value: 700
     * Your account will be billed per each SERP containing up to 10 results;
     * Setting depth above 10 may result in additional charges if the search engine returns more than 10 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * default value: 1
     * max value: 100
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * additional parameters of the search query
     * optional field
     * get the list of available parameters and additional details here
     */
    search_param?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpBingOrganicLiveRegularResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided exact results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     * equals null
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types: organic, paid
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * total pages retrieved
     * total number of retrieved SERPs in the result
     */
    pages_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items inside the element
     * array of 8 search queries related to the keyword
     */
    items?: Array<BaseBingSerpApiElementItem | null> | null;
};

export type SerpBingOrganicLiveRegularTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpBingOrganicLiveRegularResultInfo | null> | null;
};

export type SerpBingOrganicLiveRegularResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBingOrganicLiveRegularTaskInfo | null> | null;
};

export type SerpBingOrganicLiveAdvancedRequestInfo = {
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://www.bing.com/search?q=rank%20checker&count=50&first=1&setlang=en&cc=US&safesearch=Moderate&FORM=SEPAGE
     */
    url?: string | null;
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”
     * if this field contains such parameters as ‘allinanchor:’, ‘allintext:’, ‘allintitle:’, ‘allinurl:’, ‘define:’, ‘filetype:’, ‘id:’, ‘inanchor:’, ‘info:’, ‘intext:’, ‘intitle:’, ‘inurl:’, ‘link:’, ‘related:’, ‘site:’ the charge per task will be multiplied by 5learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * The price per task with high execution priority is multiplied by 1.5, and the task is executed within 1 minute
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/bing/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/bing/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * example:
     * 53.476225,-2.243572
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/bing/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/bing/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * can take the values:desktop, mobile
     * default value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * if you specify desktop in the device field, choose from the following values: windows, macos
     * default value: windows
     * if you specify mobile in the device field, choose from the following values: android, ios
     * default value: android
     */
    os?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 10
     * max value: 700
     * Your account will be billed per each SERP containing up to 10 results;
     * Setting depth above 10 may result in additional charges if the search engine returns more than 10 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * default value: 1
     * max value: 100
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * calculate pixel rankings for SERP elements in advanced results
     * optional field
     * pixel ranking refers to the distance between the result snippet and top left corner of the screen;
     * Visit Help Center to learn more>>
     * by default, the parameter is set to false
     * Note: you will be charged extra $0.002 for using this parameter
     */
    calculate_rectangles?: boolean | null;
    /**
     * browser screen width
     * optional field
     * you can set a custom browser screen width to calculate pixel rankings for a particular device;
     * by default, the parameter is set to:
     * 1920 for desktop;
     * 360 for mobile on android;
     * 375 for mobile on iOS;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_width?: number | null;
    /**
     * browser screen height
     * optional field
     * you can set a custom browser screen height to calculate pixel rankings for a particular device;
     * by default, the parameter is set to:
     * 1080 for desktop;
     * 640 for mobile on android;
     * 812 for mobile on iOS;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_height?: number | null;
    /**
     * browser screen resolution ratio
     * optional field
     * you can set a custom browser screen resolution ratio to calculate pixel rankings for a particular device;
     * by default, the parameter is set to:
     * 1 for desktop;
     * 3 for mobile on android;
     * 3 for mobile on iOS;
     * Note: to use this parameter, set calculate_rectangles to true
     */
    browser_screen_resolution_ratio?: number | null;
    /**
     * additional parameters of the search query
     * optional field
     * get the list of available parameters and additional details here
     */
    search_param?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpBingOrganicLiveAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     * equals null
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     * equals null
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * answer_box, carousel, events, featured_snippet, hotels_pack, images, jobs, local_pack, map, organic, paid, people_also_ask, people_also_search, questions_and_answers,recipes, related_searches, shopping, top_stories, video, ai_overview
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * total pages retrieved
     * total number of retrieved SERPs in the result
     */
    pages_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * additional items present in the element
     * if there are none, equals null
     */
    items?: Array<BaseBingSerpApiElementItem | null> | null;
};

export type SerpBingOrganicLiveAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpBingOrganicLiveAdvancedResultInfo | null> | null;
};

export type SerpBingOrganicLiveAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBingOrganicLiveAdvancedTaskInfo | null> | null;
};

export type SerpBingOrganicLiveHtmlRequestInfo = {
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://www.bing.com/search?q=rank%20checker&count=50&first=1&setlang=en&cc=US&safesearch=Moderate&FORM=SEPAGE
     */
    url?: string | null;
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * if this field contains such parameters as ‘allinanchor:’, ‘allintext:’, ‘allintitle:’, ‘allinurl:’, ‘define:’, ‘filetype:’, ‘id:’, ‘inanchor:’, ‘info:’, ‘intext:’, ‘intitle:’, ‘inurl:’, ‘link:’, ‘related:’, ‘site:’ the charge per task will be multiplied by 5
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/bing/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/bing/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * example:
     * 53.476225,-2.243572
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/bing/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/bing/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * can take the values:desktop, mobile
     * default value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * if you specify desktop in the device field, choose from the following values: windows, macos
     * default value: windows
     * if you specify mobile in the device field, choose from the following values: android, ios
     * default value: android
     */
    os?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 10
     * max value: 700
     * Your account will be billed per each SERP containing up to 10 results;
     * Setting depth above 10 may result in additional charges if the search engine returns more than 10 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * default value: 1
     * max value: 100
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * additional parameters of the search query
     * optional field
     * get the list of available parameters and additional details here
     */
    search_param?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpBingOrganicLiveHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpBingOrganicLiveHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpBingOrganicLiveHtmlResultInfo | null> | null;
};

export type SerpBingOrganicLiveHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBingOrganicLiveHtmlTaskInfo | null> | null;
};

export type SerpBingLocalPackTaskPostRequestInfo = {
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://www.bing.com/search?q=rank%20checker&count=50&first=1&setlang=en&cc=US&safesearch=Moderate&FORM=SEPAGE
     */
    url?: string | null;
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”
     * if this field contains such parameters as ‘allinanchor:’, ‘allintext:’, ‘allintitle:’, ‘allinurl:’, ‘define:’, ‘filetype:’, ‘id:’, ‘inanchor:’, ‘info:’, ‘intext:’, ‘intitle:’, ‘inurl:’, ‘link:’, ‘related:’, ‘site:’ the charge per task will be multiplied by 5
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/bing/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/bing/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * example:
     * 53.476225,-2.243572
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available locations of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/bing/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available locations of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/bing/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device operating system
     * optional field
     * note that this API provides results for desktop only
     * choose from the following values: windows, macos
     * default value: windows
     */
    os?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 100
     * max value: 700
     * Your account will be billed per each SERP containing up to 10 results;
     * Setting depth above 10 may result in additional charges if the search engine returns more than 10 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * max value: 100
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * additional parameters of the search query
     * optional field
     * get the list of available parameters and additional details here
     */
    search_param?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * regular, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpBingLocalPackTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpBingLocalPackTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBingLocalPackTaskPostTaskInfo | null> | null;
};

export type SerpBingLocalPackTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: local_pack
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpBingLocalPackTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpBingLocalPackTasksReadyResultInfo | null> | null;
};

export type SerpBingLocalPackTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBingLocalPackTasksReadyTaskInfo | null> | null;
};

export type SerpBingLocalPackTasksFixedResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: local_pack
     */
    se_type?: string | null;
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpBingLocalPackTasksFixedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpBingLocalPackTasksFixedResultInfo | null> | null;
};

export type SerpBingLocalPackTasksFixedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBingLocalPackTasksFixedTaskInfo | null> | null;
};

export type SerpBingLocalPackTaskGetRegularResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     * equals null
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     * equals null
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * local_pack
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<BaseBingSerpApiElementItem | null> | null;
};

export type SerpBingLocalPackTaskGetRegularTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpBingLocalPackTaskGetRegularResultInfo | null> | null;
};

export type SerpBingLocalPackTaskGetRegularResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBingLocalPackTaskGetRegularTaskInfo | null> | null;
};

export type SerpBingLocalPackTaskGetHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpBingLocalPackTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpBingLocalPackTaskGetHtmlResultInfo | null> | null;
};

export type SerpBingLocalPackTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBingLocalPackTaskGetHtmlTaskInfo | null> | null;
};

export type SerpBingLocalPackLiveRegularRequestInfo = {
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://www.bing.com/search?q=rank%20checker&count=50&first=1&setlang=en&cc=US&safesearch=Moderate&FORM=SEPAGE
     */
    url?: string | null;
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * if this field contains such parameters as ‘allinanchor:’, ‘allintext:’, ‘allintitle:’, ‘allinurl:’, ‘define:’, ‘filetype:’, ‘id:’, ‘inanchor:’, ‘info:’, ‘intext:’, ‘intitle:’, ‘inurl:’, ‘link:’, ‘related:’, ‘site:’ the charge per task will be multiplied by 5
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/bing/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/bing/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * example:
     * 53.476225,-2.243572
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/bing/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/bing/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device operating system
     * optional field
     * note that this API provides results for desktop only
     * choose from the following values: windows, macos
     * default value: windows
     */
    os?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 100
     * max value: 700
     * Your account will be billed per each SERP containing up to 10 results;
     * Setting depth above 10 may result in additional charges if the search engine returns more than 10 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * max value: 100
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * additional parameters of the search query
     * optional field
     * get the list of available parameters and additional details here
     */
    search_param?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpBingLocalPackLiveRegularResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     * equals null
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * local_pack
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<BaseBingSerpApiElementItem | null> | null;
};

export type SerpBingLocalPackLiveRegularTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpBingLocalPackLiveRegularResultInfo | null> | null;
};

export type SerpBingLocalPackLiveRegularResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBingLocalPackLiveRegularTaskInfo | null> | null;
};

export type SerpBingLocalPackLiveHtmlRequestInfo = {
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://www.bing.com/search?q=rank%20checker&count=50&first=1&setlang=en&cc=US&safesearch=Moderate&FORM=SEPAGE
     */
    url?: string | null;
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * if this field contains such parameters as ‘allinanchor:’, ‘allintext:’, ‘allintitle:’, ‘allinurl:’, ‘define:’, ‘filetype:’, ‘id:’, ‘inanchor:’, ‘info:’, ‘intext:’, ‘intitle:’, ‘inurl:’, ‘link:’, ‘related:’, ‘site:’ the charge per task will be multiplied by 5
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/bing/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/bing/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * example:
     * 53.476225,-2.243572
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/bing/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/bing/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * can take the values:desktop, mobile
     * default value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * if you specify desktop in the device field, choose from the following values: windows, macos
     * default value: windows
     * if you specify mobile in the device field, choose from the following values: android, ios
     * default value: android
     */
    os?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 10
     * max value: 700
     * Your account will be billed per each SERP containing up to 10 results;
     * Setting depth above 10 may result in additional charges if the search engine returns more than 10 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * default value: 1
     * max value: 100
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * additional parameters of the search query
     * optional field
     * get the list of available parameters and additional details here
     */
    search_param?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpBingLocalPackLiveHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpBingLocalPackLiveHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpBingLocalPackLiveHtmlResultInfo | null> | null;
};

export type SerpBingLocalPackLiveHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBingLocalPackLiveHtmlTaskInfo | null> | null;
};

export type SerpYoutubeLocationsResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the code of the superordinate location
     * example:
     * "location_code": 9041134,
     * "location_name": "Vienna International Airport,Lower Austria,Austria",
     * "location_code_parent": 20044
     * where location_code_parent corresponds to:
     * "location_code": 20044,
     * "location_name": "Lower Austria,Austria"
     */
    location_code_parent?: number | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     */
    location_type?: string | null;
};

export type SerpYoutubeLocationsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYoutubeLocationsResultInfo | null> | null;
};

export type SerpYoutubeLocationsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYoutubeLocationsTaskInfo | null> | null;
};

export type SerpYoutubeLocationsCountryResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the code of the superordinate location
     * example:
     * "location_code": 9041134,
     * "location_name": "Vienna International Airport,Lower Austria,Austria",
     * "location_code_parent": 20044
     * where location_code_parent corresponds to:
     * "location_code": 20044,
     * "location_name": "Lower Austria,Austria"
     */
    location_code_parent?: number | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     */
    location_type?: string | null;
};

export type SerpYoutubeLocationsCountryTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYoutubeLocationsCountryResultInfo | null> | null;
};

export type SerpYoutubeLocationsCountryResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYoutubeLocationsCountryTaskInfo | null> | null;
};

export type SerpYoutubeLanguagesResultInfo = {
    /**
     * language name
     */
    language_name?: string | null;
    /**
     * language code according to ISO 639-1
     */
    language_code?: string | null;
};

export type SerpYoutubeLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYoutubeLanguagesResultInfo | null> | null;
};

export type SerpYoutubeLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYoutubeLanguagesTaskInfo | null> | null;
};

export type SerpYoutubeVideoInfoTaskPostRequestInfo = {
    /**
     * ID of the video
     * required field
     * you can find video ID in the URL or ‘youtube_video’ item of YouTube Organic result
     * example:
     * vQXvyV0zIP4
     */
    video_id?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/youtube/locations
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/youtube/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/youtube/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/youtube/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * only value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * choose from the following values: windows, macos
     * default value: windows
     */
    os?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible value:
     * advanced
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpYoutubeVideoInfoTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpYoutubeVideoInfoTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYoutubeVideoInfoTaskPostTaskInfo | null> | null;
};

export type SerpYoutubeVideoInfoTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: video_info
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpYoutubeVideoInfoTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYoutubeVideoInfoTasksReadyResultInfo | null> | null;
};

export type SerpYoutubeVideoInfoTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYoutubeVideoInfoTasksReadyTaskInfo | null> | null;
};

export type SerpYoutubeVideoInfoTasksFixedResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: video_info
     */
    se_type?: string | null;
    /**
     * date when the task was fixed (in the UTC format)
     */
    date_fixed?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpYoutubeVideoInfoTasksFixedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYoutubeVideoInfoTasksFixedResultInfo | null> | null;
};

export type SerpYoutubeVideoInfoTasksFixedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYoutubeVideoInfoTasksFixedTaskInfo | null> | null;
};

export type ChannelSubscribersCount = {
    /**
     * displayed subscriber count
     * subscriber count as displayed on YouTube
     */
    displayed_count?: string | null;
    /**
     * subscriber count
     */
    count?: number | null;
};

export type Subtitles = {
    /**
     * language of subtitles
     */
    language?: string | null;
    /**
     * defines if subtitles are translatable
     */
    is_translatable?: boolean | null;
    /**
     * defines if subtitles are auto generated
     */
    is_auto_generated?: boolean | null;
};

export type StreamingQualityElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * label of the quality element
     */
    label?: string | null;
    /**
     * video width in pixels
     */
    width?: number | null;
    /**
     * video height in pixels
     */
    height?: number | null;
    /**
     * bit rate of the video
     */
    bitrate?: number | null;
    /**
     * media type of the video
     */
    mime_type?: string | null;
    /**
     * frame rate of the video
     */
    fps?: number | null;
};

export type YoutubeVideoInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP for the target domain
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * ID of the video received in a POST array
     */
    video_id?: string | null;
    /**
     * title of the video
     */
    title?: string | null;
    /**
     * URL of the video
     */
    url?: string | null;
    /**
     * the URL of the page where the thumbnail is hosted
     */
    thumbnail_url?: string | null;
    /**
     * the ID of the channel where the video is published
     */
    channel_id?: string | null;
    /**
     * the name of the channel where the video is published
     */
    channel_name?: string | null;
    /**
     * the URL of the channel where the video is published
     */
    channel_url?: string | null;
    /**
     * the URL of the page where the logo image of the channel is hosted
     */
    channel_logo?: string | null;
    /**
     * description of the video
     */
    description?: string | null;
    /**
     * number of views of the video
     */
    views_count?: number | null;
    /**
     * number of likes on the video
     */
    likes_count?: number | null;
    /**
     * number of comments on the video
     */
    comments_count?: number | null;
    /**
     * number of subscribers of the channel
     */
    channel_subscribers_count?: ChannelSubscribersCount | null;
    /**
     * the date when the video is published
     */
    publication_date?: string | null;
    /**
     * date and time when the result is published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2022-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
    /**
     * keywords relevant to the video
     */
    keywords?: Array<string | null> | null;
    /**
     * the category the video belongs to
     */
    category?: string | null;
    /**
     * indicates whether the video is on live
     */
    is_live?: boolean | null;
    /**
     * indicates whether the video is embeddable
     */
    is_embeddable?: boolean | null;
    /**
     * duration of the video
     */
    duration_time?: string | null;
    /**
     * duration of the video in seconds
     */
    duration_time_seconds?: number | null;
    /**
     * array of elements describing properties of subtitles in the video
     */
    subtitles?: Array<Subtitles | null> | null;
    /**
     * array of elements that contain information about all possible streaming qualities of the video
     */
    streaming_quality?: Array<StreamingQualityElement | null> | null;
};

export type SerpYoutubeVideoInfoTaskGetAdvancedResultInfo = {
    /**
     * ID of the video received in a POST array
     */
    video_id?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item:
     * youtube_video_info
     */
    item_types?: Array<string | null> | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<YoutubeVideoInfo | null> | null;
};

export type SerpYoutubeVideoInfoTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYoutubeVideoInfoTaskGetAdvancedResultInfo | null> | null;
};

export type SerpYoutubeVideoInfoTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYoutubeVideoInfoTaskGetAdvancedTaskInfo | null> | null;
};

export type SerpYoutubeVideoInfoLiveAdvancedRequestInfo = {
    /**
     * ID of the video
     * required field
     * you can find video ID in the URL or ‘youtube_video’ item of YouTube Organic result
     * example:
     * vQXvyV0zIP4
     */
    video_id?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/youtube/locations
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/youtube/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/youtube/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/youtube/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * only value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * choose from the following values: windows, macos
     * default value: windows
     */
    os?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpYoutubeVideoInfoLiveAdvancedResultInfo = {
    /**
     * ID of the video received in a POST array
     */
    video_id?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item:
     * youtube_video_info
     */
    item_types?: Array<string | null> | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<YoutubeVideoInfo | null> | null;
};

export type SerpYoutubeVideoInfoLiveAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYoutubeVideoInfoLiveAdvancedResultInfo | null> | null;
};

export type SerpYoutubeVideoInfoLiveAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYoutubeVideoInfoLiveAdvancedTaskInfo | null> | null;
};

export type SerpYoutubeVideoSubtitlesTaskPostRequestInfo = {
    /**
     * ID of the video
     * required field
     * you can find video ID in the URL or ‘youtube_video’ item of YouTube Organic result
     * example:
     * Y8Wu4rSNJms
     */
    video_id?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * language code of original text
     * you can get the language code from YouTube Video Info result
     */
    subtitles_language?: string | null;
    /**
     * language code of translated text
     * possible values:
     * "az", "ay", "ak", "sq", "am", "en", "ar", "hy", "as", "af", "eu", "be", "bn", "my", "bg", "bs", "bho", "cy", "hu", "vi", "haw", "ht", "gl", "lg", "el", "ka", "gn", "gu", "gd", "da", "fy", "zu", "iw", "ig", "yi", "id", "ga", "is", "es", "it", "yo", "kk", "kn", "ca", "qu", "rw", "ky", "zh-Hant", "zh-Hans", "ko", "co", "xh", "ku", "km", "lo", "la", "lv", "ln", "lt", "lb", "mk", "mg", "ms", "ml", "dv", "mt", "mi", "mr", "mn", "und", "de", "ne", "nl", "no", "ny", "or", "om", "pa", "fa", "pl", "pt", "ps", "ro", "ru", "sm", "sa", "ceb", "nso", "sr", "si", "sd", "sk", "sl", "so", "sw", "su", "tg", "th", "ta", "tt", "te", "ti", "ts", "tr", "tk", "uz", "ug", "uk", "ur", "fil", "fi", "fr", "ha", "hi", "hmn", "hr", "cs", "sv", "sn", "ee", "eo", "et", "st", "jv", "ja", "kri"
     */
    subtitles_translate_language?: string | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/youtube/locations
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/youtube/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/youtube/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/youtube/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * only value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * choose from the following values: windows, macos
     * default value: windows
     */
    os?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible value:
     * advanced
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpYoutubeVideoSubtitlesTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpYoutubeVideoSubtitlesTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYoutubeVideoSubtitlesTaskPostTaskInfo | null> | null;
};

export type SerpYoutubeVideoSubtitlesTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: video_subtitles
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpYoutubeVideoSubtitlesTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYoutubeVideoSubtitlesTasksReadyResultInfo | null> | null;
};

export type SerpYoutubeVideoSubtitlesTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYoutubeVideoSubtitlesTasksReadyTaskInfo | null> | null;
};

export type SerpYoutubeVideoSubtitlesTasksFixedResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: video_subtitles
     */
    se_type?: string | null;
    /**
     * date when the task was fixed (in the UTC format)
     */
    date_fixed?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpYoutubeVideoSubtitlesTasksFixedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYoutubeVideoSubtitlesTasksFixedResultInfo | null> | null;
};

export type SerpYoutubeVideoSubtitlesTasksFixedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYoutubeVideoSubtitlesTasksFixedTaskInfo | null> | null;
};

export type YoutubeSubtitles = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP for the target domain
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * text translated in subtitles
     */
    text?: string | null;
    /**
     * the second subtitled text starts
     */
    start_time?: number | null;
    /**
     * the second subtitled text ends
     */
    end_time?: number | null;
    /**
     * duration of subtitles in seconds
     */
    duration_time?: number | null;
};

export type SerpYoutubeVideoSubtitlesTaskGetAdvancedResultInfo = {
    /**
     * ID of the video received in a POST array
     */
    video_id?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item:
     * youtube_subtitles
     */
    item_types?: Array<string | null> | null;
    /**
     * indicates whether the language is unsupported by the system
     */
    unsupported_language?: boolean | null;
    /**
     * language code of translated text
     */
    translate_language?: string | null;
    /**
     * language code of original text
     */
    origin_language?: string | null;
    /**
     * the category the video belongs to
     */
    category?: string | null;
    /**
     * number of subtitles in the video
     */
    subtitles_count?: number | null;
    /**
     * title of the video
     */
    title?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<YoutubeSubtitles | null> | null;
};

export type SerpYoutubeVideoSubtitlesTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYoutubeVideoSubtitlesTaskGetAdvancedResultInfo | null> | null;
};

export type SerpYoutubeVideoSubtitlesTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYoutubeVideoSubtitlesTaskGetAdvancedTaskInfo | null> | null;
};

export type SerpYoutubeVideoSubtitlesLiveAdvancedRequestInfo = {
    /**
     * ID of the video
     * required field
     * you can find video ID in the URL or ‘youtube_video’ item of YouTube Organic result
     * example:
     * Y8Wu4rSNJms
     */
    video_id?: string;
    /**
     * language code of original text
     * you can get the language code from YouTube Video Info result
     */
    subtitles_language?: string | null;
    /**
     * language code of translated text
     * possible values:
     * "az", "ay", "ak", "sq", "am", "en", "ar", "hy", "as", "af", "eu", "be", "bn", "my", "bg", "bs", "bho", "cy", "hu", "vi", "haw", "ht", "gl", "lg", "el", "ka", "gn", "gu", "gd", "da", "fy", "zu", "iw", "ig", "yi", "id", "ga", "is", "es", "it", "yo", "kk", "kn", "ca", "qu", "rw", "ky", "zh-Hant", "zh-Hans", "ko", "co", "xh", "ku", "km", "lo", "la", "lv", "ln", "lt", "lb", "mk", "mg", "ms", "ml", "dv", "mt", "mi", "mr", "mn", "und", "de", "ne", "nl", "no", "ny", "or", "om", "pa", "fa", "pl", "pt", "ps", "ro", "ru", "sm", "sa", "ceb", "nso", "sr", "si", "sd", "sk", "sl", "so", "sw", "su", "tg", "th", "ta", "tt", "te", "ti", "ts", "tr", "tk", "uz", "ug", "uk", "ur", "fil", "fi", "fr", "ha", "hi", "hmn", "hr", "cs", "sv", "sn", "ee", "eo", "et", "st", "jv", "ja", "kri"
     */
    subtitles_translate_language?: string | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/youtube/locations
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/youtube/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/youtube/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/youtube/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * only value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * choose from the following values: windows, macos
     * default value: windows
     */
    os?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpYoutubeVideoSubtitlesLiveAdvancedResultInfo = {
    /**
     * ID of the video received in a POST array
     */
    video_id?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item:
     * youtube_subtitles
     */
    item_types?: Array<string | null> | null;
    /**
     * indicates whether the language is unsupported by the system
     */
    unsupported_language?: boolean | null;
    /**
     * language code of translated text
     */
    translate_language?: string | null;
    /**
     * language code of original text
     */
    origin_language?: string | null;
    /**
     * the category the video belongs to
     */
    category?: string | null;
    /**
     * number of subtitles in the video
     */
    subtitles_count?: number | null;
    /**
     * title of the video
     */
    title?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<YoutubeSubtitles | null> | null;
};

export type SerpYoutubeVideoSubtitlesLiveAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYoutubeVideoSubtitlesLiveAdvancedResultInfo | null> | null;
};

export type SerpYoutubeVideoSubtitlesLiveAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYoutubeVideoSubtitlesLiveAdvancedTaskInfo | null> | null;
};

export type SerpYoutubeVideoCommentsTaskPostRequestInfo = {
    /**
     * ID of the video
     * required field
     * you can find video ID in the URL or ‘youtube_video’ item of YouTube Organic result
     * example:
     * vQXvyV0zIP4
     */
    video_id?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/youtube/locations
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/youtube/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/youtube/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/youtube/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * only value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * choose from the following values: windows, macos
     * default value: windows
     */
    os?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 20
     * max value: 700
     * Note: your account will be billed per each SERP containing up to 20 results;
     * thus, setting a depth above 20 may result in additional charges if the search engine returns more than 20 results;
     * if the specified depth is higher than the number of results in the response, the difference will be refunded automatically to your account balance
     */
    depth?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible value:
     * advanced
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpYoutubeVideoCommentsTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpYoutubeVideoCommentsTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYoutubeVideoCommentsTaskPostTaskInfo | null> | null;
};

export type SerpYoutubeVideoCommentsTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: video_comments
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpYoutubeVideoCommentsTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYoutubeVideoCommentsTasksReadyResultInfo | null> | null;
};

export type SerpYoutubeVideoCommentsTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYoutubeVideoCommentsTasksReadyTaskInfo | null> | null;
};

export type SerpYoutubeVideoCommentsTasksFixedResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: video_comments
     */
    se_type?: string | null;
    /**
     * date when the task was fixed (in the UTC format)
     */
    date_fixed?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpYoutubeVideoCommentsTasksFixedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYoutubeVideoCommentsTasksFixedResultInfo | null> | null;
};

export type SerpYoutubeVideoCommentsTasksFixedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYoutubeVideoCommentsTasksFixedTaskInfo | null> | null;
};

export type YoutubeComment = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP for the target domain
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * name of the author of the comment
     */
    author_name?: string | null;
    /**
     * the URL of the page where the author’s channel logo is hosted
     */
    author_thumbnail?: string | null;
    /**
     * URL of the author’s channel
     */
    author_url?: string | null;
    /**
     * text of the comment
     */
    text?: string | null;
    /**
     * displayed publication date
     */
    publication_date?: string | null;
    /**
     * date and time when the result was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2022-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
    /**
     * number of likes on the comment
     */
    likes_count?: number | null;
    /**
     * number of replies on the comment
     */
    reply_count?: number | null;
};

export type SerpYoutubeVideoCommentsTaskGetAdvancedResultInfo = {
    /**
     * ID of the video received in a POST array
     */
    video_id?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item:
     * youtube_comment
     */
    item_types?: Array<string | null> | null;
    /**
     * title of the video
     */
    title?: string | null;
    /**
     * number of comments on the video
     */
    comments_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<YoutubeComment | null> | null;
};

export type SerpYoutubeVideoCommentsTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYoutubeVideoCommentsTaskGetAdvancedResultInfo | null> | null;
};

export type SerpYoutubeVideoCommentsTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYoutubeVideoCommentsTaskGetAdvancedTaskInfo | null> | null;
};

export type SerpYoutubeVideoCommentsLiveAdvancedRequestInfo = {
    /**
     * ID of the video
     * required field
     * you can find video ID in the URL or ‘youtube_video’ item of YouTube Organic result
     * example:
     * vQXvyV0zIP4
     */
    video_id?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/youtube/locations
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/youtube/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/youtube/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/youtube/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * only value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * choose from the following values: windows, macos
     * default value: windows
     */
    os?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 20
     * max value: 700
     * Note: your account will be billed per each SERP containing up to 20 results;
     * thus, setting a depth above 20 may result in additional charges if the search engine returns more than 20 results;
     * if the specified depth is higher than the number of results in the response, the difference will be refunded automatically to your account balance
     */
    depth?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpYoutubeVideoCommentsLiveAdvancedResultInfo = {
    /**
     * ID of the video received in a POST array
     */
    video_id?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item:
     * youtube_comment
     */
    item_types?: Array<string | null> | null;
    /**
     * title of the video
     */
    title?: string | null;
    /**
     * number of comments on the video
     */
    comments_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<YoutubeComment | null> | null;
};

export type SerpYoutubeVideoCommentsLiveAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYoutubeVideoCommentsLiveAdvancedResultInfo | null> | null;
};

export type SerpYoutubeVideoCommentsLiveAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYoutubeVideoCommentsLiveAdvancedTaskInfo | null> | null;
};

export type SerpYahooLocationsResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the code of the superordinate location
     * example:
     * "location_code": 9041134,
     * "location_name": "Vienna International Airport,Lower Austria,Austria",
     * "location_code_parent": 20044
     * where location_code_parent corresponds to:
     * "location_code": 20044,
     * "location_name": "Lower Austria,Austria"
     */
    location_code_parent?: number | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     */
    location_type?: string | null;
};

export type SerpYahooLocationsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYahooLocationsResultInfo | null> | null;
};

export type SerpYahooLocationsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYahooLocationsTaskInfo | null> | null;
};

export type SerpYahooLocationsCountryResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the code of the superordinate location
     * example:
     * "location_code": 9041134,
     * "location_name": "Vienna International Airport,Lower Austria,Austria",
     * "location_code_parent": 20044
     * where location_code_parent corresponds to:
     * "location_code": 20044,
     * "location_name": "Lower Austria,Austria"
     */
    location_code_parent?: number | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     */
    location_type?: string | null;
};

export type SerpYahooLocationsCountryTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYahooLocationsCountryResultInfo | null> | null;
};

export type SerpYahooLocationsCountryResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYahooLocationsCountryTaskInfo | null> | null;
};

export type SerpYahooLanguagesResultInfo = {
    /**
     * language name
     */
    language_name?: string | null;
    /**
     * language code according to ISO 639-1
     */
    language_code?: string | null;
};

export type SerpYahooLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYahooLanguagesResultInfo | null> | null;
};

export type SerpYahooLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYahooLanguagesTaskInfo | null> | null;
};

export type SerpYahooOrganicTaskPostRequestInfo = {
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://search.yahoo.com/search?p=rank+checker&n=100&vl=lang_en&vc=us&ei=UTF-8
     */
    url?: string | null;
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/yahoo/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/yahoo/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9 (mm)
     * the maximum value for “radius”: 199999 (mm)
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/yahoo/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/yahoo/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * can take the values:desktop, mobile
     * default value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * if you specify desktop in the device field, choose from the following values: windows, macos
     * default value: windows
     * if you specify mobile in the device field, choose from the following values: android, ios
     * default value: android
     */
    os?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * au.search.yahoo.com, uk.search.yahoo.com, ca.search.yahoo.com, etc.
     */
    se_domain?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 10
     * max value: 700
     * Your account will be billed per each SERP containing up to 10 results;
     * Setting depth above 10 may result in additional charges if the search engine returns more than 10 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * default value: 1
     * max value: 100
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * additional parameters of the search query
     * optional field
     * get the list of available parameters and additional details here
     */
    search_param?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * regular, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpYahooOrganicTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpYahooOrganicTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYahooOrganicTaskPostTaskInfo | null> | null;
};

export type SerpYahooOrganicTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: organic
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpYahooOrganicTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYahooOrganicTasksReadyResultInfo | null> | null;
};

export type SerpYahooOrganicTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYahooOrganicTasksReadyTaskInfo | null> | null;
};

export type SerpYahooOrganicTasksFixedResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: organic
     */
    se_type?: string | null;
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpYahooOrganicTasksFixedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYahooOrganicTasksFixedResultInfo | null> | null;
};

export type SerpYahooOrganicTasksFixedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYahooOrganicTasksFixedTaskInfo | null> | null;
};

export type SerpYahooOrganicTaskGetRegularResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     * equals null
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results found in SERP
     * contains types of all search results (items) found in the returned SERP
     * possible item types:
     * featured_snippet, images, local_pack, hotels_pack, organic, paid, people_also_ask, related_searches, shopping, recipes, top_stories, video;
     * note that this array contains all types of search results found in the returned SERP;
     * however, this endpoint provides data for organic, paid, and featured_snippet types only;
     * to get all items (including SERP features and rich snippets) found in the returned SERP, please refer to the Yahoo Organiс Advanced SERP endpoint
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * total pages retrieved
     * total number of retrieved SERPs in the result
     */
    pages_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items in SERP
     */
    items?: Array<BaseSerpApiElementItem | null> | null;
};

export type SerpYahooOrganicTaskGetRegularTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYahooOrganicTaskGetRegularResultInfo | null> | null;
};

export type SerpYahooOrganicTaskGetRegularResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYahooOrganicTaskGetRegularTaskInfo | null> | null;
};

export type SerpYahooOrganicTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     * equals null
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * featured_snippet, images, local_pack, hotels_pack, organic, paid, people_also_ask, related_searches, shopping, recipes, top_stories, video
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * total pages retrieved
     * total number of retrieved SERPs in the result
     */
    pages_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * additional items present in the element
     * if there are none, equals null
     */
    items?: Array<BaseSerpApiElementItem | null> | null;
};

export type SerpYahooOrganicTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYahooOrganicTaskGetAdvancedResultInfo | null> | null;
};

export type SerpYahooOrganicTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYahooOrganicTaskGetAdvancedTaskInfo | null> | null;
};

export type SerpYahooOrganicTaskGetHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpYahooOrganicTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYahooOrganicTaskGetHtmlResultInfo | null> | null;
};

export type SerpYahooOrganicTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYahooOrganicTaskGetHtmlTaskInfo | null> | null;
};

export type SerpYahooOrganicLiveRegularRequestInfo = {
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://search.yahoo.com/search?p=rank+checker&n=100&vl=lang_en&vc=us&ei=UTF-8
     */
    url?: string | null;
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/yahoo/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/yahoo/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9 (mm)
     * the maximum value for “radius”: 199999 (mm)
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/yahoo/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/yahoo/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * can take the values:desktop, mobile
     * default value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * if you specify desktop in the device field, choose from the following values: windows, macos
     * default value: windows
     * if you specify mobile in the device field, choose from the following values: android, ios
     * default value: android
     */
    os?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * au.search.yahoo.com, uk.search.yahoo.com, ca.search.yahoo.com, etc.
     */
    se_domain?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 10
     * max value: 700
     * Your account will be billed per each SERP containing up to 10 results;
     * Setting depth above 10 may result in additional charges if the search engine returns more than 10 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * default value: 1
     * max value: 100
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * additional parameters of the search query
     * optional field
     * get the list of available parameters and additional details here
     */
    search_param?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpYahooOrganicLiveRegularResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * You can use it to make sure that we provided exact results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     * equals null
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results found in SERP
     * contains types of all search results (items) found in the returned SERP
     * possible item types:
     * featured_snippet, images, local_pack, hotels_pack, organic, paid, people_also_ask, related_searches, shopping, recipes, top_stories, video;
     * note that this array contains all types of search results found in the returned SERP;
     * however, this endpoint provides data for organic, paid, and featured_snippet types only;
     * to get all items (including SERP features and rich snippets) found in the returned SERP, please refer to the Yahoo Organiс Advanced SERP endpoint
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * total pages retrieved
     * total number of retrieved SERPs in the result
     */
    pages_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items in SERP
     */
    items?: Array<BaseSerpApiElementItem | null> | null;
};

export type SerpYahooOrganicLiveRegularTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYahooOrganicLiveRegularResultInfo | null> | null;
};

export type SerpYahooOrganicLiveRegularResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYahooOrganicLiveRegularTaskInfo | null> | null;
};

export type SerpYahooOrganicLiveAdvancedRequestInfo = {
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://search.yahoo.com/search?p=rank+checker&n=100&vl=lang_en&vc=us&ei=UTF-8
     */
    url?: string | null;
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/yahoo/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/yahoo/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9 (mm)
     * the maximum value for “radius”: 199999 (mm)
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/yahoo/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/yahoo/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * can take the values:desktop, mobile
     * default value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * if you specify desktop in the device field, choose from the following values: windows, macos
     * default value: windows
     * if you specify mobile in the device field, choose from the following values: android, ios
     * default value: android
     */
    os?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * au.search.yahoo.com, uk.search.yahoo.com, ca.search.yahoo.com, etc.
     */
    se_domain?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 10
     * max value: 700
     * Your account will be billed per each SERP containing up to 10 results;
     * Setting depth above 10 may result in additional charges if the search engine returns more than 10 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * default value: 1
     * max value: 100
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * additional parameters of the search query
     * optional field
     * get the list of available parameters and additional details here
     */
    search_param?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpYahooOrganicLiveAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     * equals null
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * featured_snippet, images, local_pack, hotels_pack, organic, paid, people_also_ask, related_searches, shopping, recipes, top_stories, video
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * total pages retrieved
     * total number of retrieved SERPs in the result
     */
    pages_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * additional items present in the element
     * if there are none, equals null
     */
    items?: Array<BaseSerpApiElementItem | null> | null;
};

export type SerpYahooOrganicLiveAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYahooOrganicLiveAdvancedResultInfo | null> | null;
};

export type SerpYahooOrganicLiveAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYahooOrganicLiveAdvancedTaskInfo | null> | null;
};

export type SerpYahooOrganicLiveHtmlRequestInfo = {
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://search.yahoo.com/search?p=rank+checker&n=100&vl=lang_en&vc=us&ei=UTF-8
     */
    url?: string | null;
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/yahoo/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/yahoo/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9 (mm)
     * the maximum value for “radius”: 199999 (mm)
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/yahoo/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/yahoo/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * can take the values:desktop, mobile
     * default value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * if you specify desktop in the device field, choose from the following values: windows, macos
     * default value: windows
     * if you specify mobile in the device field, choose from the following values: android, ios
     * default value: android
     */
    os?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * au.search.yahoo.com, uk.search.yahoo.com, ca.search.yahoo.com, etc.
     */
    se_domain?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 10
     * max value: 700
     * Your account will be billed per each SERP containing up to 10 results;
     * Setting depth above 10 may result in additional charges if the search engine returns more than 10 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * default value: 1
     * max value: 100
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * additional parameters of the search query
     * optional field
     * get the list of available parameters and additional details here
     */
    search_param?: string | null;
};

export type SerpYahooOrganicLiveHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpYahooOrganicLiveHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpYahooOrganicLiveHtmlResultInfo | null> | null;
};

export type SerpYahooOrganicLiveHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpYahooOrganicLiveHtmlTaskInfo | null> | null;
};

export type SerpBaiduLocationsResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the code of the superordinate location
     * only City location_type is supported for all countries except China (where Country is also supported);
     * don’t match locations by location_code_parent because the results for Region and Country-level results for most countries are not supported by Baidu SERP API
     */
    location_code_parent?: number | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     * only City is supported for all countries except China (where Country is also supported)
     */
    location_type?: string | null;
};

export type SerpBaiduLocationsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpBaiduLocationsResultInfo | null> | null;
};

export type SerpBaiduLocationsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBaiduLocationsTaskInfo | null> | null;
};

export type SerpBaiduLocationsCountryResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the code of the superordinate location
     * only City location_type is supported for all countries except China (where Country is also supported);
     * don’t match locations by location_code_parent because the results for Region and Country-level results for most countries are not supported by Baidu SERP API
     */
    location_code_parent?: number | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     * only City is supported for all countries except China (where Country is also supported)
     */
    location_type?: string | null;
};

export type SerpBaiduLocationsCountryTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpBaiduLocationsCountryResultInfo | null> | null;
};

export type SerpBaiduLocationsCountryResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBaiduLocationsCountryTaskInfo | null> | null;
};

export type SerpBaiduLanguagesResultInfo = {
    /**
     * language name
     */
    language_name?: string | null;
    /**
     * language code according to ISO 639-1
     */
    language_code?: string | null;
};

export type SerpBaiduLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpBaiduLanguagesResultInfo | null> | null;
};

export type SerpBaiduLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBaiduLanguagesTaskInfo | null> | null;
};

export type SerpBaiduOrganicTaskPostRequestInfo = {
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 10
     * max value: 700
     * Your account will be billed per each SERP containing up to 10 results;
     * Setting depth above 10 may result in additional charges if the search engine returns more than 10 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * default value: 1
     * max value: 100
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/baidu/languagesnote that the only language supported in Baidu search engine is Chinese (Simplified). However, Baidu may as well return results for queries in other languages, so specifying keyword in Chinese is not mandatory
     * example:
     * Chinese (Simplified)
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/baidu/languagesnote that the only language supported in Baidu search engine is Chinese (Simplified) with the zh_CN language code. However, Baidu may as well return results for queries in other languages, so specifying keyword in Chinese is not mandatory
     * example:
     * zh_CN
     */
    language_code?: string | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/baidu/locations
     * example:
     * New York,New York,United States
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/baidu/locations
     * example:
     * 2156
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9 (mm)
     * the maximum value for “radius”: 199999 (mm)if you use this field, the returned results will be based on the closest city found for your coordinates. Thus, we don’t recommend using this field as the results might not be relevant to the specified coordinates
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * device type
     * optional field
     * can take the values: desktop, mobile, tablet
     * default value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * if you specify desktop in the device field, choose from the following values: windows, macos
     * default value: windows
     * if you specify mobile in the device field, choose from the following values: android, ios
     * default value: android
     * if you specify tablet in the device field, choose from the following values: android, ios
     * default value: android
     */
    os?: string | null;
    /**
     * include direct URL for each ranked result
     * optional field
     * if set to true, the returned results will contain direct URLs of the ranked websites
     * by default, the URLs in Baidu results are encoded by the search engine,
     * for example:
     * http://www.baidu.com/link?url=KQt6LSwU5OHnPtB8210R8flBP40grY6lTPxH_0UO7S2kgiZMTmw3ztV0hCo5c1kLdefault value: false
     * Note: if set to true, the charge per task will be multiplied by 10 as our system runs a separate request for each ranked website to return its direct URL
     */
    get_website_url?: boolean | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * regular, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpBaiduOrganicTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpBaiduOrganicTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBaiduOrganicTaskPostTaskInfo | null> | null;
};

export type SerpBaiduOrganicTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: organic
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpBaiduOrganicTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpBaiduOrganicTasksReadyResultInfo | null> | null;
};

export type SerpBaiduOrganicTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBaiduOrganicTasksReadyTaskInfo | null> | null;
};

export type SerpBaiduOrganicTasksFixedResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: organic
     */
    se_type?: string | null;
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpBaiduOrganicTasksFixedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpBaiduOrganicTasksFixedResultInfo | null> | null;
};

export type SerpBaiduOrganicTasksFixedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBaiduOrganicTasksFixedTaskInfo | null> | null;
};

export type SerpBaiduOrganicTaskGetRegularResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     * equals null
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results found in SERP
     * contains types of all search results (items) found in the returned SERP
     * possible item types:
     * organic, paid
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * total pages retrieved
     * total number of retrieved SERPs in the result
     */
    pages_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items in SERP
     */
    items?: Array<BaseSerpApiElementItem | null> | null;
};

export type SerpBaiduOrganicTaskGetRegularTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpBaiduOrganicTaskGetRegularResultInfo | null> | null;
};

export type SerpBaiduOrganicTaskGetRegularResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBaiduOrganicTaskGetRegularTaskInfo | null> | null;
};

export type DictionarySerpElementItem = (BaseSerpApiElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * relevant URL of the Ad element in SERP
     */
    url?: string | null;
    /**
     * domain in SERP
     */
    domain?: string | null;
    /**
     * breadcrumb of the Ad element in SERP
     */
    breadcrumb?: string | null;
    /**
     * keyword highlighted in the result
     */
    keyword?: string | null;
    /**
     * snippet of the element
     */
    snippet?: string | null;
    /**
     * description of the results element in SERP
     */
    text?: string | null;
    /**
     * sitelinks
     * the links shown below some of search results
     * if there are none, equals null
     */
    links?: Array<LinkElement | null> | null;
};

export type SerpBaiduOrganicTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     * equals null
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * images, local_pack, map, organic, paid, related_searches, video, stocks_box, dictionary, shopping
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * total pages retrieved
     * total number of retrieved SERPs in the result
     */
    pages_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * additional items present in the element
     * if there are none, equals null
     */
    items?: Array<BaseSerpApiElementItem | null> | null;
};

export type SerpBaiduOrganicTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpBaiduOrganicTaskGetAdvancedResultInfo | null> | null;
};

export type SerpBaiduOrganicTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBaiduOrganicTaskGetAdvancedTaskInfo | null> | null;
};

export type SerpBaiduOrganicTaskGetHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpBaiduOrganicTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpBaiduOrganicTaskGetHtmlResultInfo | null> | null;
};

export type SerpBaiduOrganicTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpBaiduOrganicTaskGetHtmlTaskInfo | null> | null;
};

export type SerpNaverOrganicTaskPostRequestInfo = {
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields
     * in most cases, we wouldn’t recommend using this method;
     * example:
     * https://search.naver.com/search.naver?where=nexearch&sm=top_hty&fbm=1&ie=utf8&query=iphone
     */
    url?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 15
     * max value: 700
     * Your account will be billed per each SERP containing up to 15 results;
     * Setting depth above 15 may result in additional charges if the search engine returns more than 15 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * default value: 1
     * max value: 100
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * device type
     * optional field
     * can take the values:desktop, mobile
     * default value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * if you specify desktop in the device field, choose from the following values: windows, macos
     * default value: windows
     * if you specify mobile in the device field, choose from the following values: android, ios
     * default value: android
     */
    os?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically
     * however, you can set a custom search engine domain in this field
     * example:
     * search.naver.com
     */
    se_domain?: string | null;
    /**
     * additional parameters of the search query
     * optional field
     * get the list of available parameters and additional details here
     */
    search_param?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the function you used for setting a task
     * possible values:
     * regular, advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpNaverOrganicTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpNaverOrganicTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpNaverOrganicTaskPostTaskInfo | null> | null;
};

export type SerpNaverOrganicTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: organic
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpNaverOrganicTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpNaverOrganicTasksReadyResultInfo | null> | null;
};

export type SerpNaverOrganicTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpNaverOrganicTasksReadyTaskInfo | null> | null;
};

export type SerpNaverOrganicTasksFixedResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: organic
     */
    se_type?: string | null;
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpNaverOrganicTasksFixedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpNaverOrganicTasksFixedResultInfo | null> | null;
};

export type SerpNaverOrganicTasksFixedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpNaverOrganicTasksFixedTaskInfo | null> | null;
};

export type SerpNaverOrganicTaskGetRegularResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     * equals null
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results found in SERP
     * contains types of all search results (items) found in the returned SERP
     * possible item types:
     * images, local_pack, map, organic, paid, related_searches, video
     * note that this array contains all types of search results found in the returned SERP;
     * however, this endpoint provides data for organic and paid types only
     * to get all items (inlcuding SERP features and rich snippets) found in the returned SERP, please refer to the Naver Organiс Advanced SERP endpoint
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * total pages retrieved
     * total number of retrieved SERPs in the result
     */
    pages_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items in SERP
     */
    items?: Array<BaseSerpApiElementItem | null> | null;
};

export type SerpNaverOrganicTaskGetRegularTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpNaverOrganicTaskGetRegularResultInfo | null> | null;
};

export type SerpNaverOrganicTaskGetRegularResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpNaverOrganicTaskGetRegularTaskInfo | null> | null;
};

export type SerpNaverOrganicTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     * equals null
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * images, local_pack, map, organic, paid, related_searches, video
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * total pages retrieved
     * total number of retrieved SERPs in the result
     */
    pages_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * additional items present in the element
     * if there are none, equals null
     */
    items?: Array<BaseSerpApiElementItem | null> | null;
};

export type SerpNaverOrganicTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpNaverOrganicTaskGetAdvancedResultInfo | null> | null;
};

export type SerpNaverOrganicTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpNaverOrganicTaskGetAdvancedTaskInfo | null> | null;
};

export type SerpNaverOrganicTaskGetHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpNaverOrganicTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpNaverOrganicTaskGetHtmlResultInfo | null> | null;
};

export type SerpNaverOrganicTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpNaverOrganicTaskGetHtmlTaskInfo | null> | null;
};

export type SerpSeznamLocationsResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the code of the superordinate location
     * only City location_type is supported for all countries except China (where Country is also supported);
     * don’t match locations by location_code_parent because the results for Region and Country-level results for most countries are not supported by Baidu SERP API
     */
    location_code_parent?: number | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     */
    location_type?: string | null;
};

export type SerpSeznamLocationsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpSeznamLocationsResultInfo | null> | null;
};

export type SerpSeznamLocationsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpSeznamLocationsTaskInfo | null> | null;
};

export type SerpSeznamLocationsCountryResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the code of the superordinate location
     * only City location_type is supported for all countries except China (where Country is also supported);
     * don’t match locations by location_code_parent because the results for Region and Country-level results for most countries are not supported by Baidu SERP API
     */
    location_code_parent?: number | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     */
    location_type?: string | null;
};

export type SerpSeznamLocationsCountryTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpSeznamLocationsCountryResultInfo | null> | null;
};

export type SerpSeznamLocationsCountryResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpSeznamLocationsCountryTaskInfo | null> | null;
};

export type SerpSeznamLanguagesResultInfo = {
    /**
     * language name
     */
    language_name?: string | null;
    /**
     * language code according to ISO 639-1
     */
    language_code?: string | null;
};

export type SerpSeznamLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpSeznamLanguagesResultInfo | null> | null;
};

export type SerpSeznamLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpSeznamLanguagesTaskInfo | null> | null;
};

export type SerpSeznamOrganicTaskPostRequestInfo = {
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to the https://api.dataforseo.com/v3/serp/seznam/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to the https://api.dataforseo.com/v3/serp/seznam/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/seznam/languages
     * example:
     * Czech
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/seznam/languages
     * example:
     * cs
     */
    language_code?: string | null;
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields;
     * note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL;
     * in most cases, we wouldn’t recommend using this method.
     */
    url?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 10;
     * maximum value: 500;
     * Your account will be billed per each SERP containing up to 10 results;
     * Setting depth above 10 may result in additional charges if the search engine returns more than 10 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * default value: 1
     * max value: 10
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * device type
     * optional field
     * can take the values:desktop, mobile
     * default value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * if you specify desktop in the device field, choose from the following values: windows, macos
     * default value: windows
     * if you specify mobile in the device field, choose from the following values: android, ios
     * default value: android
     */
    os?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically
     * however, you can set a custom search engine domain in this field
     * example:
     * search.seznam.cz
     */
    se_domain?: string | null;
    /**
     * additional parameters of the search query
     * optional field
     */
    search_param?: string | null;
    /**
     * calculate pixel rankings for SERP elements in advanced results
     * optional field
     * pixel ranking refers to the distance between the result snippet and top left corner of the screen;
     * Visit Help Center to learn more>>
     * by default, the parameter is set to false
     * Note: if set to true, the charge per task will be multiplied by 2
     */
    calculate_rectangles?: boolean | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the function you used for setting a task
     * possible values:
     * regular, advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpSeznamOrganicTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpSeznamOrganicTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpSeznamOrganicTaskPostTaskInfo | null> | null;
};

export type SerpSeznamOrganicTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: organic
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpSeznamOrganicTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpSeznamOrganicTasksReadyResultInfo | null> | null;
};

export type SerpSeznamOrganicTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpSeznamOrganicTasksReadyTaskInfo | null> | null;
};

export type SerpSeznamOrganicTasksFixedResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: organic
     */
    se_type?: string | null;
    /**
     * date when the task was fixed (in the UTC format)
     */
    date_fixed?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpSeznamOrganicTasksFixedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpSeznamOrganicTasksFixedResultInfo | null> | null;
};

export type SerpSeznamOrganicTasksFixedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpSeznamOrganicTasksFixedTaskInfo | null> | null;
};

export type SerpSeznamOrganicTaskGetRegularResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     * equals null
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results found in SERP
     * contains types of all search results (items) found in the returned SERP
     * possible item types:
     * images, local_pack, organic, related_searches, top_stories, featured_snippet, video
     * note that this array contains all types of search results found in the returned SERP;
     * however, this endpoint provides data for the organic type only
     * to get all items (inlcuding SERP features and rich snippets) found in the returned SERP, please refer to the Seznam Organiс Advanced SERP endpoint
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * total pages retrieved
     * total number of retrieved SERPs in the result
     */
    pages_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items in SERP
     */
    items?: Array<BaseSerpApiElementItem | null> | null;
};

export type SerpSeznamOrganicTaskGetRegularTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpSeznamOrganicTaskGetRegularResultInfo | null> | null;
};

export type SerpSeznamOrganicTaskGetRegularResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpSeznamOrganicTaskGetRegularTaskInfo | null> | null;
};

export type SerpSeznamOrganicTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     * equals null
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * images, local_pack, organic, related_searches, top_stories, featured_snippet, video
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * total pages retrieved
     * total number of retrieved SERPs in the result
     */
    pages_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * additional items present in the element
     * if there are none, equals null
     */
    items?: Array<BaseSerpApiElementItem | null> | null;
};

export type SerpSeznamOrganicTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpSeznamOrganicTaskGetAdvancedResultInfo | null> | null;
};

export type SerpSeznamOrganicTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpSeznamOrganicTaskGetAdvancedTaskInfo | null> | null;
};

export type SerpSeznamOrganicTaskGetHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpSeznamOrganicTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpSeznamOrganicTaskGetHtmlResultInfo | null> | null;
};

export type SerpSeznamOrganicTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpSeznamOrganicTaskGetHtmlTaskInfo | null> | null;
};

export type SerpGoogleFinanceExploreTaskPostRequestInfo = {
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to  https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default);
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority;
     * The cost can be calculated on the Pricing page
     */
    priority?: number | null;
    /**
     * device type
     * optional field
     * possible value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * possible values: windows
     */
    os?: string | null;
    /**
     * financial news filters
     * optional field
     * possible values: top_stories, local_market, world_markets
     * default value: top_stories
     * Note: if you specify local_market or world_markets, the charge per task will be multiplied by 2
     */
    news_type?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:: advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpGoogleFinanceExploreTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpGoogleFinanceExploreTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleFinanceExploreTaskPostTaskInfo | null> | null;
};

export type SerpGoogleFinanceExploreTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: finance_explore
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleFinanceExploreTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleFinanceExploreTasksReadyResultInfo | null> | null;
};

export type SerpGoogleFinanceExploreTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleFinanceExploreTasksReadyTaskInfo | null> | null;
};

export type SerpApiGoogleFinanceAssetPairElementElementItem = (BaseSerpApiGoogleFinanceElementItem | null) & {
    /**
     * identifier of the base asset in a pair
     * example: EUR
     */
    base_symbol?: string | null;
    /**
     * identifier of the quote asset in a pair
     * example: USD
     */
    quote_symbol?: string | null;
    /**
     * full name of the base asset in a pair
     * example: Euro
     */
    base_display_name?: string | null;
    /**
     * full name of the base asset in a pair
     * example: Euro
     */
    quote_display_name?: string | null;
    /**
     * value of the base asset compared to the quote asset
     */
    price?: number | null;
    /**
     * change in price
     * change in price at a given timestamp
     */
    price_delta?: number | null;
    /**
     * identifier of the element
     * full identifier of the element that consists from ticker and market_identifier
     * example: PX1:INDEXDB
     */
    identifier?: string | null;
    /**
     * name of the market index as displayed on Google Finance
     * example: CAC 40
     */
    displayed_name?: string | null;
    /**
     * URL to the page of the market index on Google Finance
     */
    url?: string | null;
    /**
     * location of the market index
     * example: Europe/Paris
     */
    location?: string | null;
    /**
     * growth trend of the market index
     * possible values: up, down, stable
     */
    trend?: string | null;
    /**
     * date and time of the value readout
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2025-02-10 09:40:00 +00:00
     */
    timestamp?: string | null;
    /**
     * percentage of change in value of the market index
     */
    percentage_delta?: number | null;
};

export type SerpApiGoogleFinanceMarketIndexElementElementItem = (BaseSerpApiGoogleFinanceElementItem | null) & {
    /**
     * ticker of the market index
     * example: DAX
     */
    ticker?: string | null;
    /**
     * market identifier
     * example: INDEXDB
     */
    market_identifier?: string | null;
    /**
     * value of the market index
     * numerical value of the index at a given timestamp
     */
    index_value?: number | null;
    /**
     * change in value of the market index
     * change in the index_value at a given timestamp
     */
    index_value_delta?: number | null;
    /**
     * identifier of the element
     * full identifier of the element that consists from ticker and market_identifier
     * example: PX1:INDEXDB
     */
    identifier?: string | null;
    /**
     * name of the market index as displayed on Google Finance
     * example: CAC 40
     */
    displayed_name?: string | null;
    /**
     * URL to the page of the market index on Google Finance
     */
    url?: string | null;
    /**
     * location of the market index
     * example: Europe/Paris
     */
    location?: string | null;
    /**
     * growth trend of the market index
     * possible values: up, down, stable
     */
    trend?: string | null;
    /**
     * date and time of the value readout
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2025-02-10 09:40:00 +00:00
     */
    timestamp?: string | null;
    /**
     * percentage of change in value of the market index
     */
    percentage_delta?: number | null;
};

export type SerpApiGoogleFinanceMarketInstrumentElementElementItem = (BaseSerpApiGoogleFinanceElementItem | null) & {
    /**
     * ticker of the market index
     * example: DAX
     */
    ticker?: string | null;
    /**
     * value of the base asset compared to the quote asset
     */
    price?: number | null;
    /**
     * change in price
     * change in price at a given timestamp
     */
    price_delta?: number | null;
    /**
     * price currency
     * example: USD
     */
    price_currency?: string | null;
    /**
     * identifier of the element
     * full identifier of the element that consists from ticker and market_identifier
     * example: PX1:INDEXDB
     */
    identifier?: string | null;
    /**
     * name of the market index as displayed on Google Finance
     * example: CAC 40
     */
    displayed_name?: string | null;
    /**
     * URL to the page of the market index on Google Finance
     */
    url?: string | null;
    /**
     * location of the market index
     * example: Europe/Paris
     */
    location?: string | null;
    /**
     * growth trend of the market index
     * possible values: up, down, stable
     */
    trend?: string | null;
    /**
     * date and time of the value readout
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2025-02-10 09:40:00 +00:00
     */
    timestamp?: string | null;
    /**
     * percentage of change in value of the market index
     */
    percentage_delta?: number | null;
};

export type Markets = {
    /**
     * financial market identifier
     * possible values: US, Europe, Asia, Currencies, Crypto, Futures
     */
    market?: string | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<BaseSerpApiGoogleFinanceElementItem | null> | null;
};

export type SerpApiGoogleFinanceHeroGroupsElementItem = (BaseSerpApiGoogleFinanceElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * financial markets data
     * array of items containing market indexes and other financial information related to these indexes
     */
    markets?: Array<Markets | null> | null;
};

export type SerpApiGoogleFinanceInterestedElementItem = (BaseSerpApiGoogleFinanceElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * market indexes data
     * array of items containing market indexes data;
     * possible type of items: google_finance_asset_pair_element, google_finance_market_instrument_element, google_finance_market_index_element
     */
    items?: Array<BaseSerpApiGoogleFinanceElementItem | null> | null;
};

export type GoogleFinanceNewsElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of the news article
     */
    title?: string | null;
    /**
     * URL to the page of the market index on Google Finance
     */
    url?: string | null;
    /**
     * name of the news source
     * name of the website where the news article is published
     */
    source?: string | null;
    /**
     * featured image URL
     * URL of the news article’s featured image
     */
    image_url?: string | null;
    /**
     * date and time of the value readout
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2025-02-10 09:40:00 +00:00
     */
    timestamp?: string | null;
    /**
     * market indexes quoted in the news article
     * information about market indexes quoted in the google_finance_news_element
     */
    quotes?: Array<BaseSerpApiGoogleFinanceElementItem | null> | null;
};

export type SerpApiGoogleFinanceNewsElementItem = (BaseSerpApiGoogleFinanceElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * title of the news element
     * example: In the news
     */
    title?: string | null;
    /**
     * sub-title of the news element
     * example: Based on Europe, Middle East, and Africa
     */
    sub_title?: string | null;
    /**
     * market indexes data
     * array of items containing market indexes data;
     * possible type of items: google_finance_asset_pair_element, google_finance_market_instrument_element, google_finance_market_index_element
     */
    items?: Array<GoogleFinanceNewsElement | null> | null;
};

export type GoogleFinanceEarningsCalendarElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of the news article
     */
    title?: string | null;
    /**
     * URL to the page of the market index on Google Finance
     */
    url?: string | null;
    /**
     * date and time of the value readout
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2025-02-10 09:40:00 +00:00
     */
    timestamp?: string | null;
};

export type SerpApiGoogleFinanceEarningsCalendarElementItem = (BaseSerpApiGoogleFinanceElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * market indexes data
     * array of items containing market indexes data;
     * possible type of items: google_finance_asset_pair_element, google_finance_market_instrument_element, google_finance_market_index_element
     */
    items?: Array<GoogleFinanceEarningsCalendarElement | null> | null;
};

export type SerpApiGoogleFinanceMostFollowedElementItem = (BaseSerpApiGoogleFinanceElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * market indexes data
     * array of items containing market indexes data;
     * possible type of items: google_finance_asset_pair_element, google_finance_market_instrument_element, google_finance_market_index_element
     */
    items?: Array<BaseSerpApiGoogleFinanceElementItem | null> | null;
};

export type GoogleFinanceMarketTrendsElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * object of items
     * array contains the following type of items: google_finance_asset_pair_element, google_finance_market_instrument_element, google_finance_market_index_element
     */
    quote?: BaseSerpApiGoogleFinanceElementItem | null;
    /**
     * array of items
     * array contains the following type of items: google_finance_news_element
     */
    news?: Array<GoogleFinanceNewsElement | null> | null;
};

export type SerpGoogleFinanceExploreAdvancedItem = {
    /**
     * array of items
     * this array can take the following names: most_active, gainers, losers
     */
    most_active?: Array<GoogleFinanceMarketTrendsElement | null> | null;
    gainers?: Array<GoogleFinanceMarketTrendsElement | null> | null;
    losers?: Array<GoogleFinanceMarketTrendsElement | null> | null;
};

export type SerpApiGoogleFinanceMarketTrendsElementItem = (BaseSerpApiGoogleFinanceElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * market indexes data
     * array of items containing market indexes data;
     * possible type of items: google_finance_asset_pair_element, google_finance_market_instrument_element, google_finance_market_index_element
     */
    items?: SerpGoogleFinanceExploreAdvancedItem | null;
};

export type SerpApiGoogleFinancePeopleAlsoSearchElementItem = (BaseSerpApiGoogleFinanceElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * market indexes data
     * array of items containing market indexes data;
     * possible type of items: google_finance_asset_pair_element, google_finance_market_instrument_element, google_finance_market_index_element
     */
    items?: Array<BaseSerpApiGoogleFinanceElementItem | null> | null;
};

export type SerpGoogleFinanceExploreTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     * in this case, the value will be null
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP;
     * possible item types: google_finance_hero_groups, google_finance_interested, google_finance_news, google_finance_earnings_calendar, google_finance_most_followed, google_finance_market_trends, google_finance_people_also_search
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * market indexes related to the market trends element
     * possible type of items: google_finance_asset_pair_element, google_finance_market_instrument_element, google_finance_market_index_element
     */
    items?: Array<BaseSerpApiGoogleFinanceElementItem | null> | null;
};

export type SerpGoogleFinanceExploreTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleFinanceExploreTaskGetAdvancedResultInfo | null> | null;
};

export type SerpGoogleFinanceExploreTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleFinanceExploreTaskGetAdvancedTaskInfo | null> | null;
};

export type SerpGoogleFinanceExploreTaskGetHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpGoogleFinanceExploreTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleFinanceExploreTaskGetHtmlResultInfo | null> | null;
};

export type SerpGoogleFinanceExploreTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleFinanceExploreTaskGetHtmlTaskInfo | null> | null;
};

export type SerpGoogleFinanceExploreLiveAdvancedRequestInfo = {
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * possible value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * possible values: windows
     */
    os?: string | null;
    /**
     * financial news filters
     * optional field
     * possible values: top_stories, local_market, world_markets
     * default value: top_stories
     * Note: if you specify local_market or world_markets, the charge per task will be multiplied by 2
     */
    news_type?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpGoogleFinanceExploreLiveAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     * in this case, the value will be null
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP;
     * possible item types: google_finance_hero_groups, google_finance_interested, google_finance_news, google_finance_earnings_calendar, google_finance_most_followed, google_finance_market_trends, google_finance_people_also_search
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * market indexes related to the market trends element
     * possible type of items: google_finance_asset_pair_element, google_finance_market_instrument_element, google_finance_market_index_element
     */
    items?: Array<BaseSerpApiGoogleFinanceElementItem | null> | null;
};

export type SerpGoogleFinanceExploreLiveAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleFinanceExploreLiveAdvancedResultInfo | null> | null;
};

export type SerpGoogleFinanceExploreLiveAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleFinanceExploreLiveAdvancedTaskInfo | null> | null;
};

export type SerpGoogleFinanceExploreLiveHtmlRequestInfo = {
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to  https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * possible value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * possible values: windows
     */
    os?: string | null;
    /**
     * financial news filters
     * optional field
     * possible values: top_stories, local_market, world_markets
     * default value: top_stories
     */
    news_type?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpGoogleFinanceExploreLiveHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpGoogleFinanceExploreLiveHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleFinanceExploreLiveHtmlResultInfo | null> | null;
};

export type SerpGoogleFinanceExploreLiveHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleFinanceExploreLiveHtmlTaskInfo | null> | null;
};

export type SerpGoogleFinanceMarketsTaskPostRequestInfo = {
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to  https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default);
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority;
     * The cost can be calculated on the Pricing page
     */
    priority?: number | null;
    /**
     * device type
     * optional field
     * possible value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * possible values: windows
     */
    os?: string | null;
    /**
     * type of google finance market
     * optional field
     * possible values: most-active, indexes, indexes/americas, indexes/europe-middle-east-africa, indexes/asia-pacific, gainers, losers, climate-leaders, cryptocurrencies, currencies
     * default value: most-active
     */
    market_type?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:: advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpGoogleFinanceMarketsTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpGoogleFinanceMarketsTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleFinanceMarketsTaskPostTaskInfo | null> | null;
};

export type SerpGoogleFinanceMarketsTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: finance_markets
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleFinanceMarketsTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleFinanceMarketsTasksReadyResultInfo | null> | null;
};

export type SerpGoogleFinanceMarketsTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleFinanceMarketsTasksReadyTaskInfo | null> | null;
};

export type SerpApiGoogleFinanceExploreMarketTrendsElementItem = (BaseSerpApiGoogleFinanceElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * title of the market trends element
     * example: Europe, Middle East, and Africa
     */
    title?: string | null;
    /**
     * sub-title of the market trends element
     */
    sub_title?: string | null;
    /**
     * URL to finance pair on Google Finance
     */
    url?: string | null;
    /**
     * market indexes data
     * array of items containing market indexes data;
     * possible type of items: google_finance_asset_pair_element, google_finance_market_instrument_element, google_finance_market_index_element
     */
    items?: Array<BaseSerpApiGoogleFinanceElementItem | null> | null;
};

export type SerpGoogleFinanceMarketsTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     * in this case, the value will be null
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP;
     * possible item types: google_finance_hero_groups, google_finance_explore_market_trends, google_finance_news, google_finance_interested, google_finance_people_also_search
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * market indexes related to the market trends element
     * possible type of items: google_finance_asset_pair_element, google_finance_market_instrument_element, google_finance_market_index_element
     */
    items?: Array<BaseSerpApiGoogleFinanceElementItem | null> | null;
};

export type SerpGoogleFinanceMarketsTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleFinanceMarketsTaskGetAdvancedResultInfo | null> | null;
};

export type SerpGoogleFinanceMarketsTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleFinanceMarketsTaskGetAdvancedTaskInfo | null> | null;
};

export type SerpGoogleFinanceMarketsTaskGetHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpGoogleFinanceMarketsTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleFinanceMarketsTaskGetHtmlResultInfo | null> | null;
};

export type SerpGoogleFinanceMarketsTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleFinanceMarketsTaskGetHtmlTaskInfo | null> | null;
};

export type SerpGoogleFinanceMarketsLiveAdvancedRequestInfo = {
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to  https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * possible value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * possible values: windows
     */
    os?: string | null;
    /**
     * type of google finance market
     * optional field
     * possible values: most-active, indexes, indexes/americas, indexes/europe-middle-east-africa, indexes/asia-pacific, gainers, losers, climate-leaders, cryptocurrencies, currencies
     * default value: most-active
     */
    market_type?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpGoogleFinanceMarketsLiveAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection;
     * in this case, the value will be null
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     * in this case, the value will be null
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP;
     * possible item types: google_finance_hero_groups, google_finance_explore_market_trends, google_finance_news, google_finance_interested, google_finance_people_also_search
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * market indexes related to the market trends element
     * possible type of items: google_finance_asset_pair_element, google_finance_market_instrument_element, google_finance_market_index_element
     */
    items?: Array<BaseSerpApiGoogleFinanceElementItem | null> | null;
};

export type SerpGoogleFinanceMarketsLiveAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleFinanceMarketsLiveAdvancedResultInfo | null> | null;
};

export type SerpGoogleFinanceMarketsLiveAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleFinanceMarketsLiveAdvancedTaskInfo | null> | null;
};

export type SerpGoogleFinanceMarketsLiveHtmlRequestInfo = {
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to  https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * possible value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * possible values: windows
     */
    os?: string | null;
    /**
     * type of google finance market
     * optional field
     * possible values: most-active, indexes, indexes/americas, indexes/europe-middle-east-africa, indexes/asia-pacific, gainers, losers, climate-leaders, cryptocurrencies, currencies
     * default value: most-active
     */
    market_type?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpGoogleFinanceMarketsLiveHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpGoogleFinanceMarketsLiveHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleFinanceMarketsLiveHtmlResultInfo | null> | null;
};

export type SerpGoogleFinanceMarketsLiveHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleFinanceMarketsLiveHtmlTaskInfo | null> | null;
};

export type SerpGoogleFinanceQuoteTaskPostRequestInfo = {
    /**
     * ticker or stock symbol
     * required field
     * in this field you can pass the ticker symbol of publicly traded shares of a particular stock or security on a particular stock exchange;
     * you can specify up to 700 characters in the keyword field;
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to  https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default);
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority;
     * The cost can be calculated on the Pricing page
     */
    priority?: number | null;
    /**
     * device type
     * optional field
     * possible value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * possible values: windows
     */
    os?: string | null;
    /**
     * time window for google_finance_quote graph
     * optional field
     * possible values: 1D, 5D, 1M, 6M, YTD, 1Y, 5Y, MAX
     * default value: 1D
     * Note: if you specify a value that is different from 1D, the charge per task will be multiplied by 2
     */
    window?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:: advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpGoogleFinanceQuoteTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpGoogleFinanceQuoteTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleFinanceQuoteTaskPostTaskInfo | null> | null;
};

export type SerpGoogleFinanceQuoteTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: finance_quote
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleFinanceQuoteTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleFinanceQuoteTasksReadyResultInfo | null> | null;
};

export type SerpGoogleFinanceQuoteTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleFinanceQuoteTasksReadyTaskInfo | null> | null;
};

export type GraphItems = {
    /**
     * date and time of the value readout
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2025-02-10 09:40:00 +00:00
     */
    timestamp?: string | null;
    /**
     * point value on graph
     */
    value?: number | null;
    /**
     * volume value on graph
     */
    volume?: number | null;
};

export type SerpApiGoogleFinanceQuoteElementItem = (BaseSerpApiGoogleFinanceElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * quoted market indexes
     */
    quote?: BaseSerpApiGoogleFinanceElementItem | null;
    /**
     * values on graph
     */
    graph_items?: Array<GraphItems | null> | null;
};

export type SerpApiGoogleFinanceCompareToElementItem = (BaseSerpApiGoogleFinanceElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * market indexes data
     * array of items containing market indexes data;
     * possible type of items: google_finance_asset_pair_element, google_finance_market_instrument_element, google_finance_market_index_element
     */
    items?: Array<BaseSerpApiGoogleFinanceElementItem | null> | null;
};

export type GoogleFinanceMetricsBundleInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * date and time of the value readout
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2025-02-10 09:40:00 +00:00
     */
    timestamp?: string | null;
    /**
     * revenue value
     */
    revenue?: number | null;
    /**
     * change in revenue
     */
    revenue_delta?: number | null;
    /**
     * operating expense value
     */
    operating_expense?: number | null;
    /**
     * change in operating expense
     */
    operating_expense_delta?: number | null;
    /**
     * net income value
     */
    net_income?: number | null;
    /**
     * change in net income
     */
    net_income_delta?: number | null;
    /**
     * net profit margin value
     */
    net_profit_margin?: number | null;
    /**
     * change in net profit margin
     */
    net_profit_margin_delta?: number | null;
    /**
     * earnings per share value
     */
    earnings_per_share?: number | null;
    /**
     * change in earnings per share
     */
    earnings_per_share_delta?: number | null;
    /**
     * earnings before interest, taxes, deprecation, amortisation
     */
    ebitda?: number | null;
    /**
     * change in ebitda
     */
    ebitda_delta?: number | null;
    /**
     * effective tax rate value
     */
    effective_tax_rate?: number | null;
    /**
     * cash and short-term investments value
     */
    cash_and_short_term_investments?: number | null;
    /**
     * change in cash and short-term investments
     */
    cash_and_short_term_investments_delta?: number | null;
    /**
     * total assets value
     */
    total_assets?: number | null;
    /**
     * change in total assets
     */
    total_assets_delta?: number | null;
    /**
     * total liabilities value
     */
    total_liabilities?: number | null;
    /**
     * change in total liabilities
     */
    total_liabilities_delta?: number | null;
    /**
     * total equity value
     */
    total_equity?: number | null;
    /**
     * outstanding shares value
     */
    shares_outstanding?: number | null;
    /**
     * price to book
     */
    price_to_book?: number | null;
    /**
     * return on assets
     */
    return_on_assets?: number | null;
    /**
     * return on capital
     */
    return_on_capital?: number | null;
    /**
     * cash from operations
     */
    cash_from_operations?: number | null;
    /**
     * change in cash from operations
     */
    cash_from_operations_delta?: number | null;
    /**
     * cash from investing
     */
    cash_from_investing?: number | null;
    /**
     * change in cash from investing
     */
    cash_from_investing_delta?: number | null;
    /**
     * cash from financing/em>
     */
    cash_from_financing?: number | null;
    /**
     * change in cash from financing
     */
    cash_from_financing_delta?: number | null;
    /**
     * net change in cash
     */
    net_change_in_cash?: number | null;
    /**
     * change in net change in cash
     */
    net_change_in_cash_delta?: number | null;
    /**
     * free cash flow value
     */
    free_cash_flow?: number | null;
    /**
     * change in free cash flow
     */
    free_cash_flow_delta?: number | null;
};

export type SerpApiGoogleFinanceFinancialElementItem = (BaseSerpApiGoogleFinanceElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * quarterly google finance metrics
     */
    quarterly_metrics?: Array<GoogleFinanceMetricsBundleInfo | null> | null;
    /**
     * annual google finance metrics
     */
    annual_metrics?: Array<GoogleFinanceMetricsBundleInfo | null> | null;
};

export type GoogleFinanceFuturesChainElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * futures’ date and time of expiration
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2025-02-10 09:40:00 +00:00
     */
    expiration_timestamp?: string | null;
    /**
     * futures’ symbol
     */
    symbol?: string | null;
    /**
     * price of the market instrument
     * price of the market instrument at a given timestamp
     */
    price?: number | null;
    /**
     * currency of the price value
     */
    price_currency?: string | null;
    /**
     * change in price of the market instrument
     * change in price at a given timestamp
     */
    price_delta?: number | null;
    /**
     * percentage of change in value of the market index
     */
    percentage_delta?: number | null;
    /**
     * growth trend of the market index
     * possible values: up, down, stable
     */
    trend?: string | null;
};

export type SerpApiGoogleFinanceFuturesChainElementItem = (BaseSerpApiGoogleFinanceElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * financial markets data
     * array of items containing market indexes and other financial information related to these indexes
     */
    markets?: Array<GoogleFinanceFuturesChainElement | null> | null;
};

export type SerpApiGoogleFinanceDetailsElementItem = (BaseSerpApiGoogleFinanceElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * google finance badges relevant to the element
     * example: Futures Contract
     */
    badges?: Array<string | null> | null;
    /**
     * value of the previous close
     */
    previous_close?: number | null;
    /**
     * value of the start day range
     */
    start_day_range?: number | null;
    /**
     * value of the end day range
     */
    end_day_range?: number | null;
    /**
     * value of the start year range
     */
    start_year_range?: number | null;
    /**
     * value of the end year range
     */
    end_year_range?: number | null;
    /**
     * market cap value
     */
    market_cap?: number | null;
    /**
     * total volume value
     */
    volume?: number | null;
    /**
     * average volume value
     */
    avg_volume?: number | null;
    /**
     * price-earnings ratio
     */
    pe_ratio?: number | null;
    /**
     * dividend yield value
     */
    dividend_yield?: number | null;
    /**
     * primary exchange value
     */
    primary_exchange?: string | null;
    /**
     * year-to-date return value
     */
    ytd_return?: number | null;
    /**
     * expense ratio value
     */
    expense_ratio?: number | null;
    /**
     * category name
     */
    category?: string | null;
    net_assets?: number | null;
    /**
     * yield value
     */
    yield?: number | null;
    /**
     * front load value
     */
    front_load?: number | null;
    /**
     * name of the relevant market segment
     */
    market_segment?: string | null;
    /**
     * open interest value
     */
    open_interest?: number | null;
    /**
     * settlement price value
     */
    settlement_price?: number | null;
    /**
     * climate change score by carbon disclosure project methodology
     */
    cdp_climate_change_score?: string | null;
    /**
     * currency of the metrics
     */
    metrics_currency?: string | null;
};

export type SerpApiGoogleFinanceAboutElementItem = (BaseSerpApiGoogleFinanceElementItem | null) & {
    /**
     * group rank in SERP
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * displayed name of the market index
     * example: E-mini Dow ($5)
     */
    displayed_name?: string | null;
    /**
     * company description
     */
    description?: string | null;
    /**
     * source of information provided in description
     */
    description_source_url?: string | null;
    /**
     * Chief Executive Officer of the company
     */
    ceo?: string | null;
    /**
     * date when the company was founded
     * in the format: “yyyy-mm-ddThh-mm-ssZ”
     * example:
     * 1993-04-05T00:00:00Z
     */
    founded?: string | null;
    /**
     * company headquarters
     */
    headquarters?: string | null;
    /**
     * company website
     */
    website?: string | null;
    /**
     * number of company employees
     */
    employees?: number | null;
};

export type SerpGoogleFinanceQuoteTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     * in this case, the value will be null
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP;
     * possible item types: google_finance_hero_groups, google_finance_quote, google_finance_compare_to, google_finance_news, google_finance_financial, google_finance_futures_chain, google_finance_details, google_finance_about, google_finance_interested, google_finance_people_also_search
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * market indexes related to the market trends element
     */
    items?: Array<BaseSerpApiGoogleFinanceElementItem | null> | null;
};

export type SerpGoogleFinanceQuoteTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleFinanceQuoteTaskGetAdvancedResultInfo | null> | null;
};

export type SerpGoogleFinanceQuoteTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleFinanceQuoteTaskGetAdvancedTaskInfo | null> | null;
};

export type SerpGoogleFinanceQuoteTaskGetHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpGoogleFinanceQuoteTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleFinanceQuoteTaskGetHtmlResultInfo | null> | null;
};

export type SerpGoogleFinanceQuoteTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleFinanceQuoteTaskGetHtmlTaskInfo | null> | null;
};

export type SerpGoogleFinanceQuoteLiveAdvancedRequestInfo = {
    /**
     * ticker or stock symbol
     * required field
     * in this field you can pass the ticker symbol of publicly traded shares of a particular stock or security on a particular stock exchange;
     * you can specify up to 700 characters in the keyword field;
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to  https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * possible value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * possible values: windows
     */
    os?: string | null;
    /**
     * time window for google_finance_quote graph
     * optional field
     * possible values: 1D, 5D, 1M, 6M, YTD, 1Y, 5Y, MAX
     * default value: 1D
     * Note: if you specify a value that is different from 1D, the charge per task will be multiplied by 2
     */
    window?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpGoogleFinanceQuoteLiveAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     * in this case, the value will be null
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP;
     * possible item types: google_finance_hero_groups, google_finance_quote, google_finance_compare_to, google_finance_news, google_finance_financial, google_finance_futures_chain, google_finance_details, google_finance_about, google_finance_interested, google_finance_people_also_search
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * market indexes related to the market trends element
     */
    items?: Array<BaseSerpApiGoogleFinanceElementItem | null> | null;
};

export type SerpGoogleFinanceQuoteLiveAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleFinanceQuoteLiveAdvancedResultInfo | null> | null;
};

export type SerpGoogleFinanceQuoteLiveAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleFinanceQuoteLiveAdvancedTaskInfo | null> | null;
};

export type SerpGoogleFinanceQuoteLiveHtmlRequestInfo = {
    /**
     * ticker or stock symbol
     * required field
     * in this field you can pass the ticker symbol of publicly traded shares of a particular stock or security on a particular stock exchange;
     * you can specify up to 700 characters in the keyword field;
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to  https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * possible value: desktop
     */
    device?: string | null;
    /**
     * device operating system
     * optional field
     * possible values: windows
     */
    os?: string | null;
    /**
     * time window for google_finance_quote graph
     * optional field
     * possible values: 1D, 5D, 1M, 6M, YTD, 1Y, 5Y, MAX
     * default value: 1D
     */
    window?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpGoogleFinanceQuoteLiveHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type SerpGoogleFinanceQuoteLiveHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleFinanceQuoteLiveHtmlResultInfo | null> | null;
};

export type SerpGoogleFinanceQuoteLiveHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleFinanceQuoteLiveHtmlTaskInfo | null> | null;
};

export type SerpGoogleFinanceTickerSearchTaskPostRequestInfo = {
    /**
     * company or financial instrument name
     * required field
     * in this field, you can enter the name of a company or financial instrument to search for relevant tickers;
     * you can specify up to 700 characters in the keyword field;
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to  https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default);
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority;
     * The cost can be calculated on the Pricing page
     */
    priority?: number | null;
    /**
     * category of financial instruments to search for
     * optional field
     * possible values: all, stock, index, mutual_fund, currency, futures
     * default value: all
     */
    category?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:: advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type SerpGoogleFinanceTickerSearchTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type SerpGoogleFinanceTickerSearchTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleFinanceTickerSearchTaskPostTaskInfo | null> | null;
};

export type SerpGoogleFinanceTickerSearchTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: finance_ticker_search
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the SERP Regular task
     * if SERP Regular is not supported in the specified endpoint, the value will be null
     */
    endpoint_regular?: string | null;
    /**
     * URL for collecting the results of the SERP Advanced task
     * if SERP Advanced is not supported in the specified endpoint, the value will be null
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the SERP HTML task
     * if SERP HTML is not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type SerpGoogleFinanceTickerSearchTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleFinanceTickerSearchTasksReadyResultInfo | null> | null;
};

export type SerpGoogleFinanceTickerSearchTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleFinanceTickerSearchTasksReadyTaskInfo | null> | null;
};

export type SerpApiGoogleFinanceAssetPairElementItem = (BaseSerpApiGoogleFinanceTickerSearchElementItem | null) & {
    /**
     * identifier of the base asset in a pair
     * example: EUR
     */
    base_symbol?: string | null;
    /**
     * identifier of the quote asset in a pair
     * example: USD
     */
    quote_symbol?: string | null;
    /**
     * full name of the base asset in a pair
     * example: Euro
     */
    base_display_name?: string | null;
    /**
     * full name of the base asset in a pair
     * example: Euro
     */
    quote_display_name?: string | null;
    /**
     * value of the base asset compared to the quote asset
     */
    price?: number | null;
    /**
     * change in price
     * change in price at a given timestamp
     */
    price_delta?: number | null;
};

export type SerpApiGoogleFinanceMarketInstrumentElementItem = (BaseSerpApiGoogleFinanceTickerSearchElementItem | null) & {
    /**
     * ticker of the market index
     * example: DAX
     */
    ticker?: string | null;
    /**
     * value of the base asset compared to the quote asset
     */
    price?: number | null;
    /**
     * change in price
     * change in price at a given timestamp
     */
    price_delta?: number | null;
    /**
     * price currency
     * example: USD
     */
    price_currency?: string | null;
};

export type SerpApiGoogleFinanceMarketIndexElementItem = (BaseSerpApiGoogleFinanceTickerSearchElementItem | null) & {
    /**
     * ticker of the market index
     * example: DAX
     */
    ticker?: string | null;
    /**
     * market identifier
     * example: INDEXDB
     */
    market_identifier?: string | null;
    /**
     * value of the market index
     * numerical value of the index at a given timestamp
     */
    index_value?: number | null;
    /**
     * change in value of the market index
     * change in the index_value at a given timestamp
     */
    index_value_delta?: number | null;
};

export type SerpGoogleFinanceTickerSearchTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     * in this case, the value will be null
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP;
     * possible item types: google_finance_market_index, google_finance_asset_pair, google_finance_market_instrument
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items of search results found in SERP
     * array of items containing market indexes data;
     * possible type of items: google_finance_market_index, google_finance_asset_pair, google_finance_market_instrument
     */
    items?: Array<BaseSerpApiGoogleFinanceTickerSearchElementItem | null> | null;
};

export type SerpGoogleFinanceTickerSearchTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleFinanceTickerSearchTaskGetAdvancedResultInfo | null> | null;
};

export type SerpGoogleFinanceTickerSearchTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleFinanceTickerSearchTaskGetAdvancedTaskInfo | null> | null;
};

export type SerpGoogleFinanceTickerSearchLiveAdvancedRequestInfo = {
    /**
     * company or financial instrument name
     * required field
     * in this field, you can enter the name of a company or financial instrument to search for relevant tickers;
     * you can specify up to 700 characters in the keyword field;
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”;
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to  https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/serp/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to the https://api.dataforseo.com/v3/serp/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * category of financial instruments to search for
     * optional field
     * possible values: all, stock, index, mutual_fund, currency, futures
     * default value: all
     */
    category?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SerpGoogleFinanceTickerSearchLiveAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * search refinement chips
     * in this case, the value will be null
     */
    refinement_chips?: RefinementChipsInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP;
     * possible item types: google_finance_market_index, google_finance_asset_pair, google_finance_market_instrument
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items of search results found in SERP
     * array of items containing market indexes data;
     * possible type of items: google_finance_market_index, google_finance_asset_pair, google_finance_market_instrument
     */
    items?: Array<BaseSerpApiGoogleFinanceTickerSearchElementItem | null> | null;
};

export type SerpGoogleFinanceTickerSearchLiveAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<SerpGoogleFinanceTickerSearchLiveAdvancedResultInfo | null> | null;
};

export type SerpGoogleFinanceTickerSearchLiveAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<SerpGoogleFinanceTickerSearchLiveAdvancedTaskInfo | null> | null;
};

export type DataforseoLabsIdListRequestInfo = {
    /**
     * start time for filtering results
     * required field
     * if include_metadata is set to true, maximum value: a month from current datetime;
     * if include_metadata is set to false, maximum value: six months from current datetime;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_from?: string;
    /**
     * finish time for filtering results
     * required field
     * maximum value: current datetime;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-31 13:57:46 +00:00
     */
    datetime_to?: string;
    /**
     * the maximum number of returned task IDs
     * optional field
     * default value: 1000
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned task IDs
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten tasks in the results array will be omitted
     */
    offset?: number | null;
    /**
     * sorting by task execution time
     * optional field
     * possible values: "asc", "desc"
     * default value: "asc"
     */
    sort?: string | null;
    /**
     * include task metadata in the respond
     * optional field
     * default value: false
     */
    include_metadata?: boolean | null;
};

export type DataforseoLabsIdListResultInfo = {
    /**
     * id of the task
     */
    id?: string | null;
    /**
     * URL of the task
     * URL you used for making an API call
     */
    url?: string | null;
    /**
     * date and time when the task was made
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_posted?: string | null;
    /**
     * date and time when the task was completed
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_done?: string | null;
    /**
     * informational message of the task
     * you can find the full list of general informational messages here
     */
    status?: string | null;
    /**
     * cost of the task, USD
     */
    cost?: number | null;
    /**
     * contains parameters you specified in the POST request
     */
    metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | null;
    } | null;
};

export type DataforseoLabsIdListTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsIdListResultInfo | null> | null;
};

export type DataforseoLabsIdListResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsIdListTaskInfo | null> | null;
};

export type DataforseoLabsStatusInfo = {
    /**
     * update date of the Google endpoints
     * indicates the last date when the Google endpoints of DataForSEO Labs API were updated;
     * example:
     * 2022-05-16
     */
    date_update?: string | null;
};

export type DataforseoLabsStatusResultInfo = {
    /**
     * update information for the Google endpoints
     */
    google?: DataforseoLabsStatusInfo | null;
    /**
     * update information for the Bing endpoints
     */
    bing?: DataforseoLabsStatusInfo | null;
    /**
     * update information for the Amazon endpoints
     */
    amazon?: DataforseoLabsStatusInfo | null;
};

export type DataforseoLabsStatusTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsStatusResultInfo | null> | null;
};

export type DataforseoLabsStatusResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsStatusTaskInfo | null> | null;
};

export type DataforseoLabsErrorsRequestInfo = {
    /**
     * the maximum number of returned tasks that responded with an error
     * optional field
     * default value: 1000
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned tasks
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten tasks in the results array will be omitted and the data will be provided for the successive tasks
     */
    offset?: number | null;
    /**
     * return tasks with a certain function
     * use this field to obtain a list of tasks that returned an error filtered by a certain function
     * you can filter the results by the values you receive in the function fields of the API response
     * i.e., once you receive unfiltered results, you can call this API again to filter them by function
     * example: dataforseo_labs/related_keywords/live
     */
    filtered_function?: string | null;
    /**
     * start time for filtering results
     * optional field
     * allows filtering results by the datetime parameter within the range of the last 7 days;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2021-11-15 12:57:46 +00:00
     */
    datetime_from?: string | null;
    /**
     * finish time for filtering results
     * optional field
     * allows filtering results by the datetime parameter within the range of the last 7 days;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2021-11-15 13:57:46 +00:00
     */
    datetime_to?: string | null;
};

export type DataforseoLabsErrorsResultInfo = {
    /**
     * id of the task
     */
    id?: string | null;
    /**
     * date and time when an error occurred
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * corresponding API function
     */
    function?: string | null;
    /**
     * error code
     */
    error_code?: number | null;
    /**
     * error message or error URL
     * error message (see full list) or URL that caused an error
     */
    error_message?: string | null;
    /**
     * URL that caused an error
     * URL you used for making an API call
     */
    http_url?: string | null;
    /**
     * HTTP method
     */
    http_method?: string | null;
    /**
     * HTTP status code
     */
    http_code?: number | null;
    /**
     * time taken by HTTP request
     */
    http_time?: number | null;
    /**
     * HTTP response
     * server response
     */
    http_response?: string | null;
};

export type DataforseoLabsErrorsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsErrorsResultInfo | null> | null;
};

export type DataforseoLabsErrorsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsErrorsTaskInfo | null> | null;
};

export type DataforseoLabsAvailableFiltersResultInfo = {
    related_keywords?: {
        [key: string]: {
            [key: string]: string | null;
        } | null;
    } | null;
    keyword_suggestions?: {
        [key: string]: {
            [key: string]: string | null;
        } | null;
    } | null;
    ranked_keywords?: {
        [key: string]: {
            [key: string]: string | null;
        } | null;
    } | null;
    keyword_ideas?: {
        [key: string]: {
            [key: string]: string | null;
        } | null;
    } | null;
    serp_competitors?: {
        [key: string]: {
            [key: string]: string | null;
        } | null;
    } | null;
    relevant_pages?: {
        [key: string]: {
            [key: string]: string | null;
        } | null;
    } | null;
    subdomains?: {
        [key: string]: {
            [key: string]: string | null;
        } | null;
    } | null;
    competitors_domain?: {
        [key: string]: {
            [key: string]: string | null;
        } | null;
    } | null;
    categories_for_domain?: {
        [key: string]: {
            [key: string]: string | null;
        } | null;
    } | null;
    keywords_for_categories?: {
        [key: string]: {
            [key: string]: string | null;
        } | null;
    } | null;
    domain_intersection?: {
        [key: string]: {
            [key: string]: string | null;
        } | null;
    } | null;
    page_intersection?: {
        [key: string]: {
            [key: string]: string | null;
        } | null;
    } | null;
    domain_whois_overview?: {
        [key: string]: {
            [key: string]: string | null;
        } | null;
    } | null;
    top_searches?: {
        [key: string]: {
            [key: string]: string | null;
        } | null;
    } | null;
    domain_metrics_by_categories?: {
        [key: string]: {
            [key: string]: string | null;
        } | null;
    } | null;
    keywords_for_site?: {
        [key: string]: {
            [key: string]: string | null;
        } | null;
    } | null;
    product_competitors?: {
        [key: string]: {
            [key: string]: string | null;
        } | null;
    } | null;
    product_keyword_intersections?: {
        [key: string]: {
            [key: string]: string | null;
        } | null;
    } | null;
    app_intersection?: {
        [key: string]: {
            [key: string]: string | null;
        } | null;
    } | null;
    app_competitors?: {
        [key: string]: {
            [key: string]: string | null;
        } | null;
    } | null;
    keywords_for_app?: {
        [key: string]: {
            [key: string]: string | null;
        } | null;
    } | null;
    database_rows_count?: {
        [key: string]: string | null;
    } | null;
};

export type DataforseoLabsAvailableFiltersTaskInfo = BaseResponseTaskInfo & {
    result?: Array<DataforseoLabsAvailableFiltersResultInfo | null> | null;
};

export type DataforseoLabsAvailableFiltersResponseInfo = BaseResponseInfo & {
    tasks?: Array<DataforseoLabsAvailableFiltersTaskInfo | null> | null;
};

export type AvailableLanguages = {
    /**
     * supported sources
     * contains the sources of data supported for a specific location and language combination
     * only google and bing are currently available
     */
    available_sources?: Array<string | null> | null;
    /**
     * language name
     */
    language_name?: string | null;
    /**
     * language code according to ISO 639-1
     */
    language_code?: string | null;
    /**
     * the number of keywords available for the given location and language
     */
    keywords?: number | null;
    /**
     * the number of SERP pages available for the given location and language
     */
    serps?: number | null;
};

export type DataforseoLabsLocationsAndLanguagesResultInfo = {
    /**
     * location code
     */
    location_code?: number;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the code of the superordinate location
     * the value will be null as Country is the only supported location_type for this API
     */
    location_code_parent?: number | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     * possible values:
     * Country
     */
    location_type?: string | null;
    /**
     * supported languages
     * contains the languages which are supported for a specific location
     */
    available_languages?: Array<AvailableLanguages | null> | null;
};

export type DataforseoLabsLocationsAndLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsLocationsAndLanguagesResultInfo | null> | null;
};

export type DataforseoLabsLocationsAndLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsLocationsAndLanguagesTaskInfo | null> | null;
};

export type DataforseoLabsCategoriesResultInfo = {
    /**
     * category code
     */
    category_code?: number | null;
    /**
     * full name of the category
     */
    category_name?: string | null;
    /**
     * the code of the superordinate category
     * example:
     * "category_code": 10178,
     * "category_name": "Apparel Accessories",
     * "category_code_parent": 10021
     * where category_code_parent
     * corresponds to:
     * "category_code": 10021,
     * "category_name": "Apparel"
     * "category_code_parent": null
     */
    category_code_parent?: number | null;
};

export type DataforseoLabsCategoriesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsCategoriesResultInfo | null> | null;
};

export type DataforseoLabsCategoriesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsCategoriesTaskInfo | null> | null;
};

export type DataforseoLabsGoogleAvailableHistoryResultInfo = {
    /**
     * available date
     * indicates the date of the range available for setting in the Domain Metrics by Categories endpoint
     * example:
     * 2022-05-16
     */
    date?: string | null;
};

export type DataforseoLabsGoogleAvailableHistoryTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of objects containing results
     */
    result?: Array<DataforseoLabsGoogleAvailableHistoryResultInfo | null> | null;
};

export type DataforseoLabsGoogleAvailableHistoryResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleAvailableHistoryTaskInfo | null> | null;
};

export type DataforseoLabsGoogleKeywordsForSiteLiveRequestInfo = {
    /**
     * target domain
     * required field
     * the domain name of the target website
     * the domain should be specified without https://
     */
    target?: string;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * unique location identifier
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * optional field
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     * Note: if omitted, results default to the language with the most keyword records in the specified location;
     * refer to the available_languages.keywords field of the Locations and Languages endpoint to determine the default language
     */
    language_name?: string | null;
    /**
     * language code
     * optional field
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     * Note: if omitted, results default to the language with the most keyword records in the specified location;
     * refer to the available_languages.keywords field of the Locations and Languages endpoint to determine the default language
     */
    language_code?: string | null;
    /**
     * include data from SERP for each keyword
     * optional field
     * if set to true, we will return a serp_info array containing SERP data (number of search results, relevant URL, and SERP features) for every keyword in the response
     * default value: false
     */
    include_serp_info?: boolean | null;
    /**
     * indicates if the subdomains will be included in the search
     * optional field
     * if set to false, the subdomains will be ignored
     * default value: true
     */
    include_subdomains?: boolean | null;
    /**
     * include or exclude data from clickstream-based metrics in the result
     * optional field
     * if the parameter is set to true, you will receive clickstream_keyword_info, keyword_info_normalized_with_clickstream, and keyword_info_normalized_with_bing fields in the response
     * default value: false
     * with this parameter enabled, you will be charged double the price for the request
     * learn more about how clickstream-based metrics are calculated in this help center article
     */
    include_clickstream_data?: boolean | null;
    /**
     * the maximum number of keywords in the results array
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned keywords
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * offset token for subsequent requests
     * optional field
     * provided in the identical filed of the response to each request;
     * use this parameter to avoid timeouts while trying to obtain over 10,000 results in a single request;
     * by specifying the unique offset_token value from the response array, you will get the subsequent results of the initial task;
     * offset_token values are unique for each subsequent task
     * Note: if the offset_token is specified in the request, all other parameters except limit will not be taken into account when processing a task.
     */
    offset_token?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, match, not_match, ilike, not_ilike, like, not_like
     * you can use the % operator with like and not_like, as well as ilike and not_ilike to match any string of zero or more characters
     * note that you can not filter the results by relevance
     * example:
     * ["keyword_info.search_volume",">",0]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting parameter
     * default rule:
     * ["relevance,desc"]
     * relevance is used as the default sorting rule to provide you with the closest keyword ideas. We recommend using this sorting rule to get highly-relevant search terms. Note that relevance is only our internal system identifier, so it can not be used as a filter, and you will not find this field in the result array. The relevance score is based on a similar principle as used in the Keywords For Keywords endpoint.note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["relevance,desc","keyword_info.search_volume,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type SearchVolumeTrend = {
    /**
     * search volume change in percent compared to the previous month
     */
    monthly?: number | null;
    /**
     * search volume change in percent compared to the previous quarter
     */
    quarterly?: number | null;
    /**
     * search volume change in percent compared to the previous year
     */
    yearly?: number | null;
};

export type KeywordInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * date and time when keyword data was updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    last_updated_time?: string | null;
    /**
     * competition
     * represents the relative amount of competition associated with the given keyword. This value is based on Google Ads data and can be between 0 and 1 (inclusive)
     */
    competition?: number | null;
    /**
     * competition level
     * represents the relative level of competition associated with the given keyword in paid SERP only;
     * possible values: LOW, MEDIUM, HIGH
     * if competition level is unknown, the value is null;
     * learn more about the metric in this help center article
     */
    competition_level?: string | null;
    /**
     * cost-per-click
     * represents the average cost per click (USD) historically paid for the keyword
     */
    cpc?: number | null;
    /**
     * average monthly search volume rate
     * represents the (approximate) number of searches for the given keyword idea on google.com
     */
    search_volume?: number | null;
    /**
     * minimum bid for the ad to be displayed at the top of the first page
     * indicates the value greater than about 20% of the lowest bids for which ads were displayed (based on Google Ads statistics for advertisers)
     * the value may differ depending on the location specified in a POST request
     */
    low_top_of_page_bid?: number | null;
    /**
     * maximum bid for the ad to be displayed at the top of the first page
     * indicates the value greater than about 80% of the lowest bids for which ads were displayed (based on Google Ads statistics for advertisers)
     * the value may differ depending on the location specified in a POST request
     */
    high_top_of_page_bid?: number | null;
    /**
     * product and service categories
     * you can download the full list of possible categories
     */
    categories?: Array<number> | null;
    /**
     * monthly searches
     * represents the (approximate) number of searches on this keyword idea (as available for the past twelve months), targeted to the specified geographic locations
     */
    monthly_searches?: Array<MonthlySearchesInfo | null> | null;
    /**
     * search volume trend changes
     * represents search volume change in percent compared to the previous period
     */
    search_volume_trend?: SearchVolumeTrend | null;
};

export type KeywordProperties = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * main keyword in a group
     * contains the main keyword in a group determined by the synonym clustering algorithm
     * if the value is null, our database does not contain any keywords the corresponding algorithm could identify as synonymous with keyword
     */
    core_keyword?: string | null;
    /**
     * the algorithm used to identify synonyms
     * possible values:
     * keyword_metrics – indicates the algorithm based on keyword_info parameters
     * text_processing – indicates the text-based algorithm
     * if the value is null, our database does not contain any keywords the corresponding algorithm could identify as synonymous with keyword
     */
    synonym_clustering_algorithm?: string | null;
    /**
     * difficulty of ranking in the first top-10 organic results for a keyword
     * indicates the chance of getting in top-10 organic results for a keyword on a logarithmic scale from 0 to 100;
     * calculated by analysing, among other parameters, link profiles of the first 10 pages in SERP;
     * learn more about the metric in this help center guide
     */
    keyword_difficulty?: number | null;
    /**
     * detected language of the keyword
     * indicates the language of the keyword as identified by our system
     */
    detected_language?: string | null;
    /**
     * detected language of the keyword is different from the set language
     * if true, the language set in the request does not match the language determined by our system for a given keyword
     */
    is_another_language?: boolean | null;
};

export type SerpInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP
     * possible item types:
     * answer_box, app, carousel, multi_carousel, featured_snippet, google_flights, google_reviews, third_party_reviews, google_posts, images, jobs, knowledge_graph, local_pack, hotels_pack, map, organic, paid, people_also_ask, related_searches, people_also_search, shopping, top_stories, twitter, video, events, mention_carousel, recipes, top_sights, scholarly_articles, popular_products, podcasts, questions_and_answers, find_results_on, stocks_box, visual_stories, commercial_units, local_services, google_hotels, math_solver, currency_box, product_considerations, found_on_web, short_videos, refine_products, explore_brands, perspectives, discussions_and_forums, compare_sites, courses, ai_overview;
     * note that the actual results will be returned only for organic, paid, featured_snippet, and local_pack elements
     */
    serp_item_types?: Array<string | null> | null;
    /**
     * number of search results for the returned keyword
     */
    se_results_count?: number | null;
    /**
     * date and time when search intent data was last updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    last_updated_time?: string | null;
    /**
     * previous to the most recent date and time when SERP data was updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-10-15 12:57:46 +00:00
     */
    previous_updated_time?: string | null;
};

export type AvgBacklinksInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * average number of backlinks
     */
    backlinks?: number | null;
    /**
     * average number of dofollow links
     */
    dofollow?: number | null;
    /**
     * average number of referring pages
     */
    referring_pages?: number | null;
    /**
     * average number of referring domains
     */
    referring_domains?: number | null;
    /**
     * average number of referring main domains
     */
    referring_main_domains?: number | null;
    /**
     * average rank
     * learn more about the metric and its calculation formula in this help center article
     */
    rank?: number | null;
    /**
     * average main domain rank
     * learn more about the metric and its calculation formula in this help center article
     */
    main_domain_rank?: number | null;
    /**
     * date and time when the dataset was updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    last_updated_time?: string | null;
};

export type SearchIntentInfo = {
    /**
     * search engine type
     * possible values: google
     */
    se_type?: string | null;
    /**
     * main search intent
     * possible values: informational, navigational, commercial, transactional
     */
    main_intent?: string | null;
    /**
     * supplementary search intents
     * possible values: informational, navigational, commercial, transactional
     */
    foreign_intent?: Array<string | null> | null;
    /**
     * date and time when the dataset was updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    last_updated_time?: string | null;
};

export type KeywordDataInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * returned keyword idea
     */
    keyword?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * keyword data for the returned keyword idea
     */
    keyword_info?: KeywordInfo | null;
    /**
     * contains keyword search volume normalized with Bing search volume
     */
    keyword_info_normalized_with_bing?: KeywordInfoNormalizedWithInfo | null;
    /**
     * contains keyword search volume normalized with clickstream data
     */
    keyword_info_normalized_with_clickstream?: KeywordInfoNormalizedWithInfo | null;
    /**
     * clickstream data for the returned keyword
     * to retrieve results for this field, the parameter include_clickstream_data must be set to true
     */
    clickstream_keyword_info?: ClickstreamKeywordInfo | null;
    /**
     * additional information about the keyword
     */
    keyword_properties?: KeywordProperties | null;
    /**
     * SERP data
     * the value will be null if you didn’t set the field include_serp_info to true in the POST array or if there is no SERP data for this keyword in our database
     */
    serp_info?: SerpInfo | null;
    /**
     * backlink data for the returned keyword
     * this object provides the average number of backlinks, referring pages and domains, as well as the average rank values among the top-10 webpages ranking organically for the keyword
     */
    avg_backlinks_info?: AvgBacklinksInfo | null;
    /**
     * search intent info for the returned keyword
     * learn about search intent in this help center article
     */
    search_intent_info?: SearchIntentInfo | null;
};

export type DataforseoLabsGoogleKeywordsForSiteLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * target domain in a POST array
     */
    target?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total number of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * current offset value
     */
    offset?: number | null;
    /**
     * offset token for subsequent requests
     * you can use the string provided in this field to get the subsequent results of the initial task;
     * note: offset_token values are unique for each subsequent task
     */
    offset_token?: string | null;
    /**
     * contains keyword ideas and related data
     */
    items?: Array<KeywordDataInfo | null> | null;
};

export type DataforseoLabsGoogleKeywordsForSiteLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleKeywordsForSiteLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleKeywordsForSiteLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleKeywordsForSiteLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleRelatedKeywordsLiveRequestInfo = {
    /**
     * keyword
     * required field
     * UTF-8 encoding
     * the keywords will be converted to lowercase format
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available locations with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available locations with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * keyword search depth
     * optional field
     * default value: 1
     * number of the returned results depends on the value you set in this field
     * you can specify a level from 0 to 4
     * estimated number of keywords for each level (maximum):
     * 0 – the keyword set in the keyword field
     * 1 – 8 keywords
     * 2 – 72 keywords
     * 3 – 584 keywords
     * 4 – 4680 keywords
     */
    depth?: number | null;
    /**
     * include data for the seed keyword
     * optional field
     * if set to true, data for the seed keyword specified in the keyword field will be provided in the seed_keyword_data array of the response
     * default value: false
     */
    include_seed_keyword?: boolean | null;
    /**
     * include data from SERP for each keyword
     * optional field
     * if set to true, we will return a serp_info array containing SERP data (number of search results, relevant URL, and SERP features) for every keyword in the response
     * default value: false
     */
    include_serp_info?: boolean | null;
    /**
     * include or exclude data from clickstream-based metrics in the result
     * optional field
     * if the parameter is set to true, you will receive clickstream_keyword_info, keyword_info_normalized_with_clickstream, and keyword_info_normalized_with_bing fields in the response
     * default value: false
     * with this parameter enabled, you will be charged double the price for the request
     * learn more about how clickstream-based metrics are calculated in this help center article
     */
    include_clickstream_data?: boolean | null;
    /**
     * ignore highly similar keywords
     * optional field
     * if set to true only core keywords will be returned, all highly similar keywords will be excluded;
     * default value: false
     */
    ignore_synonyms?: boolean | null;
    /**
     * return data for core keyword
     * optional field
     * if true, serp_info and related_keywords will be returned for the main keyword in the group that the specified keyword belongs to;
     * if false, serp_info and related_keywords will be returned for the specified keyword (if available);
     * refer to this help center article for more details;
     * default value: false
     */
    replace_with_core_keyword?: boolean | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, match, not_match, ilike, not_ilike, like,not_like
     * you can use the % operator with like and not_like, as well as ilike and not_ilike to match any string of zero or more characters
     * example:
     * ["keyword_data.keyword_info.search_volume",">",0]
     * [["keyword_info.search_volume","in",[0,1000]],
     * "and",
     * ["keyword_data.keyword_info.competition_level","=","LOW"]]
     * [["keyword_data.keyword_info.search_volume",">",100],
     * "and",
     * [["keyword_data.keyword_info.cpc","<",0.5],
     * "or",
     * ["keyword_info.high_top_of_page_bid","<=",0.5]]]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting type
     * example:
     * ["keyword_data.keyword_info.competition,desc"]
     * default rule:
     * ["keyword_data.keyword_info.search_volume,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["keyword_data.keyword_info.search_volume,desc","keyword_data.keyword_info.cpc,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * the maximum number of returned keywords
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned keywords
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsRelatedKeywordsLiveItem = {
    /**
     * search engine type
     * possible values: google
     */
    se_type?: string | null;
    keyword_data?: (KeywordDataInfo | null) & {
        avg_backlinks_info?: AvgBacklinksInfo | null;
        search_intent_info?: SearchIntentInfo | null;
    };
    /**
     * keyword search depth
     */
    depth?: number | null;
    /**
     * list of related keywords
     * represents the list of search queries which are related to the keyword returned in the array above
     */
    related_keywords?: Array<string | null> | null;
};

export type DataforseoLabsGoogleRelatedKeywordsLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * keyword in a POST array
     */
    seed_keyword?: string | null;
    /**
     * keyword data for the seed keyword
     * fields in the array are identical to that of keyword_data
     */
    seed_keyword_data?: KeywordDataInfo | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains keywords and related data
     */
    items?: Array<DataforseoLabsRelatedKeywordsLiveItem | null> | null;
};

export type DataforseoLabsGoogleRelatedKeywordsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleRelatedKeywordsLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleRelatedKeywordsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleRelatedKeywordsLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleKeywordSuggestionsLiveRequestInfo = {
    /**
     * keyword
     * required field
     * UTF-8 encoding
     * the keywords will be converted to lowercase format;
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of the location
     * optional field
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations with their location_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available locations
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * optional field
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations with their location_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * optional field
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     * Note: if omitted, results default to the language with the most keyword records in the specified location;
     * refer to the available_languages.keywords field of the Locations and Languages endpoint to determine the default language
     */
    language_name?: string | null;
    /**
     * language code
     * optional field
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     * Note: if omitted, results default to the language with the most keyword records in the specified location;
     * refer to the available_languages.keywords field of the Locations and Languages endpoint to determine the default language
     */
    language_code?: string | null;
    /**
     * include data for the seed keyword
     * optional field
     * if set to true, data for the seed keyword specified in the keyword field will be provided in the seed_keyword_data array of the response
     * default value: false
     */
    include_seed_keyword?: boolean | null;
    /**
     * include data from SERP for each keyword
     * optional field
     * if set to true, we will return a serp_info array containing SERP data (number of search results, relevant URL, and SERP features) for every keyword in the response
     * default value: false
     */
    include_serp_info?: boolean | null;
    /**
     * include or exclude data from clickstream-based metrics in the result
     * optional field
     * if the parameter is set to true, you will receive clickstream_keyword_info, keyword_info_normalized_with_clickstream, and keyword_info_normalized_with_bing fields in the response
     * default value: false
     * with this parameter enabled, you will be charged double the price for the request
     * learn more about how clickstream-based metrics are calculated in this help center article
     */
    include_clickstream_data?: boolean | null;
    /**
     * search for the exact phrase
     * optional field
     * if set to true, the returned keywords will include the exact keyword phrase you specified, with potentially other words before or after that phrase
     * default value: false
     */
    exact_match?: boolean | null;
    /**
     * ignore highly similar keywords
     * optional field
     * if set to true only core keywords will be returned, all highly similar keywords will be excluded;
     * default value: false
     */
    ignore_synonyms?: boolean | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, match, not_match, ilike, not_ilike, like, not_like
     * you can use the % operator with like and not_like, as well as ilike and not_ilike to match any string of zero or more characters
     * example:
     * ["keyword_info.search_volume",">",0]
     * [["keyword_info.search_volume","in",[0,1000]],
     * "and",
     * ["keyword_info.competition_level","=","LOW"]][["keyword_info.search_volume",">",100],
     * "and",
     * [["keyword_info.cpc","<",0.5],
     * "or",
     * ["keyword_info.high_top_of_page_bid","<=",0.5]]]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * a comma is used as a separator
     * example:
     * ["keyword_info.competition,desc"]
     * default rule:
     * ["keyword_info.search_volume,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["keyword_info.search_volume,desc","keyword_info.cpc,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * the maximum number of returned keywords
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned keywords
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * offset token for subsequent requests
     * optional field
     * provided in the identical filed of the response to each request;
     * use this parameter to avoid timeouts while trying to obtain over 10,000 results in a single request;
     * by specifying the unique offset_token value from the response array, you will get the subsequent results of the initial task;
     * offset_token values are unique for each subsequent task
     * Note: if the offset_token is specified in the request, all other parameters except limit will not be taken into account when processing a task.
     */
    offset_token?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsGoogleKeywordSuggestionsLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * keyword in a POST array
     */
    seed_keyword?: string | null;
    /**
     * keyword data for the seed keyword
     * fields in this object are identical to those of the items array
     */
    seed_keyword_data?: KeywordDataInfo | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * current offset value
     */
    offset?: number | null;
    /**
     * offset token for subsequent requests
     * you can use the string provided in this field to get the subsequent results of the initial task;
     * note: offset_token values are unique for each subsequent task
     */
    offset_token?: string | null;
    /**
     * contains keywords and related data
     */
    items?: Array<KeywordDataInfo | null> | null;
};

export type DataforseoLabsGoogleKeywordSuggestionsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleKeywordSuggestionsLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleKeywordSuggestionsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleKeywordSuggestionsLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleKeywordIdeasLiveRequestInfo = {
    /**
     * keywords
     * required field
     * UTF-8 encoding
     * The maximum number of keywords you can specify: 200.
     * The keywords will be converted to lowercase format
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * unique location identifier
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * optional field
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     * Note: if omitted, results default to the language with the most keyword records in the specified location;
     * refer to the available_languages.keywords field of the Locations and Languages endpoint to determine the default language
     */
    language_name?: string | null;
    /**
     * language code
     * optional field
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     * Note: if omitted, results default to the language with the most keyword records in the specified location;
     * refer to the available_languages.keywords field of the Locations and Languages endpoint to determine the default language
     */
    language_code?: string | null;
    /**
     * search mode
     * optional field
     * if set to true the results will be based on the phrase-match search algorithm
     * if set to false the results will be based on the broad-match search algorithm
     * default value: false
     */
    closely_variants?: boolean | null;
    /**
     * ignore highly similar keywords
     * optional field
     * if set to true only core keywords will be returned, all highly similar keywords will be excluded;
     * default value: false
     */
    ignore_synonyms?: boolean | null;
    /**
     * include data from SERP for each keyword
     * optional field
     * if set to true, we will return a serp_info array containing SERP data (number of search results, relevant URL, and SERP features) for every keyword in the response
     * default value: false
     */
    include_serp_info?: boolean | null;
    /**
     * include or exclude data from clickstream-based metrics in the result
     * optional field
     * if the parameter is set to true, you will receive clickstream_keyword_info, keyword_info_normalized_with_clickstream, and keyword_info_normalized_with_bing fields in the response
     * default value: false
     * with this parameter enabled, you will be charged double the price for the request
     * learn more about how clickstream-based metrics are calculated in this help center article
     */
    include_clickstream_data?: boolean | null;
    /**
     * the maximum number of keywords in the results array
     * optional field
     * default value: 700
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned keywords
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * offset token for subsequent requests
     * optional field
     * provided in the identical filed of the response to each request;
     * use this parameter to avoid timeouts while trying to obtain over 10,000 results in a single request;
     * by specifying the unique offset_token value from the response array, you will get the subsequent results of the initial task;
     * offset_token values are unique for each subsequent task
     * Note: if the offset_token is specified in the request, all other parameters except limit will not be taken into account when processing a task.
     */
    offset_token?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, match, not_match, ilike, not_ilike, like, not_like
     * you can use the % operator with like and not_like,as well as ilike, not_ilike to match any string of zero or more characters
     * note that you can not filter the results by relevance
     * example:
     * ["keyword_info.search_volume",">",0]
     * [["keyword_info.search_volume","in",[0,1000]],
     * "and",
     * ["keyword_info.competition_level","=","LOW"]]
     * [["keyword_info.search_volume",">",100],
     * "and",
     * [["keyword_info.cpc","<",0.5],
     * "or",
     * ["keyword_info.high_top_of_page_bid","<=",0.5]]]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting parameter
     * default rule:
     * ["relevance,desc"]
     * relevance is used as the default sorting rule to provide you with the closest keyword ideas. We recommend using this sorting rule to get highly-relevant search terms. Note that relevance is only our internal system identifier, so it can not be used as a filter, and you will not find this field in the result array. The relevance score is based on a similar principle as used in the Keywords For Keywords endpoint.
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["relevance,desc","keyword_info.search_volume,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsGoogleKeywordIdeasLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * keywords in a POST array
     * keywords are returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    seed_keywords?: Array<string | null> | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total number of results relevant to your request in our database
     */
    total_count?: number | null;
    /**
     * number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * current offset value
     */
    offset?: number | null;
    /**
     * offset token for subsequent requests
     * you can use the string provided in this field to get the subsequent results of the initial task;
     * note: offset_token values are unique for each subsequent task
     */
    offset_token?: string | null;
    /**
     * contains keyword ideas and related data
     */
    items?: Array<KeywordDataInfo | null> | null;
};

export type DataforseoLabsGoogleKeywordIdeasLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleKeywordIdeasLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleKeywordIdeasLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleKeywordIdeasLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleBulkKeywordDifficultyLiveRequestInfo = {
    /**
     * target keywords
     * required field
     * UTF-8 encoding
     * maximum number of keywords you can specify in this array: 1000
     * the keywords will be converted to lowercase format
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of the location
     * required field if don’t specify location_code
     * you can receive the list of available locations with their location_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * required field if don’t specify location_name
     * you can receive the list of available locations with their location_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if don’t specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if don’t specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsBulkKeywordDifficultyLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * keyword in a POST array
     */
    keyword?: string | null;
    /**
     * difficulty of ranking in the first top-10 organic results for a keyword
     * indicates the chance of getting in top-10 organic results for a keyword on a logarithmic scale from 0 to 100;
     * calculated by analysing, among other parameters, link profiles of the first 10 pages in SERP;
     * learn more about the metric in this help center guide
     */
    keyword_difficulty?: number | null;
};

export type DataforseoLabsGoogleBulkKeywordDifficultyLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains keywords and related keyword difficulty scores
     */
    items?: Array<DataforseoLabsBulkKeywordDifficultyLiveItem | null> | null;
};

export type DataforseoLabsGoogleBulkKeywordDifficultyLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleBulkKeywordDifficultyLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleBulkKeywordDifficultyLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleBulkKeywordDifficultyLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleSearchIntentLiveRequestInfo = {
    /**
     * target keywords
     * required field
     * UTF-8 encoding
     * maximum number of keywords you can specify in this array: 1000;
     * the keywords will be converted to lowercase format
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of the language
     * required field if don’t specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     *
     * Note: this endpoint currently supports the following languages only:
     * Arabic, ar,
     * Chinese(Traditional), zh-TW,
     * Czech, cs,
     * Danish, da,
     * Dutch, nl,
     * English, en,
     * Finnish, fi,
     * French, fr,
     * German, de,
     * Hebrew, he,
     * Hindi, hi,
     * Italian, it,
     * Japanese, ja,
     * Korean, ko,
     * Malay, ms,
     * Norwegian(Bokmål), nb,
     * Polish, pl,
     * Portuguese, pt,
     * Romanian, ro,
     * Russian, ru,
     * Spanish, es,
     * Swedish, sv,
     * Thai, th,
     * Ukrainian, uk,
     * Vietnamese, vi,
     * Bulgarian, bg,
     * Croatian, hr,
     * Serbian, sr,
     * Slovenian, sl,
     * Bosnian, bs
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if don’t specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * Note: this endpoint currently supports these languages only;
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type KeywordIntentInfo = {
    /**
     * search intent name
     * possible values: informational, navigational, commercial, transactional
     */
    label?: string | null;
    /**
     * search intent probability
     * 1 indicates the highest probability
     */
    probability?: number | null;
};

export type DataforseoLabsGoogleSearchIntentLiveItem = {
    /**
     * target keyword in a POST array
     */
    keyword?: string | null;
    /**
     * search intent data relevant for the specified keyword
     */
    keyword_intent?: KeywordIntentInfo | null;
    /**
     * contains objects with other possible search intents for the specified keyword
     */
    secondary_keyword_intents?: Array<KeywordIntentInfo | null> | null;
};

export type DataforseoLabsGoogleSearchIntentLiveResultInfo = {
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * array of items with relevant traffic estimation data
     */
    items?: Array<DataforseoLabsGoogleSearchIntentLiveItem | null> | null;
};

export type DataforseoLabsGoogleSearchIntentLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleSearchIntentLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleSearchIntentLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleSearchIntentLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleCategoriesForKeywordsLanguagesResultInfo = {
    /**
     * language name
     */
    language_name?: string | null;
    /**
     * language code according to ISO 639-1
     */
    language_code?: string | null;
};

export type DataforseoLabsGoogleCategoriesForKeywordsLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleCategoriesForKeywordsLanguagesResultInfo | null> | null;
};

export type DataforseoLabsGoogleCategoriesForKeywordsLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleCategoriesForKeywordsLanguagesTaskInfo | null> | null;
};

export type DataforseoLabsGoogleCategoriesForDomainLiveRequestInfo = {
    /**
     * domain or subdomain
     * required field
     * the domain or subdomain name of the target website
     * the domain or subdomain should be specified without https:// and www.
     */
    target?: string;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * indicates if the subcategories will be included in the search
     * optional field
     * if set to false, the subcategories will be ignored
     * default value: false
     * learn more about the parameter in this help center article
     */
    include_subcategories?: boolean | null;
    /**
     * include or exclude data from clickstream-based metrics in the result
     * optional field
     * if the parameter is set to true, you will receive clickstream_etv, clickstream_gender_distribution, and clickstream_age_distribution fields with clickstream data in the response
     * default value: false
     * with this parameter enabled, you will be charged double the price for the request
     * learn more about how clickstream-based metrics are calculated in this help center article
     */
    include_clickstream_data?: boolean | null;
    /**
     * display results by item type
     * optional field
     * indicates the type of search results included in the response
     * Note: if the item_types array contains item types that are different from the organic object, the results will be ordered by the first item type in the array; you will not be able to sort and filter results by the types of search results not included in the response;
     * possible values:
     * ["organic", "paid", "featured_snippet", "local_pack"]
     * default value:
     * ["organic", "paid"]
     */
    item_types?: Array<string> | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in
     * example:
     * ["metrics.organic.pos_1,">",0]
     * [[["metrics.organic.count",">=",100],"and",["metrics.organic.pos_1",">",0]],
     * "or",
     * ["metrics.organic.etv","in",[10,100]]]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to specify a sorting type
     * example:
     * ["metrics.paid.etv,asc"]
     * Note: you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["metrics.organic.etv,desc","metrics.paid.count,asc"]
     * default rule:
     * ["metrics.organic.count,desc"]
     * Note: if the item_types array contains item types that are different from the organic object, the results will be ordered by the first item type in the array
     */
    order_by?: Array<string> | null;
    /**
     * the maximum number of returned categories
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned categories
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten categories in the results array will be omitted and the data will be provided for the successive categories
     */
    offset?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsMetricsInfo = {
    /**
     * number of organic SERPs where the domain or subdomain ranks #1
     */
    pos_1?: number | null;
    /**
     * number of organic SERPs where the domain or subdomain ranks #2-3
     */
    pos_2_3?: number | null;
    /**
     * number of organic SERPs where the domain or subdomain ranks #4-10
     */
    pos_4_10?: number | null;
    /**
     * number of organic SERPs where the domain or subdomain ranks #11-20
     */
    pos_11_20?: number | null;
    /**
     * number of organic SERPs where the domain or subdomain ranks #21-30
     */
    pos_21_30?: number | null;
    /**
     * number of organic SERPs where the domain or subdomain ranks #31-40
     */
    pos_31_40?: number | null;
    /**
     * number of organic SERPs where the domain or subdomain ranks #41-50
     */
    pos_41_50?: number | null;
    /**
     * number of organic SERPs where the domain or subdomain ranks #51-60
     */
    pos_51_60?: number | null;
    /**
     * number of organic SERPs where the domain or subdomain ranks #61-70
     */
    pos_61_70?: number | null;
    /**
     * number of organic SERPs where the domain or subdomain ranks #71-80
     */
    pos_71_80?: number | null;
    /**
     * number of organic SERPs where the domain or subdomain ranks #81-90
     */
    pos_81_90?: number | null;
    /**
     * number of organic SERPs where the domain or subdomain ranks #91-100
     */
    pos_91_100?: number | null;
    /**
     * estimated traffic volume
     * estimated organic monthly traffic to the domain or subdomain
     * calculated as the product of CTR (click-through-rate) and search volume values of all keywords in the category that the domain or subdomain ranks for
     * learn more about how the metric is calculated in this help center article
     */
    etv?: number | null;
    /**
     * total count of organic SERPs that contain the domain or subdomain
     */
    count?: number | null;
    /**
     * estimated cost of converting organic search traffic into paid
     * represents the estimated monthly cost (USD) of running ads for all keywords in the category that the domain or subdomain ranks for
     * the metric is calculated as the product of organic etv and paid cpc values and indicates the cost of driving the estimated volume of monthly organic traffic through PPC advertising in Google Search
     * learn more about how the metric is calculated in this help center article
     */
    estimated_paid_traffic_cost?: number | null;
    /**
     * number of new ranked elements
     * indicates how many new ranked elements were found for the indicated target
     */
    is_new?: number | null;
    /**
     * rank went up
     * indicates how many ranked elements of the indicated target went up
     */
    is_up?: number | null;
    /**
     * rank went down
     * indicates how many ranked elements of the indicated target went down
     */
    is_down?: number | null;
    /**
     * lost ranked elements
     * indicates how many ranked elements of the indicated target were previously presented in SERPs, but weren’t found during the last check
     */
    is_lost?: number | null;
    /**
     * estimated traffic volume based on clickstream data
     * calculated as the product of click-through-rate and clickstream search volume values of all keywords the domain ranks for
     * to retrieve results for this field, the parameter include_clickstream_data must be set to true
     * learn more about how the metric is calculated in this help center article
     */
    clickstream_etv?: number | null;
    /**
     * distribution of estimated clickstream-based metrics by gender
     * to retrieve results for this field, the parameter include_clickstream_data must be set to true
     * learn more about how the metric is calculated in this help center article
     */
    clickstream_gender_distribution?: {
        [key: string]: number | null;
    } | null;
    /**
     * distribution of clickstream-based metrics by age
     * to retrieve results for this field, the parameter include_clickstream_data must be set to true
     * learn more about how the metric is calculated in this help center article
     */
    clickstream_age_distribution?: {
        [key: string]: number | null;
    } | null;
};

export type DataforseoLabsGoogleCategoriesForDomainLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * product and service categories
     * you can download the full list of possible categories
     */
    categories?: Array<number> | null;
    /**
     * ranking data relevant to the specified domain or subdomain
     */
    metrics?: {
        [key: string]: DataforseoLabsMetricsInfo;
    } | null;
};

export type DataforseoLabsGoogleCategoriesForDomainLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * target domain or subdomain in a POST array
     */
    target?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains relevant categories and related ranking data
     */
    items?: Array<DataforseoLabsGoogleCategoriesForDomainLiveItem | null> | null;
};

export type DataforseoLabsGoogleCategoriesForDomainLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleCategoriesForDomainLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleCategoriesForDomainLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleCategoriesForDomainLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleCategoriesForKeywordsLiveRequestInfo = {
    /**
     * target keywords
     * required field
     * UTF-8 encoding
     * maximum number of keywords you can specify in this array: 1000
     * the keywords will be converted to lowercase format
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of the language
     * required field if don’t specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/google/categories_for_keywords/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if don’t specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/google/categories_for_keywords/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsGoogleCategoriesForKeywordsLiveItem = {
    /**
     * keyword in a POST array
     */
    keyword?: string | null;
    /**
     * product and service categories
     * you can download the full list of possible categories
     */
    categories?: Array<number> | null;
};

export type DataforseoLabsGoogleCategoriesForKeywordsLiveResultInfo = {
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains keywords and related keyword difficulty scores
     */
    items?: Array<DataforseoLabsGoogleCategoriesForKeywordsLiveItem | null> | null;
};

export type DataforseoLabsGoogleCategoriesForKeywordsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleCategoriesForKeywordsLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleCategoriesForKeywordsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleCategoriesForKeywordsLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleKeywordsForCategoriesLiveRequestInfo = {
    /**
     * product and service categories
     * required field
     * The maximum number of categories you can specify: 20
     * you can download the full list of possible categories
     */
    category_codes?: Array<string>;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * unique location identifier
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * unique language identifier
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * category intersections
     * optional field
     * if set to true, you will get keywords featured in all specified categories;
     * if set to false, you will keywords that are specified in any of the specified categories;
     * default value: true
     */
    category_intersection?: boolean | null;
    /**
     * include data from SERP for each keyword
     * optional field
     * if set to true, we will return a serp_info array containing SERP data (number of search results, relevant URL, and SERP features) for every keyword in the response
     * default value: false
     */
    include_serp_info?: boolean | null;
    /**
     * include or exclude data from clickstream-based metrics in the result
     * optional field
     * if the parameter is set to true, you will receive clickstream_keyword_info, keyword_info_normalized_with_clickstream, and keyword_info_normalized_with_bing fields in the response
     * default value: false
     * with this parameter enabled, you will be charged double the price for the request
     * learn more about how clickstream-based metrics are calculated in this help center article
     */
    include_clickstream_data?: boolean | null;
    /**
     * ignore highly similar keywords
     * optional field
     * if set to true only core keywords will be returned, all highly similar keywords will be excluded;
     * default value: false
     */
    ignore_synonyms?: boolean | null;
    /**
     * the maximum number of keywords in the results array
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned keywords
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * offset token for subsequent requests
     * optional field
     * provided in the identical filed of the response to each request;
     * use this parameter to avoid timeouts while trying to obtain over 10,000 results in a single request;
     * by specifying the unique offset_token value from the response array, you will get the subsequent results of the initial task;
     * offset_token values are unique for each subsequent task
     * Note: if the offset_token is specified in the request, all other parameters except limit will not be taken into account when processing a task.
     */
    offset_token?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, match, not_match, ilike, not_ilike, like, not_like
     * you can use the % operator with like and not_like,as well as ilike, not_ilike to match any string of zero or more characters
     * example:
     * ["keyword_info.search_volume",">",0]
     * [["keyword_info.search_volume","in",[0,1000]],
     * "and",
     * ["keyword_info.competition_level","=","LOW"]]
     * [["keyword_info.search_volume",">",100],
     * "and",
     * [["keyword_info.cpc","<",0.5],
     * "or",
     * ["keyword_info.high_top_of_page_bid","<=",0.5]]]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting type
     * example:
     * ["keyword_info.competition,desc"]
     * default rule:
     * ["keyword_info.search_volume,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["keyword_info.search_volume,desc","keyword_info.competition,asc"]
     */
    order_by?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsGoogleKeywordsForCategoriesLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * categories in a POST array
     */
    seed_categories?: Array<number | null> | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * the total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * current offset value
     */
    offset?: number | null;
    /**
     * offset token for subsequent requests
     * you can use the string provided in this field to get the subsequent results of the initial task;
     * note: offset_token values are unique for each subsequent task
     */
    offset_token?: string | null;
    /**
     * contains keyword ideas and related data
     */
    items?: Array<KeywordDataInfo | null> | null;
};

export type DataforseoLabsGoogleKeywordsForCategoriesLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleKeywordsForCategoriesLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleKeywordsForCategoriesLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleKeywordsForCategoriesLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleDomainMetricsByCategoriesLiveRequestInfo = {
    /**
     * product and service categories
     * required field
     * The maximum number of categories you can specify: 5
     * you can download the full list of possible categories
     */
    category_codes?: Array<string>;
    /**
     * first date of comparison period
     * required field
     * first date for which domain metrics will be provided;
     * date format: "yyyy-mm-dd";
     * example: "2021-06-01";
     * the list available dates is available through the available history endpoint;
     * Note: first_date cannot be greater than today’s date;
     * Also note: the dates specified in first_date and second_date cannot point to the same month of the same year;
     * you can specify the dates in any order: first_date can be greater than second_date and vice versa;
     * minimum date: "2020-10-01"
     */
    first_date?: string;
    /**
     * second date of comparison period
     * required field
     * second date for which domain metrics will be provided;
     * date format: "yyyy-mm-dd";
     * example: "2021-10-01";
     * the list available dates is available through the available history endpoint;
     * Note: second_date cannot be greater than today’s date;
     * Also note: the dates specified in first_date and second_date cannot point to the same month of the same year;
     * you can specify the dates in any order: second_date can be greater than first_date and vice versa;
     * minimum date: "2020-10-01"
     */
    second_date?: string;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code;
     * you can receive the list of available locations with their location_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * unique location identifier
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code;
     * you can receive the list of available locations with their location_code by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code;
     * you can receive the list of available languages with their language_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * unique language identifier
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code;
     * you can receive the list of available languages with their language_code by making a separate request to https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * display results by item type
     * optional field
     * indicates the type of search results included in the response;
     * Note: if the item_types array contains item types that are different from the organic object, the results will be ordered by the first item type in the array; you will not be able to sort and filter results by the types of search results not included in the response;
     * possible values:
     * ["organic", "paid", "featured_snippet", "local_pack"];
     * default value:
     * ["organic", "paid"]
     */
    item_types?: Array<string> | null;
    /**
     * number of additional domain categories
     * optional field
     * by using this parameter, you can receive domains relevant to additional categories that are not specified in category_codes above;
     * to learn more about the parameter, please refer to this help center article;
     * by default, top_categories_count is equal to the number of categories specified in the category_codes array;
     * Note: top_categories_count cannot be less than the number of categories in the category_codes array;
     * maximum value: 5
     */
    top_categories_count?: number | null;
    /**
     * return subdomains in the API response
     * optional field
     * if false, the API response will contain main_domain only;
     * if true, the API will return main_domain plus its subdomains (if available);
     * default value: true
     */
    include_subdomains?: boolean | null;
    /**
     * minimum current organic ETV of the domain
     * optional field
     * if specified, the API will return only domains with organic_etv greater than the specified value
     */
    etv_min?: number | null;
    /**
     * maximum current organic ETV of the domain
     * optional field
     * if specified, the API will return only domains with organic_etv lesser than the specified value
     */
    etv_max?: number | null;
    /**
     * correlate data with previously obtained datasets
     * optional field
     * default value: true;
     * if you use this parameter, our system will correlate data you obtain now with previously obtained datasets;
     * this parameter is intended to mitigate any inconsistencies that may result from changes to our database;
     * Note: we do not recommend setting correlate to false
     */
    correlate?: boolean | null;
    /**
     * the maximum number of domains in the results array
     * optional field
     * default value: 100;
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned domains
     * optional field
     * default value: 0;
     * if you specify the 10 value, the first ten domains in the results array will be omitted and the data will be provided for the successive domains
     */
    offset?: number | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum);
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, match, not_match, ilike, not_ilike, like, not_like;
     * you can use the % operator with like and not_like, as well as ilike and not_ilike to match any string of zero or more characters;
     * example:
     * ["metrics_history.202110.organic.pos_1", ">", 15];
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results;
     * default rule: ["organic_etv,desc"];
     * possible sorting types:
     * asc – results will be sorted in ascending order
     * desc – results will be sorted in descending order;
     * you should use a comma to set up a sorting type;
     * example:
     * ["organic_count,desc"];
     * note that you can set no more than three sorting rules in a single request;
     * you should use a comma to separate several sorting rules;
     * example:
     * ["organic_etv,desc","organic_count,asc"]
     */
    order_by?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255;
     * you can use this parameter to identify the task and match it with the result;
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsGoogleDomainMetricsByCategoriesLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * categories for which domains are collected
     */
    top_categories?: Array<number | null> | null;
    /**
     * current organic ETV of the domain
     */
    organic_etv?: number | null;
    /**
     * current total count of organic SERPs that contain the domain
     */
    organic_count?: number | null;
    /**
     * current number of lost ranked elements
     * indicates how many ranked elements of the domain were previously presented in SERPs, but weren’t found during the last check
     */
    organic_is_lost?: number | null;
    /**
     * current number of new ranked elements
     * indicates how many new ranked elements were found for the domain
     */
    organic_is_new?: number | null;
    /**
     * domain found for the specified category
     */
    domain?: string | null;
    /**
     * primary domain
     */
    main_domain?: string | null;
    /**
     * historical ranking and traffic data of the domain
     */
    metrics_history?: {
        [key: string]: {
            [key: string]: DataforseoLabsMetricsInfo | null;
        };
    } | null;
    /**
     * metrics difference between first_date and second_date
     * calculated by subtracting domain metrics as of the greater date from domain metrics as of the smaller date
     */
    metrics_difference?: {
        [key: string]: DataforseoLabsMetricsInfo;
    } | null;
};

export type DataforseoLabsGoogleDomainMetricsByCategoriesLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * categories in a POST array
     */
    categories?: Array<number> | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains historical ranking and traffic data
     */
    items?: Array<DataforseoLabsGoogleDomainMetricsByCategoriesLiveItem | null> | null;
};

export type DataforseoLabsGoogleDomainMetricsByCategoriesLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleDomainMetricsByCategoriesLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleDomainMetricsByCategoriesLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleDomainMetricsByCategoriesLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleTopSearchesLiveRequestInfo = {
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available locations with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available locations with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * include data from SERP for each keyword
     * optional field
     * if set to true, we will return a serp_info array containing SERP data (number of search results, relevant URL, and SERP features) for every keyword in the response
     * default value: false
     */
    include_serp_info?: boolean | null;
    /**
     * include or exclude data from clickstream-based metrics in the result
     * optional field
     * if the parameter is set to true, you will receive clickstream_keyword_info, keyword_info_normalized_with_clickstream, and keyword_info_normalized_with_bing fields in the response
     * default value: false
     * with this parameter enabled, you will be charged double the price for the request
     * learn more about how clickstream-based metrics are calculated in this help center article
     */
    include_clickstream_data?: boolean | null;
    /**
     * ignore highly similar keywords
     * optional field
     * if set to true only core keywords will be returned, all highly similar keywords will be excluded;
     * default value: false
     */
    ignore_synonyms?: boolean | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, match, not_match, ilike, not_ilike, like,not_like
     * you can use the % operator with like and not_like,as well as ilike and not_ilike to match any string of zero or more characters
     * example:
     * ["keyword_info.search_volume",">",0]
     * [["keyword_info.search_volume","in",[0,1000]],
     * "and",
     * ["keyword_info.competition_level","=","LOW"]]
     * [["keyword_info.search_volume",">",100],
     * "and",
     * [["keyword_info.cpc","<",0.5],
     * "or",
     * ["keyword_info.high_top_of_page_bid","<=",0.5]]]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting type
     * example:
     * ["keyword_info.competition,desc"]
     * default rule:
     * ["keyword_info.search_volume,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["keyword_info.search_volume,desc","keyword_info.cpc,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * the maximum number of returned keywords
     * optional field
     * note: you can get more than 1000 results by using the offset_token provided in the response to each subsequent request
     * default value: 1000
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned keywords
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * offset token for subsequent requests
     * optional field
     * provided in the identical filed of the response to each request;
     * use this parameter to avoid timeouts while trying to obtain over 10,000 results in a single request;
     * by specifying the unique offset_token value from the response array, you will get the subsequent results of the initial task;
     * offset_token values are unique for each subsequent task
     * Note: if the offset_token is specified in the request, all other parameters except limit will not be taken into account when processing a task.
     */
    offset_token?: string | null;
};

export type DataforseoLabsGoogleTopSearchesLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * current offset value
     */
    offset?: number | null;
    /**
     * offset token for subsequent requests
     * you can use the string provided in this field to get the subsequent results of the initial task;
     * note: offset_token values are unique for each subsequent task
     */
    offset_token?: string | null;
    /**
     * contains keywords and related data
     */
    items?: Array<KeywordDataInfo | null> | null;
};

export type DataforseoLabsGoogleTopSearchesLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleTopSearchesLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleTopSearchesLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleTopSearchesLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleDomainWhoisOverviewLiveRequestInfo = {
    /**
     * the maximum number of returned domains
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned items
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten items in the results array will be omitted and the data will be provided for the successive items
     */
    offset?: number | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, like, not_like
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * examples:
     * ["expiration_datetime", "<", "2021-02-15 01:00:00 +00:00"]
     * [["expiration_datetime", "<", "2021-02-15 01:00:00 +00:00"],
     * "and",
     * ["domain", "like", "%seo%"]]
     *
     * for more information about filters, please refer to Dataforseo Labs - Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc - results will be sorted in the ascending order
     * desc - results will be sorted in the descending order
     * the comma is used as a separator
     * example:
     * ["metrics.organic.pos_1,desc"]
     * default rule:
     * ["metrics.organic.count,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["expiration_datetime,asc","metrics.organic.etv,desc","metrics.organic.pos_1,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BacklinksInfo = {
    /**
     * number of referring domains
     */
    referring_domains?: number | null;
    /**
     * number of referring main domains
     */
    referring_main_domains?: number | null;
    /**
     * number of referring pages
     */
    referring_pages?: number | null;
    /**
     * number of dofollow links
     */
    dofollow?: number | null;
    /**
     * total number of backlinks
     * the total number of backlinks, including dofollow and nofollow links
     */
    backlinks?: number | null;
    /**
     * date and time when backlink data was updated
     * in the UTC format: "yyyy-mm-dd hh-mm-ss +00:00"
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    time_update?: string | null;
};

export type DataforseoLabsGoogleDomainWhoisOverviewLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * domain name
     */
    domain?: string | null;
    /**
     * date and time of registration
     * date and time (in the ISO 8601 format) when the domain was first registered
     * example:
     * "1997-03-29 03:00:00 +00:00"
     */
    created_datetime?: string | null;
    /**
     * date and time when the domain entry was changed
     * date and time (in the ISO 8601 format) when the domain entry was last modified
     * example:
     * "2021-01-14 08:36:28 +00:00"
     */
    changed_datetime?: string | null;
    /**
     * date and time when the domain will expire
     * date and time (in the ISO 8601 format) when the domain is due to expire
     * example:
     * "2022-11-26 17:21:23 +00:00"
     */
    expiration_datetime?: string | null;
    /**
     * date and time when the domain was updated
     * date and time (in the ISO 8601 format) when the domain was last updated
     * example:
     * "2021-01-29 13:59:38 +00:00"
     */
    updated_datetime?: string | null;
    /**
     * date and time when our crawler found the domain for the first time
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * "2019-11-15 12:57:46 +00:00"
     */
    first_seen?: string | null;
    /**
     * extensive provisioning protocol status codes
     * the status of a domain name registration as defined by ICANN
     */
    epp_status_codes?: Array<string | null> | null;
    /**
     * top-level domain
     * top-level domain in the DNS root zone
     */
    tld?: string | null;
    /**
     * domain registration status
     * if false, the domain name registration has expired
     * Note: expired domains will remain in the database for only a short period of time
     */
    registered?: boolean | null;
    /**
     * domain registrar
     * if null, the domain registrar is unknown
     * example:
     * NameCheap, Inc.
     */
    registrar?: string | null;
    /**
     * ranking data relevant to the specified domain
     */
    metrics?: {
        [key: string]: DataforseoLabsMetricsInfo;
    } | null;
    /**
     * backlink data for the returned domain
     */
    backlinks_info?: BacklinksInfo | null;
};

export type DataforseoLabsGoogleDomainWhoisOverviewLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains ranking and traffic data
     */
    items?: Array<DataforseoLabsGoogleDomainWhoisOverviewLiveItem | null> | null;
};

export type DataforseoLabsGoogleDomainWhoisOverviewLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleDomainWhoisOverviewLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleDomainWhoisOverviewLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleDomainWhoisOverviewLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleRankedKeywordsLiveRequestInfo = {
    /**
     * domain name or page url
     * required field
     * the domain name of the target website or URL of the target webpage;
     * the domain name must be specified without https:// or www.;
     * the webpage URL must be specified with https:// or www.
     * Note: if you specify the webpage URL without https:// or www., the result will be returned for the entire domain rather than the specific page
     */
    target?: string;
    /**
     * full name of the location
     * optional field
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations with their location_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available locations
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * optional field
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations with their location_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * optional field
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * optional field
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * ignore highly similar keywords
     * optional field
     * if set to true only core keywords will be returned, all highly similar keywords will be excluded;
     * default value: false
     */
    ignore_synonyms?: boolean | null;
    /**
     * display results by item type
     * optional field
     * indicates the type of search results included in the response
     * Note: if the item_types array contains item types that are different from organic, the results will be ordered by the first item type in the array; you will not be able to sort and filter results by the types of search results not included in the response;
     * possible values:
     * ["organic", "paid", "featured_snippet", "local_pack", "ai_overview_reference"]
     * default value:
     * ["organic", "paid"]
     */
    item_types?: Array<string> | null;
    /**
     * include or exclude data from clickstream-based metrics in the result
     * optional field
     * if the parameter is set to true, you will receive clickstream_keyword_info, clickstream_etv, clickstream_gender_distribution, clickstream_age_distribution, keyword_info_normalized_with_clickstream, and keyword_info_normalized_with_bing fields in the response
     * default value: false
     * with this parameter enabled, you will be charged double the price for the request
     * learn more about how clickstream-based metrics are calculated in this help center article
     */
    include_clickstream_data?: boolean | null;
    /**
     * the maximum number of returned keywords
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned keywords
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * return rankings distribution by rank_absolute
     * optional field
     * default value: false
     * if set to true, we will return the field metrics_absolute containing rankings distribution by the rank_absolute parameter that indicates the result’s position among all SERP elements
     */
    load_rank_absolute?: boolean | null;
    /**
     * data collection mode
     * optional field
     * you can use this field to filter the results;
     * possible types of filtering:
     * live — return keywords for which the specified target currently has ranking results in SERP;
     * lost — return keywords for which the specified target had previously had ranking results in SERP, but didn’t have them during the last check;
     * all — return both types of keywords.
     * default value: live
     */
    historical_serp_mode?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, match, not_match, ilike, not_ilike, like, not_like
     * you can use the % operator with like and not_like, as well as ilike and not_ilike to match any string of zero or more characters
     * example:
     * ["ranked_serp_element.serp_item.rank_group","<=",10]
     * [["ranked_serp_element.serp_item.rank_group","<=",10],
     * "and",
     * ["ranked_serp_element.serp_item.type","<>","paid"]]
     * [["keyword_data.keyword_info.search_volume","<>",0],
     * "and",
     * [["ranked_serp_element.serp_item.type","<>","paid"],"or",["ranked_serp_element.serp_item.is_malicious","=",false]]]
     * if you want to get the keywords a particular webpage ranks for, you can use a target field or filter by the ranked_serp_element.serp_item.relative_url parameter
     * example:
     * ["ranked_serp_element.serp_item.relative_url", "=", "/apis/rank-tracker-api"]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<string | string[] | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting type
     * example:
     * ["keyword_data.keyword_info.competition,desc"]
     * default rule:
     * ["ranked_serp_element.serp_item.rank_group,asc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["keyword_data.keyword_info.search_volume,desc","keyword_data.keyword_info.cpc,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type RankChanges = {
    /**
     * previous absolute rank in SERP
     * indicates previous rank of the element in Google SERP;
     * if this element is new, the value will be null
     */
    previous_rank_absolute?: number | null;
    /**
     * element was previously present in SERP
     * if the value is true, previously collected SERP didn’t contain this element
     */
    is_new?: boolean | null;
    /**
     * rank of this element went up
     * if the value is true, position of the element in SERP is higher compared to the previous check
     */
    is_up?: boolean | null;
    /**
     * rank of this element went down
     * if the value is true, position of the element in SERP is lower compared to the previous check
     */
    is_down?: boolean | null;
};

export type RankInfo = {
    /**
     * page rank
     * page_rank is calculated based on the method for node ranking in a linked database – a principle used in the original Google PageRank algorithm;
     * learn more about the metric and how it is calculated in this help center article
     */
    page_rank?: number | null;
    /**
     * main domain rank
     * main_domain_rank is calculated based on the method for node ranking in a linked database – a principle used in the original Google PageRank algorithm
     * learn more about the metric and how it is calculated in this help center article
     */
    main_domain_rank?: number | null;
};

export type DataLabsOrganicSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * subdomain in SERP
     */
    domain?: string | null;
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * relevant URL in SERP
     */
    url?: string | null;
    /**
     * breadcrumb in SERP
     */
    breadcrumb?: string | null;
    /**
     * relevant website name in SERP
     */
    website_name?: string | null;
    /**
     * indicates whether the element contains an image
     */
    is_image?: boolean | null;
    /**
     * indicates whether the element contains a video
     */
    is_video?: boolean | null;
    /**
     * indicates whether the element is a featured_snippet
     */
    is_featured_snippet?: boolean | null;
    /**
     * indicates whether the element is marked as malicious
     */
    is_malicious?: boolean | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * includes additional information appended before the result description in SERP
     */
    pre_snippet?: string | null;
    /**
     * includes additional information appended after the result description in SERP
     */
    extended_snippet?: string | null;
    /**
     * Accelerated Mobile Pages
     * indicates whether an item has the Accelerated Mobile Page (AMP) version
     */
    amp_version?: boolean | null;
    /**
     * the item’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingInfo | null;
    /**
     * words highlighted in bold within the results description
     */
    highlighted?: Array<string | null> | null;
    /**
     * sitelinks
     * the links shown below some of Google’s search results
     * if there are none, equals null
     */
    links?: Array<LinkElement | null> | null;
    /**
     * contains information from the ‘About this result’ panel
     * ‘About this result’ panel provides additional context about why Google returned this result for the given query;
     * this feature appears after clicking on the three dots next to most results
     */
    about_this_result?: AboutThisResultElement | null;
    /**
     * primary domain name in SERP
     */
    main_domain?: string | null;
    /**
     * URL in SERP that does not specify the HTTPs protocol and domain name
     */
    relative_url?: string | null;
    /**
     * estimated traffic volume
     * estimated paid monthly traffic to the target
     * calculated as the product of CTR (click-through-rate) and search volume values of all keywords in the category that the target ranks for
     * learn more about how the metric is calculated in this help center article
     */
    etv?: number | null;
    /**
     * estimated cost of monthly search traffic
     * represents the estimated cost of paid monthly traffic (USD) based on etv and cpc values of all keywords in the category that the target ranks for
     * learn more about how the metric is calculated in this help center article
     */
    estimated_paid_traffic_cost?: number | null;
    /**
     * estimated traffic volume based on clickstream data
     * calculated as the product of click-through-rate and clickstream search volume values of all keywords the domain ranks for
     * to retrieve results for this field, the parameter include_clickstream_data must be set to true
     * learn more about how the metric is calculated in this help center article
     */
    clickstream_etv?: number | null;
    rank_changes?: (RankChanges | null) & {
        /**
         * previous absolute rank in SERP
         * indicates previous rank of the element in Google SERP;
         * if this element is new, the value will be null
         */
        previous_rank_absolute?: number | null;
        /**
         * element was previously present in SERP
         * if the value is true, previously collected SERP didn’t contain this element
         */
        is_new?: boolean;
        /**
         * rank of this element went up
         * if the value is true, position of the element in SERP is higher compared to the previous check
         */
        is_up?: boolean;
        /**
         * rank of this element went down
         * if the value is true, position of the element in SERP is lower compared to the previous check
         */
        is_down?: boolean;
    };
    /**
     * backlinks information for the target website
     */
    backlinks_info?: BacklinksInfo | null;
    /**
     * page and domain rank information
     */
    rank_info?: RankInfo | null;
};

export type RankedSerpElement = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * contains data on the SERP element
     * the list of supported SERP elements can be found below
     */
    serp_item?: BaseDataforseoLabsApiElementItem | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP
     * all possible item types can be found here, they include:
     * answer_box, app, carousel, multi_carousel, featured_snippet, google_flights, google_reviews, images, jobs, knowledge_graph, local_pack, map, organic, paid, people_also_ask, related_searches, people_also_search, shopping, top_stories, twitter, video, events, mention_carousel, recipes, top_sights, scholarly_articles, popular_products, podcasts, questions_and_answers, find_results_on, stocks_box;
     * note that the actual results will be returned only for organic, paid, featured_snippet, local_pack, and ai_overview_reference elements
     */
    serp_item_types?: Array<string | null> | null;
    /**
     * number of search results for the returned keyword
     */
    se_results_count?: number | null;
    /**
     * difficulty of ranking in the first top-10 organic results for a keyword
     * indicates the chance of getting in top-10 organic results for a keyword on a logarithmic scale from 0 to 100;
     * calculated by analysing, among other parameters, link profiles of the first 10 pages in SERP;
     * learn more about the metric in this help center guide
     */
    keyword_difficulty?: number | null;
    /**
     * lost ranked elements
     * indicates how many ranked elements of this target were previously presented in SERPs, but weren’t found during the last check
     */
    is_lost?: boolean | null;
    /**
     * date and time when SERP data was updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    last_updated_time?: string | null;
    /**
     * previous to the most recent date and time when SERP data was updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-10-15 12:57:46 +00:00
     */
    previous_updated_time?: string | null;
};

export type DataforseoLabsRankedKeywordsLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * keyword data for the returned keyword
     */
    keyword_data?: KeywordDataInfo | null;
    /**
     * contains data on the domain’s SERP element found for the returned keyword
     */
    ranked_serp_element?: RankedSerpElement | null;
};

export type DataLabsFeaturedSnippetSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * subdomain in SERP
     */
    domain?: string | null;
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * the title of the featured snippets source page
     */
    featured_title?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * relevant URL in SERP
     */
    url?: string | null;
    /**
     * results table
     * if there are none, equals null
     */
    table?: Table | null;
    /**
     * primary domain name in SERP
     */
    main_domain?: string | null;
    /**
     * URL in SERP that does not specify the HTTPs protocol and domain name
     */
    relative_url?: string | null;
    /**
     * estimated traffic volume
     * estimated paid monthly traffic to the target
     * calculated as the product of CTR (click-through-rate) and search volume values of all keywords in the category that the target ranks for
     * learn more about how the metric is calculated in this help center article
     */
    etv?: number | null;
    /**
     * estimated cost of monthly search traffic
     * represents the estimated cost of paid monthly traffic (USD) based on etv and cpc values of all keywords in the category that the target ranks for
     * learn more about how the metric is calculated in this help center article
     */
    estimated_paid_traffic_cost?: number | null;
    /**
     * estimated traffic volume based on clickstream data
     * calculated as the product of click-through-rate and clickstream search volume values of all keywords the domain ranks for
     * to retrieve results for this field, the parameter include_clickstream_data must be set to true
     * learn more about how the metric is calculated in this help center article
     */
    clickstream_etv?: number | null;
    rank_changes?: (RankChanges | null) & {
        /**
         * previous absolute rank in SERP
         * indicates previous rank of the element in Google SERP;
         * if this element is new, the value will be null
         */
        previous_rank_absolute?: number | null;
        /**
         * element was previously present in SERP
         * if the value is true, previously collected SERP didn’t contain this element
         */
        is_new?: boolean;
        /**
         * rank of this element went up
         * if the value is true, position of the element in SERP is higher compared to the previous check
         */
        is_up?: boolean;
        /**
         * rank of this element went down
         * if the value is true, position of the element in SERP is lower compared to the previous check
         */
        is_down?: boolean;
    };
    /**
     * backlinks information for the target website
     */
    backlinks_info?: BacklinksInfo | null;
    /**
     * page and domain rank information
     */
    rank_info?: RankInfo | null;
};

export type DataLabsPaidSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * subdomain in SERP
     */
    domain?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * breadcrumb in SERP
     */
    breadcrumb?: string | null;
    /**
     * relevant URL in SERP
     */
    url?: string | null;
    /**
     * words highlighted in bold within the results description
     */
    highlighted?: Array<string | null> | null;
    extra?: {
        [key: string]: string | null;
    } | null;
    /**
     * extended description
     * if there is none, equals null
     */
    description_rows?: Array<string | null> | null;
    /**
     * sitelinks
     * the links shown below some of Google’s search results
     * if there are none, equals null
     */
    links?: Array<AdLinkElement | null> | null;
    /**
     * primary domain name in SERP
     */
    main_domain?: string | null;
    /**
     * URL in SERP that does not specify the HTTPs protocol and domain name
     */
    relative_url?: string | null;
    /**
     * estimated traffic volume
     * estimated paid monthly traffic to the target
     * calculated as the product of CTR (click-through-rate) and search volume values of all keywords in the category that the target ranks for
     * learn more about how the metric is calculated in this help center article
     */
    etv?: number | null;
    /**
     * estimated cost of monthly search traffic
     * represents the estimated cost of paid monthly traffic (USD) based on etv and cpc values of all keywords in the category that the target ranks for
     * learn more about how the metric is calculated in this help center article
     */
    estimated_paid_traffic_cost?: number | null;
    /**
     * estimated traffic volume based on clickstream data
     * calculated as the product of click-through-rate and clickstream search volume values of all keywords the domain ranks for
     * to retrieve results for this field, the parameter include_clickstream_data must be set to true
     * learn more about how the metric is calculated in this help center article
     */
    clickstream_etv?: number | null;
    rank_changes?: (RankChanges | null) & {
        /**
         * previous absolute rank in SERP
         * indicates previous rank of the element in Google SERP;
         * if this element is new, the value will be null
         */
        previous_rank_absolute?: number | null;
        /**
         * element was previously present in SERP
         * if the value is true, previously collected SERP didn’t contain this element
         */
        is_new?: boolean;
        /**
         * rank of this element went up
         * if the value is true, position of the element in SERP is higher compared to the previous check
         */
        is_up?: boolean;
        /**
         * rank of this element went down
         * if the value is true, position of the element in SERP is lower compared to the previous check
         */
        is_down?: boolean;
    };
    /**
     * backlinks information for the target website
     */
    backlinks_info?: BacklinksInfo | null;
    /**
     * page and domain rank information
     */
    rank_info?: RankInfo | null;
};

export type DataforseoLabsGoogleRankedKeywordsLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * target domain or webpage in a POST array
     */
    target?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * total number of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * ranking data relevant to the specified domain or webpage
     * ranking data is provided by the rank_group parameters that show the result’s rank considering only equivalent SERP elements
     */
    metrics?: {
        [key: string]: DataforseoLabsMetricsInfo;
    } | null;
    /**
     * ranking data relevant to the specified domain or webpage
     * ranking data is provided by the rank_absolute parameters that indicate the result’s position among all SERP elements
     */
    metrics_absolute?: {
        [key: string]: DataforseoLabsMetricsInfo;
    } | null;
    /**
     * contains ranked keywords and related data
     */
    items?: Array<DataforseoLabsRankedKeywordsLiveItem | null> | null;
};

export type DataforseoLabsGoogleRankedKeywordsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleRankedKeywordsLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleRankedKeywordsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleRankedKeywordsLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleSerpCompetitorsLiveRequestInfo = {
    /**
     * keywords array
     * required field
     * the results will be based on the keywords you specify in this array
     * UTF-8 encoding;
     * the keywords will be converted to lowercase format;
     * you can specify the maximum of 200 keywords
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with location_name parameters by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * unique location identifier
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code parameters by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_name parameters by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * unique language identifier
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_code parameters by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * indicates if the subdomains will be included in the search
     * optional field
     * if set to false, the subdomains will be ignored
     * default value: true
     */
    include_subdomains?: boolean | null;
    /**
     * search results type
     * indicates type of search results included in the response
     * optional field
     * possible values:
     * ["organic", "paid", "featured_snippet", "local_pack"]
     * default value:
     * ["organic", "paid"]
     */
    item_types?: Array<string> | null;
    /**
     * the maximum number of returned domains
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned domains
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten domains in the results array will be omitted and the data will be provided for the successive domains
     */
    offset?: number | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, match, not_match, ilike, not_ilike, like, not_like
     * you can use the % operator with like and not_like, as well as ilike and not_ilike to match any string of zero or more characters
     * example:
     * ["median_position","in",[1,10]]
     * [["median_position","in",[1,10]],"and",["domain","not_like","%wikipedia.org%"]]
     * [["domain","not_like","%wikipedia.org%"],
     * "and",
     * [["relevant_serp_items",">",0],"or",["median_position","in",[1,10]]]]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * the comma is used as a separator
     * example:
     * ["avg_position,asc"]
     * default rule:
     * ["rating,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["avg_position,asc","etv,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsSerpCompetitorsLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * domain name of the detected SERP competitor
     */
    domain?: string | null;
    /**
     * the average position of the domain for the specified keywords
     * the arithmetic mean of values in the keywords_positions array
     */
    avg_position?: number | null;
    /**
     * the median position of the domain for the specified keywords
     * the median of the values in the keywords_positions array
     */
    median_position?: number | null;
    /**
     * the margin between the greatest possible and actual keyword positions
     * represents the relative visibility rate of the domain in SERP for the specified keywords
     * calculated as sum(100-keywords_positions)
     */
    rating?: number | null;
    /**
     * estimated traffic volume
     * represents the estimated monthly traffic that specified keywords are driving to the website
     * calculated as the sum of the products of the specified keywords’ search volume values and CTR (click-through-rate) rates at certain positions in SERP
     * learn more about how the metric is calculated in this help center article
     */
    etv?: number | null;
    /**
     * the number of specified keywords the domain has positions for in SERPs
     */
    keywords_count?: number | null;
    /**
     * SERP visibility rate
     * represents the website visibility rate based on the SERP positions of the specified keywords
     * Keywords with positions in the range from 1 to 10 are assigned the visibility index from 1 to 0.1, respectively
     * Keywords with positions in the range from 11 to 20 have the fixed visibility index of 0.05
     * keywords with positions from 20 to 100 have the visibility index equal to 0
     */
    visibility?: number | null;
    /**
     * the number of SERP elements relevant to the domain
     * represents the number of search results in SERP relevant to the domain for the specified keywords
     */
    relevant_serp_items?: number | null;
    /**
     * keyword positions
     * SERP positions the related domain holds in SERP for the specified keywords
     */
    keywords_positions?: {
        [key: string]: Array<number | null> | null;
    } | null;
};

export type DataforseoLabsGoogleSerpCompetitorsLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * keywords specified in the request
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    seed_keywords?: Array<string | null> | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * the total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains detected SERP competitors and related data
     */
    items?: Array<DataforseoLabsSerpCompetitorsLiveItem | null> | null;
};

export type DataforseoLabsGoogleSerpCompetitorsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleSerpCompetitorsLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleSerpCompetitorsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleSerpCompetitorsLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleCompetitorsDomainLiveRequestInfo = {
    /**
     * domain
     * required field
     * the domain name of the target website
     * the domain should be specified without https:// and www.
     */
    target?: string;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * display results by item type
     * optional field
     * indicates the type of search results included in the response
     * Note: if the item_types array contains item types that are different from organic, the results will be ordered by the first item type in the array; you will not be able to sort and filter results by the types of search results not included in the response;
     * possible values:
     * ["organic", "paid", "featured_snippet", "local_pack"]
     * default value:
     * ["organic", "paid"]
     */
    item_types?: Array<string> | null;
    /**
     * include or exclude data from clickstream-based metrics in the result
     * optional field
     * if the parameter is set to true, you will receive clickstream_etv, clickstream_gender_distribution, and clickstream_age_distribution fields with clickstream data in the response
     * default value: false
     * with this parameter enabled, you will be charged double the price for the request
     * learn more about how clickstream-based metrics are calculated in this help center article
     */
    include_clickstream_data?: boolean | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in
     * example:
     * ["metrics.organic.count",">",50]
     * [[["metrics.organic.count",">=",50],"and",["metrics.organic.pos_1","in",[1,5]]],
     * "or",
     * ["metrics.organic.etv",">=","100"]]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to specify a sorting type
     * example:
     * ["metrics.paid.etv,asc"]
     * Note: you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["metrics.organic.etv,desc","metrics.paid.count,asc"]
     * default rule:
     * ["metrics.organic.count,desc"]
     * Note: if the item_types array contains item types that are different from organic, the results will be ordered by the first item type in the array
     */
    order_by?: Array<string> | null;
    /**
     * the maximum number of returned domains
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned domains
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * maximum rank up to which competitors will be considered
     * optional field
     * default value: 100
     * if you specify 10 here, we will extract competitors from the top 10 Google search results only
     */
    max_rank_group?: number | null;
    /**
     * indicates whether to exclude world’s largest websites
     * optional field
     * default value: false
     * set to true if you want to get highly-relevant competitors excluding the websites listed below:
     * wikipedia.org
     * pinterest.com
     * amazon.com
     * google.com
     * facebook.com
     * wordpress.com
     * medium.com
     * quora.com
     * reddit.com
     * youtube.com
     * ebay.com
     * uol.com.br
     * instagram.com
     * olx.com
     * twitter.com
     * linkedin.com
     * slideshare.net
     */
    exclude_top_domains?: boolean | null;
    /**
     * additional domains for improving results accuracy
     * optional field
     * to improve the accuracy of the result, you can specify domains that are known to intersect with the target in SERPs;
     * if you use this array, metrics in the result will be based on SERPs where both target website and intersecting_domains appear;
     * Note: you can specify up to 20 domains in this array
     */
    intersecting_domains?: Array<string> | null;
    /**
     * ignore highly similar keywords
     * optional field
     * if set to true, only core keywords will be returned, all highly similar keywords will be excluded;
     * default value: false
     */
    ignore_synonyms?: boolean | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsCompetitorsDomainLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * domain name
     */
    domain?: string | null;
    /**
     * average position of the domain in SERP
     * Note: average position is calculated for intersected keywords only;
     * the value for a given domain may differ when combined with different target websites
     */
    avg_position?: number | null;
    /**
     * sum of all domain positions in SERP
     * Note: average position is calculated for intersected keywords only;
     * the value for a given domain may differ when combined with different target websites
     */
    sum_position?: number | null;
    /**
     * number of intersecting keywords
     */
    intersections?: number | null;
    /**
     * metrics for all keywords of the domain
     * full overview of ranking and traffic data relevant to all keywords that the provided domain is ranking for
     */
    full_domain_metrics?: {
        [key: string]: DataforseoLabsMetricsInfo;
    } | null;
    /**
     * metrics for intersecting keywords
     * ranking and traffic data relevant to the keywords that the provided domain shares with the target domain
     * note: in this array ranking and traffic data is provided for the target considering the keywords target shares in search with the competitor’s domain
     */
    metrics?: {
        [key: string]: DataforseoLabsMetricsInfo;
    } | null;
    /**
     * metrics for intersecting keywords
     * ranking and traffic data relevant to the keywords that the provided domain shares with the target domain
     * note: in this array ranking and traffic data is provided for the returned competitor’s domain
     */
    competitor_metrics?: {
        [key: string]: DataforseoLabsMetricsInfo;
    } | null;
};

export type DataforseoLabsGoogleCompetitorsDomainLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * target domain in a POST array
     */
    target?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains data related to the target and competitor domains
     */
    items?: Array<DataforseoLabsCompetitorsDomainLiveItem | null> | null;
};

export type DataforseoLabsGoogleCompetitorsDomainLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleCompetitorsDomainLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleCompetitorsDomainLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleCompetitorsDomainLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleDomainIntersectionLiveRequestInfo = {
    /**
     * domain
     * required field
     * the domain name of the first target website
     * the domain should be specified without https:// and www.
     */
    target1?: string;
    /**
     * domain
     * required field
     * the domain name of the second target website
     * the domain should be specified without https:// and www.
     */
    target2?: string;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * domain intersections in SERP
     * optional field
     * if you set intersections to true, you will get the keywords for which both target domains specified as target1 and target2 have results within the same SERP; the corresponding SERP elements for both domains will be provided in the results array
     * Note: this endpoint will not provide results if the number of intersecting keywords exceeds 10 million
     * if you specify intersections: false, you will get the keywords for which the domain specified as target1 has results in SERP, and the domain specified as target2 doesn’t;
     * thus, the corresponding SERP elements and other data will be provided for the domain specified as target1only
     * default value: true
     */
    intersections?: boolean | null;
    /**
     * search results type
     * indicates type of search results included in the response
     * optional field
     * possible values:
     * ["organic", "paid", "featured_snippet", "local_pack"]
     * default value:
     * ["organic", "paid"]
     */
    item_types?: Array<string> | null;
    /**
     * include data from SERP for each keyword
     * optional field
     * if set to true, we will return a serp_info array containing SERP data (number of search results, relevant URL, and SERP features) for every keyword in the response
     * default value: false
     */
    include_serp_info?: boolean | null;
    /**
     * include or exclude data from clickstream-based metrics in the result
     * optional field
     * if the parameter is set to true, you will receive clickstream_keyword_info, clickstream_etv, keyword_info_normalized_with_clickstream, and keyword_info_normalized_with_bing fields in the response
     * default value: false
     * with this parameter enabled, you will be charged double the price for the request
     * learn more about how clickstream-based metrics are calculated in this help center article
     */
    include_clickstream_data?: boolean | null;
    /**
     * the maximum number of returned keywords
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the items array of returned keywords
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, match, not_match, ilike, not_ilike, like, not_like
     * you can use the % operator with like and not_like, as well as ilike and not_ilike to match any string of zero or more characters
     * example:
     * ["keyword_data.keyword_info.search_volume","in",[100,1000]]
     * [["first_domain_serp_element.etv",">",0],"and",["first_domain_serp_element.description","like","%goat%"]]
     * [["keyword_data.keyword_info.search_volume",">",100],
     * "and",
     * [["first_domain_serp_element.description","like","%goat%"],
     * "or",
     * ["second_domain_serp_element.type","=","organic"]]]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting parameter
     * example:
     * ["keyword_data.keyword_info.competition,desc"]
     * default rule:
     * ["keyword_data.keyword_info.search_volume,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["keyword_data.keyword_info.search_volume,desc","keyword_data.keyword_info.cpc,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataLabsLocalPackSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * domain in SERP of the Ad element
     */
    domain?: string | null;
    /**
     * phone number
     */
    phone?: string | null;
    /**
     * result’s URL
     */
    url?: string | null;
    /**
     * indicates whether the element is an ad
     */
    is_paid?: boolean | null;
    /**
     * the item’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
    /**
     * primary domain name in SERP
     */
    main_domain?: string | null;
    /**
     * URL in SERP that does not specify the HTTPs protocol and domain name
     */
    relative_url?: string | null;
    /**
     * estimated traffic volume
     * estimated organic monthly traffic to the domain
     * calculated as the product of CTR (click-through-rate) and search volume values of the returned keyword
     * learn more about how the metric is calculated in this help center article
     */
    etv?: number | null;
    /**
     * estimated cost of paid monthly search traffic
     * represents the estimated cost of paid monthly traffic (USD) based on etv and cpc values
     * learn more about how the metric is calculated in this help center article
     */
    estimated_paid_traffic_cost?: number | null;
    /**
     * estimated traffic volume based on clickstream data
     * calculated as the product of click-through-rate and clickstream search volume values of all keywords the domain ranks for
     * to retrieve results for this field, the parameter include_clickstream_data must be set to true
     * learn more about how the metric is calculated in this help center article
     */
    clickstream_etv?: number | null;
    rank_changes?: (RankChanges | null) & {
        /**
         * previous absolute rank in SERP
         * indicates previous rank of the element in Google SERP;
         * if this element is new, the value will be null
         */
        previous_rank_absolute?: number | null;
        /**
         * element was previously present in SERP
         * if the value is true, previously collected SERP didn’t contain this element
         */
        is_new?: boolean;
        /**
         * rank of this element went up
         * if the value is true, position of the element in SERP is higher compared to the previous check
         */
        is_up?: boolean;
        /**
         * rank of this element went down
         * if the value is true, position of the element in SERP is lower compared to the previous check
         */
        is_down?: boolean;
    };
    /**
     * backlinks information for the ranked website
     */
    backlinks_info?: BacklinksInfo | null;
    /**
     * page and domain rank information
     */
    rank_info?: RankInfo | null;
};

export type DataforseoLabsDomainIntersectionLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * keyword data for the returned keyword
     */
    keyword_data?: KeywordDataInfo | null;
    /**
     * contains data on the first domain’s SERP element found for the returned keyword
     * the list of supported SERP elements can be found below
     */
    first_domain_serp_element?: BaseDataforseoLabsApiElementItem | null;
    /**
     * contains data on the second domain’s SERP element found for the returned keyword
     * the list of supported SERP elements can be found below
     */
    second_domain_serp_element?: BaseDataforseoLabsApiElementItem | null;
};

export type DataforseoLabsGoogleDomainIntersectionLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * the first target domain in a POST array
     */
    target1?: string | null;
    /**
     * the second target domain in a POST array
     */
    target2?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains keywords, relevant SERP elements and related data
     */
    items?: Array<DataforseoLabsDomainIntersectionLiveItem | null> | null;
};

export type DataforseoLabsGoogleDomainIntersectionLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleDomainIntersectionLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleDomainIntersectionLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleDomainIntersectionLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleSubdomainsLiveRequestInfo = {
    /**
     * domain
     * required field
     * the domain name of the target website
     * the domain should be specified without https:// and www.
     */
    target?: string;
    /**
     * full name of the location
     * optional field
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations with their location_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available locations
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * optional field
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations with their location_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * optional field
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * optional field
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * display results by item type
     * optional field
     * indicates the type of search results included in the response
     * Note: if the item_types array contains item types that are different from organic, the results will be ordered by the first item type in the array; you will not be able to sort and filter results by the types of search results not included in the response;
     * possible values:
     * ["organic", "paid", "featured_snippet", "local_pack"]
     * default value:
     * ["organic", "paid"]
     */
    item_types?: Array<string> | null;
    /**
     * include or exclude data from clickstream-based metrics in the result
     * optional field
     * if the parameter is set to true, you will receive clickstream_etv, clickstream_gender_distribution, and clickstream_age_distribution fields with clickstream data in the response
     * default value: false
     * with this parameter enabled, you will be charged double the price for the request
     * learn more about how clickstream-based metrics are calculated in this help center article
     */
    include_clickstream_data?: boolean | null;
    /**
     * data collection mode
     * optional field
     * you can use this field to filter the results;
     * possible types of filtering:
     * live — return metrics for SERPs in which the specified target currently has ranking results;
     * lost — return metrics for SERPs in which the specified target had previously had ranking results, but didn’t have them during the last check;
     * all — return metrics for both types of SERPs.
     * default value: live
     */
    historical_serp_mode?: string | null;
    /**
     * ignore highly similar keywords
     * optional field
     * if set to true, only core keywords will be returned, all highly similar keywords will be excluded;
     * default value: false
     */
    ignore_synonyms?: boolean | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in
     * example:
     * ["metrics.paid.count",">",0]
     * [["metrics.paid.count",">",0],"and",["metrics.paid.etv",">","50"]]
     * [["metrics.organic.count",">","10"],
     * "and",
     * [["metrics.organic.pos_1","<>",0],"or",["metrics.organic.pos_2_3","<>",0]]]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to specify a sorting type
     * example:
     * ["metrics.paid.etv,asc"]
     * Note: you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["metrics.organic.etv,desc","metrics.paid.count,asc"]
     * default rule:
     * ["metrics.organic.count,desc"]
     * Note: if the item_types array contains item types that are different from organic, the results will be ordered by the first item type in the array
     */
    order_by?: Array<string> | null;
    /**
     * the maximum number of returned keywords
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned keywords
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsSubdomainsLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * returned subdomain
     */
    subdomain?: string | null;
    /**
     * ranking data relevant to subdomain
     */
    metrics?: {
        [key: string]: DataforseoLabsMetricsInfo;
    } | null;
};

export type DataforseoLabsGoogleSubdomainsLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * domain in a POST array
     */
    target?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains subdomains and related data
     */
    items?: Array<DataforseoLabsSubdomainsLiveItem | null> | null;
};

export type DataforseoLabsGoogleSubdomainsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleSubdomainsLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleSubdomainsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleSubdomainsLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleRelevantPagesLiveRequestInfo = {
    /**
     * domain
     * required field
     * the domain name of the target website
     * the domain should be specified without https:// and www.
     */
    target?: string;
    /**
     * full name of the location
     * optional field
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations with their location_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available locations
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * optional field
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations with their location_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * optional field
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * optional field
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * display results by item type
     * optional field
     * indicates the type of search results included in the response
     * Note: if the item_types array contains item types that are different from organic, the results will be ordered by the first item type in the array; you will not be able to sort and filter results by the types of search results not included in the response;
     * possible values:
     * ["organic", "paid", "featured_snippet", "local_pack"]
     * default value:
     * ["organic", "paid"]
     */
    item_types?: Array<string> | null;
    /**
     * include or exclude data from clickstream-based metrics in the result
     * optional field
     * if the parameter is set to true, you will receive clickstream_etv, clickstream_gender_distribution, and clickstream_age_distribution fields with clickstream data in the response
     * default value: false
     * with this parameter enabled, you will be charged double the price for the request
     * learn more about how clickstream-based metrics are calculated in this help center article
     */
    include_clickstream_data?: boolean | null;
    /**
     * the maximum number of returned pages
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned pages
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten pages in the results array will be omitted and the data will be provided for the successive pages
     */
    offset?: number | null;
    /**
     * data collection mode
     * optional field
     * you can use this field to filter the results;
     * possible types of filtering:
     * live — return metrics for SERPs in which the specified target currently has ranking results;
     * lost — return metrics for SERPs in which the specified target had previously had ranking results, but didn’t have them during the last check;
     * all — return metrics for both types of SERPs.
     * default value: live
     */
    historical_serp_mode?: string | null;
    /**
     * ignore highly similar keywords
     * optional field
     * if set to true, only core keywords will be returned, all highly similar keywords will be excluded;
     * default value: false
     */
    ignore_synonyms?: boolean | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in
     * example:
     * ["metrics.paid.count",">",0]
     * [["metrics.organic.count",">",50],"and",["metrics.organic.pos_1","<>",0]]
     * [[""metrics.organic.count",">",50"],
     * "and",
     * [["metrics.organic.pos_1","<>",0],"or",["metrics.organic.pos_2_3","<>",0]]]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to specify a sorting type
     * example:
     * ["metrics.paid.etv,asc"]
     * Note: you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["metrics.organic.etv,desc","metrics.paid.count,asc"]
     * default rule:
     * ["metrics.organic.count,desc"]
     * Note: if the item_types array contains item types that are different from organic, the results will be ordered by the first item type in the array
     */
    order_by?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsRelevantPagesLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * absolute URL of the relevant page
     */
    page_address?: string | null;
    /**
     * rankings and traffic metrics for the relevant page
     */
    metrics?: {
        [key: string]: DataforseoLabsMetricsInfo;
    } | null;
};

export type DataforseoLabsGoogleRelevantPagesLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * target domain in a POST array
     */
    target?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * relevant pages and related data
     */
    items?: Array<DataforseoLabsRelevantPagesLiveItem | null> | null;
};

export type DataforseoLabsGoogleRelevantPagesLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleRelevantPagesLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleRelevantPagesLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleRelevantPagesLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleDomainRankOverviewLiveRequestInfo = {
    /**
     * domain
     * required field
     * the domain name of the target website
     * the domain should be specified without https:// and www.
     */
    target?: string;
    /**
     * full name of the location
     * optional field
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations with their location_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available locations
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * optional field
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations with their location_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * optional field
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * optional field
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * ignore highly similar keywords
     * optional field
     * if set to true, all highly similar keywords will be excluded from the ranking and traffic calculations, the results will be based on data for main keywords from groups of synonyms
     * default value: false
     */
    ignore_synonyms?: boolean | null;
    /**
     * the maximum number of returned results for domain
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned items
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten items in the results array will be omitted and the data will be provided for the successive items
     */
    offset?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsDomainRankOverviewLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * ranking data relevant to the specified domain
     */
    metrics?: {
        [key: string]: DataforseoLabsMetricsInfo;
    } | null;
};

export type DataforseoLabsGoogleDomainRankOverviewLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * target domain in a POST array
     */
    target?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains ranking and traffic data
     */
    items?: Array<DataforseoLabsDomainRankOverviewLiveItem | null> | null;
};

export type DataforseoLabsGoogleDomainRankOverviewLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleDomainRankOverviewLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleDomainRankOverviewLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleDomainRankOverviewLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleHistoricalSerpsLiveRequestInfo = {
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field;
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character);
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”
     */
    keyword?: string;
    /**
     * starting date of the time range
     * optional field
     * if you don’t specify this field, the API will return all SERPs collected for 365 days starting from the current datetime value;
     * minimal possible value: 365 days from the current datetime value;
     * date format: "yyyy-mm-dd"
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * if you don’t specify this field, the today’s date will be used by default;
     * date format: "yyyy-mm-dd";
     * example:
     * "2021-09-01"
     */
    date_to?: string | null;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * unique location identifier
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_name parameters by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * unique language identifier
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_code parameters by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataLabsAnswerBoxSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * text
     * if there is none, equals null
     */
    text?: Array<string | null> | null;
    /**
     * sitelinks
     * the links shown below some of Google’s search results
     * if there are none, equals null
     */
    links?: Array<LinkElement | null> | null;
};

export type DataforseoLabsCarouselElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * subtitle of the item
     */
    sub_title?: string | null;
};

export type DataLabsCarouselSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<DataforseoLabsCarouselElement | null> | null;
};

export type DataLabsMultiCarouselSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * elements of search results found in SERP
     */
    items?: Array<MultiCarouselElement | null> | null;
};

export type DataLabsGoogleFlightsSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * sitelink URL
     */
    url?: string | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<GoogleFlightsElement | null> | null;
};

export type DataLabsGoogleReviewsSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * the number of reviews
     */
    reviews_count?: number | null;
    /**
     * the item’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
    /**
     * the identifier of a place
     */
    place_id?: string | null;
    /**
     * the additional feature of the review
     */
    feature?: string | null;
    /**
     * google-defined client id
     */
    cid?: string | null;
};

export type DataLabsGooglePostsSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * the identifier of the google_posts feature
     */
    posts_id?: string | null;
    /**
     * the additional feature of the review
     */
    feature?: string | null;
    /**
     * google-defined client id
     */
    cid?: string | null;
};

export type DataLabsImagesSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * sitelink URL
     */
    url?: string | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<AiModeImagesElementInfo | null> | null;
    /**
     * contains keywords and images related to the specified search term
     * if there are none, equals null
     */
    related_image_searches?: Array<RelatedImageSearchesElement | null> | null;
};

export type DataLabsJobsSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * sitelink URL
     */
    url?: string | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<JobsElement | null> | null;
};

export type DataforseoLabsKnowledgeGraphImagesItemElementItem = (BaseDataforseoLabsKnowledgeGraphElementItem | null) & {
    /**
     * link of the element
     */
    link?: LinkElement | null;
    /**
     * additional items present in the element
     * if there are none, equals null
     */
    items?: Array<KnowledgeGraphImagesElement | null> | null;
};

export type DataforseoLabsKnowledgeGraphCarouselItemElementItem = (BaseDataforseoLabsKnowledgeGraphElementItem | null) & {
    /**
     * title of the item
     */
    title?: string | null;
    /**
     * google defined data attribute ID
     * example:
     * action:listen_artist
     */
    data_attrid?: string | null;
    /**
     * link of the element
     */
    link?: LinkElement | null;
    /**
     * additional items present in the element
     * if there are none, equals null
     */
    items?: Array<KnowledgeGraphListElement | null> | null;
};

export type KnowledgeGraphLinkElementInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * relevant URL
     */
    url?: string | null;
    /**
     * website domain
     */
    domain?: string | null;
    /**
     * text alongside the link title
     */
    snippet?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
};

export type DataforseoLabsKnowledgeGraphDescriptionItemElementItem = (BaseDataforseoLabsKnowledgeGraphElementItem | null) & {
    /**
     * description content
     */
    text?: string | null;
    /**
     * sitelinks
     * the links shown below some of Google’s search results
     * if there are none, equals null
     */
    links?: Array<KnowledgeGraphLinkElementInfo | null> | null;
};

export type DataforseoLabsKnowledgeGraphListItemElementItem = (BaseDataforseoLabsKnowledgeGraphElementItem | null) & {
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * google defined data attribute ID
     * example:
     * ss:/webfacts:net_worth
     */
    data_attrid?: string | null;
    /**
     * link of the element
     */
    link?: LinkElement | null;
    /**
     * additional items present in the element
     * if there are none, equals null
     */
    items?: Array<KnowledgeGraphListElement | null> | null;
};

export type DataforseoLabsKnowledgeGraphPartItemElementItem = (BaseDataforseoLabsKnowledgeGraphElementItem | null) & {
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * google defined data attribute ID
     * example:
     * kc:/common/topic:social media presence
     */
    data_attrid?: string | null;
    /**
     * row content
     */
    text?: string | null;
    /**
     * sitelinks
     * the links shown below some of Google’s search results
     * if there are none, equals null
     */
    links?: Array<LinkElement | null> | null;
};

export type DataforseoLabsKnowledgeGraphExpandedItemElementItem = (BaseDataforseoLabsKnowledgeGraphElementItem | null) & {
    /**
     * title of the element
     */
    title?: string | null;
    /**
     * google defined data attribute ID
     * example:
     * kc:/local:place qa
     */
    data_attrid?: string | null;
    /**
     * expanded element
     */
    expanded_element?: string | null;
};

export type DataforseoLabsKnowledgeGraphRowItemElementItem = (BaseDataforseoLabsKnowledgeGraphElementItem | null) & {
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * google defined data attribute ID
     * example:
     * kc:/local:place qa
     */
    data_attrid?: string | null;
    /**
     * content within the item
     */
    text?: string | null;
    /**
     * link of the element
     */
    links?: Array<LinkElement | null> | null;
};

export type DataforseoLabsKnowledgeGraphShoppingItemElementItem = (BaseDataforseoLabsKnowledgeGraphElementItem | null) & {
    /**
     * title of a given link element
     */
    title?: string | null;
    /**
     * google defined data attribute ID
     * example:
     * kc:/shopping/gpc:organic-offers
     */
    data_attrid?: string | null;
    /**
     * additional items present in the element
     * if there are none, equals null
     */
    items?: Array<KnowledgeGraphShoppingElement | null> | null;
};

export type DataLabsKnowledgeGraphSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * subtitle of the item
     */
    sub_title?: string | null;
    /**
     * description of the results element in SERP
     */
    description?: string | null;
    /**
     * card id
     */
    card_id?: string | null;
    /**
     * sitelink URL
     */
    url?: string | null;
    /**
     * URL of the image
     */
    image_url?: string | null;
    /**
     * URL of the logo from knowledge graph
     */
    logo_url?: string | null;
    /**
     * google-defined client id
     */
    cid?: string | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<BaseDataforseoLabsKnowledgeGraphElementItem | null> | null;
};

export type DataLabsHotelsPackSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * starting date of stay
     * in the format “year-month-date”
     * example:
     * 2019-11-15
     */
    date_from?: string | null;
    /**
     * ending date of stay
     * in the format “year-month-date”
     * example:
     * 2019-11-17
     */
    date_to?: string | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<HotelsPackElement | null> | null;
};

export type DataLabsMapSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * sitelink URL
     */
    url?: string | null;
};

export type DataLabsPeopleAlsoAskSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * elements of search results found in SERP
     */
    items?: Array<PeopleAlsoAskElement | null> | null;
};

export type DataLabsRelatedSearchesSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * elements of search results found in SERP
     */
    items?: Array<string | null> | null;
};

export type DataLabsPeopleAlsoSearchSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<string | null> | null;
};

export type DataLabsShoppingSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<ShoppingElement | null> | null;
};

export type DataLabsTopStoriesSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<TopStoriesElement | null> | null;
};

export type DataLabsTwitterSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * sitelink URL
     */
    url?: string | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<TwitterElement | null> | null;
};

export type DataLabsVideoSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * elements of search results found in SERP
     */
    items?: Array<VideoElement | null> | null;
};

export type DataLabsEventsSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * sitelink URL
     */
    url?: string | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<EventsElement | null> | null;
};

export type DataLabsMentionCarouselSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<MentionCarouselElement | null> | null;
};

export type DataLabsRecipesSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * elements of search results found in SERP
     */
    items?: Array<RecipesElement | null> | null;
};

export type DataLabsTopSightsSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<TopSightsElement | null> | null;
};

export type DataLabsScholarlyArticlesSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * sitelink URL
     */
    url?: string | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<ScholarlyArticlesElement | null> | null;
};

export type DataLabsPopularProductsSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * elements of search results found in SERP
     */
    items?: Array<PopularProductsElement | null> | null;
};

export type DataLabsPodcastsSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * elements of search results found in SERP
     */
    items?: Array<PodcastsElement | null> | null;
};

export type DataLabsQuestionsAndAnswersSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * elements of search results found in SERP
     */
    items?: Array<QuestionsAndAnswersElement | null> | null;
};

export type DataLabsFindResultsOnSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * elements of search results found in SERP
     */
    items?: Array<FindResultsOnElement | null> | null;
};

export type DataLabsStocksBoxSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * source of the element
     * indicates the source of the video
     */
    source?: string | null;
    /**
     * snippet of the element
     */
    snippet?: string | null;
    /**
     * price of the shopping element
     */
    price?: PriceInfo | null;
    /**
     * sitelink URL
     */
    url?: string | null;
    /**
     * domain in SERP
     */
    domain?: string | null;
    /**
     * table element
     */
    table?: Table | null;
    /**
     * contains data provided in the graph of the element
     */
    graph?: Graph | null;
};

export type DataLabsCommercialUnitsSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<CommercialUnitsElement | null> | null;
};

export type DataLabsLocalServicesSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * sitelink URL
     */
    url?: string | null;
    /**
     * domain in SERP
     */
    domain?: string | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<LocalServicesElement | null> | null;
};

export type DataLabsGoogleHotelsSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * unique hotel identifier
     * unique hotel identifier assigned by Google;
     * example: "CgoIjaeSlI6CnNpVEAE"
     */
    hotel_identifier?: string | null;
    /**
     * sitelink URL
     */
    url?: string | null;
};

export type DataLabsMathSolverSerpElementItem = (BaseDataforseoLabsApiElementItem | null) & {
    /**
     * title of the result in SERP
     */
    title?: string | null;
    /**
     * solution to the equation
     * solution to the mathematical equation specified in the keyword field when setting a task
     */
    result?: string | null;
    /**
     * elements of search results found in SERP
     */
    items?: Array<MathSolverElement | null> | null;
    /**
     * sitelinks
     * the links shown below some of Google’s search results
     * if there are none, equals null
     */
    links?: Array<LinkElement | null> | null;
};

export type DataforseoLabsGoogleHistoricalSerpsLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * keyword obtained as a result of search engine autocorrection
     * the results will be provided for the corrected keyword
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * types of search results in SERP
     * contains types of search results (items) found in SERP.
     * possible item types:
     * answer_box, carousel, multi_carousel, featured_snippet, google_flights, google_reviews, google_posts, images, jobs, knowledge_graph, local_pack, hotels_pack, map, organic, paid, people_also_ask, related_searches, people_also_search, shopping, top_stories, twitter, video, events, mention_carousel, recipes, top_sights, scholarly_articles, popular_products, podcasts, questions_and_answers, find_results_on, stocks_box, visual_stories, commercial_units,  local_services, google_hotels, math_solver
     */
    item_types?: Array<string | null> | null;
    /**
     * total number of results in SERP
     */
    se_results_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * additional items present in the element
     * if there are none, equals null
     */
    items?: Array<BaseDataforseoLabsApiElementItem | null> | null;
};

export type DataforseoLabsGoogleHistoricalSerpsLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * keyword received in a POST array
     * the keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * the number of results returned in the items array
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains arrays of specific images
     */
    items?: Array<DataforseoLabsGoogleHistoricalSerpsLiveItem | null> | null;
};

export type DataforseoLabsGoogleHistoricalSerpsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * the array includes objects with SERPs for each month within the specified time frame
     */
    result?: Array<DataforseoLabsGoogleHistoricalSerpsLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleHistoricalSerpsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleHistoricalSerpsLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleHistoricalRankOverviewLiveRequestInfo = {
    /**
     * domain
     * required field
     * the domain name of the target website
     * the domain should be specified without https:// and www.
     */
    target?: string;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available locations with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available locations with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * starting date of the time range
     * optional field
     * if you don’t specify this field, the data will be provided for the previous 6 months
     * minimal possible value: 2020-10-01
     * date format: "yyyy-mm-dd"
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * if you don’t specify this field, the today’s date will be used by default
     * date format: "yyyy-mm-dd"
     * example:
     * "2021-04-01"
     */
    date_to?: string | null;
    /**
     * correlate data with previously obtained datasets
     * optional field
     * default value: true
     * if you use this parameter, our system will correlate data you obtain now with previously obtained datasets
     * this parameter is intended to mitigate any inconsistencies that may result from changes to our database
     * we recommend always setting correlate to true
     */
    correlate?: boolean | null;
    /**
     * ignore highly similar keywords
     * optional field
     * if set to true, only data based on core keywords will be returned, data for all highly similar keywords will be excluded;
     * default value: false
     */
    ignore_synonyms?: boolean | null;
    /**
     * include or exclude data from clickstream-based metrics in the result
     * optional field
     * if the parameter is set to true, you will receive clickstream_etv, clickstream_gender_distribution, and clickstream_age_distribution fields with clickstream data in the response;
     * default value: false;
     * Note: historical clickstream data is available from 2024/05 (May, 2024);
     * with this parameter enabled, you will be charged double the price for the request;
     * learn more about how clickstream-based metrics are calculated in this help center article
     */
    include_clickstream_data?: boolean | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsGoogleHistoricalRankOverviewLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * year for which the data is provided
     */
    year?: number | null;
    /**
     * month for which the data is provided
     */
    month?: number | null;
    /**
     * ranking data relevant to the specified domain
     */
    metrics?: {
        [key: string]: DataforseoLabsMetricsInfo;
    } | null;
};

export type DataforseoLabsGoogleHistoricalRankOverviewLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * target domain in a POST array
     */
    target?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains historical ranking and traffic data
     */
    items?: Array<DataforseoLabsGoogleHistoricalRankOverviewLiveItem | null> | null;
};

export type DataforseoLabsGoogleHistoricalRankOverviewLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleHistoricalRankOverviewLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleHistoricalRankOverviewLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleHistoricalRankOverviewLiveTaskInfo | null> | null;
};

export type DataforseoLabsGooglePageIntersectionLiveRequestInfo = {
    /**
     * target URLs of pages
     * required field
     * you can set up to 20 pages in this object
     * the pages should be specified with absolute URLs (including http:// or https://)
     * example:
     * "pages": {
     * "1":"https://www.apple.com/mac*",
     * "2":"https://dataforseo.com*",
     * "3":"https://support.microsoft.com/"
     * }if you specify a single page here, we will return results only for this page;
     * you can also use a wildcard (‘*’) character to specify the search pattern
     * example:
     * "example.com"
     * search for the exact URL
     * "example.com/eng*"
     * search for the example.com page and all its related URLs which start with ‘/eng/’, such as “example.com/eng/index.html” and “example.com/eng/help/”, etc.
     * note: a wilcard should be placed after the slash (‘/’) character in the end of the URL, it is not possible to place it after the domain in the following way:
     * https://dataforseo.com*
     * use https://dataforseo.com* instead
     * Note: this endpoint will not provide results if the number of intersecting keywords exceeds 10 million
     */
    pages?: {
        [key: string]: string | null;
    } | null;
    /**
     * URLs of pages you want to exclude
     * optional field
     * you can set up to 10 pages in this array
     * if you use this array, results will contain the keywords for which URLs from the pages object rank, but URLs from exclude_pages array do not;
     * note that if you specify this field, the results will be based on the keywords any URL from pages ranks for regardless of intersections between them. However, you can set intersection_mode to intersect and results will contain the keywords all URLs from pages rank for in the same SERP and URLs from exclude_pages do not.
     * use a wildcard (‘*’) character to specify the search pattern
     * example:
     * "exclude_pages": [
     * "https://www.apple.com/iphone*",
     * "https://dataforseo.com/apis*",
     * "https://www.microsoft.com/en-us/industry/services/"
     * ]
     */
    exclude_pages?: Array<string> | null;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * search results type
     * indicates type of search results included in the response
     * optional field
     * possible values:
     * ["organic", "paid", "featured_snippet", "local_pack"]
     * default value:
     * ["organic", "paid"]
     */
    item_types?: Array<string> | null;
    /**
     * the maximum number of returned keywords
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the items array of returned keywords
     * optional field
     * default value: 0
     * if you specify 10 here, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * indicates if the subdomains will be included in the search
     * optional field
     * if set to false, the subdomains will be ignored
     * default value: true
     */
    include_subdomains?: boolean | null;
    /**
     * indicates whether to intersect keywords
     * optional field
     * use this field to intersect or merge results for the specified URLs
     * possible values: union, intersect
     * union – results are based on all keywords any URL from pages rank for;
     * intersect – results are based on the keywords all URLs from pages rank for in the same SERP:
     * by default, results are based on the intersect mode if you specify only pages array. If you specify exclude_pages as well, results are based on the union mode
     */
    intersection_mode?: string | null;
    /**
     * include data from SERP for each keyword
     * optional field
     * if set to true, we will return a serp_info array containing SERP data (number of search results, relevant URL, and SERP features) for every keyword in the response
     * default value: false
     */
    include_serp_info?: boolean | null;
    /**
     * include or exclude data from clickstream-based metrics in the result
     * optional field
     * if the parameter is set to true, you will receive clickstream_keyword_info, clickstream_etv, keyword_info_normalized_with_clickstream, and keyword_info_normalized_with_bing fields in the response
     * default value: false
     * with this parameter enabled, you will be charged double the price for the request
     * learn more about how clickstream-based metrics are calculated in this help center article
     */
    include_clickstream_data?: boolean | null;
    /**
     * ignore highly similar keywords
     * optional field
     * if set to true only core keywords will be returned, all highly similar keywords will be excluded;
     * default value: false
     */
    ignore_synonyms?: boolean | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, ilike, not_ilike, like, not_like, match, not_match
     * you can use the % operator with like and not_like, as well as ilike and not_ilike to match any string of zero or more characters
     * note that if you want to filter by any field in the intersection_result array you need to specify the number of corresponding page
     * for instance, if you want to filter results by the ranking of the first specified URL, you should set the following filter:
     * [intersection_result.1.rank_absolute,"=",1]
     * if you want to filter results and receive only organic listings for the third specified URL, you should set the following filter:
     * [intersection_result.3.type,"=","organic"] , etc.example:
     * ["keyword_data.keyword_info.search_volume","in",[100,1000]]
     * [["intersection_result.1.etv",">",0],"and",["intersection_result.1.description","like","%goat%"]][["keyword_data.keyword_info.search_volume",">",100],
     * "and",
     * [["intersection_result.2.description","like","%goat%"],
     * "or",
     * ["intersection_result.2.type","=","organic"]]]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting parameter
     * example:
     * ["keyword_data.keyword_info.competition,desc"]
     * default rule:
     * ["keyword_data.keyword_info.search_volume,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["intersection_result.1.rank_group,asc","intersection_result.2.rank_absolute,asc"]
     */
    order_by?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsPageIntersectionLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * keyword data for the returned keyword
     */
    keyword_data?: KeywordDataInfo | null;
    /**
     * contains data on the SERP elements found for the returned keyword
     * data will be provided in separate arrays for each URL you specified in the pages object when setting a task;
     * depending on the number of specified URLs, it can contain from 1 to 20 arrays named respectively
     */
    intersection_result?: {
        [key: string]: BaseDataforseoLabsApiElementItem | null;
    } | null;
};

export type DataforseoLabsGooglePageIntersectionLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * URLs you specified a POST array
     */
    pages?: {
        [key: string]: string | null;
    } | null;
    /**
     * URLs you specified in a POST array that will be excluded from the results
     */
    exclude_pages?: Array<string | null> | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains keywords, relevant SERP elements and related data
     */
    items?: Array<DataforseoLabsPageIntersectionLiveItem | null> | null;
};

export type DataforseoLabsGooglePageIntersectionLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGooglePageIntersectionLiveResultInfo | null> | null;
};

export type DataforseoLabsGooglePageIntersectionLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGooglePageIntersectionLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleBulkTrafficEstimationLiveRequestInfo = {
    /**
     * target domains, subdomains, and webpages
     * required field
     * you can specify domains, subdomains, and webpages in this field;
     * domains and subdomains should be specified without https:// and www.;
     * pages should be specified with absolute URL, including https:// and www.;
     * you can set up to 1000 domains, subdomains or webpages
     */
    targets?: Array<string>;
    /**
     * full name of the location
     * if you use this field, you don’t have to specify location_code
     * you can receive the list of available locations with their location_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available locations
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * if you use this field, you don’t have to specify location_name
     * you can receive the list of available locations with their location_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * display results by item type
     * optional field
     * indicates the type of search results included in the response
     * Note: if the item_types array contains item types that are different from organic, the results will be ordered by the first item type in the array
     * possible values:
     * ["organic", "paid", "featured_snippet", "local_pack"]
     * default value:
     * ["organic", "paid"]
     */
    item_types?: Array<string> | null;
    /**
     * ignore highly similar keywords
     * optional field
     * if set to true, only core keywords will be returned, all highly similar keywords will be excluded;
     * default value: false
     */
    ignore_synonyms?: boolean | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BulkMetricsInfo = {
    /**
     * estimated traffic volume
     * estimated organic monthly traffic to the domain
     * calculated as the product of CTR (click-through-rate) and search volume values of all keywords the domain ranks for
     * learn more about how the metric is calculated in this help center article
     */
    etv?: number | null;
    /**
     * total count of organic SERPs that contain the domain
     */
    count?: number | null;
};

export type BulkMetricsBundleInfo = {
    /**
     * traffic data from organic search
     */
    organic?: BulkMetricsInfo | null;
    /**
     * traffic data from paid search
     */
    paid?: BulkMetricsInfo | null;
    /**
     * traffic data from the local pack results in SERP
     */
    local_pack?: BulkMetricsInfo | null;
    /**
     * traffic data from the featured snippet results in Google SERP
     */
    featured_snippet?: BulkMetricsInfo | null;
};

export type DataforseoLabsGoogleBulkTrafficEstimationLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * target domain in a POST array
     */
    target?: string | null;
    /**
     * traffic data relevant to the specified domain
     */
    metrics?: BulkMetricsBundleInfo | null;
};

export type DataforseoLabsGoogleBulkTrafficEstimationLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * array of items with relevant traffic estimation data
     */
    items?: Array<DataforseoLabsGoogleBulkTrafficEstimationLiveItem | null> | null;
};

export type DataforseoLabsGoogleBulkTrafficEstimationLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleBulkTrafficEstimationLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleBulkTrafficEstimationLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleBulkTrafficEstimationLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleHistoricalBulkTrafficEstimationLiveRequestInfo = {
    /**
     * target domains and subdomains
     * required field
     * you can specify domains and subdomains in this field;
     * domains and subdomains should be specified without https:// and www.;
     * you can set up to 1000 domains or subdomains
     */
    targets?: Array<string>;
    /**
     * full name of the location
     * if you use this field, you don’t have to specify location_code
     * you can receive the list of available locations with their location_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available locations
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * if you use this field, you don’t have to specify location_name
     * you can receive the list of available locations with their location_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * starting date of the time range
     * optional field
     * if you don’t specify this field, the data will be provided for the previous 12 months
     * minimal possible value: 2020-10-01
     * date format: "yyyy-mm-dd"
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * if you don’t specify this field, the today’s date will be used by default;
     * date format: "yyyy-mm-dd"
     * example:
     * "2021-04-01"
     */
    date_to?: string | null;
    /**
     * ignore highly similar keywords
     * optional field
     * if set to true, only core keywords will be returned, all highly similar keywords will be excluded;
     * default value: false
     */
    ignore_synonyms?: boolean | null;
    /**
     * display results by item type
     * optional field
     * indicates the type of search results included in the response;
     * Note: if the item_types array contains item types that are different from organic, the results will be ordered by the first item type in the array;
     * possible values:
     * ["organic", "paid", "featured_snippet", "local_pack"]
     * default value:
     * ["organic", "paid"]
     */
    item_types?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type HistoricalMetricsInfo = {
    /**
     * year for which the data is provided
     */
    year?: number | null;
    /**
     * month for which the data is provided
     */
    month?: number | null;
    /**
     * estimated traffic volume
     * estimated organic monthly traffic to the domain
     * calculated as the product of CTR (click-through-rate) and search volume values of all keywords the domain ranks for
     * learn more about how the metric is calculated in this help center article
     */
    etv?: number | null;
    /**
     * total count of organic SERPs that contain the domain
     */
    count?: number | null;
};

export type HistoricalMetricsBundleInfo = {
    /**
     * traffic data from organic search
     */
    organic?: Array<HistoricalMetricsInfo | null> | null;
    /**
     * traffic data from paid search
     */
    paid?: Array<HistoricalMetricsInfo | null> | null;
    /**
     * traffic data from the local pack results in SERP
     */
    local_pack?: Array<HistoricalMetricsInfo | null> | null;
    /**
     * traffic data from the featured snippet results in Google SERP
     */
    featured_snippet?: Array<HistoricalMetricsInfo | null> | null;
};

export type DataforseoLabsGoogleHistoricalBulkTrafficEstimationLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * target domain in a POST array
     */
    target?: string | null;
    /**
     * traffic data relevant to the specified domain
     */
    metrics?: HistoricalMetricsBundleInfo | null;
};

export type DataforseoLabsGoogleHistoricalBulkTrafficEstimationLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * array of items with relevant traffic estimation data
     */
    items?: Array<DataforseoLabsGoogleHistoricalBulkTrafficEstimationLiveItem | null> | null;
};

export type DataforseoLabsGoogleHistoricalBulkTrafficEstimationLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleHistoricalBulkTrafficEstimationLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleHistoricalBulkTrafficEstimationLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleHistoricalBulkTrafficEstimationLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleHistoricalKeywordDataLiveRequestInfo = {
    /**
     * keywords
     * required field
     * The maximum number of keywords you can specify: 700
     * The maximum number of characters for each keyword: 80
     * The maximum number of words for each keyword phrase: 10
     * the specified keywords will be converted to lowercase format, data will be provided in a separate array
     * note that if some of the keywords specified in this array are omitted in the results you receive, then our database doesn’t contain such keywords and cannot return data on them
     * you will not be charged for the keywords omitted in the results
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available locations with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available locations with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type History = {
    /**
     * year
     */
    year?: number | null;
    /**
     * month
     */
    month?: number | null;
    /**
     * historical data for the keyword
     */
    keyword_info?: KeywordInfo | null;
};

export type DataforseoLabsGoogleHistoricalKeywordDataLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * keyword
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * array of objects with historical data for the keyword
     */
    history?: Array<History | null> | null;
};

export type DataforseoLabsGoogleHistoricalKeywordDataLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains keywords and related data
     */
    items?: Array<DataforseoLabsGoogleHistoricalKeywordDataLiveItem | null> | null;
};

export type DataforseoLabsGoogleHistoricalKeywordDataLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleHistoricalKeywordDataLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleHistoricalKeywordDataLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleHistoricalKeywordDataLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleKeywordOverviewLiveRequestInfo = {
    /**
     * keywords
     * required field
     * The maximum number of keywords you can specify: 700
     * The maximum number of characters for each keyword: 80
     * The maximum number of words for each keyword phrase: 10
     * the specified keywords will be converted to lowercase format, data will be provided in a separate array
     * note that if some of the keywords specified in this array are omitted in the results you receive, then our database doesn’t contain such keywords and cannot return data on them
     * you will not be charged for the keywords omitted in the results
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available locations with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available locations with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * include data from SERP for each keyword
     * optional field
     * if set to true, we will return a serp_info array containing SERP data (number of search results, relevant URL, and SERP features) for every keyword in the response
     * default value: false
     */
    include_serp_info?: boolean | null;
    /**
     * include or exclude data from clickstream-based metrics in the result
     * optional field
     * if the parameter is set to true, you will receive clickstream_keyword_info, keyword_info_normalized_with_clickstream, and keyword_info_normalized_with_bing fields in the response
     * default value: false
     * with this parameter enabled, you will be charged double the price for the request
     * learn more about how clickstream-based metrics are calculated in this help center article
     */
    include_clickstream_data?: boolean | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsGoogleKeywordOverviewLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * keyword
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * indicates data for Google and partner sites
     * if true, the results are returned for owned, operated, and syndicated networks across Google and partner sites that host Google search;
     * if false, the results are returned for Google search sites only
     */
    search_partners?: boolean | null;
    /**
     * keyword data for the returned keyword
     */
    keyword_info?: KeywordInfo | null;
    /**
     * contains keyword search volume normalized with Bing search volume
     */
    keyword_info_normalized_with_bing?: KeywordInfoNormalizedWithInfo | null;
    /**
     * contains keyword search volume normalized with clickstream data
     */
    keyword_info_normalized_with_clickstream?: KeywordInfoNormalizedWithInfo | null;
    /**
     * clickstream data for the returned keyword
     * to retrieve results for this field, the parameter include_clickstream_data must be set to true
     */
    clickstream_keyword_info?: ClickstreamKeywordInfo | null;
    /**
     * additional information about the keyword
     */
    keyword_properties?: KeywordProperties | null;
    /**
     * SERP data
     * the value will be null if you didn’t set the field include_serp_info to true in the POST array or if there is no SERP data for this keyword in our database
     */
    serp_info?: SerpInfo | null;
    /**
     * backlink data for the returned keyword
     * this object provides the average number of backlinks, referring pages and domains, as well as the average rank values among the top-10 websites ranking organically for the keyword
     */
    avg_backlinks_info?: AvgBacklinksInfo | null;
    /**
     * search intent info for the returned keyword
     * learn about search intent in this help center article
     */
    search_intent_info?: SearchIntentInfo | null;
};

export type DataforseoLabsGoogleKeywordOverviewLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains keywords and related data
     */
    items?: Array<DataforseoLabsGoogleKeywordOverviewLiveItem | null> | null;
};

export type DataforseoLabsGoogleKeywordOverviewLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleKeywordOverviewLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleKeywordOverviewLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleKeywordOverviewLiveTaskInfo | null> | null;
};

export type DataforseoLabsAmazonBulkSearchVolumeLiveRequestInfo = {
    /**
     * target keywords
     * required field
     * UTF-8 encoding
     * maximum number of keywords you can specify in this array: 1000;
     * the keywords will be converted to lowercase format
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of the location
     * required field if don’t specify location_code
     * you can receive the list of available locations with their location_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     *
     * Note: this endpoint currently supports the following locations and languages only:
     * Australia – 2036, en
     * Austria – 2040, de
     * Canada – 2124, en
     * Egypt – 2818, ar
     * France – 2250, fr
     * Germany – 2276, de
     * India – 2356, en
     * Italy – 2380, it
     * Mexico – 2484, es
     * Netherlands – 2528, nl
     * Saudi Arabia – 2682, ar
     * Singapore – 2702, en
     * Spain – 2724, es
     * United Arab Emirates – 2784, ar
     * United Kingdom – 2826, en
     * United States – 2840, en
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * location code
     * required field if don’t specify location_name
     * you can receive the list of available locations with their location_code by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports these locations and languages only;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if don’t specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * Note: this endpoint currently supports these locations and languages only;
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if don’t specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * Note: this endpoint currently supports these locations and languages only;
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsAmazonBulkSearchVolumeLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * keyword in a POST array
     */
    keyword?: string | null;
    /**
     * average monthly search volume rate
     * represents the (approximate) number of searches for the returned keyword on Amazon
     */
    search_volume?: number | null;
};

export type DataforseoLabsAmazonBulkSearchVolumeLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains keyword search volume data data
     */
    items?: Array<DataforseoLabsAmazonBulkSearchVolumeLiveItem | null> | null;
};

export type DataforseoLabsAmazonBulkSearchVolumeLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsAmazonBulkSearchVolumeLiveResultInfo | null> | null;
};

export type DataforseoLabsAmazonBulkSearchVolumeLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsAmazonBulkSearchVolumeLiveTaskInfo | null> | null;
};

export type DataforseoLabsAmazonRelatedKeywordsLiveRequestInfo = {
    /**
     * keyword
     * required field
     * UTF-8 encoding
     * the keywords should be specified in the lowercase format
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US, Egypt, Saudi Arabia, and the United Arab Emirates locations only;
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US, Egypt, Saudi Arabia, and the United Arab Emirates locations only;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available locations with their language_name by making a separate request to https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available locations with their language_code by making a separate request to https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * keyword search depth
     * optional field
     * default value: 1;
     * number of the returned results depends on the value you set in this field;
     * you can specify a level from 0 to 4;
     * estimated number of keywords for each level (maximum):
     * 0 – the keyword set in the keyword field
     * 1 – 6 keywords
     * 2 – 42 keywords
     * 3 – 258 keywords
     * 4 – 1554 keywords
     */
    depth?: number | null;
    /**
     * include data for the seed keyword
     * optional field
     * if set to true, data for the seed keyword specified in the keyword field will be provided in the seed_keyword_data array of the response
     * default value: false
     */
    include_seed_keyword?: boolean | null;
    /**
     * ignore highly similar keywords
     * optional field
     * if set to true only core keywords will be returned, all highly similar keywords will be excluded;
     * default value: false
     */
    ignore_synonyms?: boolean | null;
    /**
     * the maximum number of returned keywords
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned keywords
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsAmazonRelatedKeywordsLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * keyword data for the returned keyword
     */
    keyword_data?: AmazonKeywordData | null;
    /**
     * keyword search depth
     */
    depth?: number | null;
    /**
     * list of related keywords
     * represents the list of search queries which are related to the keyword returned in the array above
     */
    related_keywords?: Array<string> | null;
};

export type DataforseoLabsAmazonRelatedKeywordsLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * keyword in a POST array
     */
    seed_keyword?: string | null;
    /**
     * keyword data for the seed keyword
     * fields in the object are identical to that of keyword_data
     */
    seed_keyword_data?: AmazonKeywordData | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains objects with keywords and related data
     */
    items?: Array<DataforseoLabsAmazonRelatedKeywordsLiveItem | null> | null;
};

export type DataforseoLabsAmazonRelatedKeywordsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsAmazonRelatedKeywordsLiveResultInfo | null> | null;
};

export type DataforseoLabsAmazonRelatedKeywordsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsAmazonRelatedKeywordsLiveTaskInfo | null> | null;
};

export type DataforseoLabsAmazonRankedKeywordsLiveRequestInfo = {
    /**
     * product ID
     * required field
     * unique product identifier (ASIN) on Amazon;
     * you can receive the asin parameter by making a separate request to the Amazon Products endpoint
     */
    asin?: string;
    /**
     * full name of the location
     * required field if don’t specify location_code
     * you can receive the list of available locations with their location_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US, Egypt, Saudi Arabia, and the United Arab Emirates locations only;
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * location code
     * required field if don’t specify location_name
     * you can receive the list of available locations with their location_code by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US, Egypt, Saudi Arabia, and the United Arab Emirates locations only;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if don’t specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if don’t specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * the maximum number of products in the results array
     * optional field
     * default value: 100;
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * ignore highly similar keywords
     * optional field
     * if set to true only core keywords will be returned, all highly similar keywords will be excluded;
     * default value: false
     */
    ignore_synonyms?: boolean | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, like, not_like, match, not_match
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["keyword_data.keyword_info.search_volume","in",[100,1000]];
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting parameter
     * example:
     * ["keyword_data.keyword_info.competition,desc"]
     * default rule:
     * ["ranked_serp_element.serp_item.rank_group,asc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["keyword_data.keyword_info.search_volume,desc","keyword_data.keyword_info.cpc,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * offset in the results array of returned keywords
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type AmazonInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in Amazon SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * the alignment of the element in Amazon SERP
     * can take the following values:
     * left, right
     */
    position?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
    /**
     * Amazon domain
     */
    domain?: string | null;
    /**
     * product title
     */
    title?: string | null;
    /**
     * URL of the product page
     */
    url?: string | null;
    /**
     * ASIN of the product
     * learn more about ASIN in this help center guide
     */
    asin?: string | null;
    /**
     * URL of the product image featured in the results
     */
    image_url?: string | null;
    /**
     * the regular price of a product
     * example:
     * 49.98
     */
    price_from?: number | null;
    /**
     * the upper limit of the product price range
     * example:
     * 384.99
     */
    price_to?: number | null;
    /**
     * currency in the ISO format
     * example:
     * USD
     */
    currency?: string | null;
    /**
     * special offer details
     * contains special offer details, including coupon and Subscribe & Save discounts
     */
    special_offers?: Array<string | null> | null;
    /**
     * “Best Seller” label
     * if the value is true, the product is marked with the “Best Seller” label
     */
    is_best_seller?: boolean | null;
    /**
     * “Amazon’s choice” label
     * if the value is true, the product is marked with the “Amazon’s choice” label
     */
    is_amazon_choice?: boolean | null;
    rating?: (RatingElement | null) & {
        /**
         * the value of the rating
         */
        value?: number | null;
    };
    /**
     * delivery information
     * delivery information including free and fast delivery date ranges
     */
    delivery_info?: AmazonDeliveryInfo | null;
    bought_past_month?: number | null;
};

export type AmazonRankedSerpElement = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * contains data on the SERP element
     * the list of supported SERP elements can be found below
     */
    serp_item?: AmazonInfo | null;
    /**
     * direct URL to Amazon results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * direct URL to Amazon results
     * contains types of all search results (items) found in the returned SERP;
     * possible item types:
     * amazon_serp, amazon_paid, editorial_recommendations, top_rated_from_our_brands, related_searches
     */
    serp_item_types?: Array<string | null> | null;
    /**
     * total number of results in Amazon SERP
     */
    se_results_count?: number | null;
    /**
     * date and time when SERP data was last updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    last_updated_time?: string | null;
    /**
     * previous to the most recent update of SERP data
     * in the ISO 8601 format: “YYYY-MM-DDThh:mm:ss.sssssssZ”
     * example:
     * 2020-09-12T00:07:43.0733218Z
     */
    previous_updated_time?: string | null;
};

export type DataforseoLabsAmazonRankedKeywordsLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * keyword data for the returned keyword
     */
    keyword_data?: KeywordDataInfo | null;
    /**
     * contains data on the products’s SERP element found for the returned keyword
     */
    ranked_serp_element?: AmazonRankedSerpElement | null;
};

export type DataforseoLabsAmazonRankedKeywordsLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * ASIN in a POST array
     */
    asin?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains detected Amazon product competitors and related data
     */
    items?: Array<DataforseoLabsAmazonRankedKeywordsLiveItem | null> | null;
};

export type DataforseoLabsAmazonRankedKeywordsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsAmazonRankedKeywordsLiveResultInfo | null> | null;
};

export type DataforseoLabsAmazonRankedKeywordsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsAmazonRankedKeywordsLiveTaskInfo | null> | null;
};

export type DataforseoLabsAmazonProductRankOverviewLiveRequestInfo = {
    /**
     * product IDs to compare
     * required field
     * product IDs to receive ranking data for;
     * the maximum number of ASINs you can specify in this array is 1000;
     * you can receive the asin parameter by making a separate request to the Amazon Products endpoint
     * Note: all letters in ASIN code must be specified in uppercase format;
     * example:
     * B01LW2SL7R
     */
    asins?: Array<string>;
    /**
     * full name of the location
     * required field if don’t specify location_code
     * you can receive the list of available locations with their location_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US, Egypt, Saudi Arabia, and the United Arab Emirates locations only;
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * location code
     * required field if don’t specify location_name
     * you can receive the list of available locations with their location_code by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US, Egypt, Saudi Arabia, and the United Arab Emirates locations only;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if don’t specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if don’t specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type AppMetricsInfo = {
    /**
     * number of organic SERPs where the product ranks #1
     */
    pos_1?: number | null;
    /**
     * number of organic SERPs where the product ranks #2-3
     */
    pos_2_3?: number | null;
    /**
     * number of organic SERPs where the product ranks #4-10
     */
    pos_4_10?: number | null;
    /**
     * number of organic SERPs where the product ranks #11-100
     */
    pos_11_100?: number | null;
    /**
     * total count of Amazon organic SERPs that contain the product
     */
    count?: number | null;
    /**
     * total search volume of the product’s ranking keywords in organic SERP
     */
    search_volume?: number | null;
};

export type AmazonMetricsBundleInfo = {
    /**
     * ranking data from Amazon organic SERP
     */
    amazon_serp?: AppMetricsInfo | null;
    /**
     * ranking data from Amazon paid SERP
     */
    amazon_paid?: AppMetricsInfo | null;
};

export type DataforseoLabsAmazonProductRankOverviewLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * ASIN of the product
     * unique product identifier on Amazon;
     * for more information, refer to this help center guide
     */
    asin?: string | null;
    /**
     * average keyword position of the product
     */
    metrics?: AmazonMetricsBundleInfo | null;
};

export type DataforseoLabsAmazonProductRankOverviewLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains detected Amazon product competitors and related data
     */
    items?: Array<DataforseoLabsAmazonProductRankOverviewLiveItem | null> | null;
};

export type DataforseoLabsAmazonProductRankOverviewLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsAmazonProductRankOverviewLiveResultInfo | null> | null;
};

export type DataforseoLabsAmazonProductRankOverviewLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsAmazonProductRankOverviewLiveTaskInfo | null> | null;
};

export type DataforseoLabsAmazonProductCompetitorsLiveRequestInfo = {
    /**
     * product ID
     * required field
     * unique product identifier (ASIN) on Amazon;
     * you can receive the asin parameter by making a separate request to the Amazon Products endpoint
     */
    asin?: string;
    /**
     * full name of the location
     * required field if don’t specify location_code
     * you can receive the list of available locations with their location_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US, Egypt, Saudi Arabia, and the United Arab Emirates locations only;
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * location code
     * required field if don’t specify location_name
     * you can receive the list of available locations with their location_code by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US, Egypt, Saudi Arabia, and the United Arab Emirates locations only;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if don’t specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if don’t specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * the maximum number of products in the results array
     * optional field
     * default value: 100;
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, ilike, not_ilike, like, not_like, match, not_match
     * you can use the % operator with like and not_like, as well as ilike and not_ilike to match any string of zero or more characters
     * example:
     * ["full_metrics.amazon_serp.pos_1",">", 20]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting parameter
     * example:
     * ["full_metrics.amazon_serp.pos_1,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["full_metrics.amazon_serp.pos_1,desc","avg_position,desc"]
     * default rule:
     * ["ranked_serp_element.serp_item.rank_group,asc"]
     */
    order_by?: Array<string> | null;
    /**
     * offset in the results array of returned product competitors
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten product competitors in the results array will be omitted and the data will be provided for the successive product competitors
     */
    offset?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsAmazonProductCompetitorsLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * ASIN of the product
     * unique product identifier on Amazon;
     * for more information, refer to this help center guide
     */
    asin?: string | null;
    /**
     * average position of the product in Amazon SERP
     * Note: average position is calculated for intersected keywords only;
     * the value for a given product may differ when combined with different target products
     */
    avg_position?: number | null;
    /**
     * sum of all product positions in Amazon SERP
     * Note: average position is calculated for intersected keywords only;
     * the value for a given product may differ when combined with different target products
     */
    sum_position?: number | null;
    /**
     * number of intersecting keywords
     */
    intersections?: number | null;
    /**
     * metrics for intersecting keywords
     * ranking data relevant to the keywords that the provided asin shares with the target asin;
     * Note: in this object ranking data is provided for the returned competitor’s asin
     */
    competitor_metrics?: AmazonMetricsBundleInfo | null;
    /**
     * metrics for all keywords of the product
     * full overview of ranking data relevant to all keywords that the provided asin is ranking for
     */
    full_metrics?: AmazonMetricsBundleInfo | null;
};

export type DataforseoLabsAmazonProductCompetitorsLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * ASIN in a POST array
     */
    asin?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains detected Amazon product competitors and related data
     */
    items?: Array<DataforseoLabsAmazonProductCompetitorsLiveItem | null> | null;
};

export type DataforseoLabsAmazonProductCompetitorsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsAmazonProductCompetitorsLiveResultInfo | null> | null;
};

export type DataforseoLabsAmazonProductCompetitorsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsAmazonProductCompetitorsLiveTaskInfo | null> | null;
};

export type DataforseoLabsAmazonProductKeywordIntersectionsLiveRequestInfo = {
    /**
     * asins of target products
     * required field
     * product IDs of the products for which you need to find keyword intersections;
     * specify the ASINs as in the following example:
     * "asins": {
     * "1": "019005476X",
     * "2": "0190074442"
     * }
     * the maximum number of ASINs you can specify in this object is 20;
     * learn more about the parameter on this help center page
     */
    asins?: {
        [key: string]: string | null;
    } | null;
    /**
     * full name of the location
     * required field if don’t specify location_code
     * you can receive the list of available locations with their location_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US, Egypt, Saudi Arabia, and the United Arab Emirates locations only;
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * required field if don’t specify location_name
     * you can receive the list of available locations with their location_code by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US, Egypt, Saudi Arabia, and the United Arab Emirates locations only;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if don’t specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if don’t specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * the maximum number of products in the results array
     * optional field
     * default value: 100;
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * mode for finding asin intersections
     * optional field
     * possible values: union, intersect;
     * default value: intersect;
     * learn more about the parameter in this help center guide
     */
    intersection_mode?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, ilike, not_ilike, like, not_like, match, not_match
     * you can use the % operator with like and not_like, as well as ilike and not_ilike to match any string of zero or more characters
     * example:
     * ["avg_position","<", 10]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting parameter
     * example:
     * ["sum_position,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["intersections,desc","avg_position,asc"]
     * default rule:
     * ["intersections,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * offset in the results array of returned keywords
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsAmazonProductKeywordIntersectionsLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * keyword data for the returned keyword
     */
    keyword_data?: AmazonKeywordData | null;
    /**
     * data on the intersection
     */
    intersection_result?: {
        [key: string]: AmazonInfo | null;
    } | null;
};

export type DataforseoLabsAmazonProductKeywordIntersectionsLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * ASINs in a POST array
     */
    asins?: {
        [key: string]: string | null;
    } | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains detected Amazon product competitors and related data
     */
    items?: Array<DataforseoLabsAmazonProductKeywordIntersectionsLiveItem | null> | null;
};

export type DataforseoLabsAmazonProductKeywordIntersectionsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsAmazonProductKeywordIntersectionsLiveResultInfo | null> | null;
};

export type DataforseoLabsAmazonProductKeywordIntersectionsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsAmazonProductKeywordIntersectionsLiveTaskInfo | null> | null;
};

export type DataforseoLabsBingBulkKeywordDifficultyLiveRequestInfo = {
    /**
     * target keywords
     * required field
     * UTF-8 encoding
     * maximum number of keywords you can specify in this array: 1000
     * the keywords will be converted to lowercase format
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of the location
     * required field if don’t specify location_code
     * you can receive the list of available locations with their location_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * location code
     * required field if don’t specify location_name
     * you can receive the list of available locations with their location_code by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if don’t specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if don’t specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsBingBulkKeywordDifficultyLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains keywords and related keyword difficulty scores
     */
    items?: Array<DataforseoLabsBulkKeywordDifficultyLiveItem | null> | null;
};

export type DataforseoLabsBingBulkKeywordDifficultyLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsBingBulkKeywordDifficultyLiveResultInfo | null> | null;
};

export type DataforseoLabsBingBulkKeywordDifficultyLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsBingBulkKeywordDifficultyLiveTaskInfo | null> | null;
};

export type DataforseoLabsBingBulkTrafficEstimationLiveRequestInfo = {
    /**
     * target domains, subdomains, and webpages
     * required field
     * you can specify domains, subdomains, and webpages in this field;
     * domains and subdomains should be specified without https:// and www.;
     * pages should be specified with absolute URL, including https:// and www.;
     * you can set up to 1000 domains, subdomains or webpages
     */
    targets?: Array<string>;
    /**
     * full name of the location
     * required field if don’t specify location_code
     * you can receive the list of available locations with their location_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * location code
     * required field if don’t specify location_name
     * you can receive the list of available locations with their location_code by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if don’t specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if don’t specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * display results by item type
     * optional field
     * indicates the type of search results included in the response
     * Note: if the item_types array contains item types that are different from organic, the results will be ordered by the first item type in the array
     * possible values:
     * ["organic", "paid", "featured_snippet", "local_pack"]
     * default value:
     * ["organic", "paid"]
     */
    item_types?: Array<string> | null;
    /**
     * ignore highly similar keywords
     * optional field
     * if set to true, only core keywords will be returned, all highly similar keywords will be excluded;
     * default value: false
     */
    ignore_synonyms?: boolean | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsBingBulkTrafficEstimationLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * target domain in a POST array
     */
    target?: string | null;
    /**
     * traffic data relevant to the specified domain
     */
    metrics?: {
        [key: string]: BulkMetricsInfo;
    } | null;
};

export type DataforseoLabsBingBulkTrafficEstimationLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * array of items with relevant traffic estimation data
     */
    items?: Array<DataforseoLabsBingBulkTrafficEstimationLiveItem | null> | null;
};

export type DataforseoLabsBingBulkTrafficEstimationLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsBingBulkTrafficEstimationLiveResultInfo | null> | null;
};

export type DataforseoLabsBingBulkTrafficEstimationLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsBingBulkTrafficEstimationLiveTaskInfo | null> | null;
};

export type DataforseoLabsBingCompetitorsDomainLiveRequestInfo = {
    /**
     * domain
     * required field
     * the domain name of the target website
     * the domain should be specified without https:// and www.
     */
    target?: string;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * display results by item type
     * optional field
     * indicates the type of search results included in the response
     * Note: if the item_types array contains item types that are different from organic, the results will be ordered by the first item type in the array; you will not be able to sort and filter results by the types of search results not included in the response;
     * possible values:
     * ["organic", "paid", "featured_snippet", "local_pack"]
     * default value:
     * ["organic", "paid", "featured_snippet", "local_pack"]
     */
    item_types?: Array<string> | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in
     * example:
     * ["metrics.organic.count",">",50]
     * [["metrics.organic.pos_1","<>",0],"and",["metrics.organic.etv",">=","10"]]
     * [[["metrics.organic.count",">=",50],"and",["metrics.organic.pos_1","in",[1,5]]],
     * "or",
     * ["metrics.organic.etv",">=","100"]]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to specify a sorting type
     * example:
     * ["metrics.paid.etv,asc"]
     * Note: you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["metrics.organic.etv,desc","metrics.paid.count,asc"]
     * default rule:
     * ["metrics.organic.count,desc"]
     * Note: if the item_types array contains item types that are different from organic, the results will be ordered by the first item type in the array
     */
    order_by?: Array<string> | null;
    /**
     * the maximum number of returned domains
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned domains
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * maximum rank up to which competitors will be considered
     * optional field
     * default value: 100
     * if you specify 10 here, we will extract competitors from the top 10 Bing search results only
     */
    max_rank_group?: number | null;
    /**
     * indicates whether to exclude world’s largest websites
     * optional field
     * default value: false
     * set to true if you want to get highly-relevant competitors excluding the websites listed below:
     * wikipedia.org
     * pinterest.com
     * amazon.com
     * google.com
     * facebook.com
     * wordpress.com
     * medium.com
     * quora.com
     * reddit.com
     * youtube.com
     * ebay.com
     * uol.com.br
     * instagram.com
     * olx.com
     * twitter.com
     * linkedin.com
     * slideshare.net
     */
    exclude_top_domains?: boolean | null;
    /**
     * additional domains for improving results accuracy
     * optional field
     * to improve the accuracy of the result, you can specify domains that are known to intersect with the target in SERPs;
     * if you use this array, metrics in the result will be based on SERPs where both target website and intersecting_domains appear;
     * Note: you can specify up to 20 domains in this array
     */
    intersecting_domains?: Array<string> | null;
    /**
     * ignore highly similar keywords
     * optional field
     * if set to true, only core keywords will be returned, all highly similar keywords will be excluded;
     * default value: false
     */
    ignore_synonyms?: boolean | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsBingCompetitorsDomainLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * target domain in a POST array
     */
    target?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains data related to the target and competitor domains
     */
    items?: Array<DataforseoLabsCompetitorsDomainLiveItem | null> | null;
};

export type DataforseoLabsBingCompetitorsDomainLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsBingCompetitorsDomainLiveResultInfo | null> | null;
};

export type DataforseoLabsBingCompetitorsDomainLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsBingCompetitorsDomainLiveTaskInfo | null> | null;
};

export type DataforseoLabsBingDomainIntersectionLiveRequestInfo = {
    /**
     * domain
     * required field
     * the domain name of the first target website
     * the domain should be specified without https:// and www.
     */
    target1?: string;
    /**
     * domain
     * required field
     * the domain name of the second target website
     * the domain should be specified without https:// and www.
     */
    target2?: string;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * domain intersections in SERP
     * optional field
     * if you set intersections to true, you will get the keywords for which both target domains specified as target1 and target2 have results within the same SERP; the corresponding SERP elements for both domains will be provided in the results array
     * Note: this endpoint will not provide results if the number of intersecting keywords exceeds 10 million
     * if you specify intersections: false, you will get the keywords for which the domain specified as target1 has results in SERP, and the domain specified as target2 doesn’t;
     * thus, the corresponding SERP elements and other data will be provided for the domain specified as target1only
     * default value: true
     */
    intersections?: boolean | null;
    /**
     * search results type
     * indicates type of search results included in the response
     * optional field
     * possible values:
     * ["organic", "paid", "featured_snippet", "local_pack"]
     * default value:
     * ["organic", "paid"]
     */
    item_types?: Array<string> | null;
    /**
     * include data from SERP for each keyword
     * optional field
     * if set to true, we will return a serp_info array containing SERP data (number of search results, relevant URL, and SERP features) for every keyword in the response
     * default value: false
     */
    include_serp_info?: boolean | null;
    /**
     * the maximum number of returned keywords
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the items array of returned keywords
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, ilike, not_ilike, like, not_like, match, not_match
     * you can use the % operator with like and not_like, as well as ilike and not_ilike to match any string of zero or more characters
     * example:
     * ["keyword_data.keyword_info.search_volume","in",[100,1000]]
     * [["first_domain_serp_element.etv",">",0],"and",["first_domain_serp_element.description","like","%goat%"]]
     * [["keyword_data.keyword_info.search_volume",">",100],
     * "and",
     * [["first_domain_serp_element.description","like","%goat%"],
     * "or",
     * ["second_domain_serp_element.type","=","organic"]]]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting parameter
     * example:
     * ["keyword_data.keyword_info.competition,desc"]
     * default rule:
     * ["keyword_data.keyword_info.search_volume,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["keyword_data.keyword_info.search_volume,desc","keyword_data.keyword_info.cpc,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsBingDomainIntersectionLiveResultInfo = {
    /**
     * search engine type
     * search engine type specified in a POST request;
     * for this endpoint, the field equals bing
     */
    se_type?: string | null;
    /**
     * target specified in a POST array
     */
    target1?: string | null;
    /**
     * target specified in a POST array
     */
    target2?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains keywords, relevant SERP elements and related data
     */
    items?: Array<DataforseoLabsDomainIntersectionLiveItem | null> | null;
};

export type DataforseoLabsBingDomainIntersectionLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsBingDomainIntersectionLiveResultInfo | null> | null;
};

export type DataforseoLabsBingDomainIntersectionLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsBingDomainIntersectionLiveTaskInfo | null> | null;
};

export type DataforseoLabsBingDomainRankOverviewLiveRequestInfo = {
    /**
     * domain
     * required field
     * the domain name of the target website
     * the domain should be specified without https:// and www.
     */
    target?: string;
    /**
     * full name of the location
     * optional field
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations with their location_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * ignore this field to get the results for all available locations;
     * Note: this endpoint currently supports the US location only;
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * location code
     * optional field
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations with their location_code by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available locations;
     * Note: this endpoint currently supports the US location only;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * optional field
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * optional field
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * the maximum number of returned results for domain
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned items
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten items in the results array will be omitted and the data will be provided for the successive items
     */
    offset?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsBingDomainRankOverviewLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * target domain in a POST array
     */
    target?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains ranking and traffic data
     */
    items?: Array<DataforseoLabsDomainRankOverviewLiveItem | null> | null;
};

export type DataforseoLabsBingDomainRankOverviewLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsBingDomainRankOverviewLiveResultInfo | null> | null;
};

export type DataforseoLabsBingDomainRankOverviewLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsBingDomainRankOverviewLiveTaskInfo | null> | null;
};

export type DataforseoLabsBingPageIntersectionLiveRequestInfo = {
    /**
     * target URLs of pages
     * required field
     * you can set up to 20 pages in this object
     * the pages should be specified with absolute URLs (including http:// or https://)
     * example:
     * "pages": {
     * "1":"https://www.apple.com/mac*",
     * "2":"https://dataforseo.com*",
     * "3":"https://support.microsoft.com/"
     * }if you specify a single page here, we will return results only for this page;
     * you can also use a wildcard (‘*’) character to specify the search pattern
     * example:
     * "example.com"
     * search for the exact URL
     * "example.com/eng*"
     * search for the example.com page and all its related URLs which start with ‘/eng/’, such as “example.com/eng/index.html” and “example.com/eng/help/”, etc.
     * note: a wilcard should be placed after the slash (‘/’) character in the end of the URL, it is not possible to place it after the domain in the following way:
     * https://dataforseo.com*
     * use https://dataforseo.com* instead
     * Note: this endpoint will not provide results if the number of intersecting keywords exceeds 10 million
     */
    pages?: {
        [key: string]: string | null;
    } | null;
    /**
     * URLs of pages you want to exclude
     * optional field
     * you can set up to 10 pages in this array
     * if you use this array, results will contain the keywords for which URLs from the pages object rank, but URLs from exclude_pages array do not;
     * note that if you specify this field, the results will be based on the keywords any URL from pages ranks for regardless of intersections between them. However, you can set intersection_mode to intersect and results will contain the keywords all URLs from pages rank for in the same SERP and URLs from exclude_pages do not.
     * use a wildcard (‘*’) character to specify the search pattern
     * example:
     * "exclude_pages": [
     * "https://www.apple.com/iphone*",
     * "https://dataforseo.com/apis*",
     * "https://www.microsoft.com/en-us/industry/services/"
     * ]
     */
    exclude_pages?: Array<string> | null;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * search results type
     * indicates type of search results included in the response
     * optional field
     * possible values:
     * ["organic", "paid", "featured_snippet", "local_pack"]
     * default value:
     * ["organic", "paid", "featured_snippet", "local_pack"]
     */
    item_types?: Array<string> | null;
    /**
     * ignore highly similar keywords
     * optional field
     * if set to true only core keywords will be returned, all highly similar keywords will be excluded;
     * default value: false
     */
    ignore_synonyms?: boolean | null;
    /**
     * the maximum number of returned keywords
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the items array of returned keywords
     * optional field
     * default value: 0
     * if you specify 10 here, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * indicates if the subdomains will be included in the search
     * optional field
     * if set to false, the subdomains will be ignored
     * default value: true
     */
    include_subdomains?: boolean | null;
    /**
     * indicates whether to intersect keywords
     * optional field
     * use this field to intersect or merge results for the specified URLs
     * possible values: union, intersect
     * union – results are based on all keywords any URL from pages rank for;
     * intersect – results are based on the keywords all URLs from pages rank for in the same SERP:
     * by default, results are based on the intersect mode if you specify only pages array. If you specify exclude_pages as well, results are based on the union mode
     */
    intersection_mode?: string | null;
    /**
     * include data from SERP for each keyword
     * optional field
     * if set to true, we will return a serp_info array containing SERP data (number of search results, relevant URL, and SERP features) for every keyword in the response
     * default value: false
     */
    include_serp_info?: boolean | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, ilike, not_ilike, like, not_like, match, not_match
     * you can use the % operator with like and not_like, as well as ilike and not_ilike to match any string of zero or more characters
     * note that if you want to filter by any field in the intersection_result array you need to specify the number of corresponding page
     * for instance, if you want to filter results by the ranking of the first specified URL, you should set the following filter:
     * [intersection_result.1.rank_absolute,"=",1]
     * if you want to filter results and receive only organic listings for the third specified URL, you should set the following filter:
     * [intersection_result.3.type,"=","organic"] , etc.example:
     * ["keyword_data.keyword_info.search_volume","in",[100,1000]]
     * [["intersection_result.1.etv",">",0],"and",["intersection_result.1.description","like","%goat%"]][["keyword_data.keyword_info.search_volume",">",100],
     * "and",
     * [["intersection_result.2.description","like","%goat%"],
     * "or",
     * ["intersection_result.2.type","=","organic"]]]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting parameter
     * example:
     * ["keyword_data.keyword_info.competition,desc"]
     * default rule:
     * ["keyword_data.keyword_info.search_volume,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["intersection_result.1.rank_group,asc","intersection_result.2.rank_absolute,asc"]
     */
    order_by?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsBingPageIntersectionLiveResultInfo = {
    /**
     * search engine type
     * search engine type specified in a POST request;
     * for this endpoint, the field equals bing
     */
    se_type?: string | null;
    /**
     * URLs you specified a POST array
     */
    pages?: {
        [key: string]: string | null;
    } | null;
    /**
     * URLs you specified in a POST array that will be excluded from the results
     */
    exclude_pages?: Array<string | null> | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains keywords, relevant SERP elements and related data
     */
    items?: Array<DataforseoLabsPageIntersectionLiveItem | null> | null;
};

export type DataforseoLabsBingPageIntersectionLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsBingPageIntersectionLiveResultInfo | null> | null;
};

export type DataforseoLabsBingPageIntersectionLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsBingPageIntersectionLiveTaskInfo | null> | null;
};

export type DataforseoLabsBingRankedKeywordsLiveRequestInfo = {
    /**
     * domain name or page url
     * required field
     * the domain name of the target website or URL of the target webpage;
     * the domain name must be specified without https:// or www.;
     * the webpage URL must be specified with https:// or www.
     */
    target?: string;
    /**
     * full name of the location
     * optional field
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations with their location_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * ignore this field to get the results for all available locations;
     * Note: this endpoint currently supports the US location only;
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * location code
     * optional field
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations with their location_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available locations;
     * Note: this endpoint currently supports the US location only;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * optional field
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * optional field
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * display results by item type
     * optional field
     * indicates the type of search results included in the response
     * Note: if the item_types array contains item types that are different from organic, the results will be ordered by the first item type in the array; you will not be able to sort and filter results by the types of search results not included in the response;
     * possible values:
     * ["organic", "paid", "featured_snippet", "local_pack"]
     * default value:
     * ["organic", "paid", "featured_snippet", "local_pack"]
     */
    item_types?: Array<string> | null;
    /**
     * ignore highly similar keywords
     * optional field
     * if set to true only core keywords will be returned, all highly similar keywords will be excluded;
     * default value: false
     */
    ignore_synonyms?: boolean | null;
    /**
     * the maximum number of returned keywords
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned keywords
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * return rankings distribution by rank_absolute
     * optional field
     * default value: false
     * if set to true, we will return the field metrics_absolute containing rankings distribution by the rank_absolute parameter that indicates the result’s position among all SERP elements
     */
    load_rank_absolute?: boolean | null;
    /**
     * data collection mode
     * optional field
     * you can use this field to filter the results;
     * possible types of filtering:
     * live — return keywords for which the specified target currently has ranking results in SERP;
     * lost — return keywords for which the specified target had previously had ranking results in SERP, but didn’t have them during the last check;
     * all — return both types of keywords.
     * default value: live
     */
    historical_serp_mode?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, ilike, not_ilike, like, not_like, match, not_match
     * you can use the % operator with like and not_like, as well as ilike and not_ilike to match any string of zero or more characters
     * example:
     * ["ranked_serp_element.serp_item.rank_group","<=",10]
     * [["ranked_serp_element.serp_item.rank_group","<=",10],
     * "and",
     * ["ranked_serp_element.serp_item.type","<>","paid"]]
     * [["keyword_data.keyword_info.search_volume","<>",0],
     * "and",
     * [["ranked_serp_element.serp_item.type","<>","paid"],"or",["ranked_serp_element.serp_item.is_malicious","=",false]]]
     * if you want to get the keywords a particular webpage ranks for, specify the filter by the ranked_serp_element.serp_item.relative_url parameter
     * example:
     * ["ranked_serp_element.serp_item.relative_url", "=", "/apis/rank-tracker-api"]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting type
     * example:
     * ["keyword_data.keyword_info.competition,desc"]
     * default rule:
     * ["ranked_serp_element.serp_item.rank_group,asc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["keyword_data.keyword_info.search_volume,desc","keyword_data.keyword_info.cpc,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsBingRankedKeywordsLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * target domain in a POST array
     */
    target?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * total number of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * ranking data relevant to the specified domain
     * ranking data is provided by the rank_group parameters that show the result’s rank considering only equivalent SERP elements
     */
    metrics?: {
        [key: string]: DataforseoLabsMetricsInfo;
    } | null;
    /**
     * ranking data relevant to the specified domain
     * ranking data is provided by the rank_absolute parameters that indicate the result’s position among all SERP elements
     */
    metrics_absolute?: {
        [key: string]: DataforseoLabsMetricsInfo;
    } | null;
    /**
     * contains ranked keywords and related data
     */
    items?: Array<DataforseoLabsRankedKeywordsLiveItem | null> | null;
};

export type DataforseoLabsBingRankedKeywordsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsBingRankedKeywordsLiveResultInfo | null> | null;
};

export type DataforseoLabsBingRankedKeywordsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsBingRankedKeywordsLiveTaskInfo | null> | null;
};

export type DataforseoLabsBingRelatedKeywordsLiveRequestInfo = {
    /**
     * keyword
     * required field
     * UTF-8 encoding
     * the keywords will be converted to lowercase format
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available locations with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available locations with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * keyword search depth
     * optional field
     * default value: 1
     * number of the returned results depends on the value you set in this field
     * you can specify a level from 0 to 4
     * estimated number of keywords for each level (maximum):
     * 0 – the keyword set in the keyword field
     * 1 – 8 keywords
     * 2 – 72 keywords
     * 3 – 584 keywords
     * 4 – 4680 keywords
     */
    depth?: number | null;
    /**
     * include data for the seed keyword
     * optional field
     * if set to true, data for the seed keyword specified in the keyword field will be provided in the seed_keyword_data array of the response
     * default value: false
     */
    include_seed_keyword?: boolean | null;
    /**
     * include data from SERP for each keyword
     * optional field
     * if set to true, we will return a serp_info array containing SERP data (number of search results, relevant URL, and SERP features) for every keyword in the response
     * default value: false
     */
    include_serp_info?: boolean | null;
    /**
     * return data for core keyword
     * optional field
     * if true, serp_info and related_keywords will be returned for the main keyword in the group that the specified keyword belongs to;
     * if false, serp_info and related_keywords will be returned for the specified keyword (if available);
     * refer to this help center article for more details;
     * default value: false
     */
    replace_with_core_keyword?: boolean | null;
    /**
     * ignore highly similar keywords
     * optional field
     * if set to true only core keywords will be returned, all highly similar keywords will be excluded;
     * default value: false
     */
    ignore_synonyms?: boolean | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, ilike, not_ilike, like,not_like, match, not_match
     * you can use the % operator with like and not_like, as well as ilike and not_ilike to match any string of zero or more characters
     * example:
     * ["keyword_data.keyword_info.search_volume",">",0]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting type
     * example:
     * ["keyword_data.keyword_info.competition,desc"]
     * default rule:
     * ["keyword_data.keyword_info.search_volume,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["keyword_data.keyword_info.search_volume,desc","keyword_data.keyword_info.cpc,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * the maximum number of returned keywords
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned keywords
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsBingRelatedKeywordsLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * keyword in a POST array
     */
    seed_keyword?: string | null;
    /**
     * keyword data for the seed keyword
     * fields in the array are identical to that of keyword_data
     */
    seed_keyword_data?: KeywordDataInfo | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains keywords and related data
     */
    items?: Array<DataforseoLabsRelatedKeywordsLiveItem | null> | null;
};

export type DataforseoLabsBingRelatedKeywordsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsBingRelatedKeywordsLiveResultInfo | null> | null;
};

export type DataforseoLabsBingRelatedKeywordsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsBingRelatedKeywordsLiveTaskInfo | null> | null;
};

export type DataforseoLabsBingRelevantPagesLiveRequestInfo = {
    /**
     * domain
     * required field
     * the domain name of the target website
     * the domain should be specified without https:// and www.
     */
    target?: string;
    /**
     * full name of the location
     * optional field
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations with their location_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * ignore this field to get the results for all available locations;
     * Note: this endpoint currently supports the US location only;
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * location code
     * optional field
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations with their location_code by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * ignore this field to get the results for all available locations;
     * Note: this endpoint currently supports the US location only;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * optional field
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * optional field
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * display results by item type
     * optional field
     * indicates the type of search results included in the response
     * Note: if the item_types array contains item types that are different from organic, the results will be ordered by the first item type in the array; you will not be able to sort and filter results by the types of search results not included in the response;
     * possible values:
     * ["organic", "paid", "featured_snippet", "local_pack"]
     * default value:
     * ["organic", "paid", "featured_snippet", "local_pack"]
     */
    item_types?: Array<string> | null;
    /**
     * the maximum number of returned pages
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned pages
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten pages in the results array will be omitted and the data will be provided for the successive pages
     */
    offset?: number | null;
    /**
     * data collection mode
     * optional field
     * you can use this field to filter the results;
     * possible types of filtering:
     * live — return metrics for SERPs in which the specified target currently has ranking results;
     * lost — return metrics for SERPs in which the specified target had previously had ranking results, but didn’t have them during the last check;
     * all — return metrics for both types of SERPs.
     * default value: live
     */
    historical_serp_mode?: string | null;
    /**
     * ignore highly similar keywords
     * optional field
     * if set to true, only core keywords will be returned, all highly similar keywords will be excluded;
     * default value: false
     */
    ignore_synonyms?: boolean | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, match, not_match
     * example:
     * ["metrics.paid.count",">",0]
     * [["metrics.organic.count",">",50],"and",["metrics.organic.pos_1","<>",0]]
     * [[""metrics.organic.count",">",50"],
     * "and",
     * [["metrics.organic.pos_1","<>",0],"or",["metrics.organic.pos_2_3","<>",0]]]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to specify a sorting type
     * example:
     * ["metrics.paid.etv,asc"]
     * Note: you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["metrics.organic.etv,desc","metrics.paid.count,asc"]
     * default rule:
     * ["metrics.organic.count,desc"]
     * Note: if the item_types array contains item types that are different from organic, the results will be ordered by the first item type in the array
     */
    order_by?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsBingRelevantPagesLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * target domain in a POST array
     */
    target?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * relevant pages and related data
     */
    items?: Array<DataforseoLabsRelevantPagesLiveItem | null> | null;
};

export type DataforseoLabsBingRelevantPagesLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsBingRelevantPagesLiveResultInfo | null> | null;
};

export type DataforseoLabsBingRelevantPagesLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsBingRelevantPagesLiveTaskInfo | null> | null;
};

export type DataforseoLabsBingSerpCompetitorsLiveRequestInfo = {
    /**
     * keywords array
     * required field
     * the results will be based on the keywords you specify in this array
     * UTF-8 encoding;
     * the keywords will be converted to lowercase format;
     * you can specify the maximum of 200 keywords
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with location_name parameters by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * unique location identifier
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code parameters by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_name parameters by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * unique language identifier
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_code parameters by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * indicates if the subdomains will be included in the search
     * optional field
     * if set to false, the subdomains will be ignored
     * default value: true
     */
    include_subdomains?: boolean | null;
    /**
     * search results type
     * indicates type of search results included in the response
     * optional field
     * possible values:
     * ["organic", "paid", "featured_snippet", "local_pack"]
     * default value:
     * ["organic", "paid", "featured_snippet", "local_pack"]
     */
    item_types?: Array<string> | null;
    /**
     * the maximum number of returned domains
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned domains
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten domains in the results array will be omitted and the data will be provided for the successive domains
     */
    offset?: number | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, ilike, not_ilike, like, not_like, match, not_match
     * you can use the % operator with like and not_like, as well as ilike and not_ilike to match any string of zero or more characters
     * example:
     * ["median_position","in",[1,10]]
     * [["median_position","in",[1,10]],"and",["domain","not_like","%wikipedia.org%"]]
     * [["domain","not_like","%wikipedia.org%"],
     * "and",
     * [["relevant_serp_items",">",0],"or",["median_position","in",[1,10]]]]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * the comma is used as a separator
     * example:
     * ["avg_position,asc"]
     * default rule:
     * ["rating,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["avg_position,asc","etv,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsBingSerpCompetitorsLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * keywords specified in the request
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    seed_keywords?: Array<string | null> | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * the total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains detected SERP competitors and related data
     */
    items?: Array<DataforseoLabsSerpCompetitorsLiveItem | null> | null;
};

export type DataforseoLabsBingSerpCompetitorsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsBingSerpCompetitorsLiveResultInfo | null> | null;
};

export type DataforseoLabsBingSerpCompetitorsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsBingSerpCompetitorsLiveTaskInfo | null> | null;
};

export type DataforseoLabsBingSubdomainsLiveRequestInfo = {
    /**
     * domain
     * required field
     * the domain name of the target website
     * the domain should be specified without https:// and www.
     */
    target?: string;
    /**
     * full name of the location
     * optional field
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations with their location_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available locations;
     * Note: this endpoint currently supports the US location only;
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * location code
     * optional field
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations with their location_code by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * ignore this field to get the results for all available locations;
     * Note: this endpoint currently supports the US location only;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * optional field
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * optional field
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages
     * ignore this field to get the results for all available languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * display results by item type
     * optional field
     * indicates the type of search results included in the response
     * Note: if the item_types array contains item types that are different from organic, the results will be ordered by the first item type in the array; you will not be able to sort and filter results by the types of search results not included in the response;
     * possible values:
     * ["organic", "paid", "featured_snippet", "local_pack"]
     * default value:
     * ["organic", "paid", "featured_snippet", "local_pack"]
     */
    item_types?: Array<string> | null;
    /**
     * data collection mode
     * optional field
     * you can use this field to filter the results;
     * possible types of filtering:
     * live — return metrics for SERPs in which the specified target currently has ranking results;
     * lost — return metrics for SERPs in which the specified target had previously had ranking results, but didn’t have them during the last check;
     * all — return metrics for both types of SERPs.
     * default value: live
     */
    historical_serp_mode?: string | null;
    /**
     * ignore highly similar keywords
     * optional field
     * if set to true, only core keywords will be returned, all highly similar keywords will be excluded;
     * default value: false
     */
    ignore_synonyms?: boolean | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, <, <=, >, >=, =, <>, in, not_in
     * example:
     * ["metrics.paid.count",">",0]
     * [["metrics.paid.count",">",0],"and",["metrics.paid.etv",">","50"]]
     * [["metrics.organic.count",">","10"],
     * "and",
     * [["metrics.organic.pos_1","<>",0],"or",["metrics.organic.pos_2_3","<>",0]]]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to specify a sorting type
     * example:
     * ["metrics.paid.etv,asc"]
     * Note: you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["metrics.organic.etv,desc","metrics.paid.count,asc"]
     * default rule:
     * ["metrics.organic.count,desc"]
     * Note: if the item_types array contains item types that are different from organic, the results will be ordered by the first item type in the array
     */
    order_by?: Array<string> | null;
    /**
     * the maximum number of returned keywords
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned keywords
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsBingSubdomainsLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * domain in a POST array
     */
    target?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains subdomains and related data
     */
    items?: Array<DataforseoLabsSubdomainsLiveItem | null> | null;
};

export type DataforseoLabsBingSubdomainsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsBingSubdomainsLiveResultInfo | null> | null;
};

export type DataforseoLabsBingSubdomainsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsBingSubdomainsLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleBulkAppMetricsLiveRequestInfo = {
    /**
     * ids of the app
     * required field
     * IDs of the mobile applications on Google Play;
     * you can find the ID in the URL of every app listed on Google Play;
     * example:
     * in the URL https://play.google.com/store/apps/details?id=org.telegram.messenger
     * the id is org.telegram.messenger;
     * the maximum number of IDs you can specify in this field is 1000
     */
    app_ids?: Array<string>;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the English language only;
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the English language only
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsleBulkAppMetricsLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * id of the app in a POST array
     */
    app_id?: string | null;
    /**
     * metrics for the ranking keywords of the app
     * ranking data relevant to the keywords that the provided application ranks for on Google Play
     */
    metrics?: {
        [key: string]: AppMetricsInfo;
    } | null;
};

export type DataforseoLabsGoogleBulkAppMetricsLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains data related to the ranking app metrics of the specified application
     */
    items?: Array<DataforseoLabsleBulkAppMetricsLiveItem | null> | null;
};

export type DataforseoLabsGoogleBulkAppMetricsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleBulkAppMetricsLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleBulkAppMetricsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleBulkAppMetricsLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleKeywordsForAppLiveRequestInfo = {
    /**
     * id of the apps
     * required field
     * ID of the mobile application on Google Play;
     * you can find the ID in the URL of every app listed on Google Play;
     * example:
     * in the URL https://play.google.com/store/apps/details?id=org.telegram.messenger
     * the id is org.telegram.messenger
     */
    app_id?: string;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the English language only;
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the English language only
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * <, <=, >, >=, =, <>, in, not_in
     * example:
     * ["keyword_data.keyword_info.search_volume",">",500]
     * [["keyword_data.keyword_info.search_volume","<>",500],"and",["ranked_serp_element.serp_item.rank_group",">=","10"]]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results;
     * possible sorting types:
     * asc – results will be sorted in the ascending order;
     * desc – results will be sorted in the descending order;
     * you should use a comma to specify a sorting type;
     * example:
     * ["ranked_serp_element.serp_item.rank_group,asc"]
     * Note: you can set no more than three sorting rules in a single request;
     * you should use a comma to separate several sorting rules;
     * example:
     * ["ranked_serp_element.serp_item.rank_group,desc","keyword_data.keyword_info.search_volume,asc"]
     * default rule:
     * ["keyword_data.keyword_info.search_volume,desc"]
     * Note: if the item_types array contains item types that are different from organic, the results will be ordered by the first item type in the array
     */
    order_by?: Array<string> | null;
    /**
     * the maximum number of returned keywords
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned keywords
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type GooglePlaySearchOrganic = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * the alignment of the element in SERP
     * can take the following values:
     * left, right
     */
    position?: string | null;
    /**
     * id of the app
     */
    app_id?: string | null;
    /**
     * title of the app
     */
    title?: string | null;
    /**
     * URL to the app page on Google Play
     */
    url?: string | null;
    /**
     * URL to the app icon
     */
    icon?: string | null;
    /**
     * the total number of reviews of the app
     */
    reviews_count?: number | null;
    /**
     * average rating of the app
     */
    rating?: RatingElement | null;
    /**
     * indicates whether the app is free
     */
    is_free?: boolean | null;
    /**
     * price of the app
     */
    price?: PriceInfo | null;
    /**
     * name of the app developer
     */
    developer?: string | null;
    /**
     * URL to the developer page on Google Play
     */
    developer_url?: string | null;
};

export type GooglePlayRankedSerpElementInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * contains data on the SERP element
     * the list of supported SERP elements can be found below
     */
    serp_item?: GooglePlaySearchOrganic | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * number of search results for the returned keyword
     */
    se_results_count?: number | null;
    /**
     * date and time when SERP data was updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    last_updated_time?: string | null;
    /**
     * previous to the most recent date and time when SERP data was updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-10-15 12:57:46 +00:00;
     * in this case, will equal null
     */
    previous_updated_time?: string | null;
};

export type DataforseoLabsGoogleKeywordsForAppLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * keyword data for the returned keyword
     */
    keyword_data?: KeywordDataInfo | null;
    /**
     * contains data on the domain’s SERP element found for the returned keyword
     */
    ranked_serp_element?: GooglePlayRankedSerpElementInfo | null;
};

export type DataforseoLabsGoogleKeywordsForAppLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * id of the app in a POST array
     */
    app_id?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains data related to the ranking keywords for the app specified in the app_id field
     */
    items?: Array<DataforseoLabsGoogleKeywordsForAppLiveItem | null> | null;
};

export type DataforseoLabsGoogleKeywordsForAppLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleKeywordsForAppLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleKeywordsForAppLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleKeywordsForAppLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleAppCompetitorsLiveRequestInfo = {
    /**
     * id of the app
     * required field
     * ID of the mobile application on Google Play;
     * you can find the ID in the URL of every app listed on Google Play;
     * example:
     * in the URL https://play.google.com/store/apps/details?id=org.telegram.messenger
     * the id is org.telegram.messenger
     */
    app_id?: string;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the English language only;
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the English language only
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * <, <=, >, >=, =, <>, in, not_in
     * example:
     * ["intersections",">",500]
     * [["competitor_metrics.google_play_search_organic.pos_1","<>",10],"and",["avg_position",">=","10"]]
     * [[["intersections",">=",50],"and",["competitor_metrics.google_play_search_organic.pos_1","in",[1,5]]],
     * "or",
     * ["sum_position",">=","10000"]]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results;
     * possible sorting types:
     * asc – results will be sorted in the ascending order;
     * desc – results will be sorted in the descending order;
     * you should use a comma to specify a sorting type;
     * example:
     * ["intersections,asc"]
     * Note: you can set no more than three sorting rules in a single request;
     * you should use a comma to separate several sorting rules;
     * example:
     * ["intersections,desc","sum_position,asc"]
     * default rule:
     * ["intersections,desc"]
     * Note: if the item_types array contains item types that are different from organic, the results will be ordered by the first item type in the array
     */
    order_by?: Array<string> | null;
    /**
     * the maximum number of returned apps
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned apps
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten apps in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsleAppCompetitorsLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * id of the competitor app
     */
    app_id?: string | null;
    /**
     * average position of the app in Google Play SERP
     * Note: average position is calculated for intersected keywords only;
     * the value for a given application may differ when combined with different target applications
     */
    avg_position?: number | null;
    /**
     * sum of all app positions in Google Play SERP
     * Note: sum position is calculated for intersected keywords only;
     * the value for a given application may differ when combined with different target applications
     */
    sum_position?: number | null;
    /**
     * number of intersecting keywords
     */
    intersections?: number | null;
    /**
     * metrics for intersecting keywords
     * ranking data relevant to the keywords that the provided competitor application shares with the app in a POST request;
     * note: in this array ranking data is provided for the returned competitor’s app_id
     */
    competitor_metrics?: {
        [key: string]: AppMetricsInfo;
    } | null;
    /**
     * metrics for all keywords of the application
     * full overview of ranking data relevant to all keywords that the provided app_id is ranking for
     */
    full_metrics?: {
        [key: string]: AppMetricsInfo;
    } | null;
};

export type DataforseoLabsGoogleAppCompetitorsLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * id of the app in a POST array
     */
    app_id?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains data related to the app_id and competitor applications
     */
    items?: Array<DataforseoLabsleAppCompetitorsLiveItem | null> | null;
};

export type DataforseoLabsGoogleAppCompetitorsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleAppCompetitorsLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleAppCompetitorsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleAppCompetitorsLiveTaskInfo | null> | null;
};

export type DataforseoLabsGoogleAppIntersectionLiveRequestInfo = {
    /**
     * ids of the target apps
     * required field
     * IDs of the target mobile applications on Google Play;
     * you can find the ID in the URL of every app listed on Google Play;
     * example:
     * in the URL https://play.google.com/store/apps/details?id=org.telegram.messenger
     * the id is org.telegram.messenger;;
     * the ids should be specified the following way:
     * "app_ids": {
     * "1": "org.telegram.messenger",
     * "2": "com.zhiliaoapp.musically"
     * }
     * if you specify a single ID here, the API will return results only for one application;
     * the maximum number of app IDs you can specify in this object is 20
     */
    app_ids?: {
        [key: string]: string | null;
    } | null;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the English language only;
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the English language only
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * <, <=, >, >=, =, <>, in, not_in
     * example:
     * ["keyword_data.keyword_info.search_volume",">",500]
     * [["keyword_data.keyword_info.search_volume","<>",500],"and",[intersection_result.382617920.rank_group",">=","10"]]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results;
     * possible sorting types:
     * asc – results will be sorted in the ascending order;
     * desc – results will be sorted in the descending order;
     * you should use a comma to specify a sorting type;
     * example:
     * ["intersection_result.382617920.rank_absolute,asc"]
     * Note: you can set no more than three sorting rules in a single request;
     * you should use a comma to separate several sorting rules;
     * example:
     * ["intersection_result.382617920.rank_absolute,desc","keyword_data.keyword_info.search_volume,asc"]
     * default rule:
     * ["keyword_data.keyword_info.search_volume,desc"]
     * Note: if the item_types array contains item types that are different from organic, the results will be ordered by the first item type in the array
     */
    order_by?: Array<string> | null;
    /**
     * the maximum number of returned keywords
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned keywords
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsGoogleAppIntersectionLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * keyword data for the returned keyword
     */
    keyword_data?: KeywordDataInfo | null;
    /**
     * contains SERP data for the returned keyword
     * data will be provided in separate arrays for each app ID you specified in the app_ids object when setting a task;
     * depending on the number of specified app IDs, it can contain from 1 to 20 arrays named respectively
     */
    intersection_result?: {
        [key: string]: GooglePlaySearchOrganic | null;
    } | null;
};

export type DataforseoLabsGoogleAppIntersectionLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * ids of the apps in a POST array
     */
    app_ids?: {
        [key: string]: string | null;
    } | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains data related to the ranking keywords for the app specified in the app_id field
     */
    items?: Array<DataforseoLabsGoogleAppIntersectionLiveItem | null> | null;
};

export type DataforseoLabsGoogleAppIntersectionLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsGoogleAppIntersectionLiveResultInfo | null> | null;
};

export type DataforseoLabsGoogleAppIntersectionLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsGoogleAppIntersectionLiveTaskInfo | null> | null;
};

export type DataforseoLabsAppleBulkAppMetricsLiveRequestInfo = {
    /**
     * ids of the apps
     * required field
     * IDs of mobile applications on App Store;
     * you can find the ID in the URL of every app listed on App Store;
     * example:
     * in the URL https://apps.apple.com/us/app/id835599320
     * the id is 835599320;
     * the maximum number of IDs you can specify in this field is 1000
     */
    app_ids?: Array<string>;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the English language only;
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the English language only
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsAppleBulkAppMetricsLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains data related to the ranking app metrics of the specified application
     */
    items?: Array<DataforseoLabsleBulkAppMetricsLiveItem | null> | null;
};

export type DataforseoLabsAppleBulkAppMetricsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsAppleBulkAppMetricsLiveResultInfo | null> | null;
};

export type DataforseoLabsAppleBulkAppMetricsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsAppleBulkAppMetricsLiveTaskInfo | null> | null;
};

export type DataforseoLabsAppleKeywordsForAppLiveRequestInfo = {
    /**
     * id of the app
     * required field
     * ID of the mobile application on App Store;
     * you can find the ID in the URL of every app listed on App Store;
     * example:
     * in the URL https://apps.apple.com/us/app/id835599320
     * the id is 835599320
     */
    app_id?: string;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the English language only;
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the English language only
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * <, <=, >, >=, =, <>, in, not_in
     * example:
     * ["keyword_data.keyword_info.search_volume",">",500]
     * [["keyword_data.keyword_info.search_volume","<>",500],"and",["ranked_serp_element.serp_item.rank_group",">=","10"]]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results;
     * possible sorting types:
     * asc – results will be sorted in the ascending order;
     * desc – results will be sorted in the descending order;
     * you should use a comma to specify a sorting type;
     * example:
     * ["ranked_serp_element.serp_item.rank_group,asc"]
     * Note: you can set no more than three sorting rules in a single request;
     * you should use a comma to separate several sorting rules;
     * example:
     * ["ranked_serp_element.serp_item.rank_group,desc","keyword_data.keyword_info.search_volume,asc"]
     * default rule:
     * ["keyword_data.keyword_info.search_volume,desc"]
     * Note: if the item_types array contains item types that are different from organic, the results will be ordered by the first item type in the array
     */
    order_by?: Array<string> | null;
    /**
     * the maximum number of returned keywords
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned keywords
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type AppStoreSearchOrganic = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank in SERP
     * absolute position among all the elements in SERP
     */
    rank_absolute?: number | null;
    /**
     * the alignment of the element in SERP
     * can take the following values:
     * left, right
     */
    position?: string | null;
    /**
     * id of the app
     */
    app_id?: string | null;
    /**
     * title of the app
     */
    title?: string | null;
    /**
     * URL to the app page on App Store
     */
    url?: string | null;
    /**
     * URL to the app icon
     */
    icon?: string | null;
    /**
     * the total number of reviews of the app
     */
    reviews_count?: number | null;
    /**
     * average rating of the app
     */
    rating?: RatingElement | null;
    /**
     * indicates whether the app is free
     */
    is_free?: boolean | null;
    /**
     * price of the app
     */
    price?: PriceInfo | null;
};

export type AppleRankedSerpElementInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * contains data on the SERP element
     * the list of supported SERP elements can be found below
     */
    serp_item?: AppStoreSearchOrganic | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * number of search results for the returned keyword
     */
    se_results_count?: number | null;
    /**
     * date and time when SERP data was updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    last_updated_time?: string | null;
    /**
     * previous to the most recent date and time when SERP data was updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-10-15 12:57:46 +00:00;
     * in this case, will equal null
     */
    previous_updated_time?: string | null;
};

export type DataforseoLabsAppleKeywordsForAppLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * keyword data for the returned keyword
     */
    keyword_data?: KeywordDataInfo | null;
    /**
     * contains data on the domain’s SERP element found for the returned keyword
     */
    ranked_serp_element?: AppleRankedSerpElementInfo | null;
};

export type DataforseoLabsAppleKeywordsForAppLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * id of the app in a POST array
     */
    app_id?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains data related to the ranking keywords for the app specified in the app_id field
     */
    items?: Array<DataforseoLabsAppleKeywordsForAppLiveItem | null> | null;
};

export type DataforseoLabsAppleKeywordsForAppLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsAppleKeywordsForAppLiveResultInfo | null> | null;
};

export type DataforseoLabsAppleKeywordsForAppLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsAppleKeywordsForAppLiveTaskInfo | null> | null;
};

export type DataforseoLabsAppleAppCompetitorsLiveRequestInfo = {
    /**
     * id of the app
     * required field
     * ID of the mobile application on App Store;
     * you can find the ID in the URL of every app listed on App Store;
     * example:
     * in the URL https://apps.apple.com/us/app/id835599320
     * the id is 835599320
     */
    app_id?: string;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the English language only;
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the English language only
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * <, <=, >, >=, =, <>, in, not_in
     * example:
     * ["intersections",">",500]
     * [["competitor_metrics.app_store_search_organic.pos_1","<>",10],"and",["avg_position",">=","10"]]
     * [[["intersections",">=",50],"and",["competitor_metrics.app_store_search_organic.pos_1","in",[1,5]]],
     * "or",
     * ["sum_position",">=","10000"]]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results;
     * possible sorting types:
     * asc – results will be sorted in the ascending order;
     * desc – results will be sorted in the descending order;
     * you should use a comma to specify a sorting type;
     * example:
     * ["intersections,asc"]
     * Note: you can set no more than three sorting rules in a single request;
     * you should use a comma to separate several sorting rules;
     * example:
     * ["intersections,desc","sum_position,asc"]
     * default rule:
     * ["intersections,desc"]
     * Note: if the item_types array contains item types that are different from organic, the results will be ordered by the first item type in the array
     */
    order_by?: Array<string> | null;
    /**
     * the maximum number of returned apps
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned apps
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten apps in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsAppleAppCompetitorsLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * id of the app in a POST array
     */
    app_id?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains data related to the app_id and competitor applications
     */
    items?: Array<DataforseoLabsleAppCompetitorsLiveItem | null> | null;
};

export type DataforseoLabsAppleAppCompetitorsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsAppleAppCompetitorsLiveResultInfo | null> | null;
};

export type DataforseoLabsAppleAppCompetitorsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsAppleAppCompetitorsLiveTaskInfo | null> | null;
};

export type DataforseoLabsAppleAppIntersectionLiveRequestInfo = {
    /**
     * ids of the target apps
     * required field
     * IDs of the target mobile applications on App Store;
     * you can find the ID in the URL of every app listed on App Store;
     * example:
     * in the URL https://apps.apple.com/us/app/id835599320
     * the id is 835599320;
     * the ids should be specified the following way:
     * "app_ids": {
     * "1": "686449807",
     * "2": "382617920"
     * }
     * if you specify a single ID here, the API will return results only for one application;
     * the maximum number of app IDs you can specify in this object is 20
     */
    app_ids?: {
        [key: string]: string | null;
    } | null;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * United States
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the US location only;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the English language only;
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * Note: it is required to specify either language_name or language_code
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/dataforseo_labs/locations_and_languages;
     * Note: this endpoint currently supports the English language only
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * <, <=, >, >=, =, <>, in, not_in
     * example:
     * ["keyword_data.keyword_info.search_volume",">",500]
     * [["keyword_data.keyword_info.search_volume","<>",500],"and",[intersection_result.382617920.rank_group",">=","10"]]
     * for more information about filters, please refer to Dataforseo Labs – Filters or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results;
     * possible sorting types:
     * asc – results will be sorted in the ascending order;
     * desc – results will be sorted in the descending order;
     * you should use a comma to specify a sorting type;
     * example:
     * ["intersection_result.382617920.rank_absolute,asc"]
     * Note: you can set no more than three sorting rules in a single request;
     * you should use a comma to separate several sorting rules;
     * example:
     * ["intersection_result.382617920.rank_absolute,desc","keyword_data.keyword_info.search_volume,asc"]
     * default rule:
     * ["keyword_data.keyword_info.search_volume,desc"]
     * Note: if the item_types array contains item types that are different from organic, the results will be ordered by the first item type in the array
     */
    order_by?: Array<string> | null;
    /**
     * the maximum number of returned keywords
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned keywords
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten keywords in the results array will be omitted and the data will be provided for the successive keywords
     */
    offset?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoLabsAppleAppIntersectionLiveItem = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * keyword data for the returned keyword
     */
    keyword_data?: KeywordDataInfo | null;
    /**
     * contains SERP data for the returned keyword
     * data will be provided in separate arrays for each app ID you specified in the app_ids object when setting a task;
     * depending on the number of specified app IDs, it can contain from 1 to 20 arrays named respectively
     */
    intersection_result?: {
        [key: string]: AppStoreSearchOrganic | null;
    } | null;
};

export type DataforseoLabsAppleAppIntersectionLiveResultInfo = {
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * ids of the apps in a POST array
     */
    app_ids?: {
        [key: string]: string | null;
    } | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains data related to the ranking keywords for the app specified in the app_id field
     */
    items?: Array<DataforseoLabsAppleAppIntersectionLiveItem | null> | null;
};

export type DataforseoLabsAppleAppIntersectionLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DataforseoLabsAppleAppIntersectionLiveResultInfo | null> | null;
};

export type DataforseoLabsAppleAppIntersectionLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DataforseoLabsAppleAppIntersectionLiveTaskInfo | null> | null;
};

export type DomainAnalyticsIdListRequestInfo = {
    /**
     * start time for filtering results
     * required field
     * if include_metadata is set to true, maximum value: a month from current datetime;
     * if include_metadata is set to false, maximum value: six months from current datetime;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_from?: string;
    /**
     * finish time for filtering results
     * required field
     * maximum value: current datetime;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-31 13:57:46 +00:00
     */
    datetime_to?: string;
    /**
     * the maximum number of returned task IDs
     * optional field
     * default value: 1000
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned task IDs
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten tasks in the results array will be omitted
     */
    offset?: number | null;
    /**
     * sorting by task execution time
     * optional field
     * possible values: "asc", "desc"
     * default value: "asc"
     */
    sort?: string | null;
    /**
     * include task metadata in the respond
     * optional field
     * default value: false
     */
    include_metadata?: boolean | null;
};

export type DomainAnalyticsIdListResultInfo = {
    /**
     * id of the task
     */
    id?: string | null;
    /**
     * URL of the task
     * URL you used for making an API call
     */
    url?: string | null;
    /**
     * date and time when the task was made
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_posted?: string | null;
    /**
     * date and time when the task was completed
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_done?: string | null;
    /**
     * informational message of the task
     * you can find the full list of general informational messages here
     */
    status?: string | null;
    /**
     * cost of the task, USD
     */
    cost?: number | null;
    /**
     * contains parameters you specified in the POST request
     */
    metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | null;
    } | null;
};

export type DomainAnalyticsIdListTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DomainAnalyticsIdListResultInfo | null> | null;
};

export type DomainAnalyticsIdListResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DomainAnalyticsIdListTaskInfo | null> | null;
};

export type DomainAnalyticsErrorsRequestInfo = {
    /**
     * the maximum number of returned tasks that responded with an error
     * optional field
     * default value: 1000
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned tasks
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten tasks in the results array will be omitted and the data will be provided for the successive tasks
     */
    offset?: number | null;
    /**
     * return tasks with a certain function
     * use this field to obtain a list of tasks that returned an error filtered by a certain function
     * you can filter the results by the values you receive in the function fields of the API response
     * i.e., once you receive unfiltered results, you can call this API again to filter them by function
     * example: domain_analytics/task_get, postback_url, pingback_url
     */
    filtered_function?: string | null;
    /**
     * start time for filtering results
     * optional field
     * allows filtering results by the datetime parameter within the range of the last 7 days;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2021-11-15 12:57:46 +00:00
     */
    datetime_from?: string | null;
    /**
     * finish time for filtering results
     * optional field
     * allows filtering results by the datetime parameter within the range of the last 7 days;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2021-11-15 13:57:46 +00:00
     */
    datetime_to?: string | null;
};

export type DomainAnalyticsErrorsResultInfo = {
    /**
     * id of the task
     */
    id?: string | null;
    /**
     * date and time when an error occurred
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * corresponding API function
     */
    function?: string | null;
    /**
     * error code
     */
    error_code?: number | null;
    /**
     * error message or error URL
     * error message (see full list) or URL that caused an error
     */
    error_message?: string | null;
    /**
     * URL that caused an error
     * URL you used for making an API call or pingback/postback URL
     */
    http_url?: string | null;
    /**
     * HTTP method
     */
    http_method?: string | null;
    /**
     * HTTP status code
     */
    http_code?: number | null;
    /**
     * time taken by HTTP request
     * for tasks set with a pingback/postback, this field will show the time it took your server to respond
     */
    http_time?: number | null;
    /**
     * HTTP response
     * server response
     */
    http_response?: string | null;
};

export type DomainAnalyticsErrorsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DomainAnalyticsErrorsResultInfo | null> | null;
};

export type DomainAnalyticsErrorsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DomainAnalyticsErrorsTaskInfo | null> | null;
};

export type DomainAnalyticsTechnologiesAvailableFiltersResultInfo = {
    domains_by_technology?: {
        [key: string]: string | null;
    } | null;
    aggregation_technologies?: {
        [key: string]: string | null;
    } | null;
    technologies_summary?: {
        [key: string]: string | null;
    } | null;
    domains_by_html_terms?: {
        [key: string]: string | null;
    } | null;
};

export type DomainAnalyticsTechnologiesAvailableFiltersTaskInfo = BaseResponseTaskInfo & {
    result?: Array<DomainAnalyticsTechnologiesAvailableFiltersResultInfo | null> | null;
};

export type DomainAnalyticsTechnologiesAvailableFiltersResponseInfo = BaseResponseInfo & {
    tasks?: Array<DomainAnalyticsTechnologiesAvailableFiltersTaskInfo | null> | null;
};

export type DomainAnalyticsTechnologiesLocationsResultInfo = {
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
};

export type DomainAnalyticsTechnologiesLocationsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DomainAnalyticsTechnologiesLocationsResultInfo | null> | null;
};

export type DomainAnalyticsTechnologiesLocationsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DomainAnalyticsTechnologiesLocationsTaskInfo | null> | null;
};

export type DomainAnalyticsTechnologiesLanguagesResultInfo = {
    /**
     * language name
     */
    language_name?: string | null;
    /**
     * language code according to ISO 639-1
     */
    language_code?: string | null;
};

export type DomainAnalyticsTechnologiesLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DomainAnalyticsTechnologiesLanguagesResultInfo | null> | null;
};

export type DomainAnalyticsTechnologiesLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DomainAnalyticsTechnologiesLanguagesTaskInfo | null> | null;
};

export type TechnologyCategoryInfo = {
    /**
     * id of the technology category
     * example:
     * crm, cart_abandonment
     */
    id?: string | null;
    /**
     * path to the technology category
     * example:
     * user_generated_content.content_curation
     */
    path?: string | null;
    /**
     * title of the technology category
     */
    title?: string | null;
    /**
     * list of technologies in this category
     * example:
     * "Salesforce", "CareCart"
     */
    technologies?: Array<string | null> | null;
};

export type Groups = {
    /**
     * id of the technology group
     * example:
     * marketing, sales
     */
    id?: string | null;
    /**
     * title of the technology group
     */
    title?: string | null;
    /**
     * technology categories in this group
     */
    categories?: Array<TechnologyCategoryInfo | null> | null;
};

export type DomainAnalyticsTechnologiesTechnologiesResultInfo = {
    /**
     * array of technology groups
     */
    groups?: Array<Groups | null> | null;
};

export type DomainAnalyticsTechnologiesTechnologiesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DomainAnalyticsTechnologiesTechnologiesResultInfo | null> | null;
};

export type DomainAnalyticsTechnologiesTechnologiesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DomainAnalyticsTechnologiesTechnologiesTaskInfo | null> | null;
};

export type DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo = {
    /**
     * id of the target technology group
     * required field if you don’t specify technology, category  or keyword
     * at least one field (group, category, keyword, technology) must be set
     * you can find the full list of technology group ids on this page
     * example:
     * "marketing"
     */
    group?: string | null;
    /**
     * id of the target technology category
     * required field if you don’t specify group, keyword or technology
     * at least one field (group, category, keyword, technology) must be set
     * you can find the full list of technology category ids on this page
     * example:
     * "crm"
     */
    category?: string | null;
    /**
     * target technology
     * required field if you don’t specify group, keyword or category
     * at least one field (group, category, keyword, technology) must be set
     * you can find the full list of technologies on this page
     * example:
     * "Salesforce"
     */
    technology?: string | null;
    /**
     * target keyword in the domain’s meta keywords
     * required field if you don’t specify group, category or technology
     * at least one field (group, category, keyword, technology) must be set
     * UTF-8 encoding
     * example:
     * "seo"
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string | null;
    /**
     * search mode
     * optional field
     * possible search mode types:
     * as_is – search for results exactly matching the specified group ids, category ids, or technology names
     * entry – search for results matching a part of the specified group ids, category ids, or technology names
     * default value: as_is
     */
    mode?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * <, <=, >, >=, =, <>, in, not_in, like,not_like
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * you can use the following parameters to filter the results: domain_rank, last_visited, country_iso_code, language_code, content_language_code
     * Note: all filtering parameters are taken from the domain_technology_item of the domain_technologies endpoint;
     * example:
     * [["country_iso_code","=","US"],
     * "and",
     * ["domain_rank",">",800]]for more information about filters, please refer to Domain Analytics Technologies API – Filters
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the following values to sort the results: groups_count, categories_count, technologies_count
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting type
     * example:
     * ["groups_count,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["groups_count,desc","technologies_count,desc"]
     * default value:
     * ["groups_count,desc","categories_count,desc","technologies_count,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * maximum number of returned technology groups
     * optional field
     * you can use this field to limit the number of items with identical "group" in the results
     * default value: 5
     * minimum value: 1
     * maximum value: 10000
     */
    internal_groups_list_limit?: number | null;
    /**
     * maximum number of returned technology categories within the same group
     * optional field
     * you can use this field to limit the number of items with identical "category" in the results
     * default value: 5
     * minimum value: 1
     * maximum value: 10000
     */
    internal_categories_list_limit?: number | null;
    /**
     * maximum number of returned technologies within the same category
     * optional field
     * you can use this field to limit the number of items with identical "technology" in the results
     * default value: 10
     * minimum value: 1
     * maximum value: 10000
     */
    internal_technologies_list_limit?: number | null;
    /**
     * maximum number of items with identical "category", "group", and "technology"
     * optional field
     * if you use this field, the values specified in internal_groups_list_limit, internal_categories_list_limit and internal_technologies_list_limit will be ignored;
     * you can use this field to limit the number of items with identical "category", "group", or "technology"
     * default value: 10
     * minimum value: 1
     * maximum value: 10000
     */
    internal_list_limit?: number | null;
    /**
     * the maximum number of returned technologies
     * optional field
     * default value: 100
     * maximum value: 10000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned domains
     * optional field
     * default value: 0
     * maximum value: 9999
     * if you specify the 10 value, the first ten technologies in the results array will be omitted and the data will be provided for the successive technologies
     */
    offset?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

/**
 * items array
 */
export type DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * technology group id
     */
    group?: string | null;
    /**
     * technology category id
     */
    category?: string | null;
    /**
     * technology name
     */
    technology?: string | null;
    /**
     * technology groups count
     * number of domains that match the parameters you specified and are using technologies from the indicated group
     */
    groups_count?: number | null;
    /**
     * technology categories count
     * number of domains that match the parameters you specified and are using technologies from the indicated category
     */
    categories_count?: number | null;
    /**
     * technologies count
     * number of domains that match the parameters you specified and are using the indicated technology
     */
    technologies_count?: number | null;
};

export type DomainAnalyticsTechnologiesAggregationTechnologiesLiveResultInfo = {
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * offset in the results array of returned domains
     */
    offset?: number | null;
    /**
     * items array
     */
    items?: Array<DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem | null> | null;
};

export type DomainAnalyticsTechnologiesAggregationTechnologiesLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DomainAnalyticsTechnologiesAggregationTechnologiesLiveResultInfo | null> | null;
};

export type DomainAnalyticsTechnologiesAggregationTechnologiesLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DomainAnalyticsTechnologiesAggregationTechnologiesLiveTaskInfo | null> | null;
};

export type DomainAnalyticsTechnologiesTechnologiesSummaryLiveRequestInfo = {
    /**
     * target technology paths
     * required field if you don’t specify groups, technologies and categories
     * each technology path should be specified as a separate object containing “path” and “name”, where “path” is specified as “$group_id.$category_id” and “name” – as the name of the target technology;
     * each object with a technology path should be separated with a comma
     * you can find the full list of technology group ids, category ids and technology names on this page
     * note: you can specify up to 10 technology paths in this array
     * example:
     * [{"path": "content.cms","name": "wordpress"}, {"path": "marketing.crm","name": "salesforce"}]
     */
    technology_paths?: Array<string> | null;
    /**
     * ids of the target technology groups
     * required field if you don’t specify technologies, technology_paths, categories, or keywords
     * you can find the full list of technology group ids on this page
     * note: you can specify up to 10 technology groups in this array
     * example:
     * ["sales", "marketing"]
     */
    groups?: Array<string> | null;
    /**
     * ids of the target technology categories
     * required field if you don’t specify groups, technology_paths, technologies, or keywords
     * you can find the full list of technology category ids on this page
     * note: you can specify up to 10 technology categories in this array
     * example:
     * ["payment_processors","crm"]
     */
    categories?: Array<string> | null;
    /**
     * target technologies
     * required field if you don’t specify groups, technology_paths, categories, or keywords
     * you can find the full list of technologies you can specify here on this page
     * note: you can specify up to 10 technologies in this array
     * example:
     * ["Google Pay","Salesforce"]
     */
    technologies?: Array<string> | null;
    /**
     * target keywords in the domain’s title, description or meta keywords
     * required field if you don’t specify groups, technology_paths, categories, or technologies
     * you can specify the maximum of 10 keywords;
     * UTF-8 encoding;
     * example:
     * ["seo","software"]
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string> | null;
    /**
     * search mode
     * optional field
     * possible search mode types:
     * as_is – search for results exactly matching the specified group ids, category ids, or technology names
     * entry – search for results matching a part of the specified group ids, category ids, or technology names
     * default value: as_is
     */
    mode?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * <, <=, >, >=, =, <>, in, not_in, like,not_like
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * you can use the following parameters to filter the results: domain_rank, last_visited, country_iso_code, language_code, content_language_code
     * example:
     * [["country_iso_code","=","US"],
     * "and",
     * ["domain_rank",">",800]]
     * for more information about filters, please refer to Domain Analytics Technologies API – Filters
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * maximum number of elements within internal arrays
     * optional field
     * you can use this field to limit the number of elements within the following arrays:
     * countries, languages, content_languages, keywords
     * default value: 10
     * minimum value: 1
     * maximum value: 10000
     */
    internal_list_limit?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DomainAnalyticsTechnologiesTechnologiesSummaryLiveResultInfo = {
    /**
     * distribution of websites by country
     * contains country codes and number of websites per country
     */
    countries?: {
        [key: string]: number | null;
    } | null;
    /**
     * distribution of websites by language
     * contains language codes and number of websites per language
     */
    languages?: {
        [key: string]: number | null;
    } | null;
    /**
     * distribution of websites by content language
     * contains content language codes and number of websites per language
     */
    content_languages?: {
        [key: string]: number | null;
    } | null;
    /**
     * distribution of websites by keywords
     * contains keywords found in the websites’ titles, descriptions or meta keywords, and number of websites using each keyword
     */
    keywords?: {
        [key: string]: number | null;
    } | null;
};

export type DomainAnalyticsTechnologiesTechnologiesSummaryLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DomainAnalyticsTechnologiesTechnologiesSummaryLiveResultInfo | null> | null;
};

export type DomainAnalyticsTechnologiesTechnologiesSummaryLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DomainAnalyticsTechnologiesTechnologiesSummaryLiveTaskInfo | null> | null;
};

export type DomainAnalyticsTechnologiesTechnologyStatsLiveRequestInfo = {
    /**
     * target technology
     * required field
     * you can find the full list of technologies you can specify here on this page
     * example:
     * "Salesforce"
     */
    technology?: string;
    /**
     * starting date of the time range
     * optional field
     * minimum value 2022-10-31
     * if you don’t specify this field, the minimum value will be used by default
     * date format: "yyyy-mm-dd"
     * example:
     * "2023-06-01"
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * if you don’t specify this field, the today’s date will be used by default
     * date format: "yyyy-mm-dd"
     * example:
     * "2023-01-15"
     */
    date_to?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

/**
 * items array
 */
export type DomainAnalyticsTechnologiesTechnologyStatsLiveItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * date for which the data is provided
     */
    date?: string | null;
    /**
     * number of domains that use the specified technology
     */
    domains_count?: number | null;
    /**
     * distribution of websites by country
     * contains country codes and number of websites per country
     */
    countries?: {
        [key: string]: number | null;
    } | null;
    /**
     * distribution of websites by language
     * contains language codes and number of websites per language
     */
    languages?: {
        [key: string]: number | null;
    } | null;
    /**
     * distribution of websites by backlink rank
     * contains domain rank ranges and number of websites per range
     * learn more about rank and how it is calculated in this help center article
     */
    domains_rank?: {
        [key: string]: number | null;
    } | null;
};

export type DomainAnalyticsTechnologiesTechnologyStatsLiveResultInfo = {
    /**
     * target technology
     */
    technology?: string | null;
    /**
     * starting date of the time range
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     */
    date_to?: string | null;
    /**
     * number of items in the results array
     */
    items_count?: number | null;
    /**
     * items array
     */
    items?: Array<DomainAnalyticsTechnologiesTechnologyStatsLiveItem | null> | null;
};

export type DomainAnalyticsTechnologiesTechnologyStatsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DomainAnalyticsTechnologiesTechnologyStatsLiveResultInfo | null> | null;
};

export type DomainAnalyticsTechnologiesTechnologyStatsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DomainAnalyticsTechnologiesTechnologyStatsLiveTaskInfo | null> | null;
};

export type DomainAnalyticsTechnologiesDomainsByTechnologyLiveRequestInfo = {
    /**
     * target technology paths
     * required field if you don’t specify groups, technologies, keywords or categories
     * at least one field (technology_paths, groups, technologies, keywords or categories) must be set;
     * each technology path should be specified as a separate object containing “path” and “name”, where “path” is specified as “$group_id.$category_id” and “name” – as the name of the target technology;
     * each object with a technology path should be separated with a comma
     * you can find the full list of technology group ids, category ids and technology names on this page
     * note: you can specify up to 10 technology paths in this array
     * example:
     * [{"path": "content.cms","name": "wordpress"}, {"path": "marketing.crm","name": "salesforce"}]
     */
    technology_paths?: Array<string> | null;
    /**
     * ids of the target technology groups
     * required field if you don’t specify technologies, technology_paths, keywords or categories
     * you can find the full list of technology group ids on this page
     * note: you can specify up to 10 technology groups in this array
     * example:
     * ["sales", "marketing"]
     */
    groups?: Array<string> | null;
    /**
     * ids of the target technology categories
     * required field if you don’t specify groups, technology_paths, keywords or technologies
     * you can find the full list of technology category ids on this page
     * note: you can specify up to 10 technology categories in this array
     * example:
     * ["payment_processors","crm"]
     */
    categories?: Array<string> | null;
    /**
     * target technologies
     * required field if you don’t specify groups, technology_paths, keywords or categories
     * you can find the full list of technologies you can specify here on this page
     * note: you can specify up to 10 technologies in this array
     * example:
     * ["Google Pay","Salesforce"]
     */
    technologies?: Array<string> | null;
    /**
     * target keywords in the domain’s title, description or meta keywords
     * required field if you don’t specify groups, technology_paths, technologies or categories
     * optional field
     * you can specify the maximum of 10 keywords;
     * UTF-8 encoding;
     * example:
     * ["seo","software"]
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string> | null;
    /**
     * search mode
     * optional field
     * possible search mode types:
     * as_is – search for results exactly matching the specified group ids, category ids, or technology names
     * entry – search for results matching a part of the specified group ids, category ids, or technology names
     * default value: as_is
     */
    mode?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * <, <=, >, >=, =, <>, in, not_in, like, not_like
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["country_iso_code","=","US"]
     * [["country_iso_code","=","US"],
     * "and",
     * ["domain_rank",">",100]]
     * [["domain_rank",">",100],
     * "and",
     * [["country_iso_code","=","US"],"or",["country_iso_code","=","CA"]]]
     * for more information about filters, please refer to Domain Analytics Technologies API – Filters
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * available fields:
     * domain_rank, domain, last_visited, country_iso_code, language_code, content_language_code
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting type
     * example:
     * ["last_visited,desc"]
     * default rule:
     * ["domain_rank,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["last_visited,desc","domain_rank,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * the maximum number of returned domains
     * optional field
     * default value: 100
     * maximum value: 10000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned domains
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten domains in the results array will be omitted and the data will be provided for the successive domains;
     * Note: the maximum value is 9999, the sum of limit and offset must not exceed 10000;
     * use the offset_token if you would like to offset more results
     */
    offset?: number | null;
    /**
     * token for subsequent requests
     * optional field
     * provided in the identical filed of the response to each request;
     * use this parameter to avoid timeouts while trying to obtain over 100,000 results in a single request;
     * by specifying the unique offset_token value from the response array, you will get the subsequent results of the initial task;
     * offset_token values are unique for each subsequent task
     * Note: if the offset_token is specified in the request, all other parameters should be identical to the previous request
     */
    offset_token?: string | null;
};

/**
 * items array
 */
export type DomainAnalyticsTechnologiesDomainsByLiveItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * specified domain name
     */
    domain?: string | null;
    /**
     * domain meta title
     */
    title?: string | null;
    /**
     * domain meta description
     */
    description?: string | null;
    /**
     * domain meta keywords
     */
    meta_keywords?: Array<string | null> | null;
    /**
     * backlink rank of the target domain
     * learn more about the metric and how it is calculated in this help center article
     */
    domain_rank?: number | null;
    /**
     * most recent date when our crawler visited the domain
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2022-10-10 12:57:46 +00:00
     */
    last_visited?: string | null;
    /**
     * domain ISO code
     * ISO code of the country that target domain is determined to belong to
     */
    country_iso_code?: string | null;
    /**
     * domain language
     * code of the language that target domain is determined to be associated with
     */
    language_code?: string | null;
    /**
     * content language
     * code of the language that content on the target domain is written with
     */
    content_language_code?: string | null;
    /**
     * phone numbers of the target
     * contact phone numbers indicated on the target website
     */
    phone_numbers?: Array<string | null> | null;
    /**
     * emails of the target
     * emails indicated on the target website
     */
    emails?: Array<string | null> | null;
    /**
     * social media links and handles
     * social media URLs detected in the social graphs of the target website
     */
    social_graph_urls?: Array<string | null> | null;
    /**
     * technologies used by target domain
     * contains objects with the names of technologies used on the website;
     * to get a full list of technologies and their structure, refer to the technologies endpoint
     */
    technologies?: TechnologiesInfo | null;
};

export type DomainAnalyticsTechnologiesDomainsByTechnologyLiveResultInfo = {
    /**
     * total number of relevant items in the database
     */
    total_count?: number | null;
    /**
     * number of items in the results array
     */
    items_count?: number | null;
    /**
     * specified offset value
     */
    offset?: number | null;
    /**
     * token for subsequent requests
     * by specifying the unique offset_token when setting a new task, you will get the subsequent results of the initial task;
     * offset_token values are unique for each subsequent task
     */
    offset_token?: string | null;
    /**
     * items array
     */
    items?: Array<DomainAnalyticsTechnologiesDomainsByLiveItem | null> | null;
};

export type DomainAnalyticsTechnologiesDomainsByTechnologyLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DomainAnalyticsTechnologiesDomainsByTechnologyLiveResultInfo | null> | null;
};

export type DomainAnalyticsTechnologiesDomainsByTechnologyLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DomainAnalyticsTechnologiesDomainsByTechnologyLiveTaskInfo | null> | null;
};

export type DomainAnalyticsTechnologiesDomainsByHtmlTermsLiveRequestInfo = {
    /**
     * target search terms
     * required field
     * specify target HTML elements, tags, attributes, their content or all of the above
     * if you specify more than one search term, you will receive only the domains containing all of the specified terms in the HTML code of their homepage
     * maximum number of search terms you can specify: 10
     * example:
     * ["data-attrid"]
     */
    search_terms?: Array<string>;
    /**
     * target keywords in the domain’s title, description or meta keywords
     * optional field
     * UTF-8 encoding
     * maximum number of keywords you can specify: 10
     * example:
     * ["seo","software"]
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string> | null;
    /**
     * search mode
     * optional field
     * possible search mode types:
     * strict_entry – search for results exactly matching the order, intervals and separators in the specified search terms
     * entry – search for results ignoring the order, intervals and separators in the specified search terms
     * default value: entry
     */
    mode?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * <, <=, >, >=, =, <>, in, not_in, like, not_like
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["domain","like","%seo%"]
     * [["country_iso_code","=","US"],
     * "and",
     * ["domain_rank",">",100]]
     * [["domain_rank",">",100],
     * "and",
     * [["country_iso_code","=","US"],"or",["country_iso_code","=","CA"]]]
     * for more information about filters, please refer to Domain Analytics Technologies API – Filters
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * available fields:
     * domain_rank, domain, last_visited, country_iso_code, language_code, content_language_code
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting type
     * example:
     * ["last_visited,desc"]
     * default rule:
     * ["domain_rank,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["last_visited,desc","domain_rank,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * the maximum number of returned domains
     * optional field
     * default value: 100
     * maximum value: 10000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned domains
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten domains in the results array will be omitted and the data will be provided for the successive domains;
     * Note: the maximum value is 9999, the sum of limit and offset must not exceed 10000;
     * use the offset_token if you would like to offset more results
     */
    offset?: number | null;
    /**
     * token for subsequent requests
     * optional field
     * provided in the identical filed of the response to each request;
     * use this parameter to avoid timeouts while trying to obtain over 100,000 results in a single request;
     * by specifying the unique offset_token value from the response array, you will get the subsequent results of the initial task;
     * offset_token values are unique for each subsequent task
     * Note: if the offset_token is specified in the request, all other parameters should be identical to the previous request
     */
    offset_token?: string | null;
};

export type DomainAnalyticsTechnologiesDomainsByHtmlTermsLiveResultInfo = {
    /**
     * total number of relevant items in the database
     */
    total_count?: number | null;
    /**
     * number of items in the results array
     */
    items_count?: number | null;
    /**
     * specified offset value
     */
    offset?: number | null;
    /**
     * token for subsequent requests
     * by specifying the unique offset_token when setting a new task, you will get the subsequent results of the initial task;
     * offset_token values are unique for each subsequent task
     */
    offset_token?: string | null;
    /**
     * items array
     */
    items?: Array<DomainAnalyticsTechnologiesDomainsByLiveItem | null> | null;
};

export type DomainAnalyticsTechnologiesDomainsByHtmlTermsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DomainAnalyticsTechnologiesDomainsByHtmlTermsLiveResultInfo | null> | null;
};

export type DomainAnalyticsTechnologiesDomainsByHtmlTermsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DomainAnalyticsTechnologiesDomainsByHtmlTermsLiveTaskInfo | null> | null;
};

export type DomainAnalyticsTechnologiesDomainTechnologiesLiveRequestInfo = {
    /**
     * target domain
     * required field
     * domain name of the website to analyze
     * Note: results will be returned for the specified domain only
     */
    target?: string;
};

export type DomainAnalyticsTechnologiesDomainTechnologiesLiveResultInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * specified domain name
     */
    domain?: string | null;
    /**
     * domain meta title
     */
    title?: string | null;
    /**
     * domain meta description
     */
    description?: string | null;
    /**
     * domain meta keywords
     */
    meta_keywords?: Array<string | null> | null;
    /**
     * backlink rank of the target domain
     * learn more about the metric and how it is calculated in this help center article
     */
    domain_rank?: number | null;
    /**
     * most recent date when our crawler visited the domain
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2022-10-10 12:57:46 +00:00
     */
    last_visited?: string | null;
    /**
     * domain ISO code
     * ISO code of the country that the target domain is determined to belong to
     */
    country_iso_code?: string | null;
    /**
     * domain language
     * code of the language that the target domain is determined to be associated with
     */
    language_code?: string | null;
    /**
     * content language
     * code of the language that content on the target domain is written in
     */
    content_language_code?: string | null;
    /**
     * phone numbers of the target
     * contact phone numbers indicated on the target website
     */
    phone_numbers?: Array<string | null> | null;
    /**
     * emails of the target
     * emails indicated on the target website
     */
    emails?: Array<string | null> | null;
    /**
     * social media links and handles
     * social media URLs detected in the social graphs of the target website
     */
    social_graph_urls?: Array<string | null> | null;
    /**
     * technologies used by target domain
     * contains objects with the names of technologies used on the website
     * see the full list of available technologies structured by groups and categories
     */
    technologies?: TechnologiesInfo | null;
};

export type DomainAnalyticsTechnologiesDomainTechnologiesLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DomainAnalyticsTechnologiesDomainTechnologiesLiveResultInfo | null> | null;
};

export type DomainAnalyticsTechnologiesDomainTechnologiesLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DomainAnalyticsTechnologiesDomainTechnologiesLiveTaskInfo | null> | null;
};

export type DomainAnalyticsWhoisAvailableFiltersResultInfo = {
    overview?: {
        [key: string]: string | null;
    } | null;
};

export type DomainAnalyticsWhoisAvailableFiltersTaskInfo = BaseResponseTaskInfo & {
    result?: Array<DomainAnalyticsWhoisAvailableFiltersResultInfo | null> | null;
};

export type DomainAnalyticsWhoisAvailableFiltersResponseInfo = BaseResponseInfo & {
    tasks?: Array<DomainAnalyticsWhoisAvailableFiltersTaskInfo | null> | null;
};

export type DomainAnalyticsWhoisOverviewLiveRequestInfo = {
    /**
     * the maximum number of returned domains
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned items
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten items in the results array will be omitted and the data will be provided for the successive items
     */
    offset?: number | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, <, <=, >, >=, =, <>, in, not_in, like, not_like
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * examples:
     * ["expiration_datetime", "<", "2021-02-15 01:00:00 +00:00"]
     * [["expiration_datetime", "<", "2021-02-15 01:00:00 +00:00"],
     * "and",
     * ["domain", "like", "%seo%"]]
     *
     * for more information about filters, please refer to Filters Page or this help center guide
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc - results will be sorted in the ascending order
     * desc - results will be sorted in the descending order
     * the comma is used as a separator
     * example:
     * ["metrics.organic.pos_1,desc"]
     * default rule:
     * ["metrics.organic.count,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["expiration_datetime,asc","metrics.organic.etv,desc","metrics.organic.pos_1,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type MetricsInfo = {
    /**
     * number of organic SERPs where the domain ranks #1
     */
    pos_1?: number | null;
    /**
     * number of organic SERPs where the domain ranks #2-3
     */
    pos_2_3?: number | null;
    /**
     * number of organic SERPs where the domain ranks #4-10
     */
    pos_4_10?: number | null;
    /**
     * number of organic SERPs where the domain ranks #11-20
     */
    pos_11_20?: number | null;
    /**
     * number of organic SERPs where the domain ranks #21-30
     */
    pos_21_30?: number | null;
    /**
     * number of organic SERPs where the domain ranks #31-40
     */
    pos_31_40?: number | null;
    /**
     * number of organic SERPs where the domain ranks #41-50
     */
    pos_41_50?: number | null;
    /**
     * number of organic SERPs where the domain ranks #51-60
     */
    pos_51_60?: number | null;
    /**
     * number of organic SERPs where the domain ranks #61-70
     */
    pos_61_70?: number | null;
    /**
     * number of organic SERPs where the domain ranks #71-80
     */
    pos_71_80?: number | null;
    /**
     * number of organic SERPs where the domain ranks #81-90
     */
    pos_81_90?: number | null;
    /**
     * number of organic SERPs where the domain ranks #91-100
     */
    pos_91_100?: number | null;
    /**
     * estimated traffic volume
     * estimated organic monthly traffic to the domain
     * calculated as the product of CTR (click-through-rate) and search volume values of all keywords the domain ranks for
     * learn more about how the metric is calculated in this help center article
     */
    etv?: number | null;
    /**
     * total count of organic SERPs that contain the domain
     */
    count?: number | null;
    /**
     * estimated cost of converting organic search traffic into paid
     * represents the estimated monthly cost of running ads (USD) for all keywords a domain ranks for
     * the metric is calculated as the product of organic etv and paid cpc values and indicates the cost of driving the estimated volume of monthly organic traffic through PPC advertising in Google Search
     * learn more about how the metric is calculated in this help center article
     */
    estimated_paid_traffic_cost?: number | null;
    /**
     * number of new ranked elements
     * indicates how many new ranked elements were found for this domain
     */
    is_new?: number | null;
    /**
     * rank went up
     * indicates how many ranked elements of this domain went up in Google Search
     */
    is_up?: number | null;
    /**
     * rank went down
     * indicates how many ranked elements of this domain went down in Google Search
     */
    is_down?: number | null;
    /**
     * lost ranked elements
     * indicates how many ranked elements of this domain were previously presented in SERPs, but weren’t found during the last check
     */
    is_lost?: number | null;
};

export type MetricsBundleInfo = {
    organic?: (MetricsInfo | null) & {
        /**
         * number of new ranked elements
         * indicates how many new ranked elements were found for this domain
         */
        is_new?: number | null;
        /**
         * rank went up
         * indicates how many ranked elements of this domain went up in Google Search
         */
        is_up?: number | null;
        /**
         * rank went down
         * indicates how many ranked elements of this domain went down in Google Search
         */
        is_down?: number | null;
        /**
         * lost ranked elements
         * indicates how many ranked elements of this domain were previously presented in SERPs, but weren’t found during the last check
         */
        is_lost?: number | null;
    };
    /**
     * ranking and traffic data from paid search
     */
    paid?: MetricsInfo | null;
};

/**
 * items array
 */
export type DomainAnalyticsWhoisOverviewLiveItem = {
    /**
     * domain name
     */
    domain?: string | null;
    /**
     * date and time of registration
     * date and time (in the ISO 8601 format) when the domain was first registered
     * example:
     * "1997-03-29 03:00:00 +00:00"
     */
    created_datetime?: string | null;
    /**
     * date and time when the domain entry was changed
     * date and time (in the ISO 8601 format) when the domain entry was last modified
     * example:
     * "2021-01-14 08:36:28 +00:00"
     */
    changed_datetime?: string | null;
    /**
     * date and time when the domain will expire
     * date and time (in the ISO 8601 format) when the domain is due to expire
     * example:
     * "2022-11-26 17:21:23 +00:00"
     */
    expiration_datetime?: string | null;
    /**
     * date and time when the domain was updated
     * date and time (in the ISO 8601 format) when the domain was last updated
     * example:
     * "2021-01-29 13:59:38 +00:00"
     */
    updated_datetime?: string | null;
    /**
     * date and time when our crawler found the domain for the first time
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * "2019-11-15 12:57:46 +00:00"
     */
    first_seen?: string | null;
    /**
     * extensive provisioning protocol status codes
     * the status of a domain name registration as defined by ICANN
     */
    epp_status_codes?: Array<string | null> | null;
    /**
     * top-level domain
     * top-level domain in the DNS root zone
     */
    tld?: string | null;
    /**
     * domain registration status
     * if false, the domain name registration has expired
     * Note: expired domains will remain in the database for only a short period of time
     */
    registered?: boolean | null;
    /**
     * domain registrar
     * if null, the domain registrar is unknown
     * example:
     * NameCheap, Inc.
     */
    registrar?: string | null;
    /**
     * ranking data relevant to the specified domain
     */
    metrics?: MetricsBundleInfo | null;
    /**
     * backlink data for the returned domain
     */
    backlinks_info?: BacklinksInfo | null;
};

export type DomainAnalyticsWhoisOverviewLiveResultInfo = {
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains ranking and traffic data
     */
    items?: Array<DomainAnalyticsWhoisOverviewLiveItem | null> | null;
};

export type DomainAnalyticsWhoisOverviewLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<DomainAnalyticsWhoisOverviewLiveResultInfo | null> | null;
};

export type DomainAnalyticsWhoisOverviewLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<DomainAnalyticsWhoisOverviewLiveTaskInfo | null> | null;
};

export type KeywordsDataIdListRequestInfo = {
    /**
     * start time for filtering results
     * required field
     * if include_metadata is set to true, maximum value: a month from current datetime;
     * if include_metadata is set to false, maximum value: six months from current datetime;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_from?: string;
    /**
     * finish time for filtering results
     * required field
     * maximum value: current datetime;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-31 13:57:46 +00:00
     */
    datetime_to?: string;
    /**
     * the maximum number of returned task IDs
     * optional field
     * default value: 1000
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned task IDs
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten tasks in the results array will be omitted
     */
    offset?: number | null;
    /**
     * sorting by task execution time
     * optional field
     * possible values: "asc", "desc"
     * default value: "asc"
     */
    sort?: string | null;
    /**
     * include task metadata in the respond
     * optional field
     * default value: false
     */
    include_metadata?: boolean | null;
};

export type KeywordsDataIdListResultInfo = {
    /**
     * id of the task
     */
    id?: string | null;
    /**
     * URL of the task
     * URL you used for making an API call
     */
    url?: string | null;
    /**
     * date and time when the task was made
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_posted?: string | null;
    /**
     * date and time when the task was completed
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_done?: string | null;
    /**
     * informational message of the task
     * you can find the full list of general informational messages here
     */
    status?: string | null;
    /**
     * cost of the task, USD
     */
    cost?: number | null;
    /**
     * contains parameters you specified in the POST request
     */
    metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | null;
    } | null;
};

export type KeywordsDataIdListTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataIdListResultInfo | null> | null;
};

export type KeywordsDataIdListResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataIdListTaskInfo | null> | null;
};

export type KeywordsDataErrorsRequestInfo = {
    /**
     * the maximum number of returned tasks that responded with an error
     * optional field
     * default value: 1000
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned tasks
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten tasks in the results array will be omitted and the data will be provided for the successive tasks
     */
    offset?: number | null;
    /**
     * return tasks with a certain function
     * use this field to obtain a list of tasks that returned an error filtered by a certain function
     * you can filter the results by the values you receive in the function fields of the API response
     * i.e., once you receive unfiltered results, you can call this API again to filter them by function
     * example: keywords_data/keywords_for_site/task_post, postback_url, pingback_url
     */
    filtered_function?: string | null;
    /**
     * start time for filtering results
     * optional field
     * allows filtering results by the datetime parameter within the range of the last 7 days;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2021-11-15 12:57:46 +00:00
     */
    datetime_from?: string | null;
    /**
     * finish time for filtering results
     * optional field
     * allows filtering results by the datetime parameter within the range of the last 7 days;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2021-11-15 13:57:46 +00:00
     */
    datetime_to?: string | null;
};

export type KeywordsDataErrorsResultInfo = {
    /**
     * id of the task
     */
    id?: string | null;
    /**
     * date and time when an error occurred
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * corresponding API function
     */
    function?: string | null;
    /**
     * error code
     */
    error_code?: number | null;
    /**
     * error message or error URL
     * error message (see full list) or URL that caused an error
     */
    error_message?: string | null;
    /**
     * URL that caused an error
     * URL you used for making an API call or pingback/postback URL
     */
    http_url?: string | null;
    /**
     * HTTP method
     */
    http_method?: string | null;
    /**
     * HTTP status code
     */
    http_code?: number | null;
    /**
     * time taken by HTTP request
     * for tasks set with a pingback/postback, this field will show the time it took your server to respond
     */
    http_time?: number | null;
    /**
     * HTTP response
     * server response
     */
    http_response?: string | null;
};

export type KeywordsDataErrorsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataErrorsResultInfo | null> | null;
};

export type KeywordsDataErrorsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataErrorsTaskInfo | null> | null;
};

export type KeywordsDataGoogleAdsStatusResultInfo = {
    /**
     * indicates whether Google updated keyword data for the previous month
     * generally, Google updates keyword data in the middle of the month
     * if the value is true, Google currently provides up-to-date data for the previous month
     * if the value is false, we are not able to provide data for the previous month
     */
    actual_data?: boolean | null;
    /**
     * date of the latest update of Google Ads data
     * indicates the latest date when Google updated search volume, CPC, and other keyword metrics
     * example:
     * 2020-05-15
     */
    date_update?: string | null;
    /**
     * the latest year for which search volume data is available
     */
    last_year_in_monthly_searches?: number | null;
    /**
     * the latest month for which search volume data is available
     */
    last_month_in_monthly_searches?: number | null;
};

export type KeywordsDataGoogleAdsStatusTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataGoogleAdsStatusResultInfo | null> | null;
};

export type KeywordsDataGoogleAdsStatusResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleAdsStatusTaskInfo | null> | null;
};

export type KeywordsDataGoogleAdsLocationsResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the code of the superordinate location
     * example:
     * "location_code": 9041134,
     * "location_name": "Vienna International Airport,Lower Austria,Austria",
     * "location_code_parent": 20044
     * where location_code_parent corresponds to:
     * "location_code": 20044,
     * "location_name": "Lower Austria,Austria"
     */
    location_code_parent?: number | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     * possible values according to Google’s target types
     */
    location_type?: string | null;
};

export type KeywordsDataGoogleAdsLocationsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataGoogleAdsLocationsResultInfo | null> | null;
};

export type KeywordsDataGoogleAdsLocationsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleAdsLocationsTaskInfo | null> | null;
};

export type KeywordsDataGoogleAdsLocationsCountryResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the code of the superordinate location
     * example:
     * "location_code": 9041134,
     * "location_name": "Vienna International Airport,Lower Austria,Austria",
     * "location_code_parent": 20044
     * where location_code_parent corresponds to:
     * "location_code": 20044,
     * "location_name": "Lower Austria,Austria"
     */
    location_code_parent?: number | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     * possible values according to Google’s target types
     */
    location_type?: string | null;
};

export type KeywordsDataGoogleAdsLocationsCountryTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataGoogleAdsLocationsCountryResultInfo | null> | null;
};

export type KeywordsDataGoogleAdsLocationsCountryResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleAdsLocationsCountryTaskInfo | null> | null;
};

export type KeywordsDataGoogleAdsLanguagesResultInfo = {
    /**
     * language name
     */
    language_name?: string | null;
    /**
     * language code according to ISO 639-1
     */
    language_code?: string | null;
};

export type KeywordsDataGoogleAdsLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataGoogleAdsLanguagesResultInfo | null> | null;
};

export type KeywordsDataGoogleAdsLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleAdsLanguagesTaskInfo | null> | null;
};

export type KeywordsDataGoogleAdsSearchVolumeTaskPostRequestInfo = {
    /**
     * keywords
     * required field
     * The maximum number of keywords you can specify: 1000
     * The maximum number of characters for each keyword: 80
     * The maximum number of words for each keyword phrase: 10
     * the keywords you specify will be converted to a lowercase format
     * Note #1: Google Ads may return no data for certain groups of keywords;
     * Note #2: Google Ads provides combined search volume values for groups of similar keywords
     * to obtain search volume for similar keywords, we recommend submitting such keywords in separate requests;
     * Note #3: Google Ads doesn’t allow using certain symbols and characters (e.g., UTF symbols, emojis), so you can’t use them when setting a task;
     * to learn more about which symbols and characters can be used, please refer to this article
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of search engine location
     * optional field
     * if you do not indicate the location, you will receive worldwide results, i.e., for all available locations;
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * optional field
     * if you do not indicate the location, you will receive worldwide results, i.e., for all available locations;
     * if you use this field, you don’t need to specify location_name or location_coordinate;
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * optional field
     * if you do not indicate the location, you will receive worldwide results, i.e., for all available locations;
     * if you use this field, you don’t need to specify location_name or location_code;
     * location_coordinate parameter should be specified in the “latitude,longitude” format;
     * the data will be provided for the country the specified coordinates belong to;
     * example:
     * 52.6178549,-155.352142
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * optional field
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * optional field
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * include Google search partners
     * optional field
     * if you specify true, the results will be delivered for owned, operated, and syndicated networks across Google and partner sites that host Google search;
     * default value: false – results are returned for Google search sites
     */
    search_partners?: boolean | null;
    /**
     * starting date of the time range
     * optional field
     * date format: "yyyy-mm-dd"
     * minimal value: 4 years from the current date
     * by default, data is returned for the past 12 months;
     * Note: the indicated date cannot be greater than that specified in date_to and/or yesterday’s date;if Status endpoint returns false in the actual_data field, date_from can be set to the month before last and prior;
     * if Status endpoint returns true in the actual_data field, date_from can be set to the last month and prior
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * Note: the indicated date cannot be greater than the past month, Google Ads does not return data on the current month;
     * if you don’t specify this field, yesterday’s date will be used by default
     * date format: "yyyy-mm-dd"
     * example:
     * "2022-11-30"
     */
    date_to?: string | null;
    /**
     * include keywords associated with adult content
     * optional field
     * if set to true, adult keywords will be included in the response
     * default value: false
     * note that the API may return no data for such keywords due to Google Ads restrictions
     */
    include_adult_keywords?: boolean | null;
    /**
     * results sorting parameters
     * optional field
     * use these parameters to sort the results by relevance, search_volume, competition_index, low_top_of_page_bid, or high_top_of_page_bid in the descending order
     * default value: relevance
     */
    sort_by?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special character in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special character in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data array of the response
     */
    tag?: string | null;
};

export type KeywordsDataGoogleAdsSearchVolumeTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type KeywordsDataGoogleAdsSearchVolumeTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleAdsSearchVolumeTaskPostTaskInfo | null> | null;
};

export type KeywordsDataGoogleAdsSearchVolumeTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the task
     */
    endpoint?: string | null;
};

export type KeywordsDataGoogleAdsSearchVolumeTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataGoogleAdsSearchVolumeTasksReadyResultInfo | null> | null;
};

export type KeywordsDataGoogleAdsSearchVolumeTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleAdsSearchVolumeTasksReadyTaskInfo | null> | null;
};

export type KeywordsDataGoogleAdsSearchVolumeTaskGetResultInfo = {
    /**
     * keyword
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * correct spelling of the keyword
     * Note:if the keyword in the POST array appears to be misspelled, data will be returned for the correctly spelled keyword;
     * we use the functionality of Google Ads API to check and validate the spelling of keywords, learn more by this link
     */
    spell?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * indicates whether data from partner networks included in the response
     */
    search_partners?: boolean | null;
    /**
     * competition
     * represents the relative amount of competition associated with the given keyword in paid SERP only;
     * this value is based on Google Ads data and can take the following values: HIGH, MEDIUM, LOW;
     * if there is no data the value is null;
     * learn more about the metric in this help center article
     */
    competition?: string | null;
    /**
     * competition
     * represents the relative amount of competition associated with the given keyword in paid SERP only;
     * this value is based on Google Ads data and can be between 0 and 100 (inclusive);
     * if there is no data the value is null;
     * learn more about the metric in this help center article
     */
    competition_index?: number | null;
    /**
     * monthly average search volume rate
     */
    search_volume?: number | null;
    /**
     * minimum bid for the ad to be displayed at the top of the first page
     * indicates the value greater than about 20% of the lowest bids for which ads were displayed (based on Google Ads statistics for advertisers);
     * the value may differ depending on the location specified in a POST request
     */
    low_top_of_page_bid?: number | null;
    /**
     * maximum bid for the ad to be displayed at the top of the first page
     * indicates the value greater than about 80% of the lowest bids for which ads were displayed (based on Google Ads statistics for advertisers);
     * the value may differ depending on the location specified in a POST request
     */
    high_top_of_page_bid?: number | null;
    /**
     * cost per click
     * indicates the amount paid for each click on the ad displayed for a given keyword
     */
    cpc?: number | null;
    /**
     * monthly searches
     * represents the (approximate) number of searches on this keyword idea (as available for the past twelve months by default), targeted to the specified geographic locations;
     * if there is no data then the value is null
     */
    monthly_searches?: Array<MonthlySearchesInfo | null> | null;
};

export type KeywordsDataGoogleAdsSearchVolumeTaskGetTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataGoogleAdsSearchVolumeTaskGetResultInfo | null> | null;
};

export type KeywordsDataGoogleAdsSearchVolumeTaskGetResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleAdsSearchVolumeTaskGetTaskInfo | null> | null;
};

export type KeywordsDataGoogleAdsSearchVolumeLiveRequestInfo = {
    /**
     * keywords
     * required field
     * The maximum number of keywords you can specify: 1000
     * The maximum number of characters for each keyword: 80
     * The maximum number of words for each keyword phrase: 10
     * the keywords you specify will be converted to a lowercase format
     * Note #1: Google Ads may return no data for certain groups of keywords;
     * Note #2: Google Ads provides combined search volume values for groups of similar keywords
     * to obtain search volume for similar keywords, we recommend submitting such keywords in separate requests;
     * Note #3: Google Ads doesn’t allow using certain symbols and characters (e.g., UTF symbols, emojis), so you can’t use them when setting a task;
     * to learn more about which symbols and characters can be used, please refer to this article
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of search engine location
     * optional field
     * if you do not indicate the location, you will receive worldwide results, i.e., for all available locations;
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * optional field
     * if you do not indicate the location, you will receive worldwide results, i.e., for all available locations;
     * if you use this field, you don’t need to specify location_name or location_coordinate;
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * optional field
     * if you do not indicate the location, you will receive worldwide results, i.e., for all available locations;
     * if you use this field, you don’t need to specify location_name or location_code;
     * location_coordinate parameter should be specified in the “latitude,longitude” format;
     * the data will be provided for the country the specified coordinates belong to;
     * example:
     * 52.6178549,-155.352142
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * optional field
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * optional field
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * include Google search partners
     * optional field
     * if you specify true, the results will be delivered for owned, operated, and syndicated networks across Google and partner sites that host Google search;
     * default value: false – results are returned for Google search sites
     */
    search_partners?: boolean | null;
    /**
     * starting date of the time range
     * optional field
     * date format: "yyyy-mm-dd"
     * minimal value: 4 years from the current date
     * by default, data is returned for the past 12 months;
     * Note: the indicated date cannot be greater than that specified in date_to and/or yesterday’s date;if Status endpoint returns false in the actual_data field, date_from can be set to the month before last and prior;
     * if Status endpoint returns true in the actual_data field, date_from can be set to the last month and prior
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * Note: the indicated date cannot be greater than the past month, Google Ads does not return data on the current month;
     * if you don’t specify this field, yesterday’s date will be used by default
     * date format: "yyyy-mm-dd"
     * example:
     * "2022-11-30"
     */
    date_to?: string | null;
    /**
     * include keywords associated with adult content
     * optional field
     * if set to true, adult keywords will be included in the response
     * default value: false
     * note that the API may return no data for such keywords due to Google Ads restrictions
     */
    include_adult_keywords?: boolean | null;
    /**
     * results sorting parameters
     * optional field
     * use these parameters to sort the results by relevance, search_volume, competition_index, low_top_of_page_bid, or high_top_of_page_bid in the descending order
     * default value: relevance
     */
    sort_by?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data array of the response
     */
    tag?: string | null;
};

export type KeywordsDataGoogleAdsSearchVolumeLiveResultInfo = {
    /**
     * keyword
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * correct spelling of the keyword
     * Note:if the keyword in the POST array appears to be misspelled, data will be returned for the correctly spelled keyword;
     * we use the functionality of Google Ads API to check and validate the spelling of keywords, learn more by this link
     */
    spell?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * indicates whether data from partner networks included in the response
     */
    search_partners?: boolean | null;
    /**
     * competition
     * represents the relative amount of competition associated with the given keyword in paid SERP only;
     * this value is based on Google Ads data and can take the following values: HIGH, MEDIUM, LOW;
     * if there is no data the value is null;
     * learn more about the metric in this help center article
     */
    competition?: string | null;
    /**
     * competition
     * represents the relative amount of competition associated with the given keyword in paid SERP only;
     * this value is based on Google Ads data and can be between 0 and 100 (inclusive);
     * if there is no data the value is null;
     * learn more about the metric in this help center article
     */
    competition_index?: number | null;
    /**
     * monthly average search volume rate
     */
    search_volume?: number | null;
    /**
     * minimum bid for the ad to be displayed at the top of the first page
     * indicates the value greater than about 20% of the lowest bids for which ads were displayed (based on Google Ads statistics for advertisers);
     * the value may differ depending on the location specified in a POST request
     */
    low_top_of_page_bid?: number | null;
    /**
     * maximum bid for the ad to be displayed at the top of the first page
     * indicates the value greater than about 80% of the lowest bids for which ads were displayed (based on Google Ads statistics for advertisers);
     * the value may differ depending on the location specified in a POST request
     */
    high_top_of_page_bid?: number | null;
    /**
     * cost per click
     * indicates the amount paid for each click on the ad displayed for a given keyword
     */
    cpc?: number | null;
    /**
     * monthly searches
     * represents the (approximate) number of searches on this keyword idea (as available for the past twelve months by default), targeted to the specified geographic locations;
     * if there is no data then the value is null
     */
    monthly_searches?: Array<MonthlySearchesInfo | null> | null;
};

export type KeywordsDataGoogleAdsSearchVolumeLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataGoogleAdsSearchVolumeLiveResultInfo | null> | null;
};

export type KeywordsDataGoogleAdsSearchVolumeLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleAdsSearchVolumeLiveTaskInfo | null> | null;
};

export type KeywordsDataGoogleAdsKeywordsForSiteTaskPostRequestInfo = {
    /**
     * domain or page
     * required field
     * the domain name of the target website or the url of the target page;
     * note: to obtain keywords for the target website, use the target_type parameter
     */
    target?: string;
    /**
     * search keywords for site or url
     * optional field
     * possible values: site, page;
     * default value: page
     * if set to site, keywords will be provided for the entire site;
     * if set to page, keywords will be provided for the specified webpage
     */
    target_type?: string | null;
    /**
     * full name of search engine location
     * optional field
     * if you do not indicate the location, you will receive worldwide results, i.e., for all available locations;
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * optional field
     * if you do not indicate the location, you will receive worldwide results, i.e., for all available locations;
     * if you use this field, you don’t need to specify location_name or location_coordinate;
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * optional field
     * if you do not indicate the location, you will receive worldwide results, i.e., for all available locations;
     * if you use this field, you don’t need to specify location_name or location_code;
     * location_coordinate parameter should be specified in the “latitude,longitude” format;
     * the data will be provided for the country the specified coordinates belong to;
     * example:
     * 52.6178549,-155.352142
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * optional field
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * optional field
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * include Google search partners
     * optional field
     * if you specify true, the results will be delivered for owned, operated, and syndicated networks across Google and partner sites that host Google search;
     * default value: false – results are returned for Google search sites
     */
    search_partners?: boolean | null;
    /**
     * starting date of the time range
     * optional field
     * date format: "yyyy-mm-dd"
     * minimal value: 4 years from the current date
     * by default, data is returned for the past 12 months;
     * Note: the indicated date cannot be greater than that specified in date_to and/or yesterday’s date;if Status endpoint returns false in the actual_data field, date_from can be set to the month before last and prior;
     * if Status endpoint returns true in the actual_data field, date_from can be set to the last month and prior
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * Note: the indicated date cannot be greater than yesterday’s date;
     * if you don’t specify this field, yesterday’s date will be used by default
     * date format: "yyyy-mm-dd"
     * example:
     * "2022-11-30"
     */
    date_to?: string | null;
    /**
     * include keywords associated with adult content
     * optional field
     * if set to true, adult keywords will be included in the response
     * default value: false
     * note that the API may return no data for such keywords due to Google Ads restrictions
     */
    include_adult_keywords?: boolean | null;
    /**
     * results sorting parameters
     * optional field
     * Use these parameters to sort the results by relevance, search_volume, competition_index, low_top_of_page_bid, or high_top_of_page_bid in descending order
     * default value: relevance
     */
    sort_by?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type KeywordsDataGoogleAdsKeywordsForSiteTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type KeywordsDataGoogleAdsKeywordsForSiteTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleAdsKeywordsForSiteTaskPostTaskInfo | null> | null;
};

export type KeywordsDataGoogleAdsKeywordsForSiteTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the task
     */
    endpoint?: string | null;
};

export type KeywordsDataGoogleAdsKeywordsForSiteTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataGoogleAdsKeywordsForSiteTasksReadyResultInfo | null> | null;
};

export type KeywordsDataGoogleAdsKeywordsForSiteTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleAdsKeywordsForSiteTasksReadyTaskInfo | null> | null;
};

export type KeywordsDataGoogleAdsKeywordsForSiteTaskGetResultInfo = {
    /**
     * keyword in a POST array
     */
    keyword?: string | null;
    spell?: string | null;
    /**
     * location code in a POST array
     * if there is no data, the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, the value is null
     */
    language_code?: string | null;
    /**
     * include Google search partners
     * the value you specified when setting the task
     * if true, the results are returned for owned, operated, and syndicated networks across Google and partner sites that host Google search;
     * if false, the results are returned for Google search sites only
     */
    search_partners?: boolean | null;
    /**
     * competition
     * represents the relative level of competition associated with the given keyword in paid SERP only
     * possible values: LOW, MEDIUM, HIGH
     * if competition level is unknown, the value is null;
     * learn more about the metric in this help center article
     */
    competition?: string | null;
    /**
     * competition index
     * the competition index for the query indicating how competitive ad placement is for the keyword
     * can take values from 0 to 100
     * the level of competition from 0 to 100 is determined by the number of ad slots filled divided by the total number of ad slots available
     * if not enough data is available, the value is null;
     * learn more about the metric in this help center article
     */
    competition_index?: number | null;
    /**
     * monthly average search volume rate
     * represents the (approximate) number of searches for the given keyword idea either on google.com or google.com and partners, depending on the user’s targeting
     * if there is no data, the value is null
     */
    search_volume?: number | null;
    /**
     * minimum bid for the ad to be displayed at the top of the first page
     * indicates the value greater than about 20% of the lowest bids for which ads were displayed (based on Google Ads statistics for advertisers)
     * the value may differ depending on the location specified in a POST request
     */
    low_top_of_page_bid?: number | null;
    /**
     * maximum bid for the ad to be displayed at the top of the first page
     * indicates the value greater than about 80% of the lowest bids for which ads were displayed (based on Google Ads statistics for advertisers)
     * the value may differ depending on the location specified in a POST request
     */
    high_top_of_page_bid?: number | null;
    /**
     * cost per click
     * indicates the amount paid for each click on the ad displayed for a given keyword
     */
    cpc?: number | null;
    /**
     * monthly searches
     * represents the (approximate) number of searches on this keyword idea (as available for the past twelve months), targeted to the specified geographic locations
     * if there is no data, the value is null
     */
    monthly_searches?: Array<MonthlySearchesInfo | null> | null;
};

export type KeywordsDataGoogleAdsKeywordsForSiteTaskGetTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataGoogleAdsKeywordsForSiteTaskGetResultInfo | null> | null;
};

export type KeywordsDataGoogleAdsKeywordsForSiteTaskGetResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleAdsKeywordsForSiteTaskGetTaskInfo | null> | null;
};

export type KeywordsDataGoogleAdsKeywordsForSiteLiveRequestInfo = {
    /**
     * domain or page
     * required field
     * the domain name of the target website or the url of the target page;
     * note: to obtain keywords for the target website, use the target_type parameter
     */
    target?: string;
    /**
     * search keywords for site or for url
     * optional field
     * possible values: site, page;
     * default value: page;
     * if set to site, keywords will be provided for the entire site;
     * if set to page, keywords will be provided for the specified webpage
     */
    target_type?: string | null;
    /**
     * full name of search engine location
     * optional field
     * if you do not indicate the location, you will receive worldwide results, i.e., for all available locations;
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * optional field
     * if you do not indicate the location, you will receive worldwide results, i.e., for all available locations;
     * if you use this field, you don’t need to specify location_name or location_coordinate;
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * optional field
     * if you do not indicate the location, you will receive worldwide results, i.e., for all available locations;
     * if you use this field, you don’t need to specify location_name or location_code;
     * location_coordinate parameter should be specified in the “latitude,longitude” format;
     * the data will be provided for the country the specified coordinates belong to;
     * example:
     * 52.6178549,-155.352142
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * optional field
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * optional field
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * include Google search partners
     * optional field
     * if you specify true, the results will be delivered for owned, operated, and syndicated networks across Google and partner sites that host Google search;
     * default value: false – results are returned for Google search sites
     */
    search_partners?: boolean | null;
    /**
     * starting date of the time range
     * optional field
     * date format: "yyyy-mm-dd"
     * minimal value: 4 years from the current date
     * by default, data is returned for the past 12 months;
     * Note: the indicated date cannot be greater than that specified in date_to and/or yesterday’s date;if Status endpoint returns false in the actual_data field, date_from can be set to the month before last and prior;
     * if Status endpoint returns true in the actual_data field, date_from can be set to the last month and prior
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * Note: the indicated date cannot be greater than yesterday’s date;
     * if you don’t specify this field, yesterday’s date will be used by default
     * date format: "yyyy-mm-dd"
     * example:
     * "2022-11-30"
     */
    date_to?: string | null;
    /**
     * include keywords associated with adult content
     * optional field
     * if set to true, adult keywords will be included in the response
     * default value: false
     * note that the API may return no data for such keywords due to Google Ads restrictions
     */
    include_adult_keywords?: boolean | null;
    /**
     * results sorting parameters
     * optional field
     * Use these parameters to sort the results by relevance, search_volume, competition_index, low_top_of_page_bid, or high_top_of_page_bid in descending order
     * default value: relevance
     */
    sort_by?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type KeywordsDataGoogleAdsKeywordsForSiteLiveResultInfo = {
    /**
     * keyword in a POST array
     */
    keyword?: string | null;
    spell?: string | null;
    /**
     * location code in a POST array
     * if there is no data, the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, the value is null
     */
    language_code?: string | null;
    /**
     * include Google search partners
     * the value you specified when setting the task
     * if true, the results are returned for owned, operated, and syndicated networks across Google and partner sites that host Google search;
     * if false, the results are returned for Google search sites only
     */
    search_partners?: boolean | null;
    /**
     * competition
     * represents the relative level of competition associated with the given keyword in paid SERP only
     * possible values: LOW, MEDIUM, HIGH
     * if competition level is unknown, the value is null;
     * learn more about the metric in this help center article
     */
    competition?: string | null;
    /**
     * competition index
     * the competition index for the query indicating how competitive ad placement is for the keyword
     * can take values from 0 to 100
     * the level of competition from 0 to 100 is determined by the number of ad slots filled divided by the total number of ad slots available
     * if not enough data is available, the value is null;
     * learn more about the metric in this help center article
     */
    competition_index?: number | null;
    /**
     * monthly average search volume rate
     * represents the (approximate) number of searches for the given keyword idea either on google.com or google.com and partners, depending on the user’s targeting
     * if there is no data, the value is null
     */
    search_volume?: number | null;
    /**
     * minimum bid for the ad to be displayed at the top of the first page
     * indicates the value greater than about 20% of the lowest bids for which ads were displayed (based on Google Ads statistics for advertisers)
     * the value may differ depending on the location specified in a POST request
     */
    low_top_of_page_bid?: number | null;
    /**
     * maximum bid for the ad to be displayed at the top of the first page
     * indicates the value greater than about 80% of the lowest bids for which ads were displayed (based on Google Ads statistics for advertisers)
     * the value may differ depending on the location specified in a POST request
     */
    high_top_of_page_bid?: number | null;
    /**
     * cost per click
     * indicates the amount paid for each click on the ad displayed for a given keyword
     */
    cpc?: number | null;
    /**
     * monthly searches
     * represents the (approximate) number of searches on this keyword idea (as available for the past twelve months), targeted to the specified geographic locations
     * if there is no data, the value is null
     */
    monthly_searches?: Array<MonthlySearchesInfo | null> | null;
};

export type KeywordsDataGoogleAdsKeywordsForSiteLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataGoogleAdsKeywordsForSiteLiveResultInfo | null> | null;
};

export type KeywordsDataGoogleAdsKeywordsForSiteLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleAdsKeywordsForSiteLiveTaskInfo | null> | null;
};

export type KeywordsDataGoogleAdsKeywordsForKeywordsTaskPostRequestInfo = {
    /**
     * keywords
     * required field
     * The maximum number of keywords you can specify: 20
     * The maximum number of characters for each keyword: 80
     * the keywords you specify will be converted to a lowercase format
     * Note: Google Ads may return no data for certain groups of keywords
     * visit our Help Center to learn more
     * Also note that Google Ads doesn’t allow using certain symbols and characters (e.g., UTF symbols, emojis), so you can’t use them when setting a task;
     * to learn more about which symbols and characters can be used, please refer to this article
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * target website
     * optional field
     * specify a website or URL to get a list of keywords relevant to it;
     * Note: if a website url is specified, you will still get keywords relevant for the entire website
     */
    target?: string | null;
    /**
     * full name of search engine location
     * optional field
     * if you do not indicate the location, you will receive worldwide results, i.e., for all available locations;
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * optional field
     * if you do not indicate the location, you will receive worldwide results, i.e., for all available locations;
     * if you use this field, you don’t need to specify location_name or location_coordinate;
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * optional field
     * if you do not indicate the location, you will receive worldwide results, i.e., for all available locations;
     * if you use this field, you don’t need to specify location_name or location_code;
     * location_coordinate parameter should be specified in the “latitude,longitude” format;
     * the data will be provided for the country the specified coordinates belong to;
     * example:
     * 52.6178549,-155.352142
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * optional field
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * optional field
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * include Google search partners
     * optional field
     * if you specify true, the results will be delivered for owned, operated, and syndicated networks across Google and partner sites that host Google search;
     * default value: false – results are returned for Google search sites
     */
    search_partners?: boolean | null;
    /**
     * starting date of the time range
     * optional field
     * date format: "yyyy-mm-dd"
     * minimal value: 4 years from the current date
     * by default, data is returned for the past 12 months;
     * Note: the indicated date cannot be greater than that specified in date_to and/or yesterday’s date;if Status endpoint returns false in the actual_data field, date_from can be set to the month before last and prior;
     * if Status endpoint returns true in the actual_data field, date_from can be set to the last month and prior
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * Note: the indicated date cannot be greater than yesterday’s date;
     * if you don’t specify this field, yesterday’s date will be used by default
     * date format: "yyyy-mm-dd"
     * example:
     * "2022-11-30"
     */
    date_to?: string | null;
    /**
     * results sorting parameters
     * optional field
     * Use these parameters to sort the results by relevance, search_volume, competition_index, low_top_of_page_bid, or high_top_of_page_bid in descending order
     * default value: relevance
     */
    sort_by?: string | null;
    /**
     * include keywords associated with adult content
     * optional field
     * if set to true, adult keywords will be included in the response
     * default value: false
     * note that the API may return no data for such keywords due to Google Ads restrictions
     */
    include_adult_keywords?: boolean | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type KeywordsDataGoogleAdsKeywordsForKeywordsTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type KeywordsDataGoogleAdsKeywordsForKeywordsTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleAdsKeywordsForKeywordsTaskPostTaskInfo | null> | null;
};

export type KeywordsDataGoogleAdsKeywordsForKeywordsTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the task
     */
    endpoint?: string | null;
};

export type KeywordsDataGoogleAdsKeywordsForKeywordsTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataGoogleAdsKeywordsForKeywordsTasksReadyResultInfo | null> | null;
};

export type KeywordsDataGoogleAdsKeywordsForKeywordsTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleAdsKeywordsForKeywordsTasksReadyTaskInfo | null> | null;
};

export type KeywordsDataGoogleAdsKeywordsForKeywordsTaskGetResultInfo = {
    /**
     * keyword in a POST array
     */
    keyword?: string | null;
    spell?: string | null;
    /**
     * location code in a POST array
     * if there is no data, the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, the value is null
     */
    language_code?: string | null;
    /**
     * include Google search partners
     * the value you specified when setting the task
     * if true, the results are returned for owned, operated, and syndicated networks across Google and partner sites that host Google search;
     * if false, the results are returned for Google search sites only
     */
    search_partners?: boolean | null;
    /**
     * competition
     * represents the relative level of competition associated with the given keyword in paid SERP only
     * possible values: LOW, MEDIUM, HIGH
     * if competition level is unknown, the value is null;
     * learn more about the metric in this help center article
     */
    competition?: string | null;
    /**
     * competition index
     * the competition index for the query indicating how competitive ad placement is for the keyword
     * can take values from 0 to 100
     * the level of competition from 0 to 100 is determined by the number of ad slots filled divided by the total number of ad slots available
     * if not enough data is available, the value is null;
     * learn more about the metric in this help center article
     */
    competition_index?: number | null;
    /**
     * monthly average search volume rate
     * represents the (approximate) number of searches for the given keyword idea either on google.com or google.com and partners, depending on the user’s targeting
     * if there is no data, the value is null
     */
    search_volume?: number | null;
    /**
     * minimum bid for the ad to be displayed at the top of the first page
     * indicates the value greater than about 20% of the lowest bids for which ads were displayed (based on Google Ads statistics for advertisers)
     * the value may differ depending on the location specified in a POST request
     */
    low_top_of_page_bid?: number | null;
    /**
     * maximum bid for the ad to be displayed at the top of the first page
     * indicates the value greater than about 80% of the lowest bids for which ads were displayed (based on Google Ads statistics for advertisers)
     * the value may differ depending on the location specified in a POST request
     */
    high_top_of_page_bid?: number | null;
    /**
     * cost per click
     * indicates the amount paid for each click on the ad displayed for a given keyword
     */
    cpc?: number | null;
    /**
     * monthly searches
     * represents the (approximate) number of searches on this keyword idea (as available for the past twelve months), targeted to the specified geographic locations
     * if there is no data, the value is null
     */
    monthly_searches?: Array<MonthlySearchesInfo | null> | null;
};

export type KeywordsDataGoogleAdsKeywordsForKeywordsTaskGetTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataGoogleAdsKeywordsForKeywordsTaskGetResultInfo | null> | null;
};

export type KeywordsDataGoogleAdsKeywordsForKeywordsTaskGetResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleAdsKeywordsForKeywordsTaskGetTaskInfo | null> | null;
};

export type KeywordsDataGoogleAdsKeywordsForKeywordsLiveRequestInfo = {
    /**
     * keywords
     * required field
     * The maximum number of keywords you can specify: 20
     * The maximum number of characters for each keyword: 80
     * the keywords you specify will be converted to a lowercase format
     * Note: Google Ads may return no data for certain groups of keywords
     * visit our Help Center to learn more
     * Also note that Google Ads doesn’t allow using certain symbols and characters (e.g., UTF symbols, emojis), so you can’t use them when setting a task;
     * to learn more about which symbols and characters can be used, please refer to this article
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of search engine location
     * optional field
     * if you do not indicate the location, you will receive worldwide results, i.e., for all available locations;
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * optional field
     * if you do not indicate the location, you will receive worldwide results, i.e., for all available locations;
     * if you use this field, you don’t need to specify location_name or location_coordinate;
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * optional field
     * if you do not indicate the location, you will receive worldwide results, i.e., for all available locations;
     * if you use this field, you don’t need to specify location_name or location_code;
     * location_coordinate parameter should be specified in the “latitude,longitude” format;
     * the data will be provided for the country the specified coordinates belong to;
     * example:
     * 52.6178549,-155.352142
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * optional field
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * optional field
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * include Google search partners
     * optional field
     * if you specify true, the results will be delivered for owned, operated, and syndicated networks across Google and partner sites that host Google search;
     * default value: false – results are returned for Google search sites
     */
    search_partners?: boolean | null;
    /**
     * starting date of the time range
     * optional field
     * date format: "yyyy-mm-dd"
     * minimal value: 4 years from the current date
     * by default, data is returned for the past 12 months;
     * Note: the indicated date cannot be greater than that specified in date_to and/or yesterday’s date;if Status endpoint returns false in the actual_data field, date_from can be set to the month before last and prior;
     * if Status endpoint returns true in the actual_data field, date_from can be set to the last month and prior
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * Note: the indicated date cannot be greater than yesterday’s date;
     * if you don’t specify this field, yesterday’s date will be used by default
     * date format: "yyyy-mm-dd"
     * example:
     * "2022-11-30"
     */
    date_to?: string | null;
    /**
     * results sorting parameters
     * optional field
     * Use these parameters to sort the results by relevance, search_volume, competition_index, low_top_of_page_bid, or high_top_of_page_bid in descending order
     * default value: relevance
     */
    sort_by?: string | null;
    /**
     * include keywords associated with adult content
     * optional field
     * if set to true, adult keywords will be included in the response
     * default value: false
     * note that the API may return no data for such keywords due to Google Ads restrictions
     */
    include_adult_keywords?: boolean | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type KeywordsDataGoogleAdsKeywordsForKeywordsLiveResultInfo = {
    /**
     * keyword in a POST array
     */
    keyword?: string | null;
    spell?: string | null;
    /**
     * location code in a POST array
     * if there is no data, the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, the value is null
     */
    language_code?: string | null;
    /**
     * include Google search partners
     * the value you specified when setting the task
     * if true, the results are returned for owned, operated, and syndicated networks across Google and partner sites that host Google search;
     * if false, the results are returned for Google search sites only
     */
    search_partners?: boolean | null;
    /**
     * competition
     * represents the relative level of competition associated with the given keyword in paid SERP only
     * possible values: LOW, MEDIUM, HIGH
     * if competition level is unknown, the value is null;
     * learn more about the metric in this help center article
     */
    competition?: string | null;
    /**
     * competition index
     * the competition index for the query indicating how competitive ad placement is for the keyword
     * can take values from 0 to 100
     * the level of competition from 0 to 100 is determined by the number of ad slots filled divided by the total number of ad slots available
     * if not enough data is available, the value is null;
     * learn more about the metric in this help center article
     */
    competition_index?: number | null;
    /**
     * monthly average search volume rate
     * represents the (approximate) number of searches for the given keyword idea either on google.com or google.com and partners, depending on the user’s targeting
     * if there is no data, the value is null
     */
    search_volume?: number | null;
    /**
     * minimum bid for the ad to be displayed at the top of the first page
     * indicates the value greater than about 20% of the lowest bids for which ads were displayed (based on Google Ads statistics for advertisers)
     * the value may differ depending on the location specified in a POST request
     */
    low_top_of_page_bid?: number | null;
    /**
     * maximum bid for the ad to be displayed at the top of the first page
     * indicates the value greater than about 80% of the lowest bids for which ads were displayed (based on Google Ads statistics for advertisers)
     * the value may differ depending on the location specified in a POST request
     */
    high_top_of_page_bid?: number | null;
    /**
     * cost per click
     * indicates the amount paid for each click on the ad displayed for a given keyword
     */
    cpc?: number | null;
    /**
     * monthly searches
     * represents the (approximate) number of searches on this keyword idea (as available for the past twelve months), targeted to the specified geographic locations
     * if there is no data, the value is null
     */
    monthly_searches?: Array<MonthlySearchesInfo | null> | null;
};

export type KeywordsDataGoogleAdsKeywordsForKeywordsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataGoogleAdsKeywordsForKeywordsLiveResultInfo | null> | null;
};

export type KeywordsDataGoogleAdsKeywordsForKeywordsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleAdsKeywordsForKeywordsLiveTaskInfo | null> | null;
};

export type KeywordsDataGoogleAdsAdTrafficByKeywordsTaskPostRequestInfo = {
    /**
     * keywords
     * required field
     * The maximum number of keywords you can specify: 1000
     * The maximum number of characters for each keyword: 80
     * The maximum number of words for each keyword phrase: 10
     * the keywords you specify will be converted to a lowercase format
     * Note #1: Google Ads may return no data for certain groups of keywords;
     * Note #2: Google Ads provides combined search volume values for groups of similar keywords
     * to obtain search volume for similar keywords, we recommend submitting such keywords in separate requests;
     * Note #3: Google Ads doesn’t allow using certain symbols and characters (e.g., UTF symbols, emojis), so you can’t use them when setting a task;
     * to learn more about which symbols and characters can be used, please refer to this article
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * the maximum custom bid
     * required field
     * the collected data will be based on this value
     * it stands for the price you are willing to pay for an ad; the higher value you specify here, the higher values you will get in the returned metrics
     * learn more in this help center article
     */
    bid?: number;
    /**
     * keywords match-type
     * required field
     * can take the following values: exact, broad, phrase
     */
    match?: string;
    /**
     * include Google search partners
     * optional field
     * if you specify true, the results will be delivered for owned, operated, and syndicated networks across Google and partner sites that host Google search;
     * default value: false – results are returned for Google search sites
     */
    search_partners?: boolean | null;
    /**
     * full name of search engine location
     * optional field
     * if you do not indicate the location, you will receive worldwide results, i.e., for all available locations;
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * optional field
     * if you do not indicate the location, you will receive worldwide results, i.e., for all available locations;
     * if you use this field, you don’t need to specify location_name or location_coordinate;
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * optional field
     * if you do not indicate the location, you will receive worldwide results, i.e., for all available locations;
     * if you use this field, you don’t need to specify location_name or location_code;
     * location_coordinate parameter should be specified in the “latitude,longitude” format;
     * the data will be provided for the country the specified coordinates belong to;
     * example:
     * 52.6178549,-155.352142
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * optional field
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * optional field
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * starting date of the forecasting time range
     * required field if you specify date_to
     * if you indicate date_from and date_to, you don’t need to specify date_interval
     * minimum value is tomorrow’s date
     * the value you specify in date_from shouldn’t be further than date_to
     * date format: "yyyy-mm-dd"
     * example:
     * "2021-10-30"if Status endpoint returns false in the actual_data field, date_from can be set to the month before last and prior;
     * if Status endpoint returns true in the actual_data field, date_from can be set to the last month and prior
     */
    date_from?: string | null;
    /**
     * ending date of the forecasting time range
     * required field if you specify date_from
     * if you indicate date_from and date_to, you don’t need to specify date_interval
     * minimum value is date_from +1 day
     * maximum value is current day and month of the next year
     * date format: "yyyy-mm-dd"
     * example:
     * "2022-10-30"
     */
    date_to?: string | null;
    /**
     * forecasting date interval
     * optional field
     * if you specify date_interval, you don’t need to indicate date_from and date_to
     * possible values: next_week, next_month, next_quarter
     * default value: next_month
     */
    date_interval?: string | null;
    /**
     * results sorting parameters
     * optional field
     * Use these parameters to sort the results by relevance, impressions, ctr, average_cpc, cost, or clicks in the descending order
     * default value: relevance
     */
    sort_by?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type KeywordsDataGoogleAdsAdTrafficByKeywordsTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type KeywordsDataGoogleAdsAdTrafficByKeywordsTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleAdsAdTrafficByKeywordsTaskPostTaskInfo | null> | null;
};

export type KeywordsDataGoogleAdsAdTrafficByKeywordsTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the task
     */
    endpoint?: string | null;
};

export type KeywordsDataGoogleAdsAdTrafficByKeywordsTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataGoogleAdsAdTrafficByKeywordsTasksReadyResultInfo | null> | null;
};

export type KeywordsDataGoogleAdsAdTrafficByKeywordsTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleAdsAdTrafficByKeywordsTasksReadyTaskInfo | null> | null;
};

export type KeywordsDataGoogleAdsAdTrafficByKeywordsTaskGetResultInfo = {
    /**
     * keyword in a POST array
     * metrics are provided for all the keywords specified in the POST array
     */
    keyword?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * forecasting date interval in a POST array
     */
    date_interval?: string | null;
    /**
     * include Google search partners
     * the value you specified when setting the task
     * if true, the results are returned for owned, operated, and syndicated networks across Google and partner sites that host Google search;
     * if false, the results are returned for Google search sites only
     */
    search_partners?: boolean | null;
    /**
     * the maximum custom bid
     * the bid you have specified when setting the task
     * represents the price you are willing to pay for an ad
     * the higher value you have specified, the higher metrics and cost you receive in response
     * learn more in this help center article
     */
    bid?: number | null;
    /**
     * keywords match-type
     * can take the following values: exact, broad, phrase
     */
    match?: string | null;
    /**
     * projected number of ad impressions
     * number of impressions an ad is projected to get within the specified time period
     * if there is no data, then the value is null
     * learn more about impressions in this help center article
     */
    impressions?: number | null;
    /**
     * projected clickthrough rate (CTR) of the advertisement
     * number of clicks an ad is projected to receive divided by the number of ad impressions; the CTR is projected for the specified time period
     * if there is no data, then the value is null
     */
    ctr?: number | null;
    /**
     * the average cost-per-click value
     * represents the cost-per-click (USD) estimated for a keyword based on the specified time period and historical data;
     * if there is no data, then the value is null
     */
    average_cpc?: number | null;
    /**
     * charge for an ad
     * amount that will be charged for running an ad within the specified time period
     * if there is no data, then the value is null
     */
    cost?: number | null;
    /**
     * number of clicks on an ad
     * number of clicks an ad is projected to get within the specified time period
     * if there is no data, then the value is null
     */
    clicks?: number | null;
};

export type KeywordsDataGoogleAdsAdTrafficByKeywordsTaskGetTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataGoogleAdsAdTrafficByKeywordsTaskGetResultInfo | null> | null;
};

export type KeywordsDataGoogleAdsAdTrafficByKeywordsTaskGetResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleAdsAdTrafficByKeywordsTaskGetTaskInfo | null> | null;
};

export type KeywordsDataGoogleAdsAdTrafficByKeywordsLiveRequestInfo = {
    /**
     * keywords
     * required field
     * The maximum number of keywords you can specify: 1000
     * The maximum number of characters for each keyword: 80
     * The maximum number of words for each keyword phrase: 10
     * the keywords you specify will be converted to a lowercase format
     * Note: Google Ads may return no data for certain groups of keywords
     * visit our Help Center to learn more
     * Also note that Google Ads doesn’t allow using certain symbols and characters (e.g., UTF symbols, emojis), so you can’t use them when setting a task;
     * to learn more about which symbols and characters can be used, please refer to this article
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * the maximum custom bid
     * required field
     * the collected data will be based on this value
     * it stands for the price you are willing to pay for an ad; the higher value you specify here, the higher values you will get in the returned metrics
     * learn more in this help center article
     */
    bid?: number;
    /**
     * keywords match-type
     * required field
     * can take the following values: exact, broad, phrase
     */
    match?: string;
    /**
     * include Google search partners
     * optional field
     * if you specify true, the results will be delivered for owned, operated, and syndicated networks across Google and partner sites that host Google search;
     * default value: false – results are returned for Google search sites
     */
    search_partners?: boolean | null;
    /**
     * full name of search engine location
     * optional field
     * if you do not indicate the location, you will receive worldwide results, i.e., for all available locations;
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * optional field
     * if you do not indicate the location, you will receive worldwide results, i.e., for all available locations;
     * if you use this field, you don’t need to specify location_name or location_coordinate;
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * optional field
     * if you do not indicate the location, you will receive worldwide results, i.e., for all available locations;
     * if you use this field, you don’t need to specify location_name or location_code;
     * location_coordinate parameter should be specified in the “latitude,longitude” format;
     * the data will be provided for the country the specified coordinates belong to;
     * example:
     * 52.6178549,-155.352142
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * optional field
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * optional field
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_ads/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * starting date of the forecasting time range
     * required field if you specify date_to
     * if you indicate date_from and date_to, you don’t need to specify date_interval
     * minimum value is tomorrow’s date
     * the value you specify in date_from shouldn’t be further than date_to
     * date format: "yyyy-mm-dd"
     * example:
     * "2021-10-30"if Status endpoint returns false in the actual_data field, date_from can be set to the month before last and prior;
     * if Status endpoint returns true in the actual_data field, date_from can be set to the last month and prior
     */
    date_from?: string | null;
    /**
     * ending date of the forecasting time range
     * required field if you specify date_from
     * if you indicate date_from and date_to, you don’t need to specify date_interval
     * minimum value is date_from +1 day
     * maximum value is current day and month of the next year
     * date format: "yyyy-mm-dd"
     * example:
     * "2022-10-30"
     */
    date_to?: string | null;
    /**
     * forecasting date interval
     * optional field
     * if you specify date_interval, you don’t need to indicate date_from and date_to
     * possible values: next_week, next_month, next_quarter
     * default value: next_month
     */
    date_interval?: string | null;
    /**
     * results sorting parameters
     * optional field
     * Use these parameters to sort the results by relevance, impressions, ctr, average_cpc, cost, or clicks in the descending order
     * default value: relevance
     */
    sort_by?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type KeywordsDataGoogleAdsAdTrafficByKeywordsLiveResultInfo = {
    /**
     * keyword in a POST array
     */
    keyword?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * forecasting date interval in a POST array
     */
    date_interval?: string | null;
    /**
     * include Google search partners
     * the value you specified when setting the task
     * if true, the results are returned for owned, operated, and syndicated networks across Google and partner sites that host Google search;
     * if false, the results are returned for Google search sites only
     */
    search_partners?: boolean | null;
    /**
     * the maximum custom bid
     * the bid you have specified when setting the task
     * represents the price you are willing to pay for an ad
     * the higher value you have specified, the higher metrics and cost you receive in response
     * learn more in this help center article
     */
    bid?: number | null;
    /**
     * keywords match-type
     * can take the following values: exact, broad, phrase
     */
    match?: string | null;
    /**
     * projected number of ad impressions
     * number of impressions an ad is projected to get within the specified time period
     * if there is no data, then the value is null
     * learn more about impressions in this help center article
     */
    impressions?: number | null;
    /**
     * projected click through rate (CTR) of the advertisement
     * number of clicks an ad is projected to receive divided by the number of ad impressions; the CTR is projected for the specified time period
     * if there is no data, then the value is null
     */
    ctr?: number | null;
    /**
     * the average cost-per-click value
     * represents the cost-per-click (USD) estimated for a keyword based on the specified time period and historical data;
     * if there is no data, then the value is null
     */
    average_cpc?: number | null;
    /**
     * charge for an ad
     * amount that will be charged for running an ad within the specified time period
     * if there is no data, then the value is null
     */
    cost?: number | null;
    /**
     * number of clicks on an ad
     * number of clicks an ad is projected to get within the specified time period
     * if there is no data, then the value is null
     */
    clicks?: number | null;
};

export type KeywordsDataGoogleAdsAdTrafficByKeywordsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataGoogleAdsAdTrafficByKeywordsLiveResultInfo | null> | null;
};

export type KeywordsDataGoogleAdsAdTrafficByKeywordsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleAdsAdTrafficByKeywordsLiveTaskInfo | null> | null;
};

export type KeywordsDataGoogleTrendsLocationsResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the code of the superordinate location
     * example:
     * "location_code": 9041134,
     * "location_name": "Vienna International Airport,Lower Austria,Austria",
     * "location_code_parent": 20044
     * where location_code_parent corresponds to:
     * "location_code": 20044,
     * "location_name": "Lower Austria,Austria"
     */
    location_code_parent?: number | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     * possible values according to Google’s target types
     */
    location_type?: string | null;
    /**
     * google trends location identifier
     * you can use this field for matching obtained results with the location_code parameter specified in the request
     */
    geo_id?: string | null;
};

export type KeywordsDataGoogleTrendsLocationsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataGoogleTrendsLocationsResultInfo | null> | null;
};

export type KeywordsDataGoogleTrendsLocationsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleTrendsLocationsTaskInfo | null> | null;
};

export type KeywordsDataGoogleTrendsLocationsCountryResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the code of the superordinate location
     * example:
     * "location_code": 9041134,
     * "location_name": "Vienna International Airport,Lower Austria,Austria",
     * "location_code_parent": 20044
     * where location_code_parent corresponds to:
     * "location_code": 20044,
     * "location_name": "Lower Austria,Austria"
     */
    location_code_parent?: number | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     * possible values according to Google’s target types
     */
    location_type?: string | null;
    /**
     * google trends location identifier
     * you can use this field for matching obtained results with the location_code parameter specified in the request
     */
    geo_id?: string | null;
};

export type KeywordsDataGoogleTrendsLocationsCountryTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataGoogleTrendsLocationsCountryResultInfo | null> | null;
};

export type KeywordsDataGoogleTrendsLocationsCountryResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleTrendsLocationsCountryTaskInfo | null> | null;
};

export type KeywordsDataGoogleTrendsLanguagesResultInfo = {
    /**
     * language name
     */
    language_name?: string | null;
    /**
     * language code according to ISO 639-1
     */
    language_code?: string | null;
};

export type KeywordsDataGoogleTrendsLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataGoogleTrendsLanguagesResultInfo | null> | null;
};

export type KeywordsDataGoogleTrendsLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleTrendsLanguagesTaskInfo | null> | null;
};

export type KeywordsDataGoogleTrendsCategoriesResultInfo = {
    /**
     * unique google trends category identifier
     */
    category_code?: number | null;
    /**
     * name of the google trends category
     */
    category_name?: string | null;
    /**
     * the code of the superordinate category
     * example:
     * "category_code": 1100,
     * "category_name": "Superhero Films",
     * "category_code_parent": 1097
     * where category_code_parent corresponds to:
     * "category_code": 1097,
     * "category_name": "Action & Adventure Films"
     */
    category_code_parent?: number | null;
};

export type KeywordsDataGoogleTrendsCategoriesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataGoogleTrendsCategoriesResultInfo | null> | null;
};

export type KeywordsDataGoogleTrendsCategoriesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleTrendsCategoriesTaskInfo | null> | null;
};

export type KeywordsDataGoogleTrendsExploreTaskPostRequestInfo = {
    /**
     * keywords
     * required field
     * the maximum number of keywords you can specify: 5
     * the maximum number of characters you can specify in a keyword: 100
     * the minimum number of characters must be greater than 1
     * comma characters (,) in the specified keywords will be unset and ignored
     * Note: keywords cannot consist of a combination of the following characters: < > | \ " - + = ~ ! : * ( ) [ ] { }
     * Note: to obtain google_trends_topics_list and google_trends_queries_list items, specify no more than 1 keyword
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of search engine location
     * optional field
     * if you don’t use this field, you will recieve global results
     * if you use this field, you don’t need to specify location_code
     * you can use this field as an array to set several locations, each corresponding to a specific keyword – learn more;
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_trends/locations
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * optional field
     * if you don’t use this field, you will recieve global results
     * if you use this field, you don’t need to specify location_name
     * you can use this field as an array to set several locations, each corresponding to a specific keyword – learn more;
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_trends/locations
     * example:
     * 2840
     */
    location_code?: string | null;
    /**
     * full name of search engine language
     * optional field
     * default value: English
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_trends/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * optional field
     * default value: en
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_trends/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * google trends search category
     * optional field
     * if you don’t specify this field, the 0 value will be applied by default and the search will be carried out across all available categories
     * you can receive the list of available categories with their category_code by making a separate request to the https://api.dataforseo.com/v3/keywords_data/google_trends/categories
     */
    category_code?: number | null;
    /**
     * starting date of the time range
     * optional field
     * if you don’t specify this field, the current day and month of the preceding year will be used by default
     * minimal value for the web type: 2004-01-01
     * minimal value for other types: 2008-01-01
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * if you don’t specify this field, the today’s date will be used by default
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    date_to?: string | null;
    /**
     * preset time ranges
     * optional field
     * if you specify date_from or date_to parameters, this field will be ignored when setting a task
     * possible values for all type parameters:
     * past_hour, past_4_hours, past_day, past_7_days, past_30_days, past_90_days, past_12_months, past_5_years
     * possible values for web only:
     * 2004_present
     * possible values for news, youtube, images, froogle:
     * 2008_present
     */
    time_range?: string | null;
    /**
     * types of items returned
     * optional field
     * to speed up the execution of the request, specify one item at a time;
     * possible values:
     * "google_trends_graph", "google_trends_map", "google_trends_topics_list","google_trends_queries_list"
     * default value:
     * "google_trends_graph"
     * Note: to obtain google_trends_topics_list and google_trends_queries_list items, specify no more than 1 keyword in the keywords field
     */
    item_types?: Array<string> | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type KeywordsDataGoogleTrendsExploreTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type KeywordsDataGoogleTrendsExploreTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleTrendsExploreTaskPostTaskInfo | null> | null;
};

export type KeywordsDataGoogleTrendsExploreTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the task
     */
    endpoint?: string | null;
};

export type KeywordsDataGoogleTrendsExploreTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataGoogleTrendsExploreTasksReadyResultInfo | null> | null;
};

export type KeywordsDataGoogleTrendsExploreTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleTrendsExploreTasksReadyTaskInfo | null> | null;
};

export type TrendsGraphDataInfo = {
    /**
     * start date of the corresponding time range
     * in the UTC format: “yyyy-mm-dd”
     */
    date_from?: string | null;
    /**
     * end date of the corresponding time range
     * in the UTC format: “yyyy-mm-dd”
     */
    date_to?: string | null;
    /**
     * a point in time in the Unix time format
     */
    timestamp?: number | null;
    /**
     * indicates whether the data is unavailable
     * if true the data on the graph in the Google Trends interface is missing and thus labelled with a dotted line
     */
    missing_data?: boolean | null;
    /**
     * relative keyword popularity rate at a specific timestamp
     * represents the keyword popularity rate over the given time range
     * if you specify more than one keyword, the values will be averaged to the highest value across all specified keywords
     * a value of 100 is the peak popularity for the term. A value of 50 means that the term is half as popular. A score of 0 means there was not enough data for this term
     */
    values?: Array<number | null> | null;
};

export type GoogleTrendsGoogleTrendsGraphElementItem = (BaseKeywordDataGoogleTrendsItem | null) & {
    /**
     * Google Trends data for the specified parameters
     */
    data?: Array<TrendsGraphDataInfo | null> | null;
    /**
     * keyword popularity values averaged over the whole time range
     */
    averages?: Array<number | null>;
};

export type TrendsMapDataInfo = {
    /**
     * Google Trends location identifier
     * you can use this field for matching obtained results with location parameters specified in the request
     * example:
     * US-NY
     */
    geo_id?: string | null;
    /**
     * Google Trends location name
     * you can use this field for matching obtained results with location parameters specified in the request
     */
    geo_name?: string | null;
    /**
     * relative keyword popularity rate in a given location
     * represents the location-specific keyword popularity rate over the given time range
     * if you specify more than one keyword, the values will be averaged to the highest value across all specified keywords
     * a value of 100 is the peak popularity for the term
     * a value of 50 means that the term is half as popular
     * a value of 0 means there was not enough data for this term
     */
    values?: Array<number | null> | null;
    /**
     * max value among comparable terms
     * represents the maximum value if you specified more than two keywords in a POST array
     * if you specified only one keyword, the value will be null
     */
    max_value_index?: number | null;
};

export type GoogleTrendsGoogleTrendsMapElementItem = (BaseKeywordDataGoogleTrendsItem | null) & {
    /**
     * Google Trends data from the corresponding item
     */
    data?: Array<TrendsMapDataInfo | null> | null;
};

export type ListDataInfo = {
    /**
     * the most popular related topics
     * represents the list of the most popular related topics
     */
    top?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * emerging related topics
     * represents the list of related topics with the biggest increase in search frequency since the last time period
     */
    rising?: Array<{
        [key: string]: unknown;
    } | null> | null;
};

export type GoogleTrendsGoogleTrendsQueriesListElementItem = (BaseKeywordDataGoogleTrendsItem | null) & {
    /**
     * Google Trends data from the corresponding item
     */
    data?: ListDataInfo | null;
};

export type GoogleTrendsGoogleTrendsTopicsListElementItem = (BaseKeywordDataGoogleTrendsItem | null) & {
    /**
     * Google Trends data from the corresponding item
     */
    data?: ListDataInfo | null;
};

export type KeywordsDataGoogleTrendsExploreTaskGetResultInfo = {
    /**
     * keywords in a POST array
     */
    keywords?: Array<string | null> | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * direct URL to the Google Trends results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items on the Google Trends page
     */
    items?: Array<BaseKeywordDataGoogleTrendsItem | null> | null;
};

export type KeywordsDataGoogleTrendsExploreTaskGetTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataGoogleTrendsExploreTaskGetResultInfo | null> | null;
};

export type KeywordsDataGoogleTrendsExploreTaskGetResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleTrendsExploreTaskGetTaskInfo | null> | null;
};

export type KeywordsDataGoogleTrendsExploreLiveRequestInfo = {
    /**
     * keywords
     * required field
     * the maximum number of keywords you can specify: 5
     * the maximum number of characters you can specify in a keyword: 100
     * the minimum number of characters must be greater than 1
     * comma characters (,) in the specified keywords will be unset and ignored
     * Note: keywords cannot consist of a combination of the following characters: < > | \ " - + = ~ ! : * ( ) [ ] { }
     * Note: to obtain google_trends_topics_list and google_trends_queries_list items, specify no more than 1 keyword
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of search engine location
     * optional field
     * if you don’t use this field, you will recieve global results
     * if you use this field, you don’t need to specify location_code
     * you can use this field as an array to set several locations, each corresponding to a specific keyword – learn more;
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_trends/locations
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * optional field
     * if you don’t use this field, you will recieve global results
     * if you use this field, you don’t need to specify location_name
     * you can use this field as an array to set several locations, each corresponding to a specific keyword – learn more;
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_trends/locations
     * example:
     * 2840
     */
    location_code?: string | null;
    /**
     * full name of search engine language
     * optional field
     * default value: English
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_trends/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * optional field
     * default value: en
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/google_trends/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * google trends search category
     * optional field
     * if you don’t specify this field, the 0 value will be applied by default and the search will be carried out across all available categories
     * you can receive the list of available categories with their category_code by making a separate request to the https://api.dataforseo.com/v3/keywords_data/google_trends/categories
     */
    category_code?: number | null;
    /**
     * starting date of the time range
     * optional field
     * if you don’t specify this field, the current day and month of the preceding year will be used by default
     * minimal value for the web type: 2004-01-01
     * minimal value for other types: 2008-01-01
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * if you don’t specify this field, the today’s date will be used by default
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    date_to?: string | null;
    /**
     * preset time ranges
     * optional field
     * if you specify date_from or date_to parameters, this field will be ignored when setting a task
     * possible values for all type parameters:
     * past_hour, past_4_hours, past_day, past_7_days, past_30_days, past_90_days, past_12_months, past_5_years
     * possible values for web only:
     * 2004_present
     * possible values for news, youtube, images, froogle:
     * 2008_present
     */
    time_range?: string | null;
    /**
     * types of items returned
     * optional field
     * to speed up the execution of the request, specify one item at a time;
     * possible values:
     * "google_trends_graph", "google_trends_map", "google_trends_topics_list","google_trends_queries_list"
     * default value:
     * "google_trends_graph"
     * Note: to obtain google_trends_topics_list and google_trends_queries_list items, specify no more than 1 keyword in the keywords field
     */
    item_types?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type KeywordsDataGoogleTrendsExploreLiveResultInfo = {
    /**
     * keywords in a POST array
     */
    keywords?: Array<string | null> | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * direct URL to the Google Trends results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items on the Google Trends page
     */
    items?: Array<BaseKeywordDataGoogleTrendsItem | null> | null;
};

export type KeywordsDataGoogleTrendsExploreLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataGoogleTrendsExploreLiveResultInfo | null> | null;
};

export type KeywordsDataGoogleTrendsExploreLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataGoogleTrendsExploreLiveTaskInfo | null> | null;
};

export type KeywordsDataDataforseoTrendsLocationsResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the code of the superordinate location
     * example:
     * "location_code": 9041134,
     * "location_name": "Vienna International Airport,Lower Austria,Austria",
     * "location_code_parent": 20044
     * where location_code_parent corresponds to:
     * "location_code": 20044,
     * "location_name": "Lower Austria,Austria"
     */
    location_code_parent?: number | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     * possible values according to Google’s target types
     */
    location_type?: string | null;
    /**
     * DataForSEO trends location identifier
     * you can use this field for matching obtained results with the location_code parameter specified in the request
     */
    geo_id?: string | null;
};

export type KeywordsDataDataforseoTrendsLocationsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataDataforseoTrendsLocationsResultInfo | null> | null;
};

export type KeywordsDataDataforseoTrendsLocationsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataDataforseoTrendsLocationsTaskInfo | null> | null;
};

export type KeywordsDataDataforseoTrendsLocationsCountryResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the code of the superordinate location
     * example:
     * "location_code": 9041134,
     * "location_name": "Vienna International Airport,Lower Austria,Austria",
     * "location_code_parent": 20044
     * where location_code_parent corresponds to:
     * "location_code": 20044,
     * "location_name": "Lower Austria,Austria"
     */
    location_code_parent?: number | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     * possible values according to Google’s target types
     */
    location_type?: string | null;
    /**
     * DataForSEO trends location identifier
     * you can use this field for matching obtained results with the location_code parameter specified in the request
     */
    geo_id?: string | null;
};

export type KeywordsDataDataforseoTrendsLocationsCountryTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataDataforseoTrendsLocationsCountryResultInfo | null> | null;
};

export type KeywordsDataDataforseoTrendsLocationsCountryResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataDataforseoTrendsLocationsCountryTaskInfo | null> | null;
};

export type KeywordsDataDataforseoTrendsExploreLiveRequestInfo = {
    /**
     * keywords
     * required field
     * the maximum number of keywords you can specify: 5
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of search engine location
     * optional field
     * if you don’t use this field, you will recieve global results
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/dataforseo_trends/locations
     * note that the data will be provided for the country the specified location_name belongs to;
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * optional field
     * if you don’t use this field, you will recieve global results
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/dataforseo_trends/locations
     * note that the data will be provided for the country the specified location_code belongs to;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * starting date of the time range
     * optional field
     * if you don’t specify this field, the current day and month of the preceding year will be used by default
     * minimal value for the web type: 2004-01-01
     * minimal value for other types: 2008-01-01
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * if you don’t specify this field, the today’s date will be used by default
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    date_to?: string | null;
    /**
     * preset time ranges
     * optional field
     * if you specify date_from or date_to parameters, this field will be ignored when setting a task
     * possible values for all type parameters:
     * past_4_hours, past_day, past_7_days, past_30_days, past_90_days, past_12_months, past_5_years
     */
    time_range?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoTrendsGraphDataTrendsGraphDataInfo = {
    /**
     * start date of the corresponding time range
     * in the UTC format: “yyyy-mm-dd”
     */
    date_from?: string | null;
    /**
     * end date of the corresponding time range
     * in the UTC format: “yyyy-mm-dd”
     */
    date_to?: string | null;
    /**
     * a point in time in the Unix time format
     */
    timestamp?: number | null;
    /**
     * relative keyword popularity rate at a specific timestamp
     * represents the keyword popularity rate over the given time range
     * if you specify more than one keyword, the values will be averaged to the highest value across all specified keywords
     * a value of 100 is the peak popularity for the term. A value of 50 means that the term is half as popular. A score of 0 means there was not enough data for this term
     */
    values?: Array<number | null> | null;
};

export type DataforseoTrendsDataforseoTrendsGraphElementItem = (BaseKeywordDataDataforseoTrendsItem | null) & {
    /**
     * DataForSEO Trends data for the specified parameters
     */
    data?: Array<DataforseoTrendsGraphDataTrendsGraphDataInfo | null> | null;
    /**
     * keyword popularity values averaged over the whole time range
     */
    averages?: Array<number | null> | null;
};

export type KeywordsDataDataforseoTrendsExploreLiveResultInfo = {
    /**
     * keywords in a POST array
     */
    keywords?: Array<string | null> | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains keyword popularity and related data
     */
    items?: Array<DataforseoTrendsDataforseoTrendsGraphElementItem | null> | null;
};

export type KeywordsDataDataforseoTrendsExploreLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataDataforseoTrendsExploreLiveResultInfo | null> | null;
};

export type KeywordsDataDataforseoTrendsExploreLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataDataforseoTrendsExploreLiveTaskInfo | null> | null;
};

export type KeywordsDataDataforseoTrendsSubregionInterestsLiveRequestInfo = {
    /**
     * keywords
     * required field
     * the maximum number of keywords you can specify: 5
     * avoid symbols and special characters (e.g., UTF symbols, emojis);
     * specifying non-Latin characters, you’ll get data for the countries where they are used
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of search engine location
     * optional field
     * if you don’t use this field, you will recieve global results
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/dataforseo_trends/locations
     * note that the data will be provided for the country the specified location_name belongs to;
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * optional field
     * if you don’t use this field, you will recieve global results
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/dataforseo_trends/locations
     * note that the data will be provided for the country the specified location_code belongs to;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * starting date of the time range
     * optional field
     * if you don’t specify this field, the current day and month of the preceding year will be used by default
     * minimal value for the web type: 2004-01-01
     * minimal value for other types: 2008-01-01
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * if you don’t specify this field, the today’s date will be used by default
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    date_to?: string | null;
    /**
     * preset time ranges
     * optional field
     * if you specify date_from or date_to parameters, this field will be ignored when setting a task
     * possible values for all type parameters:
     * past_4_hours, past_day, past_7_days, past_30_days, past_90_days, past_12_months, past_5_years
     */
    time_range?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DataforseoTrendsinterestsValuesInfo = {
    /**
     * location identifier
     * you can use this field for matching obtained results with location parameters specified in the request
     * see the full list of available locations with their geo_id here or by making a separate request to https://api.dataforseo.com/v3/keywords_data/dataforseo_trends/locations
     * example:
     * US-NY
     */
    geo_id?: string | null;
    /**
     * location name
     * you can use this field for matching obtained results with location parameters specified in the request
     * see the full list of available locations with their geo_name here or by making a separate request to https://api.dataforseo.com/v3/keywords_data/dataforseo_trends/locations
     * example:
     * Andorra
     */
    geo_name?: string | null;
    /**
     * relative keyword popularity rate in a given location
     * represents location-specific keyword popularity rate over the specified time range;
     * using this value you can understand how popular a keyword is in one location compared to another location;
     * calculation: we determine the highest popularity value for the relevant keyword across all locations, and then express all other values as a percentage of that highest value (100);
     * a value of 100 is the highest popularity for the term
     * a value of 50 means that the term is half as popular
     * a value of 0 means there was not enough data for this term
     */
    value?: number | null;
};

export type DataforseoTrendsinterestsInfo = {
    /**
     * relevant keyword
     * the data included in the values element is based on this keyword
     */
    keyword?: string | null;
    /**
     * contains data on relative keyword popularity by country or region
     */
    values?: Array<DataforseoTrendsinterestsValuesInfo | null> | null;
};

export type AbsoluteItems = {
    /**
     * location identifier
     * you can use this field for matching obtained results with location parameters specified in the request
     * see the full list of available locations with their geo_id here or by making a separate request to https://api.dataforseo.com/v3/keywords_data/dataforseo_trends/locations
     * example:
     * US-NY
     */
    geo_id?: string | null;
    /**
     * location name
     * you can use this field for matching obtained results with location parameters specified in the request
     * see the full list of available locations with their geo_name here or by making a separate request to https://api.dataforseo.com/v3/keywords_data/dataforseo_trends/locations
     * example:
     * Andorra
     */
    geo_name?: string | null;
    /**
     * keyword popularity rates within a given location
     * represents location-specific keyword popularity rate over the specified time range;
     * using these values, you can understand which of the specified keywords is more popular in the related location;
     * the first value in the array is provided for the first term from the keywords array, the second value is provided for the second keyword, and so on;
     * calculation: we determine the highest popularity value across all specified keywords within a given location, and then express the popularity values of each keyword as a percentage of the highest value (100);
     * a value of 100 is the peak popularity for the term
     * a value of 50 means that the term is half as popular
     * a value of 0 means there was not enough data for this term
     */
    values?: Array<string | null> | null;
};

export type InterestsComparison = {
    /**
     * contains keyword popularity and related data
     */
    items?: Array<AbsoluteItems | null> | null;
    /**
     * keyword popularity rates across all locations
     * values in this array represent percentages relative to the maximum value across all locations
     */
    absolute_items?: Array<AbsoluteItems | null> | null;
};

export type DataforseoTrendsSubregionInterestsElementItem = (BaseKeywordDataDataforseoTrendsItem | null) & {
    /**
     * subregional keyword popuarity data for each specified term
     */
    interests?: Array<DataforseoTrendsinterestsInfo | null> | null;
    /**
     * comparison of data on subregional keyword popularity for the specified parameters
     * if you specified a single keyword, the value will be null
     */
    interests_comparison?: InterestsComparison | null;
};

export type KeywordsDataDataforseoTrendsSubregionInterestsLiveResultInfo = {
    /**
     * keywords in a POST array
     */
    keywords?: Array<string | null> | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * keyword popularity values per location
     * values in this array represent percentages relative to the maximum value within each region
     */
    items?: Array<DataforseoTrendsSubregionInterestsElementItem | null> | null;
};

export type KeywordsDataDataforseoTrendsSubregionInterestsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataDataforseoTrendsSubregionInterestsLiveResultInfo | null> | null;
};

export type KeywordsDataDataforseoTrendsSubregionInterestsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataDataforseoTrendsSubregionInterestsLiveTaskInfo | null> | null;
};

export type KeywordsDataDataforseoTrendsDemographyLiveRequestInfo = {
    /**
     * keywords
     * required field
     * the maximum number of keywords you can specify: 5
     * avoid symbols and special characters (e.g., UTF symbols, emojis);
     * specifying non-Latin characters, you’ll get data for the countries where they are used
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of search engine location
     * optional field
     * if you don’t use this field, you will recieve global results
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/dataforseo_trends/locations
     * note that the data will be provided for the country the specified location_name belongs to;
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * optional field
     * if you don’t use this field, you will recieve global results
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/dataforseo_trends/locations
     * note that the data will be provided for the country the specified location_code belongs to;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * starting date of the time range
     * optional field
     * if you don’t specify this field, the current day and month of the preceding year will be used by default
     * minimal value for the web type: 2004-01-01
     * minimal value for other types: 2008-01-01
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * if you don’t specify this field, the today’s date will be used by default
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    date_to?: string | null;
    /**
     * preset time ranges
     * optional field
     * if you specify date_from or date_to parameters, this field will be ignored when setting a task
     * possible values for all type parameters:
     * past_4_hours, past_day, past_7_days, past_30_days, past_90_days, past_12_months, past_5_years
     */
    time_range?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DemographyItemValueInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * keyword popularity rate within the specified age range
     * using this value you can understand how popular a keyword is within each age range;
     * calculation: we determine the highest popularity value for the relevant keyword across all age groups, and then express all other values as a percentage of that highest value (100);
     * a value of 100 is the highest popularity for the term
     * a value of 0 means there was not enough data for this term
     */
    value?: number | null;
};

export type DataforseoTrendsDataInfo = {
    /**
     * relevant keyword for which demographic data is provided
     */
    keyword?: string | null;
    /**
     * contains age range and corresponding keyword popularity values
     */
    values?: Array<DemographyItemValueInfo | null> | null;
};

export type Demography = {
    /**
     * distribution of keyword popularity by age
     */
    age?: Array<DataforseoTrendsDataInfo | null> | null;
    /**
     * distribution of keyword popularity by gender
     */
    gender?: Array<DataforseoTrendsDataInfo | null> | null;
};

export type DataforseoTrendsDemographyElementItem = (BaseKeywordDataDataforseoTrendsItem | null) & {
    /**
     * demographic breakdown of keyword popularity data per each specified term
     * conains keyword popularity data by age and gender
     */
    demography?: Demography | null;
    /**
     * comparison of demographic data on keyword popularity for the specified parameters
     * conains keyword popularity data by age and gender
     * if you specified a single keyword, the value will be null
     */
    demography_comparison?: DemographyComparisonInfo | null;
};

export type KeywordsDataDataforseoTrendsDemographyLiveResultInfo = {
    /**
     * keywords in a POST array
     */
    keywords?: Array<string | null> | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains keyword popularity and related data
     */
    items?: Array<DataforseoTrendsDemographyElementItem | null> | null;
};

export type KeywordsDataDataforseoTrendsDemographyLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataDataforseoTrendsDemographyLiveResultInfo | null> | null;
};

export type KeywordsDataDataforseoTrendsDemographyLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataDataforseoTrendsDemographyLiveTaskInfo | null> | null;
};

export type KeywordsDataDataforseoTrendsMergedDataLiveRequestInfo = {
    /**
     * keywords
     * required field
     * the maximum number of keywords you can specify: 5
     * avoid symbols and special characters (e.g., UTF symbols, emojis);
     * specifying non-Latin characters, you’ll get data for the countries where they are used
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of search engine location
     * optional field
     * if you don’t use this field, you will recieve global results
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/dataforseo_trends/locations
     * note that the data will be provided for the country the specified location_name belongs to;
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * optional field
     * if you don’t use this field, you will recieve global results
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/dataforseo_trends/locations
     * note that the data will be provided for the country the specified location_code belongs to;
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * starting date of the time range
     * optional field
     * if you don’t specify this field, the current day and month of the preceding year will be used by default
     * minimal value for the web type: 2004-01-01
     * minimal value for other types: 2008-01-01
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * if you don’t specify this field, the today’s date will be used by default
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    date_to?: string | null;
    /**
     * preset time ranges
     * optional field
     * if you specify date_from or date_to parameters, this field will be ignored when setting a task
     * possible values for all type parameters:
     * past_4_hours, past_day, past_7_days, past_30_days, past_90_days, past_12_months, past_5_years
     */
    time_range?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type KeywordsDataDataforseoTrendsMergedDataLiveResultInfo = {
    /**
     * keywords in a POST array
     */
    keywords?: Array<string | null> | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * keyword popularity values per location
     * values in this array represent percentages relative to the maximum value within each region
     */
    items?: Array<BaseKeywordDataDataforseoTrendsItem | null> | null;
};

export type KeywordsDataDataforseoTrendsMergedDataLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataDataforseoTrendsMergedDataLiveResultInfo | null> | null;
};

export type KeywordsDataDataforseoTrendsMergedDataLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataDataforseoTrendsMergedDataLiveTaskInfo | null> | null;
};

export type KeywordsDataBingLocationsResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the code of the superordinate location
     * example:
     * "location_code": 9041134,
     * "location_name": "Vienna International Airport,Lower Austria,Austria",
     * "location_code_parent": 20044where location_code_parent corresponds to:
     * "location_code": 20044,
     * "location_name": "Lower Austria,Austria"
     */
    location_code_parent?: number | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     */
    location_type?: string | null;
};

export type KeywordsDataBingLocationsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataBingLocationsResultInfo | null> | null;
};

export type KeywordsDataBingLocationsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingLocationsTaskInfo | null> | null;
};

export type KeywordsDataBingLanguagesResultInfo = {
    /**
     * language name
     */
    language_name?: string | null;
    /**
     * language code according to ISO 639-1
     */
    language_code?: string | null;
};

export type KeywordsDataBingLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataBingLanguagesResultInfo | null> | null;
};

export type KeywordsDataBingLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingLanguagesTaskInfo | null> | null;
};

export type KeywordsDataBingSearchVolumeTaskPostRequestInfo = {
    /**
     * keywords
     * required field
     * The maximum number of keywords you can specify: 1000
     * The maximum number of characters for each keyword: 100
     * the specified keywords will be converted to lowercase, data will be provided in a separate array
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude” format
     * the data will be provided for the country the specified coordinates belong to
     * example:
     * 52.6178549,-155.352142
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * supported languages:
     * English, French, German
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * supported languages:
     * en, fr, de
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * specify this field if you want to get the data for a particular device typepossible values: all, mobile, desktop, tablet
     * default value: all
     */
    device?: string | null;
    /**
     * results sorting parameters
     * optional field
     * Use these parameters to sort the results by search_volume, cpc, competition or relevance in the descending order
     * default value: relevance
     */
    sort_by?: string | null;
    /**
     * starting date of the time range
     * optional field
     * if you don’t specify this field, data will be provided for the last 12 months
     * minimum value: two years back from today’s date
     * date format: "yyyy-mm-dd"
     * example:
     * "2020-01-01"
     * Note: we do not recommend using a custom time range for the past year’s dates
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * if you don’t specify this field, data will be provided for the last 12 months;
     * minimum value: two years back from today’s date;
     * maximum value: one month from today’s date;
     * note: we do not recommend using a custom time range for the past year’s dates;
     * date format: "yyyy-mm-dd"
     * example:
     * "2020-03-15"
     * Note: we do not recommend using a custom time range for the past year’s dates
     */
    date_to?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
    /**
     * Bing search partners type
     * optional field
     * if you specify true, the results will be delivered for owned, operated, and syndicated networks across Bing, Yahoo, AOL and partner sites that host Bing, AOL, and Yahoo search.
     * default value: false – results are returned for Bing, AOL, and Yahoo search networks
     */
    search_partners?: boolean | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type KeywordsDataBingSearchVolumeTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type KeywordsDataBingSearchVolumeTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingSearchVolumeTaskPostTaskInfo | null> | null;
};

export type KeywordsDataBingSearchVolumeTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the task
     */
    endpoint?: string | null;
    function?: string | null;
};

export type KeywordsDataBingSearchVolumeTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataBingSearchVolumeTasksReadyResultInfo | null> | null;
};

export type KeywordsDataBingSearchVolumeTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingSearchVolumeTasksReadyTaskInfo | null> | null;
};

export type KeywordsDataBingSearchVolumeTaskGetResultInfo = {
    /**
     * keyword in a POST array
     */
    keyword?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * indicates whether data from partner networks included in the response
     */
    search_partners?: boolean | null;
    /**
     * device type in a POST array
     * if there is no data, then the value is null
     */
    device?: string | null;
    /**
     * competition
     * represents the relative amount of competition associated with the given keyword in paid SERP only. This value is based on Bing Ads data.
     * Possible values: 0.1, 0.5,0.9
     * 0.1 – low competition,
     * 0.5 – medium competition,
     * 0.9 – high competition;
     * if there is no data the value is null
     */
    competition?: number | null;
    /**
     * cost-per-click
     * represents the average cost per click (USD) historically paid for the keyword.
     * if there is no data then the value is null
     */
    cpc?: number | null;
    /**
     * monthly average search volume rate
     * search volume is rounded to the nearest tens
     */
    search_volume?: number | null;
    /**
     * product and service categories
     * our API doesn’t return categories for this endpoint: the parameter will always equal null
     */
    categories?: Array<string | null> | null;
    /**
     * monthly searches
     * represents the (approximate) number of searches on this keyword idea (as available for the past twelve months), targeted to the specified geographic locations
     * if there is no data then the value is null
     */
    monthly_searches?: Array<MonthlySearchesInfo | null> | null;
};

export type KeywordsDataBingSearchVolumeTaskGetTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataBingSearchVolumeTaskGetResultInfo | null> | null;
};

export type KeywordsDataBingSearchVolumeTaskGetResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingSearchVolumeTaskGetTaskInfo | null> | null;
};

export type KeywordsDataBingSearchVolumeLiveRequestInfo = {
    /**
     * keywords
     * required field
     * The maximum number of keywords you can specify: 1000
     * The maximum number of characters for each keyword: 100
     * the specified keywords will be converted to lowercase, data will be provided in a separate array
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude” format
     * the data will be provided for the country the specified coordinates belong to
     * example:
     * 52.6178549,-155.352142
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * supported languages:
     * English, French, German
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * supported languages:
     * en, fr, de
     */
    language_code?: string | null;
    /**
     * device type
     * optional field
     * specify this field if you want to get the data for a particular device type;
     * possible values: all, mobile, desktop, tablet
     * default value: all
     */
    device?: string | null;
    /**
     * results sorting parameters
     * optional field
     * Use these parameters to sort the results by search_volume, cpc, competition or relevance in the descending order
     * default value: relevance
     */
    sort_by?: string | null;
    /**
     * starting date of the time range
     * optional field
     * if you don’t specify this field, data will be provided for the last 12 months
     * minimum value: two years back from today’s date
     * date format: "yyyy-mm-dd"
     * example:
     * "2020-01-01"
     * Note: we do not recommend using a custom time range for the past year’s dates
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * if you don’t specify this field, data will be provided for the last 12 months;
     * minimum value: two years back from today’s date;
     * maximum value: one month from today’s date;
     * note: we do not recommend using a custom time range for the past year’s dates;
     * date format: "yyyy-mm-dd"
     * example:
     * "2020-03-15"
     * Note: we do not recommend using a custom time range for the past year’s dates
     */
    date_to?: string | null;
    /**
     * Bing search partners type
     * optional field
     * if you specify true, the results will be delivered for owned, operated, and syndicated networks across Bing, Yahoo, AOL and partner sites that host Bing, AOL, and Yahoo search.
     * default value: false – results are returned for Bing, AOL, and Yahoo search networks
     */
    search_partners?: boolean | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type KeywordsDataBingSearchVolumeLiveResultInfo = {
    /**
     * keyword in a POST array
     */
    keyword?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * indicates whether data from partner networks included in the response
     */
    search_partners?: boolean | null;
    /**
     * device type in a POST array
     * if there is no data, then the value is null
     */
    device?: string | null;
    /**
     * competition
     * represents the relative amount of competition associated with the given keyword in paid SERP only. This value is based on Bing Ads data.
     * Possible values: 0.1, 0.5,0.90.1 – low competition,
     * 0.5 – medium competition,
     * 0.9 – high competition;
     * if there is no data the value is null
     */
    competition?: number | null;
    /**
     * cost-per-click
     * represents the average cost per click (USD) historically paid for the keyword.
     * if there is no data then the value is null
     */
    cpc?: number | null;
    /**
     * monthly average search volume rate
     * search volume is rounded to the nearest tens
     */
    search_volume?: number | null;
    /**
     * product and service categories
     * our API doesn’t return categories for this endpoint: the parameter will always equal null
     */
    categories?: Array<string | null> | null;
    /**
     * monthly searches
     * represents the (approximate) number of searches on this keyword idea (as available for the past twelve months), targeted to the specified geographic locations
     * if there is no data then the value is null
     */
    monthly_searches?: Array<MonthlySearchesInfo | null> | null;
};

export type KeywordsDataBingSearchVolumeLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataBingSearchVolumeLiveResultInfo | null> | null;
};

export type KeywordsDataBingSearchVolumeLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingSearchVolumeLiveTaskInfo | null> | null;
};

export type KeywordsDataBingAudienceEstimationJobFunctionsResultInfo = {
    /**
     * ID of the job function
     */
    job_function_id?: number | null;
    /**
     * name of the job function
     */
    job_function_name?: string | null;
};

export type KeywordsDataBingAudienceEstimationJobFunctionsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataBingAudienceEstimationJobFunctionsResultInfo | null> | null;
};

export type KeywordsDataBingAudienceEstimationJobFunctionsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingAudienceEstimationJobFunctionsTaskInfo | null> | null;
};

export type KeywordsDataBingAudienceEstimationIndustriesResultInfo = {
    /**
     * ID of the industry
     */
    industry_id?: number | null;
    /**
     * name of the industry
     */
    industry_name?: string | null;
};

export type KeywordsDataBingAudienceEstimationIndustriesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataBingAudienceEstimationIndustriesResultInfo | null> | null;
};

export type KeywordsDataBingAudienceEstimationIndustriesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingAudienceEstimationIndustriesTaskInfo | null> | null;
};

export type KeywordsDataBingAudienceEstimationTaskPostRequestInfo = {
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius (in km)” format
     * the data will be provided for the country the specified coordinates belong to
     * example:
     * 29.6821525,-82.4098881,100
     */
    location_coordinate?: string | null;
    /**
     * selection of age ranges for targeting
     * possible values: eighteen_to_twenty_four, fifty_to_sixty_four, sixty_five_and_above, thirteen_to_seventeen, thirty_five_to_forty_nine, twenty_five_to_thirty_four, unknown, zero_to_twelve
     */
    age?: Array<string> | null;
    /**
     * desired bid setting value in USD
     * maximum value: 1000
     */
    bid?: number | null;
    /**
     * daily campaign budget value in USD
     * maximum value: 10000
     */
    daily_budget?: number | null;
    /**
     * gender to target
     * possible values: male, female, unknown
     */
    gender?: Array<string> | null;
    /**
     * industry of LinkedIn profile targeting
     * if you use this field, you can receive the list of available industry names  with industry_id by making a separate request to the https://api.dataforseo.com/v3/keywords_data/bing/audience_estimation/industries
     * example: 806301758
     */
    industry?: Array<string> | null;
    /**
     * job function of LinkedIn profile targeting
     * if you use this field, you can receive the list of available job function names  with job_function_id by making a separate request to the https://api.dataforseo.com/v3/keywords_data/bing/audience_estimation/job_functions
     * example: 806300451
     */
    job_function?: Array<string> | null;
};

export type KeywordsDataBingAudienceEstimationTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type KeywordsDataBingAudienceEstimationTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingAudienceEstimationTaskPostTaskInfo | null> | null;
};

export type KeywordsDataBingAudienceEstimationTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the task
     */
    endpoint?: string | null;
};

export type KeywordsDataBingAudienceEstimationTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataBingAudienceEstimationTasksReadyResultInfo | null> | null;
};

export type KeywordsDataBingAudienceEstimationTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingAudienceEstimationTasksReadyTaskInfo | null> | null;
};

export type AudienceEstimationInfo = {
    /**
     * indicates the upper bound of the range result
     */
    high?: number | null;
    /**
     * indicates the lower bound of the range result
     */
    low?: number | null;
};

export type KeywordsDataBingAudienceEstimationTaskGetResultInfo = {
    /**
     * monthly estimated impressions range
     */
    est_impressions?: AudienceEstimationInfo | null;
    /**
     * monthly estimated reach user count range
     */
    est_audience_size?: AudienceEstimationInfo | null;
    /**
     * monthly estimated click count range
     */
    est_clicks?: AudienceEstimationInfo | null;
    /**
     * monthly estimated spending range
     */
    est_spend?: AudienceEstimationInfo | null;
    /**
     * indicates the estimated cost per event with range result
     */
    est_cost_per_event?: AudienceEstimationInfo | null;
    /**
     * estimated click-through rate range
     */
    est_ctr?: AudienceEstimationInfo | null;
    /**
     * suggested bid value under the current targeting
     */
    suggested_bid?: number | null;
    /**
     * suggested daily budget value under the current targeting and bid
     */
    suggested_budget?: number | null;
    /**
     * indicates event lost count due to insufficient input bid
     */
    events_lost_to_bid?: number | null;
    /**
     * indicates the event lost count due to insufficient input budget
     */
    events_lost_to_budget?: number | null;
    /**
     * monthly estimated user count
     */
    est_reach_audience_size?: number | null;
    /**
     * monthly estimated impressions
     */
    est_reach_impressions?: number | null;
    /**
     * currency name
     * example: USDollar
     */
    currency?: string | null;
};

export type KeywordsDataBingAudienceEstimationTaskGetTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataBingAudienceEstimationTaskGetResultInfo | null> | null;
};

export type KeywordsDataBingAudienceEstimationTaskGetResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingAudienceEstimationTaskGetTaskInfo | null> | null;
};

export type KeywordsDataBingAudienceEstimationLiveRequestInfo = {
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius (in km)” format
     * the data will be provided for the country the specified coordinates belong to
     * example:
     * 29.6821525,-82.4098881,100
     */
    location_coordinate?: string | null;
    /**
     * selection of age ranges for targeting
     * possible values: eighteen_to_twenty_four, fifty_to_sixty_four, sixty_five_and_above, thirteen_to_seventeen, thirty_five_to_forty_nine, twenty_five_to_thirty_four, unknown, zero_to_twelve
     */
    age?: Array<string> | null;
    /**
     * desired bid setting value in USD
     * maximum value: 1000
     */
    bid?: number | null;
    /**
     * daily campaign budget value in USD
     * maximum value: 10000
     */
    daily_budget?: number | null;
    /**
     * gender to target
     * possible values: male, female, unknown
     */
    gender?: Array<string> | null;
    /**
     * industry of LinkedIn profile targeting
     * if you use this field, you can receive the list of available industry names  with industry_id by making a separate request to the https://api.dataforseo.com/v3/keywords_data/bing/audience_estimation/industries
     * example: 806301758
     */
    industry?: Array<string> | null;
    /**
     * job function of LinkedIn profile targeting
     * if you use this field, you can receive the list of available job function names  with job_function_id by making a separate request to the https://api.dataforseo.com/v3/keywords_data/bing/audience_estimation/job_functions
     * example: 806300451
     */
    job_function?: Array<string> | null;
};

export type KeywordsDataBingAudienceEstimationLiveResultInfo = {
    /**
     * monthly estimated impressions range
     */
    est_impressions?: AudienceEstimationInfo | null;
    /**
     * monthly estimated reach user count range
     */
    est_audience_size?: AudienceEstimationInfo | null;
    /**
     * monthly estimated click count range
     */
    est_clicks?: AudienceEstimationInfo | null;
    /**
     * monthly estimated spending range
     */
    est_spend?: AudienceEstimationInfo | null;
    /**
     * indicates the estimated cost per event with range result
     */
    est_cost_per_event?: AudienceEstimationInfo | null;
    /**
     * estimated click-through rate range
     */
    est_ctr?: AudienceEstimationInfo | null;
    /**
     * suggested bid value under the current targeting
     */
    suggested_bid?: number | null;
    /**
     * suggested daily budget value under the current targeting and bid
     */
    suggested_budget?: number | null;
    /**
     * indicates event lost count due to insufficient input bid
     */
    events_lost_to_bid?: number | null;
    /**
     * indicates the event lost count due to insufficient input budget
     */
    events_lost_to_budget?: number | null;
    /**
     * monthly estimated user count
     */
    est_reach_audience_size?: number | null;
    /**
     * monthly estimated impressions
     */
    est_reach_impressions?: number | null;
    /**
     * currency name
     * example: USDollar
     */
    currency?: string | null;
};

export type KeywordsDataBingAudienceEstimationLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataBingAudienceEstimationLiveResultInfo | null> | null;
};

export type KeywordsDataBingAudienceEstimationLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingAudienceEstimationLiveTaskInfo | null> | null;
};

export type KeywordsDataBingKeywordsForSiteTaskPostRequestInfo = {
    /**
     * domain or URL
     * required field
     * the URL of the webpage or the domain to scan for possible keywords
     */
    target?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude” format
     * the data will be provided for the country the specified coordinates belong to
     * example:
     * 52.6178549,-155.352142
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * supported languages:
     * English, French, German
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * supported languages:
     * en, fr, de
     */
    language_code?: string | null;
    /**
     * keywords negative array
     * optional field
     * These keywords will be ignored in the results array;
     * You can specify a maximum of 200 terms that you want to exclude from the results;
     * the specified keywords will be converted to lowercase format
     */
    keywords_negative?: Array<string> | null;
    /**
     * device type
     * optional field
     * specify this field if you want to get the data for a particular device type
     * possible values: all, mobile, desktop, tablet
     * default value: all
     */
    device?: string | null;
    /**
     * results sorting parameters
     * optional field
     * Use these parameters to sort the results by search_volume, cpc, competition or relevance in the descending order
     * default value: relevance
     */
    sort_by?: string | null;
    /**
     * starting date of the time range
     * optional field
     * if you don’t specify this field, data will be provided for the last 12 months
     * date format: "yyyy-mm-dd"
     * example:
     * "2020-01-01"
     * Note: we do not recommend using a custom time range for the past year’s dates
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * if you don’t specify this field, data will be provided for the last 12 months;
     * minimum value: two years back from today’s date;
     * maximum value: one month from today’s date;
     * date format: "yyyy-mm-dd"
     * example:
     * "2020-03-15"
     * Note: we do not recommend using a custom time range for the past year’s dates
     */
    date_to?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
    /**
     * Bing search partners type
     * optional field
     * if you specify true, the results will be delivered for owned, operated, and syndicated networks across Bing, Yahoo, AOL and partner sites that host Bing, AOL, and Yahoo search.
     * default value: false – results are returned for Bing, AOL, and Yahoo search networks
     */
    search_partners?: boolean | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type KeywordsDataBingKeywordsForSiteTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type KeywordsDataBingKeywordsForSiteTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingKeywordsForSiteTaskPostTaskInfo | null> | null;
};

export type KeywordsDataBingKeywordsForSiteTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the task
     */
    endpoint?: string | null;
    function?: string | null;
};

export type KeywordsDataBingKeywordsForSiteTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataBingKeywordsForSiteTasksReadyResultInfo | null> | null;
};

export type KeywordsDataBingKeywordsForSiteTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingKeywordsForSiteTasksReadyTaskInfo | null> | null;
};

export type KeywordsDataBingKeywordsForSiteTaskGetResultInfo = {
    /**
     * keyword in a POST array
     */
    keyword?: string | null;
    /**
     * location code in a POST array
     * if there is no data the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data the value is null
     */
    language_code?: string | null;
    /**
     * indicates whether data from partner networks included in the response
     */
    search_partners?: boolean | null;
    /**
     * device type in a POST array
     * if there is no data, then the value is null
     */
    device?: string | null;
    /**
     * competition
     * represents the relative amount of competition associated with the given keyword in paid SERP only. This value is based on Bing Ads data.
     * Possible values: 0.1, 0.5,0.9
     * 0.1 – low competition,
     * 0.5 – medium competition,
     * 0.9 – high competition;
     * if there is no data the value is null
     */
    competition?: number | null;
    /**
     * cost-per-click
     * represents the average cost per click (USD) historically paid for the keyword.
     * if there is no data the value is null
     */
    cpc?: number | null;
    /**
     * monthly average search volume rate
     * represents the (approximate) number of searches for the given keyword idea on Bing search engine depending on the user’s targeting
     * if there is no data then the value is null
     */
    search_volume?: number | null;
    /**
     * product and service categories
     * legacy field, the value will always be null
     */
    categories?: Array<string | null> | null;
    /**
     * monthly searches
     * represents the (approximate) number of searches on this keyword idea (as available for the past twelve months), targeted to the specified geographic locations
     * search volume is rounded to the closest decimal values
     * if there is no data the value is null
     */
    monthly_searches?: Array<MonthlySearchesInfo | null> | null;
};

export type KeywordsDataBingKeywordsForSiteTaskGetTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataBingKeywordsForSiteTaskGetResultInfo | null> | null;
};

export type KeywordsDataBingKeywordsForSiteTaskGetResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingKeywordsForSiteTaskGetTaskInfo | null> | null;
};

export type KeywordsDataBingKeywordsForSiteLiveRequestInfo = {
    /**
     * domain or URL
     * required field
     * the domain name or URL of the target website
     */
    target?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude” format
     * the data will be provided for the country the specified coordinates belong to
     * example:
     * 52.6178549,-155.352142
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * supported languages:
     * English, French, German
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * supported languages:
     * en, fr, de
     */
    language_code?: string | null;
    /**
     * keywords negative array
     * optional field
     * These keywords will be ignored in the results array;
     * You can specify a maximum of 200 terms that you want to exclude from the results;
     * the specified keywords will be converted to lowercase format
     */
    keywords_negative?: Array<string> | null;
    /**
     * device type
     * optional field
     * specify this field if you want to get the data for a particular device typepossible values: all, mobile, desktop, tablet
     * default value: all
     */
    device?: string | null;
    /**
     * starting date of the time range
     * optional field
     * if you don’t specify this field, data will be provided for the last 12 months
     * date format: "yyyy-mm-dd"
     * example:
     * "2020-01-01"
     * Note: we do not recommend using a custom time range for the past year’s dates
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * if you don’t specify this field, data will be provided for the last 12 months;
     * minimum value: two years back from today’s date;
     * maximum value: one month from today’s date;
     * note: we do not recommend using a custom time range for the past year’s dates;
     * date format: "yyyy-mm-dd"
     * example:
     * "2020-03-15"
     * Note: we do not recommend using a custom time range for the past year’s dates
     */
    date_to?: string | null;
    /**
     * results sorting parameters
     * optional field
     * Use these parameters to sort the results by search_volume, cpc, competition or relevance in the descending order
     * default value: relevance
     */
    sort_by?: string | null;
    /**
     * Bing search partners type
     * optional field
     * if you specify true, the results will be delivered for owned, operated, and syndicated networks across Bing, Yahoo, AOL and partner sites that host Bing, AOL, and Yahoo search.
     * default value: false – results are returned for Bing, AOL, and Yahoo search networks
     */
    search_partners?: boolean | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type KeywordsDataBingKeywordsForSiteLiveResultInfo = {
    /**
     * keyword in a POST array
     */
    keyword?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * indicates whether data from partner networks included in the response
     */
    search_partners?: boolean | null;
    /**
     * device type in a POST array
     * if there is no data, then the value is null
     */
    device?: string | null;
    /**
     * competition
     * represents the relative amount of competition associated with the given keyword in paid SERP only. This value is based on Bing Ads data.
     * Possible values: 0.1, 0.5,0.90.1 – low competition,
     * 0.5 – medium competition,
     * 0.9 – high competition;
     * if there is no data the value is null
     */
    competition?: number | null;
    /**
     * cost-per-click
     * represents the average cost per click (USD) historically paid for the keyword.
     * if there is no data, then the value is null
     */
    cpc?: number | null;
    /**
     * monthly average search volume rate
     * represents the (approximate) number of searches for the keyword on the Bing search engine, depending on the user’s targetingsearch volume is rounded to the closest decimal valuesif there is no data, then the value is null
     */
    search_volume?: number | null;
    /**
     * product and service categories
     * legacy field, the value will always be null
     */
    categories?: Array<string | null> | null;
    /**
     * monthly searches
     * represents the (approximate) number of searches on this keyword (as available for the past twelve months), targeted to the specified geographic locations.
     * if there is no data, then the value is null
     */
    monthly_searches?: Array<MonthlySearchesInfo | null> | null;
};

export type KeywordsDataBingKeywordsForSiteLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataBingKeywordsForSiteLiveResultInfo | null> | null;
};

export type KeywordsDataBingKeywordsForSiteLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingKeywordsForSiteLiveTaskInfo | null> | null;
};

export type KeywordsDataBingKeywordsForKeywordsTaskPostRequestInfo = {
    /**
     * keywords
     * required field
     * you can specify the maximum of 200 keywords with each keyword containing no more than 100 characters;
     * the specified keywords will be converted to lowercase, data will be provided in a separate array
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude” format
     * the data will be provided for the country the specified coordinates belong to
     * example:
     * 52.6178549,-155.352142
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * supported languages:
     * English, French, German
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * supported languages:
     * en, fr, de
     */
    language_code?: string | null;
    /**
     * results sorting parameters
     * optional field
     * Use these parameters to sort the results by search_volume, cpc, competition or relevance in the descending order
     * default value: relevance
     */
    sort_by?: string | null;
    /**
     * keywords negative array
     * optional field
     * These keywords will be ignored in the results array;
     * You can specify a maximum of 200 terms that you want to exclude from the results;
     * the specified keywords will be converted to lowercase format
     */
    keywords_negative?: Array<string> | null;
    /**
     * device type
     * optional field
     * specify this field if you want to get the data for a particular device type;
     * possible values: all, mobile, desktop, tablet
     * default value: all
     */
    device?: string | null;
    /**
     * starting date of the time range
     * optional field
     * you can specify a date from the past 24 months
     * if you don’t specify this field, data will be provided for the last 12 months
     * date format: "yyyy-mm-dd"
     * example:
     * "2020-01-01"
     * Note: we do not recommend using a custom time range for the past year’s dates
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * if you don’t specify this field, data will be provided for the last 12 months;
     * minimum value: two years back from today’s date;
     * maximum value: one month from today’s date;
     * date format: "yyyy-mm-dd"
     * example:
     * "2020-03-15"
     * Note: we do not recommend using a custom time range for the past year’s dates
     */
    date_to?: string | null;
    /**
     * Bing search partners type
     * optional field
     * if you specify true, the results will be delivered for owned, operated, and syndicated networks across Bing, Yahoo, AOL and partner sites that host Bing, AOL, and Yahoo search.
     * default value: false – results are returned for Bing, AOL, and Yahoo search networks
     */
    search_partners?: boolean | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type KeywordsDataBingKeywordsForKeywordsTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type KeywordsDataBingKeywordsForKeywordsTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingKeywordsForKeywordsTaskPostTaskInfo | null> | null;
};

export type KeywordsDataBingKeywordsForKeywordsTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the task
     */
    endpoint?: string | null;
    /**
     * type of the task
     */
    function?: string | null;
};

export type KeywordsDataBingKeywordsForKeywordsTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataBingKeywordsForKeywordsTasksReadyResultInfo | null> | null;
};

export type KeywordsDataBingKeywordsForKeywordsTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingKeywordsForKeywordsTasksReadyTaskInfo | null> | null;
};

export type KeywordsDataBingKeywordsForKeywordsTaskGetResultInfo = {
    /**
     * keyword in a POST array
     */
    keyword?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * indicates whether data from partner networks included in the response
     */
    search_partners?: boolean | null;
    /**
     * device type
     * indicates for what device type the data is provided;
     * possible values: all, mobile, desktop, tablet
     */
    device?: string | null;
    /**
     * competition
     * represents the relative amount of competition associated with the given keyword in paid SERP only. This value is based on Bing Ads data.
     * Possible values: 0.1, 0.5,0.9
     * 0.1 – low competition,
     * 0.5 – medium competition,
     * 0.9 – high competition;
     * if there is no data the value is null
     */
    competition?: number | null;
    /**
     * cost-per-click
     * represents the average cost per click (USD) historically paid for the keyword.
     * if there is no data, then the value is null
     */
    cpc?: number | null;
    /**
     * monthly average search volume rate
     * represents the (approximate) number of searches for the keyword on the Bing search engine, depending on the user’s targeting
     * search volume is rounded to the closest decimal values
     * if there is no data, then the value is null
     */
    search_volume?: number | null;
    /**
     * product and service categories
     * legacy field, the value will always be null
     */
    categories?: Array<string | null> | null;
    /**
     * monthly searches
     * represents the (approximate) number of searches on this keyword (as available for the past twelve months), targeted to the specified geographic locations.
     * if there is no data, then the value is null
     */
    monthly_searches?: Array<MonthlySearchesInfo | null> | null;
};

export type KeywordsDataBingKeywordsForKeywordsTaskGetTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataBingKeywordsForKeywordsTaskGetResultInfo | null> | null;
};

export type KeywordsDataBingKeywordsForKeywordsTaskGetResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingKeywordsForKeywordsTaskGetTaskInfo | null> | null;
};

export type KeywordsDataBingKeywordsForKeywordsLiveRequestInfo = {
    /**
     * keywords
     * required field
     * you can specify the maximum of 200 keywords with each keyword containing no more than 100 characters;
     * the specified keywords will be converted to lowercase, data will be provided in a separate array
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude” format
     * the data will be provided for the country the specified coordinates belong to
     * example:
     * 52.6178549,-155.352142
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * supported languages:
     * English, French, German
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * supported languages:
     * en, fr, de
     */
    language_code?: string | null;
    /**
     * results sorting parameters
     * optional field
     * Use these parameters to sort the results by search_volume, cpc, competition or relevance in the descending order
     * default value: relevance
     */
    sort_by?: string | null;
    /**
     * keywords negative array
     * optional field
     * These keywords will be ignored in the results array;
     * You can specify a maximum of 200 terms that you want to exclude from the results;
     * the specified keywords will be converted to lowercase format
     */
    keywords_negative?: Array<string> | null;
    /**
     * device type
     * optional field
     * specify this field if you want to get the data for a particular device type;
     * possible values: all, mobile, desktop, tablet
     * default value: all
     */
    device?: string | null;
    /**
     * starting date of the time range
     * optional field
     * you can specify a date from the past 24 months
     * if you don’t specify this field, data will be provided for the last 12 months
     * date format: "yyyy-mm-dd"
     * example:
     * "2020-01-01"
     * Note: we do not recommend using a custom time range for the past year’s dates
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * if you don’t specify this field, data will be provided for the last 12 months;
     * minimum value: two years back from today’s date;
     * maximum value: one month from today’s date;
     * date format: "yyyy-mm-dd"
     * example:
     * "2020-03-15"
     * Note: we do not recommend using a custom time range for the past year’s dates
     */
    date_to?: string | null;
    /**
     * Bing search partners type
     * optional field
     * if you specify true, the results will be delivered for owned, operated, and syndicated networks across Bing, Yahoo, AOL and partner sites that host Bing, AOL, and Yahoo search.
     * default value: false – results are returned for Bing, AOL, and Yahoo search networks
     */
    search_partners?: boolean | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type KeywordsDataBingKeywordsForKeywordsLiveResultInfo = {
    /**
     * keyword in a POST array
     */
    keyword?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * indicates whether data from partner networks is included in the response
     */
    search_partners?: boolean | null;
    /**
     * device type
     * indicates for what device type the data is provided;
     * possible values: all, mobile, desktop, tablet
     */
    device?: string | null;
    /**
     * competition
     * represents the relative amount of competition associated with the given keyword in paid SERP only. This value is based on Bing Ads data.
     * Possible values: 0.1, 0.5,0.90.1 – low competition,
     * 0.5 – medium competition,
     * 0.9 – high competition;
     * if there is no data the value is null
     */
    competition?: number | null;
    /**
     * cost-per-click
     * represents the average cost per click (USD) historically paid for the keyword.
     * if there is no data, then the value is null
     */
    cpc?: number | null;
    /**
     * monthly average search volume rate
     * represents the (approximate) number of searches for the keyword on the Bing search engine, depending on the user’s targetingsearch volume is rounded to the closest decimal values
     * if there is no data, then the value is null
     */
    search_volume?: number | null;
    /**
     * product and service categories
     * legacy field, the value will always be null
     */
    categories?: Array<string | null> | null;
    /**
     * monthly searches
     * represents the (approximate) number of searches on this keyword (as available for the past twelve months), targeted to the specified geographic locations.
     * if there is no data, then the value is null
     */
    monthly_searches?: Array<MonthlySearchesInfo | null> | null;
};

export type KeywordsDataBingKeywordsForKeywordsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataBingKeywordsForKeywordsLiveResultInfo | null> | null;
};

export type KeywordsDataBingKeywordsForKeywordsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingKeywordsForKeywordsLiveTaskInfo | null> | null;
};

export type AvailableLocations = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * location name
     */
    location_name?: string | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     * possible values:
     * Country, Region
     */
    location_type?: string | null;
};

export type KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo = {
    /**
     * language name
     */
    language_name?: string | null;
    /**
     * language code
     */
    language_code?: string | null;
    /**
     * supported locations
     * contains locations supported in combination with a specific language
     */
    available_locations?: Array<AvailableLocations | null> | null;
};

export type KeywordsDataBingKeywordPerformanceLocationsAndLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo | null> | null;
};

export type KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingKeywordPerformanceLocationsAndLanguagesTaskInfo | null> | null;
};

export type KeywordsDataBingKeywordPerformanceTaskPostRequestInfo = {
    /**
     * keywords
     * required field
     * The maximum number of keywords you can specify: 1000
     * The maximum number of characters for each keyword: 80
     * The maximum number of words for each keyword phrase: 10
     * the specified keywords will be converted to lowercase, data will be provided in a separate array
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * device type
     * optional field
     * specify this field if you want to get the data for a particular device typepossible values: desktop, mobile, tablet, all
     * default value: all
     */
    device?: string | null;
    /**
     * keywords match type
     * optional field
     * can take the following values:
     * aggregate returns data across all match types;
     * broad returns data for all user queries containing the specified keyword with varying word order;
     * phrase returns data for all user queries containing the specified keyword with identical word order;
     * exact returns data for user query that matches the specified keyword;Note: the aggregate match type is applied by default
     */
    match?: string | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations and languages by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/keyword_performance/locations_and_languages
     * example:
     * "United States"
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations and languages by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/keyword_performance/locations_and_languages
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude” format
     * the data will be provided for the country the specified coordinates belong to
     * example:
     * 52.6178549,-155.352142
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available locations and languages by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/keyword_performance/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * you can receive the list of available locations and languages by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/keyword_performance/locations_and_languages
     * example:
     * "en"
     */
    language_code?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type KeywordsDataBingKeywordPerformanceTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type KeywordsDataBingKeywordPerformanceTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingKeywordPerformanceTaskPostTaskInfo | null> | null;
};

export type KeywordsDataBingKeywordPerformanceTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the task
     */
    endpoint?: string | null;
    function?: string | null;
};

export type KeywordsDataBingKeywordPerformanceTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataBingKeywordPerformanceTasksReadyResultInfo | null> | null;
};

export type KeywordsDataBingKeywordPerformanceTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingKeywordPerformanceTasksReadyTaskInfo | null> | null;
};

export type KeywordKpiItemInfo = {
    /**
     * represents the position of the relevant ad in SERP
     * can take the following values:
     * FirstPage1: The first ad to appear on the right side of the first search results page
     * FirstPage2: The second ad to appear on the right side of the first search results page
     * FirstPage3: The third ad to appear on the right side of the first search results page
     * FirstPage4: The fourth ad to appear on the right side of the first search results page
     * FirstPage5: The fifth ad to appear on the right side of the first search results page
     * FirstPage6: The sixth ad to appear on the right side of the first search results page
     * FirstPage7: The seventh ad to appear on the right side of the first search results page
     * FirstPage8: The eighth ad to appear on the right side of the first search results page
     * FirstPage9: The ninth ad to appear on the right side of the first search results page
     * FirstPage10: The tenth ad to appear on the right side of the first search results page
     * MainLine1: The first ad to appear at the top of the search results page
     * MainLine2: The second ad to appear at the top of the search results page
     * MainLine3: The third ad to appear at the top of the search results page
     * MainLine4: The fourth ad to appear at the top of the search results page
     */
    ad_position?: string | null;
    /**
     * ad clicks
     * the number of clicks that the keyword and match type generated during the last month
     */
    clicks?: number | null;
    /**
     * ad impressions
     * the number of impressions that the keyword and match type generated during the last month
     */
    impressions?: number | null;
    /**
     * average cost per click, USD
     * calculated by dividing the cost of all clicks by the number of clicks
     */
    average_cpc?: number | null;
    /**
     * click-through rate as a percentage
     * calculated by dividing the number of clicks by the number of impressions and multiplying the result by 100
     */
    ctr?: number | null;
    /**
     * total cost of an ad, USD
     * the cost of using the specified keyword and match type during the last month
     */
    total_cost?: number | null;
    /**
     * average bid of the keyword
     */
    average_bid?: number | null;
};

export type KeywordKpi = {
    /**
     * keyword data aggregated for desktop devices
     * if there is no data, then the value is null
     */
    desktop?: Array<KeywordKpiItemInfo | null> | null;
    /**
     * keyword data aggregated for mobile devices
     * if there is no data, then the value is null
     */
    mobile?: Array<KeywordKpiItemInfo | null> | null;
    /**
     * keyword data aggregated for tablet devices
     * if there is no data, then the value is null
     */
    tablet?: Array<KeywordKpiItemInfo | null> | null;
};

export type KeywordsDataBingKeywordPerformanceTaskGetResultInfo = {
    /**
     * keyword in a POST array
     */
    keyword?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * indicates the year for which the data is provided for
     * example:
     * 2020
     */
    year?: number | null;
    /**
     * indicates the month for which the data is provided for
     * example:
     * 10
     */
    month?: number | null;
    /**
     * object containing keyword metrics
     * if there is no data, then the value is null
     */
    keyword_kpi?: KeywordKpi | null;
};

export type KeywordsDataBingKeywordPerformanceTaskGetTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataBingKeywordPerformanceTaskGetResultInfo | null> | null;
};

export type KeywordsDataBingKeywordPerformanceTaskGetResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingKeywordPerformanceTaskGetTaskInfo | null> | null;
};

export type KeywordsDataBingKeywordPerformanceLiveRequestInfo = {
    /**
     * keywords
     * required field
     * The maximum number of keywords you can specify: 1000
     * The maximum number of characters for each keyword: 80
     * The maximum number of words for each keyword phrase: 10
     * the specified keywords will be converted to lowercase, data will be provided in a separate array
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * device type
     * optional field
     * specify this field if you want to get the data for a particular device typepossible values: desktop, mobile, tablet, all
     * default value: all
     */
    device?: string | null;
    /**
     * keywords match type
     * optional field
     * can take the following values:
     * aggregate returns data across all match types;
     * broad returns data for all user queries containing the specified keyword with varying word order;
     * phrase returns data for all user queries containing the specified keyword with identical word order;
     * exact returns data for user query that matches the specified keyword;Note: the aggregate match type is applied by default
     */
    match?: string | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations and languages by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/keyword_performance/locations_and_languages
     * example:
     * "United States"
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations and languages by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/keyword_performance/locations_and_languages
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude” format
     * the data will be provided for the country the specified coordinates belong to
     * example:
     * 52.6178549,-155.352142
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available locations and languages by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/keyword_performance/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * you can receive the list of available locations and languages by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/keyword_performance/locations_and_languages
     * example:
     * "en"
     */
    language_code?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type KeywordsDataBingKeywordPerformanceLiveResultInfo = {
    /**
     * keyword in a POST array
     */
    keyword?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    /**
     * indicates the year for which the data is provided for
     * example:
     * 2020
     */
    year?: number | null;
    /**
     * indicates the month for which the data is provided for
     * example:
     * 10
     */
    month?: number | null;
    /**
     * object containing keyword metrics
     * if there is no data, then the value is null
     */
    keyword_kpi?: KeywordKpi | null;
};

export type KeywordsDataBingKeywordPerformanceLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataBingKeywordPerformanceLiveResultInfo | null> | null;
};

export type KeywordsDataBingKeywordPerformanceLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingKeywordPerformanceLiveTaskInfo | null> | null;
};

export type KeywordsDataBingSearchVolumeHistoryLocationsAndLanguagesResultInfo = {
    /**
     * language name
     */
    language_name?: string | null;
    /**
     * language code according to ISO 639-1
     */
    language_code?: string | null;
    /**
     * array of available locations for a certain language
     */
    available_locations?: Array<AvailableLocations | null> | null;
};

export type KeywordsDataBingSearchVolumeHistoryLocationsAndLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataBingSearchVolumeHistoryLocationsAndLanguagesResultInfo | null> | null;
};

export type KeywordsDataBingSearchVolumeHistoryLocationsAndLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingSearchVolumeHistoryLocationsAndLanguagesTaskInfo | null> | null;
};

export type KeywordsDataBingSearchVolumeHistoryTaskPostRequestInfo = {
    /**
     * keywords
     * required field
     * The maximum number of keywords you can specify: 1000
     * The maximum number of characters for each keyword: 100
     * the specified keywords will be converted to lowercase, data will be provided in a separate array
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/search_volume_history/locations_and_languages
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/search_volume_history/locations_and_languages
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude” format
     * the data will be provided for the country the specified coordinates belong to
     * example:
     * 52.6178549,-155.352142
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engines with their language_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/search_volume_history/locations_and_languages
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engines with their language_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/search_volume_history/locations_and_languages
     */
    language_code?: string | null;
    /**
     * device types
     * optional field
     * specify this field if you want to get the data for a particular device types
     * possible values: mobile, desktop, tablet, non_smartphones
     * default value:  ["mobile", "desktop", "tablet", "non_smartphones"]
     */
    device?: Array<string> | null;
    /**
     * aggregates the returned data to a certain time period
     * optional field
     * specify this field if you want to get the data in monthly, weekly or daily format
     * possible values: monthly, weekly, daily
     * monthly – returns data up to past 24 months
     * weekly – returns data up to past 15 weeks
     * daily – returns data up to past 45 days
     * default value:  monthly
     */
    period?: string | null;
    /**
     * starting date of the time range
     * optional field
     * minimum value: two years back from today’s date
     * maximum value: one day from today’s date
     * date format: "yyyy-mm-dd"
     * example:
     * "2020-01-01"
     * Note: we do not recommend using a custom time range
     * Note 2: if date_from and date_to parameters are not specified, the data will be returned for the past 24 months
     * if you specify the period parameter:
     * with value weekly, you will get results for the past 15 weeks
     * with value daily, you will get results for the past 45 days
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * minimum value: two years back from today’s date;
     * maximum value: one day from today’s date;
     * date format: "yyyy-mm-dd"
     * example:
     * "2020-03-15"
     * Note: we do not recommend using a custom time range
     * Note 2: if date_from and date_to parameters are not specified, the data will be returned for the past 24 months
     * if you specify the period parameter:
     * with value weekly, you will get results for the past 15 weeks
     * with value daily, you will get results for the past 45 days
     */
    date_to?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type KeywordsDataBingSearchVolumeHistoryTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type KeywordsDataBingSearchVolumeHistoryTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingSearchVolumeHistoryTaskPostTaskInfo | null> | null;
};

export type KeywordsDataBingSearchVolumeHistoryTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the task
     */
    endpoint?: string | null;
};

export type KeywordsDataBingSearchVolumeHistoryTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataBingSearchVolumeHistoryTasksReadyResultInfo | null> | null;
};

export type KeywordsDataBingSearchVolumeHistoryTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingSearchVolumeHistoryTasksReadyTaskInfo | null> | null;
};

/**
 * device type = desktop
 * contains historical search volume data for searches made from desktop devices
 */
export type SearchVolumeHistoryItemInfo = {
    /**
     * year
     */
    year?: number | null;
    /**
     * month
     */
    month?: number | null;
    /**
     * day of the month
     */
    day?: number | null;
    /**
     * search volume rate
     */
    search_volume?: number | null;
};

export type SearchVolumeHistorySearchInfo = {
    /**
     * device type = desktop
     * contains historical search volume data for searches made from desktop devices
     */
    desktop?: Array<SearchVolumeHistoryItemInfo | null> | null;
    /**
     * device type = non-smartphones
     * contains historical search volume data for searches made from feature phones (non-smartphone mobile devices)
     */
    non_smartphones?: Array<SearchVolumeHistoryItemInfo | null> | null;
    /**
     * device type = mobile
     * contains historical search volume data for searches made from mobile devices
     */
    mobile?: Array<SearchVolumeHistoryItemInfo | null> | null;
    /**
     * device type = tablet
     * contains historical search volume data for searches made from tablets
     */
    tablet?: Array<SearchVolumeHistoryItemInfo | null> | null;
};

export type KeywordsDataBingSearchVolumeHistoryTaskGetResultInfo = {
    /**
     * keyword in a POST array
     */
    keyword?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    device?: Array<string | null> | null;
    /**
     * time period
     * indicates if returned data is aggregated to a certain time period
     * default value monthly
     */
    period?: string | null;
    /**
     * contains results distributed by device type
     * if the device parameter is not specified, the data will be returned for all available device types
     */
    searches?: SearchVolumeHistorySearchInfo | null;
};

export type KeywordsDataBingSearchVolumeHistoryTaskGetTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataBingSearchVolumeHistoryTaskGetResultInfo | null> | null;
};

export type KeywordsDataBingSearchVolumeHistoryTaskGetResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingSearchVolumeHistoryTaskGetTaskInfo | null> | null;
};

export type KeywordsDataBingSearchVolumeHistoryLiveRequestInfo = {
    /**
     * keywords
     * required field
     * The maximum number of keywords you can specify: 1000
     * The maximum number of characters for each keyword: 100
     * the specified keywords will be converted to lowercase, data will be provided in a separate array
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/search_volume_history/locations_and_languages
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/search_volume_history/locations_and_languages
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude” format
     * the data will be provided for the country the specified coordinates belong to
     * example:
     * 52.6178549,-155.352142
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages of the search engines with their language_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/search_volume_history/locations_and_languages
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages of the search engines with their language_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/search_volume_history/locations_and_languages
     */
    language_code?: string | null;
    /**
     * device types
     * optional field
     * specify this field if you want to get the data for a particular device types
     * possible values: mobile, desktop, tablet, non_smartphones
     * default value:  ["mobile", "desktop", "tablet", "non_smartphones"]
     */
    device?: Array<string> | null;
    /**
     * aggregates the returned data to a certain time period
     * optional field
     * specify this field if you want to get the data in monthly, weekly or daily format
     * possible values: monthly, weekly, daily
     * monthly – returns data up to past 24 months
     * weekly – returns data up to past 15 weeks
     * daily – returns data up to past 45 days
     * default value:  monthly
     */
    period?: string | null;
    /**
     * starting date of the time range
     * optional field
     * minimum value: two years back from today’s date
     * maximum value: one day from today’s date
     * date format: "yyyy-mm-dd"
     * example:
     * "2020-01-01"
     * Note: we do not recommend using a custom time range
     * Note 2: if date_from and date_to parameters are not specified, the data will be returned for the past 24 months
     * if you specify the period parameter:
     * with value weekly, you will get results for the past 15 weeks
     * with value daily, you will get results for the past 45 days
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * minimum value: two years back from today’s date;
     * maximum value: one day from today’s date;
     * date format: "yyyy-mm-dd"
     * example:
     * "2020-03-15"
     * Note: we do not recommend using a custom time range
     * Note 2: if date_from and date_to parameters are not specified, the data will be returned for the past 24 months
     * if you specify the period parameter:
     * with value weekly, you will get results for the past 15 weeks
     * with value daily, you will get results for the past 45 days
     */
    date_to?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type KeywordsDataBingSearchVolumeHistoryLiveResultInfo = {
    /**
     * keyword in a POST array
     */
    keyword?: string | null;
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     * if there is no data, then the value is null
     */
    language_code?: string | null;
    device?: Array<string | null> | null;
    /**
     * time period
     * indicates if returned data is aggregated to a certain time period
     * default value monthly
     */
    period?: string | null;
    /**
     * contains results distributed by device type
     * if the device parameter is not specified, the data will be returned for all available device types
     */
    searches?: SearchVolumeHistorySearchInfo | null;
};

export type KeywordsDataBingSearchVolumeHistoryLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataBingSearchVolumeHistoryLiveResultInfo | null> | null;
};

export type KeywordsDataBingSearchVolumeHistoryLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataBingSearchVolumeHistoryLiveTaskInfo | null> | null;
};

export type KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the code of the superordinate location
     * the value will be null as Country is the only supported location_type for this API
     */
    location_code_parent?: string | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     * possible values:
     * Country
     */
    location_type?: string | null;
    /**
     * supported languages
     * contains the languages which are supported for a specific location
     */
    available_languages?: Array<AvailableLanguages | null> | null;
};

export type KeywordsDataClickstreamDataLocationsAndLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo | null> | null;
};

export type KeywordsDataClickstreamDataLocationsAndLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataClickstreamDataLocationsAndLanguagesTaskInfo | null> | null;
};

export type KeywordsDataClickstreamDataDataforseoSearchVolumeLiveRequestInfo = {
    /**
     * target keywords
     * required field
     * UTF-8 encoding
     * maximum number of keywords you can specify in this array: 1000
     * the keywords will be converted to lowercase format
     * Note: certain symbols and characters (e.g., UTF symbols, emojis) are not allowed
     * to learn more about which symbols and characters can be used, please refer to this article
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * you can receive the list of available locations with location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/clickstream_data/locations_and_languages
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you can receive the list of available locations with location_code by making a separate request to the https://api.dataforseo.com/v3/keywords_data/clickstream_data/locations_and_languages
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if don’t specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to the https://api.dataforseo.com/v3/keywords_data/clickstream_data/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if don’t specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the https://api.dataforseo.com/v3/keywords_data/clickstream_data/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * use clickstream data to provide results
     * optional field
     * if set to true, you will get DataForSEO search volume values based on clickstream data;
     * if set to false, Bing search volume data will be used to calculate DataForSEO search volume;
     * default value: true;
     * Note: Bing search volume is available for locations provided in Bing Search Volume History Locations and Bing Ads Locations endpoints; search volume values for any other location are calculated based on clickstream data even if you set this parameter to false
     */
    use_clickstream?: boolean | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type KeywordsDataClickstreamDataSearchVolumeLiveItem = {
    /**
     * keyword provided in the POST array
     */
    keyword?: string | null;
    /**
     * current search volume rate of a keyword
     */
    search_volume?: number | null;
    /**
     * monthly search volume rates
     * array of objects with search volume rates in a certain month of a year
     */
    monthly_searches?: Array<MonthlySearchesInfo | null> | null;
};

export type KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo = {
    /**
     * location code in a POST array
     * if there is no data, then the value is null
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     *
     * Note:if the keyword in the POST array appears to be misspelled, data will be returned for the correctly spelled keyword;
     * we use the functionality of Google Ads API to check and validate the spelling of keywords, learn more by this link
     */
    language_code?: string | null;
    /**
     * indicates if the use_clickstream parameter is active
     * possible values: true, false
     */
    use_clickstream?: boolean | null;
    /**
     * ithe number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * array of keywords
     * contains keywords and their search volume rates
     */
    items?: Array<KeywordsDataClickstreamDataSearchVolumeLiveItem | null> | null;
};

export type KeywordsDataClickstreamDataDataforseoSearchVolumeLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo | null> | null;
};

export type KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataClickstreamDataDataforseoSearchVolumeLiveTaskInfo | null> | null;
};

export type KeywordsDataClickstreamDataGlobalSearchVolumeLiveRequestInfo = {
    /**
     * target keywords
     * required field
     * UTF-8 encoding
     * maximum number of keywords you can specify in this array: 1000;
     * each keyword should be at least 3 characters long;
     * the keywords will be converted to lowercase format;
     * Note: certain symbols and characters (e.g., UTF symbols, emojis) are not allowed
     * to learn more about which symbols and characters can be used, please refer to this article
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type CountryDistribution = {
    /**
     * country ISO code
     */
    country_iso_code?: string | null;
    /**
     * search volume in a given country
     */
    search_volume?: number | null;
    /**
     * percentage of global search volume
     */
    percentage?: number | null;
};

export type KeywordsDataClickstreamDataGlobalSearchVolumeLiveItem = {
    /**
     * keyword
     * keyword is returned with decoded %## (plus symbol ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * clickstream-based average monthly search volume rate
     * represents the (approximate) number of searches for the given keyword idea based on clickstream
     * you can learn more about clickstream search volume in this Help Center article
     */
    search_volume?: number | null;
    /**
     * distribution of clickstream by countries
     * represents clickstream-based search volume in available countries, as well as its respective percentage of global search volume
     */
    country_distribution?: Array<CountryDistribution | null> | null;
};

export type KeywordsDataClickstreamDataGlobalSearchVolumeLiveResultInfo = {
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains keywords and related data
     */
    items?: Array<KeywordsDataClickstreamDataGlobalSearchVolumeLiveItem | null> | null;
};

export type KeywordsDataClickstreamDataGlobalSearchVolumeLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataClickstreamDataGlobalSearchVolumeLiveResultInfo | null> | null;
};

export type KeywordsDataClickstreamDataGlobalSearchVolumeLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataClickstreamDataGlobalSearchVolumeLiveTaskInfo | null> | null;
};

export type KeywordsDataClickstreamDataBulkSearchVolumeLiveRequestInfo = {
    /**
     * target keywords
     * required field
     * UTF-8 encoding
     * maximum number of keywords you can specify in this array: 1000;
     * each keyword should be at least 3 characters long;
     * the keywords will be converted to lowercase format;
     * Note: certain symbols and characters (e.g., UTF symbols, emojis) are not allowed
     * to learn more about which symbols and characters can be used, please refer to this article
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to the
     * https://api.dataforseo.com/v3/keywords_data/clickstream_data/locations_and_languages
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to the
     * https://api.dataforseo.com/v3/keywords_data/clickstream_data/locations_and_languages
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type KeywordsDataClickstreamDataBulkSearchVolumeLiveResultInfo = {
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains keywords and related data
     */
    items?: Array<KeywordsDataClickstreamDataSearchVolumeLiveItem | null> | null;
};

export type KeywordsDataClickstreamDataBulkSearchVolumeLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<KeywordsDataClickstreamDataBulkSearchVolumeLiveResultInfo | null> | null;
};

export type KeywordsDataClickstreamDataBulkSearchVolumeLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<KeywordsDataClickstreamDataBulkSearchVolumeLiveTaskInfo | null> | null;
};

export type BacklinksIdListRequestInfo = {
    /**
     * start time for filtering results
     * required field
     * if include_metadata is set to true, maximum value: a month from current datetime;
     * if include_metadata is set to false, maximum value: six months from current datetime;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_from?: string;
    /**
     * finish time for filtering results
     * required field
     * maximum value: current datetime;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-31 13:57:46 +00:00
     */
    datetime_to?: string;
    /**
     * the maximum number of returned task IDs
     * optional field
     * default value: 1000
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned task IDs
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten tasks in the results array will be omitted
     */
    offset?: number | null;
    /**
     * sorting by task execution time
     * optional field
     * possible values: "asc", "desc"
     * default value: "asc"
     */
    sort?: string | null;
    /**
     * include task metadata in the respond
     * optional field
     * default value: false
     */
    include_metadata?: boolean | null;
};

export type BacklinksIdListResultInfo = {
    /**
     * id of the task
     */
    id?: string | null;
    /**
     * URL of the task
     * URL you used for making an API call
     */
    url?: string | null;
    /**
     * date and time when the task was made
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_posted?: string | null;
    /**
     * date and time when the task was completed
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_done?: string | null;
    /**
     * informational message of the task
     * you can find the full list of general informational messages here
     */
    status?: string | null;
    /**
     * cost of the task, USD
     */
    cost?: number | null;
    /**
     * contains parameters you specified in the POST request
     */
    metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | null;
    } | null;
};

export type BacklinksIdListTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BacklinksIdListResultInfo | null> | null;
};

export type BacklinksIdListResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BacklinksIdListTaskInfo | null> | null;
};

export type BacklinksErrorsRequestInfo = {
    /**
     * the maximum number of returned tasks that responded with an error
     * optional field
     * default value: 1000
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned tasks
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten tasks in the results array will be omitted and the data will be provided for the successive tasks
     */
    offset?: number | null;
    /**
     * return tasks with a certain function
     * use this field to obtain a list of tasks that returned an error filtered by a certain function
     * you can filter the results by the values you receive in the function fields of the API response
     * i.e., once you receive unfiltered results, you can call this API again to filter them by function
     * example: backlinks/live
     */
    filtered_function?: string | null;
    /**
     * start time for filtering results
     * optional field
     * allows filtering results by the datetime parameter within the range of the last 7 days;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2021-11-15 12:57:46 +00:00
     */
    datetime_from?: string | null;
    /**
     * finish time for filtering results
     * optional field
     * allows filtering results by the datetime parameter within the range of the last 7 days;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2021-11-15 13:57:46 +00:00
     */
    datetime_to?: string | null;
};

export type BacklinksErrorsResultInfo = {
    /**
     * id of the task
     */
    id?: string | null;
    /**
     * date and time when an error occurred
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * corresponding API function
     */
    function?: string | null;
    /**
     * error code
     */
    error_code?: number | null;
    /**
     * error message or error URL
     * error message (see full list) or URL that caused an error
     */
    error_message?: string | null;
    /**
     * URL that caused an error
     * URL you used for making an API call
     */
    http_url?: string | null;
    /**
     * HTTP method
     */
    http_method?: string | null;
    /**
     * HTTP status code
     */
    http_code?: number | null;
    /**
     * time taken by HTTP request
     */
    http_time?: number | null;
    /**
     * HTTP response
     * server response
     */
    http_response?: string | null;
};

export type BacklinksErrorsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BacklinksErrorsResultInfo | null> | null;
};

export type BacklinksErrorsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BacklinksErrorsTaskInfo | null> | null;
};

export type BacklinksAvailableFiltersResultInfo = {
    content_duplicates?: {
        [key: string]: string | null;
    } | null;
    backlinks?: {
        [key: string]: string | null;
    } | null;
    domain_pages?: {
        [key: string]: string | null;
    } | null;
    anchors?: {
        [key: string]: string | null;
    } | null;
    referring_domains?: {
        [key: string]: string | null;
    } | null;
    domain_intersection?: {
        [key: string]: string | null;
    } | null;
    page_intersection?: {
        [key: string]: string | null;
    } | null;
    referring_networks?: {
        [key: string]: string | null;
    } | null;
    domain_pages_summary?: {
        [key: string]: string | null;
    } | null;
    competitors?: {
        [key: string]: string | null;
    } | null;
};

export type BacklinksAvailableFiltersTaskInfo = BaseResponseTaskInfo & {
    result?: Array<BacklinksAvailableFiltersResultInfo | null> | null;
};

export type BacklinksAvailableFiltersResponseInfo = BaseResponseInfo & {
    tasks?: Array<BacklinksAvailableFiltersTaskInfo | null> | null;
};

export type IndexHistory = {
    /**
     * date for which index volume data is provided
     * in the UTC format: “yyyy-mm-dd”
     * example:
     * 2021-10-01
     */
    date?: string | null;
    /**
     * total number of backlinks our database contained on the given date
     */
    total_backlinks?: number | null;
    /**
     * total number of pages our database contained on the given date
     */
    total_pages?: number | null;
};

export type BacklinksIndexResultInfo = {
    /**
     * total number of backlinks our database contains for the moment of checking
     */
    total_backlinks?: number | null;
    /**
     * total number of pages our database contains for the moment of checking
     */
    total_pages?: number | null;
    /**
     * index volume data for the past 12 months
     */
    index_history?: Array<IndexHistory | null> | null;
};

export type BacklinksIndexTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BacklinksIndexResultInfo | null> | null;
};

export type BacklinksIndexResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BacklinksIndexTaskInfo | null> | null;
};

export type BacklinksSummaryLiveRequestInfo = {
    /**
     * domain, subdomain or webpage to get data for
     * required field
     * a domain or a subdomain should be specified without https:// and www.
     * a page should be specified with absolute URL (including http:// or https://)
     */
    target?: string;
    /**
     * indicates if the subdomains of the target will be included in the search
     * optional field
     * if set to false, the subdomains will be ignored
     * default value: true
     */
    include_subdomains?: boolean | null;
    /**
     * indicates if indirect links to the target will be included in the results
     * optional field
     * if set to true, the results will include data on indirect links pointing to a page that either redirects to the target, or points to a canonical page
     * if set to false, indirect links will be ignored
     * default value: true
     */
    include_indirect_links?: boolean | null;
    /**
     * indicates if internal backlinks from subdomains to the target will be excluded from the results
     * optional field
     * if set to true, the results will not include data on internal backlinks from subdomains of the same domain as target
     * if set to false, internal links will be included in the results
     * default value: true
     */
    exclude_internal_backlinks?: boolean | null;
    /**
     * maximum number of elements within internal arrays
     * optional field
     * you can use this field to limit the number of elements within the following arrays:
     * referring_links_tld
     * referring_links_types
     * referring_links_attributes
     * referring_links_platform_types
     * referring_links_semantic_locations
     * default value: 10
     * maximum value: 1000
     */
    internal_list_limit?: number | null;
    /**
     * set what backlinks to return and count
     * optional field
     * you can use this field to choose what backlinks will be returned and used for aggregated metrics for your target;
     * possible values:
     * all – all backlinks will be returned and counted;
     * live – backlinks found during the last check will be returned and counted;
     * lost – lost backlinks will be returned and counted;
     * default value: live
     */
    backlinks_status_type?: string | null;
    /**
     * filter the backlinks of your target
     * optional field
     * you can use this field to filter the initial backlinks that will be included in the dataset for aggregated metrics for your target
     * you can filter the backlinks by all fields available in the response of this endpoint
     * using this parameter, you can include only dofollow backlinks in the response and create a flexible backlinks dataset to calculate the metrics for
     * example:
     * "backlinks_filters": ["dofollow", "=", true]
     */
    backlinks_filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * defines the scale used for calculating and displaying the rank, domain_from_rank, and page_from_rank values
     * optional field
     * you can use this parameter to choose whether rank values are presented on a 0–100 or 0–1000 scale
     * possible values:
     * one_hundred — rank values are displayed on a 0–100 scale
     * one_thousand — rank values are displayed on a 0–1000 scale
     * default value: one_thousand
     * learn more about how this parameter works and how ranking metrics are calculated in this Help Center article
     */
    rank_scale?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type TargetInfo = {
    /**
     * server
     */
    server?: string | null;
    /**
     * content management system
     */
    cms?: string | null;
    /**
     * platform type
     */
    platform_type?: Array<string | null> | null;
    /**
     * IP address of the target
     */
    ip_address?: string | null;
    /**
     * country code that the target domain is determined to belong to
     */
    country?: string | null;
    /**
     * indicates if the target is IP
     * if true, the domain, subdomain or webpage functions as an IP address and does not have a domain name
     */
    is_ip?: boolean | null;
    /**
     * spam score of the target
     * if the target is a domain/subdomain, this fields indicates the average spam score of all pages of that domain/subdomain;
     * learn more about how the metric is calculated on this help center page
     */
    target_spam_score?: number | null;
};

export type BacklinksSummaryLiveResultInfo = {
    /**
     * target in a POST array
     */
    target?: string | null;
    /**
     * date and time when our crawler found the backlink for the target for the first time
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    first_seen?: string | null;
    /**
     * date and time when the backlink was lost
     * indicates the date and time when our crawler visited the target and it responded with a 4xx or 5xx status code or when its last backlink was removed
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    lost_date?: string | null;
    /**
     * target rank
     * learn more about the metric and how it is calculated in this help center article
     */
    rank?: number | null;
    /**
     * indicates the number of backlinks
     */
    backlinks?: number | null;
    /**
     * spam score of the backlinks
     * displays the total spam score of all backlinks pointing to the target domain, subdomain, or webpage;
     * to learn more about how the metric is calculated, refer to this Help Center page
     */
    backlinks_spam_score?: number | null;
    /**
     * number of crawled pages for the target
     */
    crawled_pages?: number | null;
    /**
     * information about the target
     */
    info?: TargetInfo | null;
    /**
     * number of internal links
     * calculated as the sum of internal links on the pages of the specified target
     */
    internal_links_count?: number | null;
    /**
     * number of external links on the page
     * calculated as the sum of external links on the pages of the specified target
     */
    external_links_count?: number | null;
    /**
     * number of broken backlinks
     * number of broken backlinks pointing to the target
     */
    broken_backlinks?: number | null;
    /**
     * number of broken pages
     * number of pages on the target that respond with 4xx or 5xx status codes
     * note that the number of broken pages includes pages on the target discovered by following external links, but it may also include pages discovered by following the target’s sitemap
     */
    broken_pages?: number | null;
    /**
     * indicates the number of referring domains
     * referring domains include subdomains that are counted as separate domains for this metric
     */
    referring_domains?: number | null;
    /**
     * number of domains pointing at least one nofollow link to the target
     */
    referring_domains_nofollow?: number | null;
    /**
     * indicates the number of referring main domains
     */
    referring_main_domains?: number | null;
    /**
     * number of main domains pointing at least one nofollow link to the target
     */
    referring_main_domains_nofollow?: number | null;
    /**
     * number of referring IP addresses
     * number of IP addresses pointing to this page
     */
    referring_ips?: number | null;
    /**
     * number of referring subnetworks
     */
    referring_subnets?: number | null;
    /**
     * indicates the number of pages pointing to the target
     */
    referring_pages?: number | null;
    /**
     * number of referring pages pointing at least one nofollow link to the target
     */
    referring_pages_nofollow?: number | null;
    /**
     * top-level domains of the referring links
     * contains top level domains and referring link count per each
     */
    referring_links_tld?: {
        [key: string]: number | null;
    } | null;
    /**
     * types of referring links
     * indicates the types of the referring links and link count per each type
     * possible values:
     * anchor, image, link, meta, canonical, alternate, redirect
     */
    referring_links_types?: {
        [key: string]: number | null;
    } | null;
    /**
     * link attributes of the referring links
     * indicates link attributes of the referring links and link count per each attribute
     * example values:
     * nofollow, noopener, noreferrer, external, ugc, sponsored
     */
    referring_links_attributes?: {
        [key: string]: number | null;
    } | null;
    /**
     * types of referring platforms
     * indicates referring platform types and and link count per each platform
     * possible values: cms, blogs, ecommerce, message-boards, wikis, news, organization
     */
    referring_links_platform_types?: {
        [key: string]: number | null;
    } | null;
    /**
     * semantic locations of the referring links
     * indicates semantic elements in HTML where the referring links are located and link count per each semantic location
     * you can get the full list of semantic elements here
     * example values:
     * article, section, summary, ""
     */
    referring_links_semantic_locations?: {
        [key: string]: number | null;
    } | null;
    /**
     * ISO country codes of the referring links
     * indicates ISO country codes of the domains where the referring links are located and the link count per each country
     */
    referring_links_countries?: {
        [key: string]: number | null;
    } | null;
};

export type BacklinksSummaryLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BacklinksSummaryLiveResultInfo | null> | null;
};

export type BacklinksSummaryLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BacklinksSummaryLiveTaskInfo | null> | null;
};

export type BacklinksHistoryLiveRequestInfo = {
    /**
     * domain
     * required field
     * a domain should be specified without https:// and www.
     */
    target?: string;
    /**
     * starting date of the time range
     * optional field
     * minimum value 2019-01-01
     * if you don’t specify this field, the minimum value will be used by default
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * if you don’t specify this field, the today’s date will be used by default
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    date_to?: string | null;
    /**
     * defines the scale used for calculating and displaying the rank, domain_from_rank, and page_from_rank values
     * optional field
     * you can use this parameter to choose whether rank values are presented on a 0–100 or 0–1000 scale
     * possible values:
     * one_hundred — rank values are displayed on a 0–100 scale
     * one_thousand — rank values are displayed on a 0–1000 scale
     * default value: one_thousand
     * learn more about how this parameter works and how ranking metrics are calculated in this Help Center article
     */
    rank_scale?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BacklinksHistoryLiveItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * date and time when the data for the target was stored
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    date?: string | null;
    /**
     * domain rank on the given date
     * learn more about the metric and how it is calculated in this help center article
     */
    rank?: number | null;
    /**
     * number of backlinks
     */
    backlinks?: number | null;
    /**
     * number of new backlinks for the target
     * data is provided based in a comparison with the previous period
     * Note: this data is available from May 2021;
     * if the date range specified in the POST request precedes May 2021, the field will equal 0
     */
    new_backlinks?: number | null;
    /**
     * number of lost backlinks for the target
     * data is provided based in a comparison with the previous period
     * Note: this data is available from May 2021;
     * if the date range specified in the POST request precedes May 2021, the field will equal 0
     */
    lost_backlinks?: number | null;
    /**
     * number of new referring domains for the target
     * data is provided based in a comparison with the previous period
     * Note: this data is available from May 2021;
     * if the date range specified in the POST request precedes May 2021, the field will equal 0
     */
    new_referring_domains?: number | null;
    /**
     * number of lost referring domains for the target
     * data is provided based in a comparison with the previous period
     * Note: this data is available from May 2021;
     * if the date range specified in the POST request precedes May 2021, the field will equal 0
     */
    lost_referring_domains?: number | null;
    /**
     * number of crawled pages for the target
     */
    crawled_pages?: number | null;
    /**
     * information about the target
     */
    info?: TargetInfo | null;
    /**
     * number of internal links
     * calculated as the sum of internal links on the pages of the specified target
     */
    internal_links_count?: number | null;
    /**
     * number of external links on the page
     * calculated as the sum of external links on the pages of the specified target
     */
    external_links_count?: number | null;
    /**
     * number of broken backlinks
     * number of broken backlinks pointing to the target
     */
    broken_backlinks?: number | null;
    /**
     * number of broken pages
     * number of pages that receive backlinks but respond with 4xx or 5xx status codes
     */
    broken_pages?: number | null;
    /**
     * number of referring domains
     * referring domains include subdomains that are counted as separate domains for this metric
     */
    referring_domains?: number | null;
    /**
     * number of domains pointing at least one nofollow link to the target
     */
    referring_domains_nofollow?: number | null;
    /**
     * number of referring main domains
     */
    referring_main_domains?: number | null;
    /**
     * number of main domains pointing at least one nofollow link to the target
     */
    referring_main_domains_nofollow?: number | null;
    /**
     * number of referring IP addresses
     * number of IP addresses pointing to this page
     */
    referring_ips?: number | null;
    /**
     * number of referring subnetworks
     */
    referring_subnets?: number | null;
    /**
     * number of pages pointing to the target
     */
    referring_pages?: number | null;
    /**
     * number of referring pages pointing at least one nofollow link to the target
     */
    referring_pages_nofollow?: number | null;
    /**
     * top-level domains of the referring links
     * contains top-level domains and referring link count per each
     */
    referring_links_tld?: {
        [key: string]: number | null;
    } | null;
    /**
     * types of referring links
     * indicates the types of the referring links and link count per each type
     * possible values:
     * anchor, image, link, meta, canonical, alternate, redirect
     */
    referring_links_types?: {
        [key: string]: number | null;
    } | null;
    /**
     * link attributes of the referring links
     * indicates link attributes of the referring links and link count per each attribute
     */
    referring_links_attributes?: {
        [key: string]: number | null;
    } | null;
    /**
     * types of referring platforms
     * indicates referring platform types and and link count per each platform
     * possible values: cms, blogs, ecommerce, message-boards, wikis, news, organization
     */
    referring_links_platform_types?: {
        [key: string]: number | null;
    } | null;
    /**
     * semantic locations of the referring links
     * indicates semantic elements in HTML where the referring links are located and link count per each semantic location
     * you can get the full list of semantic elements here
     * examples:
     * article, section, summary
     */
    referring_links_semantic_locations?: {
        [key: string]: number | null;
    } | null;
    /**
     * ISO country codes of the referring links
     * indicates ISO country codes of the domains where the referring links are located and the link count per each country
     */
    referring_links_countries?: {
        [key: string]: number | null;
    } | null;
};

export type BacklinksHistoryLiveResultInfo = {
    /**
     * target from the POST array
     */
    target?: string | null;
    /**
     * starting date of the time range
     * in the UTC format: “yyyy-mm-dd”
     * example:
     * 2019-01-01
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * in the UTC format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    date_to?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains historical backlink data for the specified domain
     * the data is provided month-by-month;
     * the metrics are aggregated according to the backlinks the specified domain had on the first day of each given month
     */
    items?: Array<BacklinksHistoryLiveItem | null> | null;
};

export type BacklinksHistoryLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BacklinksHistoryLiveResultInfo | null> | null;
};

export type BacklinksHistoryLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BacklinksHistoryLiveTaskInfo | null> | null;
};

export type BacklinksBacklinksLiveRequestInfo = {
    /**
     * domain, subdomain or webpage to get backlinks for
     * required field
     * a domain or a subdomain should be specified without https:// and www.
     * a page should be specified with absolute URL (including http:// or https://)
     */
    target?: string;
    /**
     * results grouping type
     * optional field
     * possible grouping types:
     * as_is – returns all backlinks
     * one_per_domain – returns one backlink per domain
     * one_per_anchor – returns one backlink per anchor
     * default value: as_is
     */
    mode?: string | null;
    /**
     * detailed results grouping type
     * optional field
     * use this object to get a specific number of backlinks per field
     * if you use custom_mode, then mode will be ignored
     * example:
     * "custom_mode": {"field": "domain", "value": 100}
     */
    custom_mode?: {
        [key: string]: {
            [key: string]: unknown;
        } | null;
    } | null;
    /**
     * response field
     * required field if you choose to specify custom_mode
     * possible values:
     * anchor
     * domain_from
     * domain_from_country
     * tld_from
     * page_from_encoding
     * page_from_language
     * item_type
     * page_from_status_code
     * semantic_location
     */
    field?: string | null;
    /**
     * number of backlinks to return per field
     * required field if you choose to specify custom_mode
     * can be set from 1 to 1000
     */
    value?: number | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * =, <>, in, not_in, like, not_like, ilike, not_ilike, regex, not_regex, match, not_match
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["rank",">","80"]
     * [["page_from_rank",">","55"],
     * "and",
     * ["dofollow","=",true]]
     * [["first_seen",">","2017-10-23 11:31:45 +00:00"],
     * "and",
     * [["anchor","like","%seo%"],"or",["text_pre","like","%seo%"]]]
     * The full list of possible filters is available here.
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting type
     * example:
     * ["rank,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["domain_from_rank,desc","page_from_rank,asc"]
     */
    order_by?: Array<string> | null;
    /**
     * offset in the results array of the returned backlinks
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten backlinks in the results array will be omitted and the data will be provided for the successive backlinks;
     * Note: the maximum value is 20,000, use the search_after_token if you would like to offset more results
     */
    offset?: number | null;
    /**
     * token for subsequent requests
     * optional field
     * provided in the identical filed of the response to each request;
     * use this parameter to avoid timeouts while trying to obtain over 20,000 results in a single request;
     * by specifying the unique search_after_token value from the response array, you will get the subsequent results of the initial task;
     * search_after_token values are unique for each subsequent task ;
     * Note: if the search_after_token is specified in the request, all other parameters should be identical to the previous request
     */
    search_after_token?: string | null;
    /**
     * the maximum number of returned backlinks
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * set what backlinks to return and count
     * optional field
     * you can use this field to choose what backlinks will be returned and used for aggregated metrics for your target;
     * possible values:
     * all – all backlinks will be returned and counted;
     * live – backlinks found during the last check will be returned and counted;
     * lost – lost backlinks will be returned and counted;
     * default value: live
     */
    backlinks_status_type?: string | null;
    /**
     * indicates if the subdomains of the target will be included in the search
     * optional field
     * if set to false, the subdomains will be ignored
     * default value: true
     */
    include_subdomains?: boolean | null;
    /**
     * indicates if indirect links to the target will be included in the results
     * optional field
     * if set to true, the results will include data on indirect links pointing to a page that either redirects to the target, or points to a canonical page
     * if set to false, indirect links will be ignored
     * default value: true
     */
    include_indirect_links?: boolean | null;
    /**
     * indicates if internal backlinks from subdomains to the target will be excluded from the results
     * optional field
     * if set to true, the results will not include data on internal backlinks from subdomains of the same domain as target
     * if set to false, internal links will be included in the results
     * default value: true
     */
    exclude_internal_backlinks?: boolean | null;
    /**
     * defines the scale used for calculating and displaying the rank, domain_from_rank, and page_from_rank values
     * optional field
     * you can use this parameter to choose whether rank values are presented on a 0–100 or 0–1000 scale
     * possible values:
     * one_hundred — rank values are displayed on a 0–100 scale
     * one_thousand — rank values are displayed on a 0–1000 scale
     * default value: one_thousand
     * learn more about how this parameter works and how ranking metrics are calculated in this Help Center article
     */
    rank_scale?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type RankedKeywordsInfo = {
    /**
     * number of keywords for which the page is ranked in top 3 search results
     */
    page_from_keywords_count_top_3?: number | null;
    /**
     * number of keywords for which the page is ranked in top 10 search results
     */
    page_from_keywords_count_top_10?: number | null;
    /**
     * number of keywords for which the page is ranked in top 100 search results
     */
    page_from_keywords_count_top_100?: number | null;
};

export type BacklinksRedirectInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * HTTP status code of the URL
     */
    status_code?: number | null;
    /**
     * indirect link URL
     */
    url?: string | null;
};

export type BacklinksBacklinksLiveItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * domain referring to the target domain or webpage
     */
    domain_from?: string | null;
    /**
     * URL of the page where the backlink is found
     */
    url_from?: string | null;
    /**
     * indicates whether the referring URL is secured with HTTPS
     * if true, the referring URL is secured with HTTPS
     */
    url_from_https?: boolean | null;
    /**
     * domain the backlink is pointing to
     */
    domain_to?: string | null;
    /**
     * URL the backlink is pointing to
     */
    url_to?: string | null;
    /**
     * indicates if the URL the backlink is pointing to is secured with HTTPS
     * if true, the URL is secured with HTTPS
     */
    url_to_https?: boolean | null;
    /**
     * top-level domain of the referring URL
     */
    tld_from?: string | null;
    /**
     * indicates whether the backlink is new
     * if true, the backlink was found on the page last time our crawler visited it
     */
    is_new?: boolean | null;
    /**
     * indicates whether the backlink was removed
     * if true, the backlink or the entire page was removed
     */
    is_lost?: boolean | null;
    /**
     * spam score of the backlink
     * learn more about how the metric is calculated on this help center page
     */
    backlink_spam_score?: number | null;
    /**
     * backlink rank
     * rank that the given backlink passes to the target
     * rank is calculated based on the method for node ranking in a linked database – a principle used in the original Google PageRank algorithm
     * learn more about the metric and how it is calculated in this help center article
     */
    rank?: number | null;
    /**
     * page rank of the referring page
     * page_from_rank is calculated based on the method for node ranking in a linked database – a principle used in the original Google PageRank algorithm
     * learn more about the metric and how it is calculated in this help center article
     */
    page_from_rank?: number | null;
    /**
     * domain rank of the referring domain
     * domain_from_rank is calculated based on the method for node ranking in a linked database – a principle used in the original Google PageRank algorithm
     * learn more about the metric and how it is calculated in this help center article
     */
    domain_from_rank?: number | null;
    /**
     * platform types of the referring domain
     * possible values: cms, blogs, ecommerce, message-boards, wikis, news, organization
     */
    domain_from_platform_type?: Array<string | null> | null;
    /**
     * indicates if the domain is IP
     * if true, the domain functions as an IP address and does not have a domain name
     */
    domain_from_is_ip?: boolean | null;
    /**
     * IP address of the referring domain
     */
    domain_from_ip?: string | null;
    /**
     * ISO country code of the referring domain
     */
    domain_from_country?: string | null;
    /**
     * number of external links found on the referring page
     */
    page_from_external_links?: number | null;
    /**
     * number of internal links found on the referring page
     */
    page_from_internal_links?: number | null;
    /**
     * size of the referring page, in bytes
     * example:
     * 63357
     */
    page_from_size?: number | null;
    /**
     * character encoding of the referring page
     * example:
     * utf-8
     */
    page_from_encoding?: string | null;
    /**
     * language of the referring page
     * in ISO 639-1 format
     * example:
     * en
     */
    page_from_language?: string | null;
    /**
     * title of the referring page
     */
    page_from_title?: string | null;
    /**
     * HTTP status code returned by the referring page
     * example:
     * 200
     */
    page_from_status_code?: number | null;
    /**
     * date and time when our crawler found the backlink for the first time
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    first_seen?: string | null;
    /**
     * previous to the most recent date when our crawler visited the backlink
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    prev_seen?: string | null;
    /**
     * most recent date when our crawler visited the backlink
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    last_seen?: string | null;
    /**
     * link type
     * possible values:
     * anchor, image, meta, canonical, alternate, redirect
     */
    item_type?: string | null;
    /**
     * link attributes of the referring links
     * example:
     * nofollow
     */
    attributes?: Array<string | null> | null;
    /**
     * indicates whether the backlink is dofollow
     * if false, the backlink is nofollow
     */
    dofollow?: boolean | null;
    /**
     * indicates whether the backlink was present on the referring page when our crawler first visited it
     */
    original?: boolean | null;
    /**
     * alternative text of the image
     * this field will be null if backlink type is not image
     */
    alt?: string | null;
    /**
     * URL of the image
     * the URL leading to the image on the original resource or DataForSEO storage (in case the original source is not available)
     */
    image_url?: string | null;
    /**
     * anchor text of the backlink
     */
    anchor?: string | null;
    /**
     * snippet before the anchor text
     */
    text_pre?: string | null;
    /**
     * snippet after the anchor text
     */
    text_post?: string | null;
    /**
     * indicates semantic element in HTML where the backlink is found
     * you can get the full list of semantic elements here
     * examples:
     * article, section, summary
     */
    semantic_location?: string | null;
    /**
     * number of identical backlinks found on the referring page
     */
    links_count?: number | null;
    /**
     * indicates total number of backlinks from this domain
     * for example, if mode is set to one_per_domain, this field will indicate the total number of backlinks coming from this domain
     */
    group_count?: number | null;
    /**
     * indicates whether the backlink is broken
     * if true, the backlink is pointing to a page responding with a 4xx or 5xx status code
     */
    is_broken?: boolean | null;
    /**
     * status code of the referenced page
     * if the value is null, our crawler hasn’t yet visited the webpage the link is pointing to
     * example:
     * 200
     */
    url_to_status_code?: number | null;
    /**
     * spam score of the referenced page
     * if the value is null, our crawler hasn’t yet visited the webpage the link is pointing to;
     * learn more about how the metric is calculated on this help center page
     */
    url_to_spam_score?: number | null;
    /**
     * target url of the redirect
     * target page the redirect is pointing to
     */
    url_to_redirect_target?: string | null;
    /**
     * number of keywords for which the page is ranked in top search results
     */
    ranked_keywords_info?: RankedKeywordsInfo | null;
    /**
     * indicates whether the backlink is an indirect link
     * if true, the backlink is an indirect link pointing to a page that either redirects to url_to, or points to a canonical page
     */
    is_indirect_link?: boolean | null;
    /**
     * indirect link path
     * indicates a URL or a sequence of URLs that lead to url_to
     */
    indirect_link_path?: Array<BacklinksRedirectInfo | null> | null;
};

export type BacklinksBacklinksLiveResultInfo = {
    /**
     * target domain in a POST array
     */
    target?: string | null;
    /**
     * mode specified in a POST array
     */
    mode?: string | null;
    /**
     * custom mode specified in a POST array
     */
    custom_mode?: {
        [key: string]: {
            [key: string]: unknown;
        } | null;
    } | null;
    /**
     * total amount of results relevant the request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains relevant backlinks and referring domains data
     */
    items?: Array<BacklinksBacklinksLiveItem | null> | null;
    /**
     * token for subsequent requests
     * by specifying the unique search_after_token when setting a new task, you will get the subsequent results of the initial task;
     * search_after_token values are unique for each subsequent task
     */
    search_after_token?: string | null;
};

export type BacklinksBacklinksLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BacklinksBacklinksLiveResultInfo | null> | null;
};

export type BacklinksBacklinksLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BacklinksBacklinksLiveTaskInfo | null> | null;
};

export type BacklinksAnchorsLiveRequestInfo = {
    /**
     * domain, subdomain or webpage to get anchors for
     * required field
     * a domain or a subdomain should be specified without https:// and www.
     * a page should be specified with absolute URL (including http:// or https://)
     */
    target?: string;
    /**
     * the maximum number of returned anchors
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned anchors
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten anchors in the results array will be omitted and the data will be provided for the successive anchors
     */
    offset?: number | null;
    /**
     * maximum number of elements within internal arrays
     * optional field
     * you can use this field to limit the number of elements within the following arrays:
     * referring_links_tld
     * referring_links_types
     * referring_links_attributes
     * referring_links_platform_types
     * referring_links_semantic_locations
     * default value: 10
     * maximum value: 1000
     */
    internal_list_limit?: number | null;
    /**
     * set what backlinks to return and count
     * optional field
     * you can use this field to choose what backlinks will be returned and used for aggregated metrics for your target;
     * possible values:
     * all – all backlinks will be returned and counted;
     * live – backlinks found during the last check will be returned and counted;
     * lost – lost backlinks will be returned and counted;
     * default value: live
     */
    backlinks_status_type?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, =, <>, in, not_in, like, not_like, ilike, not_ilike, match, not_match
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["referring_links_types.anchors",">","1"]
     * [["broken_pages",">","2"],
     * "and",
     * ["backlinks",">","10"]]
     * [["first_seen",">","2017-10-23 11:31:45 +00:00"],
     * "and",
     * [["anchor","like","%seo%"],"or",["referring_domains",">","10"]]]
     * The full list of possible filters is available here.
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting type
     * example:
     * ["backlinks,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["backlinks,desc","rank,asc"]
     */
    order_by?: Array<string> | null;
    /**
     * filter the backlinks of your target
     * optional field
     * you can use this field to filter the initial backlinks that will be included in the dataset for aggregated metrics for your target
     * you can filter the backlinks by all fields available in the response of this endpoint
     * using this parameter, you can include only dofollow backlinks in the response and create a flexible backlinks dataset to calculate the metrics for
     * example:
     * "backlinks_filters": [["dofollow", "=", true]]
     */
    backlinks_filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * indicates if the subdomains of the target will be included in the search
     * optional field
     * if set to false, the subdomains will be ignored
     * default value: true
     */
    include_subdomains?: boolean | null;
    /**
     * indicates if indirect links to the target will be included in the results
     * optional field
     * if set to true, the results will include data on indirect links pointing to a page that either redirects to the target, or points to a canonical page
     * if set to false, indirect links will be ignored
     * default value: true
     */
    include_indirect_links?: boolean | null;
    /**
     * indicates whether the backlinks from subdomains of the target are excluded
     * optional field
     * if set to false, the backlinks from subdomains of the target will be ommited and you won’t receive the same domain in the response;
     * default value: true
     */
    exclude_internal_backlinks?: boolean | null;
    /**
     * defines the scale used for calculating and displaying the rank, domain_from_rank, and page_from_rank values
     * optional field
     * you can use this parameter to choose whether rank values are presented on a 0–100 or 0–1000 scale
     * possible values:
     * one_hundred — rank values are displayed on a 0–100 scale
     * one_thousand — rank values are displayed on a 0–1000 scale
     * default value: one_thousand
     * learn more about how this parameter works and how ranking metrics are calculated in this Help Center article
     */
    rank_scale?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BacklinksAnchorsLiveItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * anchor of the backlink
     */
    anchor?: string | null;
    /**
     * rank of the anchor links
     * rank volume that referring websites pass to the target through links with a particular anchor
     * rank is calculated based on the method for node ranking in a linked database – a principle used in the original Google PageRank algorithm
     * learn more about the metric and how it is calculated in this help center article
     */
    rank?: number | null;
    /**
     * indicates the number of backlinks
     */
    backlinks?: number | null;
    /**
     * date and time when our crawler found the backlink with this anchor for the first time
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    first_seen?: string | null;
    /**
     * date and time when the last backlink with this anchor was lost
     * indicates the date and time when our crawler visited the page and it responded with 4xx or 5xx status code or the last backlink was removed
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2017-01-24 13:20:59 +00:00
     */
    lost_date?: string | null;
    /**
     * average spam score of all backlinks with this anchor
     * learn more about how the metric is calculated on this help center page
     */
    backlinks_spam_score?: number | null;
    /**
     * number of broken backlinks
     * number of broken backlinks pointing to the target
     */
    broken_backlinks?: number | null;
    /**
     * number of broken pages
     * number of pages that respond with 4xx or 5xx status codes where backlinks are pointing to
     */
    broken_pages?: number | null;
    /**
     * indicates the number of referring domains
     */
    referring_domains?: number | null;
    /**
     * number of domains pointing at least one nofollow link to the target
     */
    referring_domains_nofollow?: number | null;
    /**
     * indicates the number of referring main domains
     */
    referring_main_domains?: number | null;
    /**
     * number of main domains pointing at least one nofollow link to the target
     */
    referring_main_domains_nofollow?: number | null;
    /**
     * number of referring IP addresses
     * number of IP addresses pointing to this page
     */
    referring_ips?: number | null;
    /**
     * number of referring subnetworks
     */
    referring_subnets?: number | null;
    /**
     * indicates the number of pages pointing to target with this anchor
     */
    referring_pages?: number | null;
    /**
     * number of referring pages pointing at least one nofollow link to the target with this anchor
     */
    referring_pages_nofollow?: number | null;
    /**
     * top-level domains of the referring links
     * contains top level domains and referring link count per each
     */
    referring_links_tld?: {
        [key: string]: number | null;
    } | null;
    /**
     * types of referring links
     * indicates the types of the referring links and link count per each type
     * possible values:
     * anchor, image, link, meta, canonical, alternate, redirect
     */
    referring_links_types?: {
        [key: string]: number | null;
    } | null;
    /**
     * link attributes of the referring links
     * indicates link attributes of the referring links and link count per each attribute
     */
    referring_links_attributes?: {
        [key: string]: number | null;
    } | null;
    /**
     * types of referring platforms
     * indicates referring platform types and and link count per each platform
     * possible values: cms, blogs, ecommerce, message-boards, wikis, news, organization
     */
    referring_links_platform_types?: {
        [key: string]: number | null;
    } | null;
    /**
     * semantic locations of the referring links
     * indicates semantic elements in HTML where the referring links are located and link count per each semantic location
     * you can get the full list of semantic elements here
     * examples:
     * article, section, summary
     */
    referring_links_semantic_locations?: {
        [key: string]: number | null;
    } | null;
    /**
     * ISO country codes of the referring links
     * indicates ISO country codes of the domains where the referring links are located and the link count per each country
     */
    referring_links_countries?: {
        [key: string]: number | null;
    } | null;
};

export type BacklinksAnchorsLiveResultInfo = {
    /**
     * target in the post array
     */
    target?: string | null;
    /**
     * total number of relevant items in the database
     */
    total_count?: number | null;
    /**
     * number of items in the results array
     */
    items_count?: number | null;
    /**
     * items array
     */
    items?: Array<BacklinksAnchorsLiveItem | null> | null;
};

export type BacklinksAnchorsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BacklinksAnchorsLiveResultInfo | null> | null;
};

export type BacklinksAnchorsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BacklinksAnchorsLiveTaskInfo | null> | null;
};

export type BacklinksDomainPagesLiveRequestInfo = {
    /**
     * domain or subdomain
     * required field
     * a domain or a subdomain should be specified without https:// and www.
     * example:
     * forbes.com
     */
    target?: string;
    /**
     * the maximum number of returned pages
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned pages
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten pages in the results array will be omitted and the data will be provided for the successive pages
     */
    offset?: number | null;
    /**
     * maximum number of elements within internal arrays
     * optional field
     * you can use this field to limit the number of elements within the following arrays:
     * referring_links_tld
     * referring_links_types
     * referring_links_attributes
     * referring_links_platform_types
     * referring_links_semantic_locations
     * default value: 10
     * maximum value: 1000
     */
    internal_list_limit?: number | null;
    /**
     * set what backlinks to return and count
     * optional field
     * you can use this field to choose what backlinks will be returned and used for aggregated metrics;
     * possible values:
     * all – all backlinks will be returned and counted;
     * live – backlinks found during the last check will be returned and counted;
     * lost – lost backlinks will be returned and counted;
     * default value: live
     */
    backlinks_status_type?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, =, <>, in, not_in, like, not_like, ilike, not_ilike, match, not_match
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["meta.internal_links_count",">","1"]
     * [["meta.external_links_count",">","2"],
     * "and",
     * ["backlinks",">","10"]]
     * [["first_visited",">","2017-10-23 11:31:45 +00:00"],
     * "and",
     * [["title","like","%seo%"],"or",["referring_domains",">","10"]]]
     * The full list of possible filters is available here.
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting type
     * example:
     * ["page_summary.backlinks,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["page_summary.backlinks,desc","page_summary.rank,asc"]
     */
    order_by?: Array<string> | null;
    /**
     * filter the backlinks of your target
     * optional field
     * you can use this field to filter the initial backlinks that will be included in the dataset for aggregated metrics for your target
     * you can filter the backlinks by all fields available in the response of this endpoint
     * using this parameter, you can include only dofollow backlinks in the response and create a flexible backlinks dataset to calculate the metrics for
     * example:
     * "backlinks_filters": ["dofollow", "=", true]
     */
    backlinks_filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * indicates if the subdomains of the target will be included in the search
     * optional field
     * if set to false, the subdomains will be ignored
     * default value: true
     */
    include_subdomains?: boolean | null;
    /**
     * indicates if internal backlinks from subdomains to the target will be excluded from the results
     * optional field
     * if set to true, the results will not include data on internal backlinks from subdomains of the same domain as target
     * if set to false, internal links will be included in the results
     * default value: true
     */
    exclude_internal_backlinks?: boolean | null;
    /**
     * defines the scale used for calculating and displaying the rank, domain_from_rank, and page_from_rank values
     * optional field
     * you can use this parameter to choose whether rank values are presented on a 0–100 or 0–1000 scale
     * possible values:
     * one_hundred — rank values are displayed on a 0–100 scale
     * one_thousand — rank values are displayed on a 0–1000 scale
     * default value: one_thousand
     * learn more about how this parameter works and how ranking metrics are calculated in this Help Center article
     */
    rank_scale?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BacklinksPageMeta = {
    /**
     * page title
     */
    title?: string | null;
    /**
     * canonical page
     */
    canonical?: string | null;
    /**
     * number of internal links on the page
     */
    internal_links_count?: number | null;
    /**
     * number of external links on the page
     */
    external_links_count?: number | null;
    /**
     * number of images on the page
     */
    images_count?: number | null;
    /**
     * number of words on the page
     */
    words_count?: number | null;
    /**
     * spam score of the page
     * learn more about how the metric is calculated on this help center page
     */
    page_spam_score?: number | null;
    /**
     * array of social media tags found on the page
     * contains social media tags and their content
     * supported tags include but are not limited to Open Graph and Twitter card
     */
    social_media_tags?: {
        [key: string]: string | null;
    } | null;
    /**
     * h1 tag
     * content of h1 tags
     */
    h1?: Array<string | null> | null;
    /**
     * h2 tag
     * content of h2 tags
     */
    h2?: Array<string | null> | null;
    /**
     * h3 tag
     * content of h3 tags
     */
    h3?: Array<string | null> | null;
    /**
     * content of alt tags
     */
    images_alt?: Array<string | null> | null;
    /**
     * CMS details
     */
    powered_by?: Array<string | null> | null;
    /**
     * page content language
     * example:
     * en
     */
    language?: string | null;
    /**
     * character encoding
     * examples:
     * utf-8
     */
    charset?: string | null;
    /**
     * type of a platform
     */
    platform_type?: Array<string | null> | null;
    /**
     * website technologies
     */
    technologies?: {
        [key: string]: string | null;
    } | null;
};

export type PageSummary = {
    /**
     * date and time when our crawler found the backlink for the first time
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    first_seen?: string | null;
    /**
     * date and time when the last backlink for this page was lost
     * indicates the date and time when our crawler visited the page and it responded with 4xx or 5xx status code or the last backlink was removed
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2017-01-24 13:20:59 +00:00
     */
    lost_date?: string | null;
    /**
     * page rank
     * rank of the page
     * rank is calculated based on the method for node ranking in a linked database – a principle used in the original Google PageRank algorithm
     * learn more about the metric and how it is calculated in this help center article
     */
    rank?: number | null;
    /**
     * indicates the number of backlinks
     */
    backlinks?: number | null;
    /**
     * average spam score of the backlinks pointing to the page
     * learn more about how the metric is calculated on this help center page
     */
    backlinks_spam_score?: number | null;
    /**
     * number of broken backlinks
     * number of broken backlinks pointing to the page
     */
    broken_backlinks?: number | null;
    /**
     * number of broken pages
     * number of pages that respond with 4xx or 5xx status codes where backlinks are pointing to
     */
    broken_pages?: number | null;
    /**
     * indicates the number of referring domains
     */
    referring_domains?: number | null;
    /**
     * number of domains pointing at least one nofollow link to the page
     */
    referring_domains_nofollow?: number | null;
    /**
     * indicates the number of referring main domains
     */
    referring_main_domains?: number | null;
    /**
     * number of main domains pointing at least one nofollow link to the page
     */
    referring_main_domains_nofollow?: number | null;
    /**
     * number of referring IP addresses
     * number of IP addresses pointing to this page
     */
    referring_ips?: number | null;
    /**
     * number of referring subnetworks
     */
    referring_subnets?: number | null;
    /**
     * indicates the number of pages pointing to the page
     */
    referring_pages?: number | null;
    /**
     * number of referring pages pointing at least one nofollow link to the page
     */
    referring_pages_nofollow?: number | null;
    /**
     * top-level domains of the referring links
     * contains top level domains and referring link count per each
     */
    referring_links_tld?: {
        [key: string]: number | null;
    } | null;
    /**
     * types of referring links
     * indicates the types of the referring links and link count per each type
     * possible values:
     * anchor, image, link, meta, canonical, alternate, redirect
     */
    referring_links_types?: {
        [key: string]: number | null;
    } | null;
    /**
     * link attributes of the referring links
     * indicates link attributes of the referring links and link count per each attribute
     */
    referring_links_attributes?: {
        [key: string]: number | null;
    } | null;
    /**
     * types of referring platforms
     * indicates referring platform types and and link count per each platform
     * possible values: cms, blogs, ecommerce, message-boards, wikis, news, organization
     */
    referring_links_platform_types?: {
        [key: string]: number | null;
    } | null;
    /**
     * semantic locations of the referring links
     * indicates semantic elements in HTML where the referring links are located and link count per each semantic location
     * you can get the full list of semantic elements here
     * examples:
     * article, section, summary
     */
    referring_links_semantic_locations?: {
        [key: string]: number | null;
    } | null;
    /**
     * ISO country codes of the referring links
     * indicates ISO country codes of the domains where the referring links are located and the link count per each country
     */
    referring_links_countries?: {
        [key: string]: number | null;
    } | null;
};

export type BacklinksDomainPagesLiveItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * main website domain
     * main website domain does not include subdomains
     */
    main_domain?: string | null;
    /**
     * domain
     * domain where the page was found
     */
    domain?: string | null;
    /**
     * top-level domain
     * top-level domain in the DNS root zone
     */
    tld?: string | null;
    /**
     * page URL
     * relevant page URL
     */
    page?: string | null;
    /**
     * Internet Protocol address
     */
    ip?: string | null;
    /**
     * date and time of the first page visit
     * date and time when our crawler visited this page for the first time
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2017-01-24 13:20:59 +00:00
     */
    first_visited?: string | null;
    /**
     * previous to the most recent date when our crawler visited the page
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2017-01-24 13:20:59 +00:00
     */
    prev_visited?: string | null;
    /**
     * most recent date and time when our crawler visited the page
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2017-01-24 13:20:59 +00:00
     */
    fetch_time?: string | null;
    /**
     * HTTP status code of the page
     */
    status_code?: number | null;
    /**
     * location header
     * indicates the URL to redirect a page to if exists
     */
    location?: string | null;
    /**
     * indicates the page size, in bytes
     */
    size?: number | null;
    /**
     * page size after encoding
     * indicates the size of the encoded page, in bytes
     */
    encoded_size?: number | null;
    /**
     * type of encoding
     */
    content_encoding?: string | null;
    /**
     * types of media used to display a page
     */
    media_type?: string | null;
    /**
     * server version
     */
    server?: string | null;
    meta?: (BacklinksPageMeta | null) & {
        social_media_tags?: {
            [key: string]: string | null;
        } | null;
    };
    page_summary?: (PageSummary | null) & {
        referring_main_domains_nofollow?: number | null;
        referring_links_tld?: {
            [key: string]: number | null;
        } | null;
        referring_links_types?: {
            [key: string]: number | null;
        } | null;
        referring_links_attributes?: {
            [key: string]: number | null;
        } | null;
        referring_links_platform_types?: {
            [key: string]: number | null;
        } | null;
        referring_links_semantic_locations?: {
            [key: string]: number | null;
        } | null;
        referring_links_countries?: {
            [key: string]: number | null;
        } | null;
    };
};

export type BacklinksDomainPagesLiveResultInfo = {
    /**
     * target in a POST array
     */
    target?: string | null;
    /**
     * total number of relevant items in the database
     */
    total_count?: number | null;
    /**
     * number of items in the items array
     */
    items_count?: number | null;
    /**
     * items array
     */
    items?: Array<BacklinksDomainPagesLiveItem | null> | null;
};

export type BacklinksDomainPagesLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BacklinksDomainPagesLiveResultInfo | null> | null;
};

export type BacklinksDomainPagesLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BacklinksDomainPagesLiveTaskInfo | null> | null;
};

export type BacklinksDomainPagesSummaryLiveRequestInfo = {
    /**
     * domain, subdomain or webpage to get summary data for
     * required field
     * a domain or a subdomain should be specified without https:// and www.
     * a page should be specified with absolute URL (including http:// or https://)
     */
    target?: string;
    /**
     * the maximum number of returned anchors
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned anchors
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten anchors in the results array will be omitted and the data will be provided for the successive anchors
     */
    offset?: number | null;
    /**
     * maximum number of elements within internal arrays
     * optional field
     * you can use this field to limit the number of elements within the following arrays:
     * referring_links_tld
     * referring_links_types
     * referring_links_attributes
     * referring_links_platform_types
     * referring_links_semantic_locations
     * default value: 10
     * maximum value: 1000
     */
    internal_list_limit?: number | null;
    /**
     * set what backlinks to return and count
     * optional field
     * you can use this field to choose what backlinks will be returned and used for aggregated metrics for your target;
     * possible values:
     * all – all backlinks will be returned and counted;
     * live – backlinks found during the last check will be returned and counted;
     * lost – lost backlinks will be returned and counted;
     * default value: live
     */
    backlinks_status_type?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, =, <>, in, not_in, like, not_like, ilike, not_ilike, match, not_match
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["referring_links_types.anchors",">","1"]
     * [["broken_pages",">","2"],
     * "and",
     * ["backlinks",">","10"]]
     * [["first_seen",">","2017-10-23 11:31:45 +00:00"],
     * "and",
     * [["anchor","like","%seo%"],"or",["referring_domains",">","10"]]]
     * The full list of possible filters is available here.
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting type
     * example:
     * ["backlinks,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["backlinks,desc","rank,asc"]
     */
    order_by?: Array<string> | null;
    /**
     * filter the backlinks of your target
     * optional field
     * you can use this field to filter the initial backlinks that will be included in the dataset for aggregated metrics for your target
     * you can filter the backlinks by all fields available in the response of this endpoint
     * using this parameter, you can include only dofollow backlinks in the response and create a flexible backlinks dataset to calculate the metrics for
     * example:
     * "backlinks_filters": [["dofollow", "=", true]]
     */
    backlinks_filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * indicates if the subdomains of the target domain will be included in the search
     * optional field
     * if set to false, the subdomains will be ignored
     * default value: true
     */
    include_subdomains?: boolean | null;
    /**
     * indicates if indirect links to the target will be included in the results
     * optional field
     * if set to true, the results will include data on indirect links pointing to a page that either redirects to the target, or points to a canonical page
     * if set to false, indirect links will be ignored
     * default value: true
     */
    include_indirect_links?: boolean | null;
    /**
     * indicates whether the backlinks from subdomains of the target are excluded
     * optional field
     * if set to false, backlinks from the subdomains of the target domain will be ommited and you won’t receive the same domain in the response;
     * default value: true
     */
    exclude_internal_backlinks?: boolean | null;
    /**
     * defines the scale used for calculating and displaying the rank, domain_from_rank, and page_from_rank values
     * optional field
     * you can use this parameter to choose whether rank values are presented on a 0–100 or 0–1000 scale
     * possible values:
     * one_hundred — rank values are displayed on a 0–100 scale
     * one_thousand — rank values are displayed on a 0–1000 scale
     * default value: one_thousand
     * learn more about how this parameter works and how ranking metrics are calculated in this Help Center article
     */
    rank_scale?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BacklinksDomainPagesSummaryLiveItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * page URL
     */
    url?: string | null;
    /**
     * page rank
     * rank of the page
     * rank is calculated based on the method for node ranking in a linked database – a principle used in the original Google PageRank algorithm
     * learn more about the metric and how it is calculated in this help center article
     */
    rank?: number | null;
    /**
     * number of backlinks
     */
    backlinks?: number | null;
    /**
     * date and time when our crawler found a backlink to this page for the first time
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    first_seen?: string | null;
    /**
     * date and time when the last backlink to this page was lost
     * indicates the date and time when our crawler visited the page and it responded with 4xx or 5xx status code or the last backlink was removed
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2017-01-24 13:20:59 +00:00
     */
    lost_date?: string | null;
    /**
     * average spam score of the backlinks pointing to the page
     * learn more about how the metric is calculated on this help center page
     */
    backlinks_spam_score?: number | null;
    /**
     * number of broken backlinks
     * number of broken backlinks pointing to the page
     */
    broken_backlinks?: number | null;
    /**
     * number of broken pages
     * number of pages that respond with 4xx or 5xx status codes where backlinks are pointing to
     */
    broken_pages?: number | null;
    /**
     * indicates the number domains referring to the page
     */
    referring_domains?: number | null;
    /**
     * number of domains pointing at least one nofollow link to the page
     */
    referring_domains_nofollow?: number | null;
    /**
     * indicates the number of referring main domains
     */
    referring_main_domains?: number | null;
    /**
     * number of main domains pointing at least one nofollow link to the page
     */
    referring_main_domains_nofollow?: number | null;
    /**
     * number of referring IP addresses
     * number of IP addresses pointing to this page
     */
    referring_ips?: number | null;
    /**
     * number of referring subnetworks
     */
    referring_subnets?: number | null;
    /**
     * indicates the number of pages pointing to the relevant url
     */
    referring_pages?: number | null;
    /**
     * number of referring pages pointing at least one nofollow link to the page
     */
    referring_pages_nofollow?: number | null;
    /**
     * top-level domains of the referring links
     * contains top level domains and referring link count per each
     */
    referring_links_tld?: {
        [key: string]: number | null;
    } | null;
    /**
     * types of referring links
     * indicates the types of the referring links and link count per each type
     * possible values:
     * anchor, image, link, meta, canonical, alternate, redirect
     */
    referring_links_types?: {
        [key: string]: number | null;
    } | null;
    /**
     * link attributes of the referring links
     * indicates link attributes of the referring links and link count per each attribute
     */
    referring_links_attributes?: {
        [key: string]: number | null;
    } | null;
    /**
     * types of referring platforms
     * indicates referring platform types and and link count per each platform
     * possible values: cms, blogs, ecommerce, message-boards, wikis, news, organization
     */
    referring_links_platform_types?: {
        [key: string]: number | null;
    } | null;
    /**
     * semantic locations of the referring links
     * indicates semantic elements in HTML where the referring links are located and link count per each semantic location
     * you can get the full list of semantic elements here
     * examples:
     * article, section, footer
     */
    referring_links_semantic_locations?: {
        [key: string]: number | null;
    } | null;
    /**
     * ISO country codes of the referring links
     * indicates ISO country codes of the domains where the referring links are located and the link count per each country
     */
    referring_links_countries?: {
        [key: string]: number | null;
    } | null;
};

export type BacklinksDomainPagesSummaryLiveResultInfo = {
    /**
     * target in the post array
     */
    target?: string | null;
    /**
     * total number of relevant items in the database
     */
    total_count?: number | null;
    /**
     * number of items in the results array
     */
    items_count?: number | null;
    /**
     * items array
     */
    items?: Array<BacklinksDomainPagesSummaryLiveItem | null> | null;
};

export type BacklinksDomainPagesSummaryLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BacklinksDomainPagesSummaryLiveResultInfo | null> | null;
};

export type BacklinksDomainPagesSummaryLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BacklinksDomainPagesSummaryLiveTaskInfo | null> | null;
};

export type BacklinksReferringDomainsLiveRequestInfo = {
    /**
     * domain, subdomain or webpage to get referring domains for
     * required field
     * a domain or a subdomain should be specified without https:// and www.
     * a page should be specified with absolute URL (including http:// or https://)
     */
    target?: string;
    /**
     * the maximum number of returned domains
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned domains
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten domains in the results array will be omitted and the data will be provided for the successive pages
     */
    offset?: number | null;
    /**
     * maximum number of elements within internal arrays
     * optional field
     * you can use this field to limit the number of elements within the following arrays:
     * referring_links_tld
     * referring_links_types
     * referring_links_attributes
     * referring_links_platform_types
     * referring_links_semantic_locations
     * default value: 10
     * maximum value: 1000
     */
    internal_list_limit?: number | null;
    /**
     * set what backlinks to return and count
     * optional field
     * you can use this field to choose what backlinks will be returned and used for aggregated metrics for your target;
     * possible values:
     * all – all backlinks will be returned and counted;
     * live – backlinks found during the last check will be returned and counted;
     * lost – lost backlinks will be returned and counted;
     * default value: live
     */
    backlinks_status_type?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, =, <>, in, not_in, like, not_like, match, not_match
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["referring_pages",">","1"]
     * [["referring_pages",">","2"],
     * "and",
     * ["backlinks",">","10"]]
     * [["first_seen",">","2017-10-23 11:31:45 +00:00"],
     * "and",
     * [["domain","like","%dataforseo.com%"],"or",["referring_domains",">","10"]]]
     * The full list of possible filters is available here.
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting type
     * example:
     * ["backlinks,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["backlinks,desc","rank,asc"]
     */
    order_by?: Array<string> | null;
    /**
     * filter the backlinks of your target
     * optional field
     * you can use this field to filter the initial backlinks that will be included in the dataset for aggregated metrics for your target
     * you can filter the backlinks by all fields available in the response of this endpoint
     * using this parameter, you can include only dofollow backlinks in the response and create a flexible backlinks dataset to calculate the metrics for
     * example:
     * "backlinks_filters": ["dofollow", "=", true]
     */
    backlinks_filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * indicates if the subdomains of the target will be included in the search
     * optional field
     * if set to false, the subdomains will be ignored
     * default value: true
     */
    include_subdomains?: boolean | null;
    /**
     * indicates if indirect links to the target will be included in the results
     * optional field
     * if set to true, the results will include data on indirect links pointing to a page that either redirects to the target, or points to a canonical page
     * if set to false, indirect links will be ignored
     * default value: true
     */
    include_indirect_links?: boolean | null;
    /**
     * indicates whether the backlinks from subdomains of the target are excluded
     * optional field
     * if set to false, the backlinks from subdomains of the target will be ommited and you won’t receive the same domain in the response;
     * default value: true
     */
    exclude_internal_backlinks?: boolean | null;
    /**
     * defines the scale used for calculating and displaying the rank, domain_from_rank, and page_from_rank values
     * optional field
     * you can use this parameter to choose whether rank values are presented on a 0–100 or 0–1000 scale
     * possible values:
     * one_hundred — rank values are displayed on a 0–100 scale
     * one_thousand — rank values are displayed on a 0–1000 scale
     * default value: one_thousand
     * learn more about how this parameter works and how ranking metrics are calculated in this Help Center article
     */
    rank_scale?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BacklinksReferringDomainsLiveItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * referring domain
     */
    domain?: string | null;
    /**
     * domain rank
     * rank volume that a referring website passes to the target
     * rank is calculated based on the method for node ranking in a linked database – a principle used in the original Google PageRank algorithm
     * learn more about the metric and how it is calculated in this help center article
     */
    rank?: number | null;
    /**
     * indicates the number of backlinks pointing to the target
     */
    backlinks?: number | null;
    /**
     * date and time when our crawler found the backlink for the first time
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    first_seen?: string | null;
    /**
     * date and time when the last backlink from this domain was lost
     * indicates the date and time when our crawler visited the page and it responded with 4xx or 5xx status code or the last backlink was removed
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2017-01-24 13:20:59 +00:00
     */
    lost_date?: string | null;
    /**
     * average spam score of all backlinks pointing to the domain
     * learn more about how the metric is calculated on this help center page
     */
    backlinks_spam_score?: number | null;
    /**
     * number of broken backlinks
     * number of broken backlinks pointing to the domain
     */
    broken_backlinks?: number | null;
    /**
     * number of broken pages
     * number of pages that respond with 4xx or 5xx status codes where backlinks are pointing to
     */
    broken_pages?: number | null;
    /**
     * indicates the number of referring domains
     * note that we calculate main domains (root domains, like example.com) and their subdomains (e.g. blog.example.com) separately for this metric
     */
    referring_domains?: number | null;
    /**
     * number of domains pointing at least one nofollow link to the target
     */
    referring_domains_nofollow?: number | null;
    /**
     * indicates the number of referring main domains
     * the number of primary (root) domains referring to your target
     */
    referring_main_domains?: number | null;
    /**
     * number of main domains pointing at least one nofollow link to the target
     */
    referring_main_domains_nofollow?: number | null;
    /**
     * number of referring IP addresses
     * number of IP addresses pointing to this page
     */
    referring_ips?: number | null;
    /**
     * number of referring subnetworks
     */
    referring_subnets?: number | null;
    /**
     * indicates the number of pages pointing to the target specified
     */
    referring_pages?: number | null;
    /**
     * number of referring pages pointing at least one nofollow link to the target
     */
    referring_pages_nofollow?: number | null;
    /**
     * top-level domains of the referring links
     * contains top level domains and referring link count per each
     */
    referring_links_tld?: {
        [key: string]: number | null;
    } | null;
    /**
     * types of referring links
     * indicates the types of the referring links and link count per each type
     * possible values:
     * anchor, image, link, meta, canonical, alternate, redirect
     */
    referring_links_types?: {
        [key: string]: number | null;
    } | null;
    /**
     * link attributes of the referring links
     * indicates link attributes of the referring links and link count per each attribute
     */
    referring_links_attributes?: {
        [key: string]: number | null;
    } | null;
    /**
     * types of referring platforms
     * indicates referring platform types and link count per each platform
     * possible values: cms, blogs, ecommerce, message-boards, wikis, news, organization
     */
    referring_links_platform_types?: {
        [key: string]: number | null;
    } | null;
    /**
     * semantic locations of the referring links
     * indicates semantic elements in HTML where the referring links are located and the link count per each semantic location
     * you can get the full list of semantic elements here
     * examples:
     * article, section, summary
     */
    referring_links_semantic_locations?: {
        [key: string]: number | null;
    } | null;
    /**
     * ISO country codes of the referring links
     * indicates ISO country codes of the domains where the referring links are located and the link count per each country
     */
    referring_links_countries?: {
        [key: string]: number | null;
    } | null;
};

export type BacklinksReferringDomainsLiveResultInfo = {
    /**
     * target in a POST array
     */
    target?: string | null;
    /**
     * total number of relevant items in the database
     * total number of main domains referring to your target;
     * example.com and blog.example.com are counted as one referring domain
     */
    total_count?: number | null;
    /**
     * number of items in the items array
     */
    items_count?: number | null;
    /**
     * items array
     */
    items?: Array<BacklinksReferringDomainsLiveItem | null> | null;
};

export type BacklinksReferringDomainsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BacklinksReferringDomainsLiveResultInfo | null> | null;
};

export type BacklinksReferringDomainsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BacklinksReferringDomainsLiveTaskInfo | null> | null;
};

export type BacklinksReferringNetworksLiveRequestInfo = {
    /**
     * domain, subdomain or webpage to get referring networks for
     * required field
     * a domain or a subdomain should be specified without https:// and www.
     * a page should be specified with absolute URL (including http:// or https://)
     */
    target?: string;
    /**
     * indicates the type of network to get data for
     * optional field
     * possible values: ip, subnet
     * default value: ip
     */
    network_address_type?: string | null;
    /**
     * the maximum number of returned networks
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned networks
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten domains in the results array will be omitted and the data will be provided for the successive pages
     */
    offset?: number | null;
    /**
     * maximum number of elements within internal arrays
     * optional field
     * you can use this field to limit the number of elements within the following arrays:
     * referring_links_tld
     * referring_links_types
     * referring_links_attributes
     * referring_links_platform_types
     * referring_links_semantic_locations
     * default value: 10
     * maximum value: 1000
     */
    internal_list_limit?: number | null;
    /**
     * set what backlinks to return and count
     * optional field
     * you can use this field to choose what backlinks will be returned and used for aggregated metrics for your target;
     * possible values:
     * all – all backlinks will be returned and counted;
     * live – backlinks found during the last check will be returned and counted;
     * lost – lost backlinks will be returned and counted;
     * default value: live
     */
    backlinks_status_type?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, =, <>, in, not_in, like, not_like, ilike, not_ilike, match, not_match
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["referring_pages",">","1"]
     * [["referring_pages",">","2"],
     * "and",
     * ["backlinks",">","10"]]
     * [["first_seen",">","2017-10-23 11:31:45 +00:00"],
     * "and",
     * [["network_address","like","194.1.%"],"or",["referring_ips",">","10"]]]
     * The full list of possible filters is available here.
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting type
     * example:
     * ["backlinks,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["backlinks,desc","rank,asc"]
     */
    order_by?: Array<string> | null;
    /**
     * filter the backlinks of your target
     * optional field
     * you can use this field to filter the initial backlinks that will be included in the dataset for aggregated metrics for your target
     * you can filter the backlinks by all fields available in the response of this endpoint
     * using this parameter, you can include only dofollow backlinks in the response and create a flexible backlinks dataset to calculate the metrics for
     * example:
     * "backlinks_filters": [["dofollow", "=", true]]
     */
    backlinks_filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * indicates if the subdomains of the target will be included in the search
     * optional field
     * if set to false, the subdomains will be ignored
     * default value: true
     */
    include_subdomains?: boolean | null;
    /**
     * indicates if indirect links to the target will be included in the results
     * optional field
     * if set to true, the results will include data on indirect links pointing to a page that either redirects to the target, or points to a canonical page
     * if set to false, indirect links will be ignored
     * default value: true
     */
    include_indirect_links?: boolean | null;
    /**
     * indicates whether the backlinks from subdomains of the target are excluded
     * optional field
     * if set to false, the backlinks from subdomains of the target will be ommited and you won’t receive the same domain in the response;
     * default value: true
     */
    exclude_internal_backlinks?: boolean | null;
    /**
     * defines the scale used for calculating and displaying the rank, domain_from_rank, and page_from_rank values
     * optional field
     * you can use this parameter to choose whether rank values are presented on a 0–100 or 0–1000 scale
     * possible values:
     * one_hundred — rank values are displayed on a 0–100 scale
     * one_thousand — rank values are displayed on a 0–1000 scale
     * default value: one_thousand
     * learn more about how this parameter works and how ranking metrics are calculated in this Help Center article
     */
    rank_scale?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BacklinksReferringNetworksLiveItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * address of the referring subnetwork or IP
     */
    network_address?: string | null;
    /**
     * network rank
     * rank volume that a referring network passes to the target
     * rank is calculated based on the method for node ranking in a linked database – a principle used in the original Google PageRank algorithm
     * learn more about the metric and how it is calculated in this help center article
     */
    rank?: number | null;
    /**
     * indicates the number of backlinks pointing to the target
     */
    backlinks?: number | null;
    /**
     * date and time when our crawler found the backlink for the first time
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    first_seen?: string | null;
    /**
     * date and time when the last backlink from this domain was lost
     * indicates the date and time when our crawler visited the page and it responded with 4xx or 5xx status code or the last backlink was removed
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2017-01-24 13:20:59 +00:00
     */
    lost_date?: string | null;
    /**
     * number of broken backlinks
     * number of broken backlinks pointing to the domain
     */
    broken_backlinks?: number | null;
    /**
     * number of broken pages
     * number of pages that respond with 4xx or 5xx status codes where backlinks are pointing to
     */
    broken_pages?: number | null;
    /**
     * indicates the number of referring domains
     * referring domains include subdomains that are counted as separate domains for this metric
     */
    referring_domains?: number | null;
    /**
     * number of domains pointing at least one nofollow link to the target
     */
    referring_domains_nofollow?: number | null;
    /**
     * indicates the number of referring main domains
     */
    referring_main_domains?: number | null;
    /**
     * number of main domains pointing at least one nofollow link to the target
     */
    referring_main_domains_nofollow?: number | null;
    /**
     * number of referring IP addresses
     * number of IP addresses pointing to this page
     */
    referring_ips?: number | null;
    /**
     * number of referring subnetworks
     */
    referring_subnets?: number | null;
    /**
     * indicates the number of pages pointing to the target specified
     */
    referring_pages?: number | null;
    /**
     * number of referring pages pointing at least one nofollow link to the target
     */
    referring_pages_nofollow?: number | null;
    /**
     * top-level domains of the referring links
     * contains top level domains and referring link count per each
     */
    referring_links_tld?: {
        [key: string]: number | null;
    } | null;
    /**
     * types of referring links
     * indicates the types of the referring links and link count per each type
     * possible values:
     * anchor, image, link, meta, canonical, alternate, redirect
     */
    referring_links_types?: {
        [key: string]: number | null;
    } | null;
    /**
     * link attributes of the referring links
     * indicates link attributes of the referring links and link count per each attribute
     */
    referring_links_attributes?: {
        [key: string]: number | null;
    } | null;
    /**
     * types of referring platforms
     * indicates referring platform types and and link count per each platform
     * possible values: cms, blogs, ecommerce, message-boards, wikis, news, organization
     */
    referring_links_platform_types?: {
        [key: string]: number | null;
    } | null;
    /**
     * semantic locations of the referring links
     * indicates semantic elements in HTML where the referring links are located and the link count per each semantic location
     * you can get the full list of semantic elements here
     * examples:
     * article, section, summary
     */
    referring_links_semantic_locations?: {
        [key: string]: number | null;
    } | null;
    /**
     * ISO country codes of the referring links
     * indicates ISO country codes of the domains where the referring links are located and the link count per each country
     */
    referring_links_countries?: {
        [key: string]: number | null;
    } | null;
};

export type BacklinksReferringNetworksLiveResultInfo = {
    /**
     * target in a POST array
     */
    target?: string | null;
    /**
     * total number of relevant items in the database
     */
    total_count?: number | null;
    /**
     * number of items in the items array
     */
    items_count?: number | null;
    /**
     * items array
     */
    items?: Array<BacklinksReferringNetworksLiveItem | null> | null;
};

export type BacklinksReferringNetworksLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BacklinksReferringNetworksLiveResultInfo | null> | null;
};

export type BacklinksReferringNetworksLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BacklinksReferringNetworksLiveTaskInfo | null> | null;
};

export type BacklinksCompetitorsLiveRequestInfo = {
    /**
     * domain, subdomain or webpage to get competitor domains for
     * required field
     * a domain or a subdomain should be specified without https:// and www.
     * a page should be specified with absolute URL (including http:// or https://)
     */
    target?: string;
    /**
     * the maximum number of returned domains
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned domains
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten domains in the results array will be omitted and the data will be provided for the successive pages
     */
    offset?: number | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, =, <>, in, not_in, like, not_like, ilike, not_ilike, match, not_match
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["rank",">","100"]
     * [["target","like","%forbes%"],
     * "and",
     * [["rank",">","100"],"or",["intersections",">","5"]]]
     * The full list of possible filters is available here.
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting type
     * example:
     * ["rank,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["intersections,desc","rank,asc"]
     */
    order_by?: Array<string> | null;
    /**
     * indicates if only main domain of the target will be included in the search
     * optional field
     * if set to true, only the main domain will be included in search;
     * default value: true
     */
    main_domain?: boolean | null;
    /**
     * indicates whether large domain will appear in results
     * optional field
     * if set to true, the results from the large domain (google.com, amazon.com, etc.) will be omitted;
     * default value: true
     */
    exclude_large_domains?: boolean | null;
    /**
     * indicates if internal backlinks from subdomains to the target will be excluded from the results
     * optional field
     * if set to true, the results will not include data on internal backlinks from subdomains of the same domain as target
     * if set to false, internal links will be included in the results
     * default value: true
     */
    exclude_internal_backlinks?: boolean | null;
    /**
     * defines the scale used for calculating and displaying the rank, domain_from_rank, and page_from_rank values
     * optional field
     * you can use this parameter to choose whether rank values are presented on a 0–100 or 0–1000 scale
     * possible values:
     * one_hundred — rank values are displayed on a 0–100 scale
     * one_thousand — rank values are displayed on a 0–1000 scale
     * default value: one_thousand
     * learn more about how this parameter works and how ranking metrics are calculated in this Help Center article
     */
    rank_scale?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BacklinksCompetitorsLiveItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * competitor domain
     */
    target?: string | null;
    /**
     * domain rank
     * domain rank across all domains in the database
     * rank is calculated based on the method for node ranking in a linked database – a principle used in the original Google PageRank algorithm
     * learn more about the metric and how it is calculated in this help center article
     */
    rank?: number | null;
    /**
     * indicates the number of backlink intersections with the target specified in the POST array
     */
    intersections?: number | null;
};

export type BacklinksCompetitorsLiveResultInfo = {
    /**
     * total number of relevant items in the database
     */
    total_count?: number | null;
    /**
     * number of items in the items array
     */
    items_count?: number | null;
    /**
     * items array
     */
    items?: Array<BacklinksCompetitorsLiveItem | null> | null;
};

export type BacklinksCompetitorsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BacklinksCompetitorsLiveResultInfo | null> | null;
};

export type BacklinksCompetitorsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BacklinksCompetitorsLiveTaskInfo | null> | null;
};

export type BacklinksDomainIntersectionLiveRequestInfo = {
    /**
     * domains, subdomains or webpages to get links for
     * required field
     * you can set up to 20 domains, subdomains or webpages
     * a domain or a subdomain should be specified without https:// and www.
     * a page should be specified with absolute URL (including http:// or https://)
     * example:
     * "targets": {
     * "1": "http://planet.postgresql.org/",
     * "2": "http://gborg.postgresql.org/"
     * }
     */
    targets?: {
        [key: string]: string | null;
    } | null;
    /**
     * domains, subdomains or webpages you want to exclude
     * optional field
     * you can specify up to 10 domains, subdomains or webpages
     * if you use this array, results will contain the referring domains that link to targets but don’t link to exclude_targets
     * example:
     * "exclude_targets": [
     * "bbc.com",
     * "https://www.apple.com/iphone*",
     * "https://dataforseo.com/apis*"]
     */
    exclude_targets?: Array<string> | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, =, <>, in, not_in, like, not_like, ilike, not_ilike, match, not_match
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["1.internal_links_count",">","1"]
     * [["2.referring_pages",">","2"],
     * "and",
     * ["1.backlinks",">","10"]]
     * [["1.first_seen",">","2017-10-23 11:31:45 +00:00"],
     * "and",
     * [["2.target","like","%dataforseo.com%"],"or",["1.referring_domains",">","10"]]]
     * The full list of possible filters is available here.
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting type
     * example:
     * ["backlinks,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["backlinks,desc","rank,asc"]
     */
    order_by?: Array<string> | null;
    /**
     * offset in the array of returned results
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten backlinks in the results array will be omitted and the data will be provided for the successive backlinks
     */
    offset?: number | null;
    /**
     * the maximum number of returned results
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * maximum number of elements within internal arrays
     * optional field
     * you can use this field to limit the number of elements within the following arrays:
     * referring_links_tld
     * referring_links_types
     * referring_links_attributes
     * referring_links_platform_types
     * referring_links_semantic_locations
     * default value: 10
     * maximum value: 1000
     */
    internal_list_limit?: number | null;
    /**
     * set what backlinks to return and count
     * optional field
     * you can use this field to choose what backlinks will be returned and used for aggregated metrics for your targets;
     * possible values:
     * all – all backlinks will be returned and counted;
     * live – backlinks found during the last check will be returned and counted;
     * lost – lost backlinks will be returned and counted;
     * default value: live
     */
    backlinks_status_type?: string | null;
    /**
     * filter the backlinks of your target
     * optional field
     * you can use this field to filter the initial backlinks that will be included in the dataset for aggregated metrics for your target
     * you can filter the backlinks by all fields available in the response of this endpoint
     * using this parameter, you can include only dofollow backlinks in the response and create a flexible backlinks dataset to calculate the metrics for
     * example:
     * "backlinks_filters": [["dofollow", "=", true]]
     */
    backlinks_filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * indicates if the subdomains of the target will be included in the search
     * optional field
     * if set to false, the subdomains will be ignored
     * default value: true
     */
    include_subdomains?: boolean | null;
    /**
     * indicates if indirect links to the targets will be included in the results
     * optional field
     * if set to true, the results will include data on indirect links pointing to a page that either redirects to a target, or points to a canonical page
     * if set to false, indirect links will be ignored
     * default value: true
     */
    include_indirect_links?: boolean | null;
    /**
     * indicates whether the backlinks from subdomains of the target are excluded
     * optional field
     * if set to false, the backlinks from subdomains of the target will be omitted and you won’t receive the same domain in the response;
     * default value: true
     */
    exclude_internal_backlinks?: boolean | null;
    /**
     * indicates whether to intersect backlinks
     * optional field
     * use this field to intersect or merge results for the specified domains
     * possible values: all, partial
     * all – results are based on all backlinks;
     * partial – results are based on the intersecting backlinks only;
     * default value: all
     */
    intersection_mode?: string | null;
    /**
     * defines the scale used for calculating and displaying the rank, domain_from_rank, and page_from_rank values
     * optional field
     * you can use this parameter to choose whether rank values are presented on a 0–100 or 0–1000 scale
     * possible values:
     * one_hundred — rank values are displayed on a 0–100 scale
     * one_thousand — rank values are displayed on a 0–1000 scale
     * default value: one_thousand
     * learn more about how this parameter works and how ranking metrics are calculated in this Help Center article
     */
    rank_scale?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BacklinksDomainIntersection = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * domain that links to the corresponding target from the POST array
     */
    target?: string | null;
    /**
     * rank referred to the target from the POST array
     * indicates the rank that the referring domain (target above) refers to your target from the POST array;
     * rank is calculated based on the method for node ranking in a linked database – a principle used in the original Google PageRank algorithm
     * learn more about the metric and how it is calculated in this help center article
     */
    rank?: number | null;
    /**
     * indicates the number of backlinks
     */
    backlinks?: number | null;
    /**
     * date and time when our crawler found the backlink from this target for the first time
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    first_seen?: string | null;
    /**
     * date and time when the last backlink from this target was lost
     * indicates the date and time when our crawler visited the page and it responded with 4xx or 5xx status code or the last backlink was removed
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    lost_date?: string | null;
    /**
     * average spam score of the backlinks pointing to the target
     * learn more about how the metric is calculated on this help center page
     */
    backlinks_spam_score?: number | null;
    /**
     * number of broken backlinks
     */
    broken_backlinks?: number | null;
    /**
     * number of broken pages
     */
    broken_pages?: number | null;
    /**
     * number of referring domains
     */
    referring_domains?: number | null;
    /**
     * number of domains pointing at least one nofollow link to the corresponding target
     */
    referring_domains_nofollow?: number | null;
    /**
     * number of referring main domains
     */
    referring_main_domains?: number | null;
    /**
     * number of main domains pointing at least one nofollow link to the target
     */
    referring_main_domains_nofollow?: number | null;
    /**
     * number of referring IP addresses
     */
    referring_ips?: number | null;
    /**
     * number of referring subnetworks
     */
    referring_subnets?: number | null;
    /**
     * indicates the number of pages pointing to the target
     */
    referring_pages?: number | null;
    /**
     * number of referring pages pointing at least one nofollow link to the target
     */
    referring_pages_nofollow?: number | null;
    /**
     * top level domains of the referring links
     * contains top-level domains and referring link count per each
     */
    referring_links_tld?: {
        [key: string]: number | null;
    } | null;
    /**
     * types of the referring links
     * indicates the types of referring links and link count per each type
     * possible values:
     * anchor, image, link, meta, canonical, alternate, redirect
     */
    referring_links_types?: {
        [key: string]: number | null;
    } | null;
    /**
     * link attributes of the referring links
     * indicates link attributes of the referring links and the link count per each attribute
     */
    referring_links_attributes?: {
        [key: string]: number | null;
    } | null;
    /**
     * types of referring platforms
     * indicates referring platform types and link count per each platform
     * possible values: cms, blogs, ecommerce, message-boards, wikis, news, organization
     */
    referring_links_platform_types?: {
        [key: string]: number | null;
    } | null;
    /**
     * semantic locations of the referring links
     * indicates semantic elements in HTML where the referring links are located and the link count per each semantic location
     * you can get the full list of semantic elements here
     */
    referring_links_semantic_locations?: {
        [key: string]: number | null;
    } | null;
    /**
     * ISO country codes of the referring links
     * indicates ISO country codes of the domains where the referring links are located and the link count per each country
     */
    referring_links_countries?: {
        [key: string]: unknown;
    } | null;
};

export type IntersectionSummaryInfo = {
    /**
     * total number of intersections
     */
    intersections_count?: number | null;
};

export type BacklinksDomainIntersectionLiveItem = {
    /**
     * contains data on domains that link to the corresponding targets specified in the POST array
     * data is provided in separate objects corresponding to domains, subdomains or pages specified in the targets object
     */
    domain_intersection?: {
        [key: string]: BacklinksDomainIntersection | null;
    } | null;
    /**
     * contains the domain intersections summary
     */
    summary?: IntersectionSummaryInfo | null;
};

export type BacklinksDomainIntersectionLiveResultInfo = {
    /**
     * target domains, subdomains or webpages in a POST array
     */
    targets?: {
        [key: string]: string | null;
    } | null;
    /**
     * total amount of results relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains domain that link to all targets from the POST array
     */
    items?: Array<BacklinksDomainIntersectionLiveItem | null> | null;
};

export type BacklinksDomainIntersectionLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BacklinksDomainIntersectionLiveResultInfo | null> | null;
};

export type BacklinksDomainIntersectionLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BacklinksDomainIntersectionLiveTaskInfo | null> | null;
};

export type BacklinksPageIntersectionLiveRequestInfo = {
    /**
     * domains, subdomains or webpages to get links for
     * required field
     * you can set up to 20 domains, subdomains or webpages
     * a domain or a subdomain should be specified without https:// and www.
     * a page should be specified with absolute URL (including http:// or https://)
     * example:
     * "targets": {
     * "1": "http://planet.postgresql.org/",
     * "2": "http://gborg.postgresql.org/"
     * }
     */
    targets?: {
        [key: string]: string | null;
    } | null;
    /**
     * domains, subdomains or webpages you want to exclude
     * optional field
     * you can set up to 10 domains, subdomains or webpages
     * if you use this array, results will contain the referring pages that link to targets but don’t link to exclude_targets
     * example:
     * "exclude_targets": [
     * "bbc.com",
     * "https://www.apple.com/iphone*",
     * "https://dataforseo.com/apis*"]
     */
    exclude_targets?: Array<string> | null;
    /**
     * set what backlinks to return and count
     * optional field
     * you can use this field to choose what backlinks will be returned and used for aggregated metrics for your targets;
     * possible values:
     * all – all backlinks will be returned and counted;
     * live – backlinks found during the last check will be returned and counted;
     * lost – lost backlinks will be returned and counted;
     * default value: live
     */
    backlinks_status_type?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, =, <>, in, not_in, like, not_like, ilike, not_ilike, match, not_match
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["1.rank",">","80"]
     * [["2.page_from_rank",">","55"],
     * "and",
     * ["1.original","=","true"]]
     * [["1.first_seen",">","2017-10-23 11:31:45 +00:00"],
     * "and",
     * [["1.acnhor","like","%seo%"],"or",["1.text_pre","not_like","%seo%"]]]
     * The full list of possible filters is available here.
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting type
     * example:
     * ["rank,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["domain_from_rank,desc","page_from_rank,asc"]
     */
    order_by?: Array<string> | null;
    /**
     * offset in the results array of the returned backlinks
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten backlinks in the results array will be omitted and the data will be provided for the successive backlinks
     */
    offset?: number | null;
    /**
     * the maximum number of returned backlinks
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * maximum number of elements within internal arrays
     * optional field
     * you can use this field to limit the number of elements within the following arrays:
     * attributes
     * domain_from_platform_type
     * default value: 10
     * maximum value: 1000
     */
    internal_list_limit?: number | null;
    /**
     * indicates if the subdomains of the targets will be included in the search
     * optional field
     * if set to false, the subdomains will be ignored
     * default value: true
     */
    include_subdomains?: boolean | null;
    /**
     * indicates if indirect links to the targets will be included in the results
     * optional field
     * if set to true, the results will include data on indirect links pointing to a page that either redirects to a target, or points to a canonical page
     * if set to false, indirect links will be ignored
     * default value: true
     */
    include_indirect_links?: boolean | null;
    /**
     * indicates if internal backlinks from subdomains to the target will be excluded from the results
     * optional field
     * if set to true, the results will not include data on internal backlinks from subdomains of the same domain as target
     * if set to false, internal links will be included in the result
     * default value: true
     */
    exclude_internal_backlinks?: boolean | null;
    /**
     * indicates whether to intersect backlinks
     * optional field
     * use this field to intersect or merge results for the specified URLs
     * possible values: all, partial
     * all – results are based on all backlinks;
     * partial – results are based on the intersecting backlinks only;
     * default value: all
     */
    intersection_mode?: string | null;
    /**
     * defines the scale used for calculating and displaying the rank, domain_from_rank, and page_from_rank values
     * optional field
     * you can use this parameter to choose whether rank values are presented on a 0–100 or 0–1000 scale
     * possible values:
     * one_hundred — rank values are displayed on a 0–100 scale
     * one_thousand — rank values are displayed on a 0–1000 scale
     * default value: one_thousand
     * learn more about how this parameter works and how ranking metrics are calculated in this Help Center article
     */
    rank_scale?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BacklinksPageIntersection = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * domain referring to the target domain or webpage
     */
    domain_from?: string | null;
    /**
     * URL of the page where the backlink is found
     */
    url_from?: string | null;
    /**
     * indicates whether the referring URL is secured with HTTPS
     * if true, the referring URL is secured with HTTPS
     */
    url_from_https?: boolean | null;
    /**
     * domain the backlink is pointing to
     */
    domain_to?: string | null;
    /**
     * URL the backlink is pointing to
     */
    url_to?: string | null;
    /**
     * indicates if the URL the backlink is pointing to is secured with HTTPS
     * if true, the URL is secured with HTTPS
     */
    url_to_https?: boolean | null;
    /**
     * top-level domain of the referring URL
     */
    tld_from?: string | null;
    /**
     * indicates whether the backlink is new
     * if true, the backlink was found on the page last time our crawler visited it
     */
    is_new?: boolean | null;
    /**
     * indicates whether the backlink was removed
     * if true, the backlink or the entire page was removed
     */
    is_lost?: boolean | null;
    /**
     * spam score of the backlink
     * learn more about how the metric is calculated on this help center page
     */
    backlink_spam_score?: number | null;
    /**
     * backlink rank
     * rank is calculated based on the method for node ranking in a linked database – a principle used in the original Google PageRank algorithm
     * learn more about the metric and how it is calculated in this help center article
     */
    rank?: number | null;
    /**
     * page rank of the referring page
     * page_from_rank is calculated based on the method for node ranking in a linked database – a principle used in the original Google PageRank algorithm
     * learn more about the metric and how it is calculated in this help center article
     */
    page_from_rank?: number | null;
    /**
     * domain rank of the referring domain
     * indicates the rank of the domain at the time our crawler last saw the backlink;
     * domain_from_rank is calculated based on the method for node ranking in a linked database – a principle used in the original Google PageRank algorithm
     * learn more about the metric and how it is calculated in this help center article
     */
    domain_from_rank?: number | null;
    /**
     * platform types of the referring domain
     * possible values: cms, blogs, ecommerce, message-boards, wikis, news, organization
     */
    domain_from_platform_type?: Array<string | null> | null;
    /**
     * indicates if the domain is IP
     * if true, the domain functions as an IP address and does not have a domain name
     */
    domain_from_is_ip?: boolean | null;
    /**
     * IP address of the referring domain
     */
    domain_from_ip?: string | null;
    /**
     * ISO country code of the referring domain
     */
    domain_from_country?: string | null;
    /**
     * number of external links found on the referring page
     */
    page_from_external_links?: number | null;
    /**
     * number of internal links found on the referring page
     */
    page_from_internal_links?: number | null;
    /**
     * size of the referring page, in bytes
     * example:
     * 63357
     */
    page_from_size?: number | null;
    /**
     * character encoding of the referring page
     * example:
     * utf-8
     */
    page_from_encoding?: string | null;
    /**
     * language of the referring page
     * in ISO 639-1 format
     * example:
     * en
     */
    page_from_language?: string | null;
    /**
     * title of the referring page
     */
    page_from_title?: string | null;
    /**
     * HTTP status code returned by the referring page
     * example:
     * 200
     */
    page_from_status_code?: number | null;
    /**
     * date and time when our crawler found the backlink for the first time
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    first_seen?: string | null;
    /**
     * previous to the most recent date when our crawler visited the backlink
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    prev_seen?: string | null;
    /**
     * most recent date when our crawler visited the backlink
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    last_seen?: string | null;
    /**
     * link type
     * possible values:
     * anchor, image, link, meta, canonical, alternate, redirect
     */
    item_type?: string | null;
    /**
     * link attributes of the referring links
     * example:
     * nofollow
     */
    attributes?: Array<string | null> | null;
    /**
     * indicates whether the backlink is dofollow
     * if false, the backlink is nofollow
     */
    dofollow?: boolean | null;
    /**
     * indicates whether the backlink was present on the referring page when our crawler first visited it
     */
    original?: boolean | null;
    /**
     * alternative text of the image
     * this field will be null if backlink type is not image
     */
    alt?: string | null;
    /**
     * anchor text of the backlink
     */
    anchor?: string | null;
    /**
     * text snippet before the anchor text
     */
    text_pre?: string | null;
    /**
     * snippet after the anchor text
     */
    text_post?: string | null;
    /**
     * indicates semantic element in HTML where the backlink is found
     * you can get the full list of semantic elements here
     * examples:
     * article, section, summary
     */
    semantic_location?: string | null;
    /**
     * number of identical backlinks found on the referring page
     */
    links_count?: number | null;
    /**
     * indicates total number of backlinks from this domain
     * for example, if mode is set to one_per_domain, this field will indicate the total number of backlinks coming from this domain
     */
    group_count?: number | null;
    /**
     * indicates whether the backlink is broken
     * if true, the backlink is pointing to a page responding with a 4xx or 5xx status code
     */
    is_broken?: boolean | null;
    /**
     * status code of the referenced page
     * if the value is null, our crawler hasn’t yet visited the webpage the link is pointing to
     * example:
     * 200
     */
    url_to_status_code?: number | null;
    /**
     * spam score of the referenced page
     * if the value is null, our crawler hasn’t yet visited the webpage the link is pointing to
     * learn more about how the metric is calculated on this help center page
     */
    url_to_spam_score?: number | null;
    /**
     * target url of the redirect
     * target page the redirect is pointing to
     */
    url_to_redirect_target?: string | null;
    /**
     * indicates whether the backlink is an indirect link
     * if true, the backlink is an indirect link pointing to a page that either redirects to url_to, or points to a canonical page
     */
    is_indirect_link?: boolean | null;
    /**
     * indirect link path
     * indicates a URL or a sequence of URLs that lead to url_to
     */
    indirect_link_path?: Array<BacklinksRedirectInfo | null> | null;
};

export type BacklinksPageIntersectionLiveItem = {
    /**
     * contains data on pages that link to the corresponding targets specified in the POST array
     * data is provided in separate objects corresponding to pages specified in the targets object
     */
    page_intersection?: {
        [key: string]: Array<BacklinksPageIntersection | null> | null;
    } | null;
    /**
     * contains the page intersections summary
     */
    summary?: IntersectionSummaryInfo | null;
};

export type BacklinksPageIntersectionLiveResultInfo = {
    /**
     * targets from a POST array
     */
    targets?: {
        [key: string]: string | null;
    } | null;
    /**
     * total amount of results relevant the request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains relevant backlinks and referring domains data
     */
    items?: Array<BacklinksPageIntersectionLiveItem | null> | null;
};

export type BacklinksPageIntersectionLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BacklinksPageIntersectionLiveResultInfo | null> | null;
};

export type BacklinksPageIntersectionLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BacklinksPageIntersectionLiveTaskInfo | null> | null;
};

export type BacklinksTimeseriesSummaryLiveRequestInfo = {
    /**
     * domain to get data for
     * required field
     * a domain should be specified without https:// and www.
     * example:
     * "forbes.com"
     */
    target?: string;
    /**
     * starting date of the time range
     * optional field
     * this field indicates the date which will be used as a threshold for summary data;
     * minimum value: 2019-01-30
     * maximum value shouldn’t exceed the date specified in the date_to
     * date format: "yyyy-mm-dd"
     * example:
     * "2021-01-01"
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * if you don’t specify this field, the today’s date will be used by default
     * minimum value shouldn’t preceed the date specified in the date_from
     * maximum value: today’s date
     * date format: "yyyy-mm-dd"
     * example:
     * "2021-01-15"
     */
    date_to?: string | null;
    /**
     * time range which will be used to group the results
     * optional field
     * default value: month
     * possible values: day, week, month, year
     * note: for day, we will return items corresponding to all dates between and including date_from and date_to;
     * for week/month/year, we will return items corresponding to full weeks/months/years, where each item will indicate the last day of the week/month/year
     * for example, if you specify:
     * "group_range": "month",
     * "date_from": "2022-03-23",
     * "date_to": "2022-05-13"
     * we will return items falling between 2022-03-01 and 2022-05-31, namely, three items corresponding to the following dates: 2022-03-31, 2022-04-30, 2022-05-31
     * if there is no data for a certain  day/week/month/year, we will return 0
     */
    group_range?: string | null;
    /**
     * indicates if the subdomains of the target will be included in the search
     * optional field
     * if set to false, the subdomains will be ignored
     * default value: true
     */
    include_subdomains?: boolean | null;
    /**
     * defines the scale used for calculating and displaying the rank, domain_from_rank, and page_from_rank values
     * optional field
     * you can use this parameter to choose whether rank values are presented on a 0–100 or 0–1000 scale
     * possible values:
     * one_hundred — rank values are displayed on a 0–100 scale
     * one_thousand — rank values are displayed on a 0–1000 scale
     * default value: one_thousand
     * learn more about how this parameter works and how ranking metrics are calculated in this Help Center article
     */
    rank_scale?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BacklinksTimeseriesSummaryLiveItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * date and time when the data for the target was stored
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    date?: string | null;
    /**
     * target rank for the given date
     * learn more about the metric and how it is calculated in this help center article
     */
    rank?: number | null;
    /**
     * number of backlinks for the given date
     */
    backlinks?: number | null;
    /**
     * number of nofollow backlinks for the given date
     */
    backlinks_nofollow?: number | null;
    /**
     * number of pages pointing to target for the given date
     */
    referring_pages?: number | null;
    /**
     * number of referring pages pointing at least one nofollow link to the target for the given date
     */
    referring_pages_nofollow?: number | null;
    /**
     * number of referring domains for the given date
     * referring domains include subdomains that are counted as separate domains for this metric
     */
    referring_domains?: number | null;
    /**
     * number of domains pointing at least one nofollow link to the target for the given date
     */
    referring_domains_nofollow?: number | null;
    /**
     * number of referring main domains for the given date
     */
    referring_main_domains?: number | null;
    /**
     * number of main domains pointing at least one nofollow link to the target for the given date
     */
    referring_main_domains_nofollow?: number | null;
    /**
     * number of referring IP addresses for the given date
     * number of IP addresses pointing to this page
     */
    referring_ips?: number | null;
    /**
     * number of referring subnetworks for the given date
     */
    referring_subnets?: number | null;
};

export type BacklinksTimeseriesSummaryLiveResultInfo = {
    /**
     * target from a POST array
     */
    target?: string | null;
    /**
     * starting date of the time range
     * in the UTC format: “yyyy-mm-dd”
     * example:
     * 2019-01-01
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * in the UTC format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    date_to?: string | null;
    /**
     * group_range from a POST array
     */
    group_range?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains relevant summary data
     */
    items?: Array<BacklinksTimeseriesSummaryLiveItem | null> | null;
};

export type BacklinksTimeseriesSummaryLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BacklinksTimeseriesSummaryLiveResultInfo | null> | null;
};

export type BacklinksTimeseriesSummaryLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BacklinksTimeseriesSummaryLiveTaskInfo | null> | null;
};

export type BacklinksTimeseriesNewLostSummaryLiveRequestInfo = {
    /**
     * domain to get data for
     * required field
     * a domain should be specified without https:// and www.
     * example:
     * "forbes.com"
     */
    target?: string;
    /**
     * starting date of the time range
     * optional field
     * this field indicates the date which will be used as a threshold for new and lost backlinks and referring domains;
     * the backlinks and referring domains that appeared in our index after the specified date will be considered as new;
     * the backlinks and referring domains that weren’t found after the specified date, but were present before, will be considered as lost;
     * minimum value: 2019-01-30
     * maximum value shouldn’t exceed the date specified in the date_to
     * date format: "yyyy-mm-dd"
     * example:
     * "2021-01-01"
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * optional field
     * if you don’t specify this field, the today’s date will be used by default
     * minimum value shouldn’t preceed the date specified in the date_from
     * maximum value: today’s date
     * date format: "yyyy-mm-dd"
     * example:
     * "2021-01-15"
     */
    date_to?: string | null;
    /**
     * time range which will be used to group the results
     * optional field
     * default value: month
     * possible values: day, week, month, year
     * note: for day, we will return items corresponding to all dates between and including date_from and date_to;
     * for week/month/year, we will return items corresponding to full weeks/months/years, where each item will indicate the last day of the week/month/year
     * for example, if you specify:
     * "group_range": "month",
     * "date_from": "2022-03-23",
     * "date_to": "2022-05-13"
     * we will return items falling between 2022-03-01 and 2022-05-31, namely, three items corresponding to the following dates: 2022-03-31, 2022-04-30, 2022-05-31
     * if there is no data for a certain  day/week/month/year, we will return 0
     */
    group_range?: string | null;
    /**
     * indicates if the subdomains of the target will be included in the search
     * optional field
     * if set to false, the subdomains will be ignored
     * default value: true
     */
    include_subdomains?: boolean | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BacklinksTimeseriesNewLostSummaryLiveItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * date and time when the data for the target was stored
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    date?: string | null;
    /**
     * number of new backlinks
     * number of new backlinks pointing to the target
     */
    new_backlinks?: number | null;
    /**
     * number of lost backlinks
     * number of lost backlinks of the target
     */
    lost_backlinks?: number | null;
    /**
     * number of new referring domains
     * number of new referring domains pointing to the target
     */
    new_referring_domains?: number | null;
    /**
     * number of lost referring domains
     * number of lost referring domains of the target
     */
    lost_referring_domains?: number | null;
    /**
     * number of new referring main domains
     * number of new referring main domains pointing to the target
     */
    new_referring_main_domains?: number | null;
    /**
     * number of lost referring main domains
     * number of lost referring main domains of the target
     */
    lost_referring_main_domains?: number | null;
};

export type BacklinksTimeseriesNewLostSummaryLiveResultInfo = {
    /**
     * target from a POST array
     */
    target?: string | null;
    /**
     * starting date of the time range
     * in the UTC format: “yyyy-mm-dd”
     * example:
     * 2019-01-01
     */
    date_from?: string | null;
    /**
     * ending date of the time range
     * in the UTC format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    date_to?: string | null;
    /**
     * group_range from the POST array
     */
    group_range?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains relevant backlinks and referring domains data
     */
    items?: Array<BacklinksTimeseriesNewLostSummaryLiveItem | null> | null;
};

export type BacklinksTimeseriesNewLostSummaryLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BacklinksTimeseriesNewLostSummaryLiveResultInfo | null> | null;
};

export type BacklinksTimeseriesNewLostSummaryLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BacklinksTimeseriesNewLostSummaryLiveTaskInfo | null> | null;
};

export type BacklinksBulkRanksLiveRequestInfo = {
    /**
     * domains, subdomains or webpages to get rank for
     * required field
     * you can set up to 1000 domains, subdomains or webpages
     * the domain or subdomain should be specified without https:// and www.
     * the page should be specified with absolute URL (including http:// or https://)
     * example:
     * "targets": [
     * "forbes.com",
     * "cnn.com",
     * "bbc.com",
     * "yelp.com",
     * "https://www.apple.com/iphone/",
     * "https://ahrefs.com/blog/",
     * "ibm.com",
     * "https://variety.com/",
     * "https://stackoverflow.com/",
     * "www.trustpilot.com"
     * ]
     */
    targets?: Array<string>;
    /**
     * defines the scale used for calculating and displaying the rank, domain_from_rank, and page_from_rank values
     * optional field
     * you can use this parameter to choose whether rank values are presented on a 0–100 or 0–1000 scale
     * possible values:
     * one_hundred — rank values are displayed on a 0–100 scale
     * one_thousand — rank values are displayed on a 0–1000 scale
     * default value: one_thousand
     * learn more about how this parameter works and how ranking metrics are calculated in this Help Center article
     */
    rank_scale?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BacklinksBulkRanksLiveItem = {
    /**
     * domain, subdomain or webpage from a POST array
     */
    target?: string | null;
    /**
     * rank of the target
     * values represent real-time data for the date of the request
     * rank is calculated based on the method for node ranking in a linked database – a principle used in the original Google PageRank algorithm
     * learn more about the metric and how it is calculated in this help center article
     */
    rank?: number | null;
};

export type BacklinksBulkRanksLiveResultInfo = {
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains relevant backlinks and referring domains data
     */
    items?: Array<BacklinksBulkRanksLiveItem | null> | null;
};

export type BacklinksBulkRanksLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BacklinksBulkRanksLiveResultInfo | null> | null;
};

export type BacklinksBulkRanksLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BacklinksBulkRanksLiveTaskInfo | null> | null;
};

export type BacklinksBulkBacklinksLiveRequestInfo = {
    /**
     * domains, subdomains or webpages to get the number of backlinks for
     * required field
     * you can set up to 1000 domains, subdomains or webpages
     * the domain or subdomain should be specified without https:// and www.
     * the page should be specified with absolute URL (including http:// or https://)
     * example:
     * "targets": [
     * "forbes.com",
     * "cnn.com",
     * "bbc.com",
     * "yelp.com",
     * "https://www.apple.com/iphone/",
     * "https://ahrefs.com/blog/",
     * "ibm.com",
     * "https://variety.com/",
     * "https://stackoverflow.com/",
     * "www.trustpilot.com"
     * ]
     */
    targets?: Array<string>;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BacklinksBulkBacklinksLiveItem = {
    /**
     * domain, subdomain or webpage from a POST array
     */
    target?: string | null;
    /**
     * number of backlinks pointing to the target
     */
    backlinks?: number | null;
};

export type BacklinksBulkBacklinksLiveResultInfo = {
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains relevant backlink data
     */
    items?: Array<BacklinksBulkBacklinksLiveItem | null> | null;
};

export type BacklinksBulkBacklinksLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BacklinksBulkBacklinksLiveResultInfo | null> | null;
};

export type BacklinksBulkBacklinksLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BacklinksBulkBacklinksLiveTaskInfo | null> | null;
};

export type BacklinksBulkSpamScoreLiveRequestInfo = {
    /**
     * domains, subdomains or webpages to get rank for
     * required field
     * you can set up to 1000 domains, subdomains or webpages
     * the domain or subdomain should be specified without https:// and www.
     * the page should be specified with absolute URL (including http:// or https://)
     * example:
     * "targets": [
     * "forbes.com",
     * "cnn.com",
     * "bbc.com",
     * "yelp.com",
     * "https://www.apple.com/iphone/",
     * "https://ahrefs.com/blog/",
     * "ibm.com",
     * "https://variety.com/",
     * "https://stackoverflow.com/",
     * "www.trustpilot.com"
     * ]
     */
    targets?: Array<string>;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BacklinksBulkSpamScoreLiveItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * domain, subdomain or webpage from a POST array
     */
    target?: string | null;
    /**
     * average spam score the target
     * learn more about how the metric is calculated
     */
    spam_score?: number | null;
};

export type BacklinksBulkSpamScoreLiveResultInfo = {
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains relevant backlinks and referring domains data
     */
    items?: Array<BacklinksBulkSpamScoreLiveItem | null> | null;
};

export type BacklinksBulkSpamScoreLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BacklinksBulkSpamScoreLiveResultInfo | null> | null;
};

export type BacklinksBulkSpamScoreLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BacklinksBulkSpamScoreLiveTaskInfo | null> | null;
};

export type BacklinksBulkReferringDomainsLiveRequestInfo = {
    /**
     * domains, subdomains or webpages to get the number of referring domains for
     * required field
     * you can set up to 1000 domains, subdomains or webpages
     * the domain or subdomain should be specified without https:// and www.
     * the page should be specified with absolute URL (including http:// or https://)
     * example:
     * "targets": [
     * "forbes.com",
     * "cnn.com",
     * "bbc.com",
     * "yelp.com",
     * "https://www.apple.com/iphone/",
     * "https://ahrefs.com/blog/",
     * "ibm.com",
     * "https://variety.com/",
     * "https://stackoverflow.com/",
     * "www.trustpilot.com"
     * ]
     */
    targets?: Array<string>;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BacklinksBulkReferringDomainsLiveItem = {
    /**
     * domain, subdomain or webpage from a POST array
     */
    target?: string | null;
    /**
     * number of referring domains pointing to the target
     * note that we calculate main domains (root domains, like example.com) and their subdomains (e.g. blog.example.com) separately for this metric
     */
    referring_domains?: number | null;
    /**
     * number of domains pointing at least one nofollow link to the target
     */
    referring_domains_nofollow?: number | null;
    /**
     * number of referring main domains pointing to the target
     * the number of primary (root) domains referring to your target
     */
    referring_main_domains?: number | null;
    /**
     * number of main domains pointing at least one nofollow link to the target
     */
    referring_main_domains_nofollow?: number | null;
};

export type BacklinksBulkReferringDomainsLiveResultInfo = {
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains relevant backlinks and referring domains data
     */
    items?: Array<BacklinksBulkReferringDomainsLiveItem | null> | null;
};

export type BacklinksBulkReferringDomainsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BacklinksBulkReferringDomainsLiveResultInfo | null> | null;
};

export type BacklinksBulkReferringDomainsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BacklinksBulkReferringDomainsLiveTaskInfo | null> | null;
};

export type BacklinksBulkNewLostBacklinksLiveRequestInfo = {
    /**
     * domains, subdomains or webpages to get new & lost backlinks for
     * required field
     * you can set up to 1000 domains, subdomains or webpages
     * the domain or subdomain should be specified without https:// and www.
     * the page should be specified with absolute URL (including http:// or https://)
     * example:
     * "targets": [
     * "forbes.com",
     * "cnn.com",
     * "bbc.com",
     * "yelp.com",
     * "https://www.apple.com/iphone/",
     * "https://ahrefs.com/blog/",
     * "ibm.com",
     * "https://variety.com/",
     * "https://stackoverflow.com/",
     * "www.trustpilot.com"
     * ]
     */
    targets?: Array<string>;
    /**
     * starting date of the time range
     * optional field
     * this field indicates the date which will be used as a threshold for new and lost backlinks;
     * the backlinks that appeared in our index after the specified date will be considered as new;
     * the backlinks that weren’t found after the specified date, but were present before, will be considered as lost;
     * default value: today’s date -(minus) one month;
     * e.g. if today is 2021-10-13, default date_from will be 2021-09-13.
     * minimum value equals today’s date -(minus) one year;
     * e.g. if today is 2021-10-13, minimum date_from will be 2020-10-13.
     * date format: "yyyy-mm-dd"
     * example:
     * "2021-01-01"
     */
    date_from?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BacklinksBulkNewLostBacklinksLiveItem = {
    /**
     * domain, subdomain or webpage from a POST array
     */
    target?: string | null;
    /**
     * number of new backlinks
     * number of new backlinks pointing to the target
     */
    new_backlinks?: number | null;
    /**
     * number of lost backlinks
     * number of lost backlinks of the target
     */
    lost_backlinks?: number | null;
};

export type BacklinksBulkNewLostBacklinksLiveResultInfo = {
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains relevant backlinks and referring domains data
     */
    items?: Array<BacklinksBulkNewLostBacklinksLiveItem | null> | null;
};

export type BacklinksBulkNewLostBacklinksLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BacklinksBulkNewLostBacklinksLiveResultInfo | null> | null;
};

export type BacklinksBulkNewLostBacklinksLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BacklinksBulkNewLostBacklinksLiveTaskInfo | null> | null;
};

export type BacklinksBulkNewLostReferringDomainsLiveRequestInfo = {
    /**
     * domains, subdomains or webpages to get  new & lost referring domains for
     * required field
     * you can set up to 1000 domains, subdomains or webpages
     * the domain or subdomain should be specified without https:// and www.
     * the page should be specified with absolute URL (including http:// or https://)
     * example:
     * "targets": [
     * "forbes.com",
     * "cnn.com",
     * "bbc.com",
     * "yelp.com",
     * "https://www.apple.com/iphone/",
     * "https://ahrefs.com/blog/",
     * "ibm.com",
     * "https://variety.com/",
     * "https://stackoverflow.com/",
     * "www.trustpilot.com"
     * ]
     */
    targets?: Array<string>;
    /**
     * starting date of the time range
     * optional field
     * this field indicates the date which will be used as a threshold for new and lost referring domains;
     * the referring domains that appeared in our index after the specified date will be considered as new;
     * the referring domains that weren’t found after the specified date, but were present before, will be considered as lost;
     * default value: today’s date -(minus) one month;
     * e.g. if today is 2021-10-13, default date_from will be 2021-09-13.
     * minimum value equals today’s date -(minus) one year;
     * e.g. if today is 2021-10-13, minimum date_from will be 2020-10-13.
     * date format: "yyyy-mm-dd"
     * example:
     * "2021-01-01"
     */
    date_from?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BacklinksBulkNewLostReferringDomainsLiveItem = {
    /**
     * domain, subdomain or webpage from a POST array
     */
    target?: string | null;
    /**
     * number of new referring domains
     * number of new referring domains pointing to the target
     */
    new_referring_domains?: number | null;
    /**
     * number of lost referring domains
     * number of lost referring domains of the target
     */
    lost_referring_domains?: number | null;
    /**
     * number of new referring main domains pointing to the target
     */
    new_referring_main_domains?: number | null;
    /**
     * number of lost referring main domains pointing to the target
     */
    lost_referring_main_domains?: number | null;
};

export type BacklinksBulkNewLostReferringDomainsLiveResultInfo = {
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains relevant backlinks and referring domains data
     */
    items?: Array<BacklinksBulkNewLostReferringDomainsLiveItem | null> | null;
};

export type BacklinksBulkNewLostReferringDomainsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BacklinksBulkNewLostReferringDomainsLiveResultInfo | null> | null;
};

export type BacklinksBulkNewLostReferringDomainsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BacklinksBulkNewLostReferringDomainsLiveTaskInfo | null> | null;
};

export type BacklinksBulkPagesSummaryLiveRequestInfo = {
    /**
     * domains, subdomains or webpages to get summary data for
     * required field
     * a domain or a subdomain should be specified without https:// and www.
     * a page should be specified with absolute URL (including http:// or https://)
     * you can specify up to 1000 pages, domains, or subdomains in each request.
     * note that the URLs you set in a single request cannot belong to more than 100 different domains.
     */
    targets?: Array<string>;
    /**
     * indicates if the subdomains of the target will be included in the search
     * optional field
     * if set to false, the subdomains will be ignored
     * default value: true
     */
    include_subdomains?: boolean | null;
    /**
     * defines the scale used for calculating and displaying the rank, domain_from_rank, and page_from_rank values
     * optional field
     * you can use this parameter to choose whether rank values are presented on a 0–100 or 0–1000 scale
     * possible values:
     * one_hundred — rank values are displayed on a 0–100 scale
     * one_thousand — rank values are displayed on a 0–1000 scale
     * default value: one_thousand
     * learn more about how this parameter works and how ranking metrics are calculated in this Help Center article
     */
    rank_scale?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BacklinksBulkPagesSummaryLiveItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * page URL
     */
    url?: string | null;
    /**
     * page rank
     * rank of the page on the target website
     * rank is calculated based on the method for node ranking in a linked database – a principle used in the original Google PageRank algorithm
     * learn more about the metric and how it is calculated in this help center article
     */
    rank?: number | null;
    /**
     * rank of the main domain
     * rank of the main domain is calculated based on the method for node ranking in a linked database – a principle used in the original Google PageRank algorithm
     * learn more about the metric and how it is calculated in this help center article
     */
    main_domain_rank?: number | null;
    /**
     * number of backlinks
     */
    backlinks?: number | null;
    /**
     * date and time when our crawler found a backlink to this page for the first time
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    first_seen?: string | null;
    /**
     * date and time when the last backlink to this page was lost
     * indicates the date and time when our crawler visited the page and it responded with 4xx or 5xx status code or the last backlink was removed
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2017-01-24 13:20:59 +00:00
     */
    lost_date?: string | null;
    /**
     * average spam score of the backlinks pointing to the page
     * learn more about how the metric is calculated on this help center page
     */
    backlinks_spam_score?: number | null;
    /**
     * number of broken backlinks
     * number of broken backlinks pointing to the page
     */
    broken_backlinks?: number | null;
    /**
     * number of broken pages
     * number of pages that respond with 4xx or 5xx status codes where backlinks are pointing to
     */
    broken_pages?: number | null;
    /**
     * indicates the number domains referring to the page
     */
    referring_domains?: number | null;
    /**
     * number of domains pointing at least one nofollow link to the target
     */
    referring_domains_nofollow?: number | null;
    /**
     * indicates the number of referring main domains
     */
    referring_main_domains?: number | null;
    referring_main_domains_nofollow?: number | null;
    /**
     * number of referring IP addresses
     * number of IP addresses pointing to this page
     */
    referring_ips?: number | null;
    /**
     * number of referring subnetworks
     */
    referring_subnets?: number | null;
    /**
     * indicates the number of pages pointing to the relevant url
     */
    referring_pages?: number | null;
    /**
     * number of referring pages pointing at least one nofollow link to the target
     */
    referring_pages_nofollow?: number | null;
    /**
     * top-level domains of the referring links
     * contains top level domains and referring link count per each
     */
    referring_links_tld?: {
        [key: string]: number | null;
    } | null;
    /**
     * types of referring links
     * indicates the types of the referring links and link count per each type
     * possible values:
     * anchor, image, link, meta, canonical, alternate, redirect
     */
    referring_links_types?: {
        [key: string]: number | null;
    } | null;
    /**
     * link attributes of the referring links
     * indicates link attributes of the referring links and link count per each attribute
     */
    referring_links_attributes?: {
        [key: string]: number | null;
    } | null;
    /**
     * types of referring platforms
     * indicates referring platform types and and link count per each platform
     * possible values: cms, blogs, ecommerce, message-boards, wikis, news, organization
     */
    referring_links_platform_types?: {
        [key: string]: number | null;
    } | null;
    /**
     * semantic locations of the referring links
     * indicates semantic elements in HTML where the referring links are located and link count per each semantic location
     * you can get the full list of semantic elements here
     * examples:
     * article, section, footer
     */
    referring_links_semantic_locations?: {
        [key: string]: number | null;
    } | null;
    /**
     * ISO country codes of the referring links
     * indicates ISO country codes of the domains where the referring links are located and the link count per each country
     */
    referring_links_countries?: {
        [key: string]: number | null;
    } | null;
};

export type BacklinksBulkPagesSummaryLiveResultInfo = {
    /**
     * total number of relevant items in the database
     */
    total_count?: number | null;
    /**
     * number of items in the results array
     */
    items_count?: number | null;
    /**
     * items array
     */
    items?: Array<BacklinksBulkPagesSummaryLiveItem | null> | null;
};

export type BacklinksBulkPagesSummaryLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BacklinksBulkPagesSummaryLiveResultInfo | null> | null;
};

export type BacklinksBulkPagesSummaryLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BacklinksBulkPagesSummaryLiveTaskInfo | null> | null;
};

export type AiOptimizationChatGptLlmResponsesModelsResultInfo = {
    /**
     * name of the AI model
     */
    model_name?: string | null;
    /**
     * web search support for the AI model
     * if true, the web_search parameter can be set with the AI model
     */
    web_search_supported?: boolean | null;
    /**
     * indicates if Standard (POST-GET) data retrieval is supported
     * if true, you can use the Standard (POST-GET) data retrieval method with the AI model
     */
    task_post_supported?: boolean | null;
};

export type AiOptimizationChatGptLlmResponsesModelsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AiOptimizationChatGptLlmResponsesModelsResultInfo | null> | null;
};

export type AiOptimizationChatGptLlmResponsesModelsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AiOptimizationChatGptLlmResponsesModelsTaskInfo | null> | null;
};

export type AiOptimizationChatGptLlmResponsesLiveRequestInfo = {
    /**
     * prompt for the AI model
     * required field
     * the question or task you want to send to the AI model;
     * you can specify up to 500 characters in the user_prompt field
     */
    user_prompt?: string;
    /**
     * name of the AI model
     * required field
     * model_nameconsists of the actual model name and version name;
     * if the basic model name is specified, its latest version will be set by default;
     * for example, if gpt-4.1 is specified, the gpt-4.1-2025-04-14 will be set as model_name automatically;
     * you can receive the list of available LLM models by making a separate request to the https://api.dataforseo.com/v3/ai_optimization/chat_gpt/llm_responses/models
     */
    model_name?: string;
    /**
     * maximum number of tokens in the AI response
     * optional field
     * minimum value for reasoning models (e.g., model_name starts with ‘o’): 1024;
     * minimum value for non-reasoning models: 16;
     * maximum value for reasoning models: 4096;
     * maximum value for non-reasoning models: 2048;
     * default value for both reasoning and non-reasoning models: 2048;
     * Note: when web_search is set to true, the output token count may exceed the specified max_output_tokens limit
     */
    max_output_tokens?: number | null;
    /**
     * randomness of the AI response
     * optional field
     * higher values make output more diverse;
     * lower values make output more focused;
     * minimum value: 0
     * maximum value: 2
     * default value: 0.94
     * Note: not supported in reasoning models
     */
    temperature?: number | null;
    /**
     * diversity of the AI response
     * optional field
     * controls diversity of the response by limiting token selection;
     * minimum value: 0
     * maximum value: 1
     * default value: 0.92
     * Note: not supported in reasoning models
     */
    top_p?: number | null;
    /**
     * enable web search
     * optional field
     * when enabled, the AI model can access and cite current web information;
     * default value: false;
     * Note: refer to the Models endpoint for a list of models that support web_search;
     */
    web_search?: boolean | null;
    /**
     * force AI agent to use web search
     * optional field
     * to enable this parameter, web_search must also be enabled;
     * when enabled, the AI model is forced to access and cite current web information;
     * default value: false;
     * Note: even if the parameter is set to true, there is no guarantee web sources will be cited in the response
     * Note #2: not supported in reasoning models
     */
    force_web_search?: boolean | null;
    /**
     * ISO country code of the location
     * optional field
     * required if web_search_city is specified;
     * to enable this parameter, web_search must also be enabled;
     * when enabled, the AI model will search the web from the country you specify;
     * Note: not supported in o3-mini, o1-pro, o1 models
     */
    web_search_country_iso_code?: string | null;
    /**
     * city name of the location
     * optional field
     * Note: specify web_search_country_iso_code to use this parameter
     * Note #2: not supported in o3-mini, o1-pro, o1 models
     */
    web_search_city?: string | null;
    /**
     * instructions for the AI behaviour
     * optional field
     * defines the AI’s role, tone, or specific behavior
     * you can specify up to 500 characters in the system_message field
     */
    system_message?: string | null;
    /**
     * conversation history
     * optional field
     * array of message objects representing previous conversation turns;
     * each object must contain:
     * role string with either user or ai role;
     * message string with message content (max 500 characters);
     * you can specify maximum of 10 message objects in the array;
     * Note: for Perplexity models, messages must strictly alternate between user and AI roles (user → ai);
     * example:
     * "message_chain": [{"role":"user","message":"Hello, what’s up?"},{"role":"ai","message":"Hello! I’m doing well, thank you. How can I assist you today?"}]
     */
    message_chain?: Array<LlmMessageChainItem | null> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type AnnotationInfo = {
    /**
     * the domain name or title of the quoted source
     */
    title?: string | null;
    /**
     * URL of the quoted source
     */
    url?: string | null;
};

export type LlmMessageSectionInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * AI-generated text content
     */
    text?: string | null;
    /**
     * array of references used to generate the response
     * equals null if the web_search parameter is not set to true
     * Note: annotations may return empty even when web_search is true, as the AI will attempt to retrieve web information but may not find relevant results
     */
    annotations?: Array<AnnotationInfo | null> | null;
};

export type AiOptimizationItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * array of content sections
     * contains different parts of the AI response
     */
    sections?: Array<LlmMessageSectionInfo | null> | null;
};

export type AiOptimizationChatGptLlmResponsesLiveResultInfo = {
    /**
     * name of the AI model used
     */
    model_name?: string | null;
    /**
     * number of tokens in the input
     * total count of tokens processed
     */
    input_tokens?: number | null;
    /**
     * number of tokens in the output
     * total count of tokens generated in the AI response
     */
    output_tokens?: number | null;
    /**
     * indicates if web search was used
     */
    web_search?: boolean | null;
    /**
     * cost of AI tokens, USD
     * the price charged by the third-party AI model provider for according to its Pricing
     */
    money_spent?: number | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * array of response items
     * contains structured AI response data
     */
    items?: Array<AiOptimizationItem | null> | null;
};

export type AiOptimizationChatGptLlmResponsesLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AiOptimizationChatGptLlmResponsesLiveResultInfo | null> | null;
};

export type AiOptimizationChatGptLlmResponsesLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AiOptimizationChatGptLlmResponsesLiveTaskInfo | null> | null;
};

export type AiOptimizationChatGptLlmResponsesTaskPostRequestInfo = {
    /**
     * prompt for the AI model
     * required field
     * the question or task you want to send to the AI model;
     * you can specify up to 500 characters in the user_prompt field
     */
    user_prompt?: string;
    /**
     * name of the AI model
     * required field
     * model_nameconsists of the actual model name and version name;
     * if the basic model name is specified, its latest version will be set by default;
     * for example, if gpt-4.1 is specified, the gpt-4.1-2025-04-14 will be set as model_name automatically;
     * you can receive the list of available LLM models by making a separate request to the https://api.dataforseo.com/v3/ai_optimization/chat_gpt/llm_responses/models
     */
    model_name?: string;
    /**
     * maximum number of tokens in the AI response
     * optional field
     * minimum value for reasoning models (e.g., model_name starts with ‘o’): 1024;
     * minimum value for non-reasoning models: 16;
     * maximum value for reasoning models: 4096;
     * maximum value for non-reasoning models: 2048;
     * default value for both reasoning and non-reasoning models: 2048;
     */
    max_output_tokens?: number | null;
    /**
     * randomness of the AI response
     * optional field
     * higher values make output more diverse;
     * lower values make output more focused;
     * minimum value: 0
     * maximum value: 2
     * default value: 0.94
     * Note: not supported in reasoning models
     */
    temperature?: number | null;
    /**
     * diversity of the AI response
     * optional field
     * controls diversity of the response by limiting token selection;
     * minimum value: 0
     * maximum value: 1
     * default value: 0.92
     * Note: not supported in reasoning models
     */
    top_p?: number | null;
    /**
     * instructions for the AI behaviour
     * optional field
     * defines the AI’s role, tone, or specific behavior;
     * you can specify up to 500 characters in the system_message field
     */
    system_message?: string | null;
    /**
     * conversation history
     * optional field
     * array of message objects representing previous conversation turns;
     * each object must contain:
     * role string with either user or ai role;
     * message string with message content (max 500 characters);
     * you can specify maximum of 10 message objects in the array;
     * Note: for Perplexity models, messages must strictly alternate between user and AI roles (user → ai);
     * example:
     * "message_chain": [{"role":"user","message":"Hello, what’s up?"},{"role":"ai","message":"Hello! I’m doing well, thank you. How can I assist you today?"}]
     */
    message_chain?: Array<LlmMessageChainItem | null> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data array of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special character in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special character in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type AiOptimizationChatGptLlmResponsesTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type AiOptimizationChatGptLlmResponsesTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AiOptimizationChatGptLlmResponsesTaskPostTaskInfo | null> | null;
};

export type AiOptimizationChatGptLlmResponsesTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * LLM model specified when setting the task
     */
    se?: string | null;
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the task
     */
    endpoint?: string | null;
};

export type AiOptimizationChatGptLlmResponsesTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AiOptimizationChatGptLlmResponsesTasksReadyResultInfo | null> | null;
};

export type AiOptimizationChatGptLlmResponsesTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AiOptimizationChatGptLlmResponsesTasksReadyTaskInfo | null> | null;
};

export type AiOptimizationChatGptLlmResponsesTaskGetResultInfo = {
    /**
     * name of the AI model used
     */
    model_name?: string | null;
    /**
     * number of tokens in the input
     * total count of tokens processed
     */
    input_tokens?: number | null;
    /**
     * number of tokens in the output
     * total count of tokens generated in the AI response
     */
    output_tokens?: number | null;
    /**
     * indicates if web search was used
     */
    web_search?: boolean | null;
    /**
     * cost of AI tokens, USD
     * the price charged by the third-party AI model provider for according to its Pricing
     */
    money_spent?: number | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * array of response items
     * contains structured AI response data
     */
    items?: Array<AiOptimizationItem | null> | null;
};

export type AiOptimizationChatGptLlmResponsesTaskGetTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AiOptimizationChatGptLlmResponsesTaskGetResultInfo | null> | null;
};

export type AiOptimizationChatGptLlmResponsesTaskGetResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AiOptimizationChatGptLlmResponsesTaskGetTaskInfo | null> | null;
};

export type AiOptimizationClaudeLlmResponsesModelsResultInfo = {
    /**
     * name of the AI model
     */
    model_name?: string | null;
    /**
     * web search support for the AI model
     * if true, the web_search parameter can be set with the AI model
     */
    web_search_supported?: boolean | null;
    /**
     * indicates if Standard (POST-GET) data retrieval is supported
     * if true, you can use the Standard (POST-GET) data retrieval method with the AI model
     */
    task_post_supported?: boolean | null;
};

export type AiOptimizationClaudeLlmResponsesModelsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AiOptimizationClaudeLlmResponsesModelsResultInfo | null> | null;
};

export type AiOptimizationClaudeLlmResponsesModelsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AiOptimizationClaudeLlmResponsesModelsTaskInfo | null> | null;
};

export type AiOptimizationClaudeLlmResponsesLiveRequestInfo = {
    /**
     * prompt for the AI model
     * required field
     * the question or task you want to send to the AI model;
     * you can specify up to 500 characters in the user_prompt field
     */
    user_prompt?: string;
    /**
     * name of the AI model
     * required field
     * model_nameconsists of the actual model name and version name;
     * if the basic model name is specified, its latest version will be set by default;
     * for example, if claude-opus-4-0 is specified, the claude-opus-4-20250514 will be set as model_name automatically;
     * you can receive the list of available LLM models by making a separate request to the https://api.dataforseo.com/v3/ai_optimization/claude/llm_responses/models
     */
    model_name?: string;
    /**
     * maximum number of tokens in the AI response
     * optional field
     * minimum value: 1
     * maximum value: 2048
     * default value: 2048
     * Note: when web_search is set to true, the output token count may exceed the specified max_output_tokens limit
     */
    max_output_tokens?: number | null;
    /**
     * randomness of the AI response
     * optional field
     * higher values make output more diverse;
     * lower values make output more focused;
     * minimum value: 0
     * maximum value: 1
     * default value: 0.7
     */
    temperature?: number | null;
    /**
     * diversity of the AI response
     * optional field
     * controls diversity of the response by limiting token selection;
     * minimum value: 0
     * maximum value: 1
     * default value: null
     */
    top_p?: number | null;
    /**
     * enable web search for current information
     * optional field
     * when enabled, the AI model can access and cite current web information;
     * Note: refer to the Models endpoint for a list of models that support web_search;
     * default value: false;
     * The cost of the parameter can be calculated on the Pricing page
     */
    web_search?: boolean | null;
    /**
     * force AI agent to use web search
     * optional field
     * to enable this parameter, web_search must also be enabled;
     * when enabled, the AI model is forced to access and cite current web information;
     * default value: false;
     * Note: even if the parameter is set to true, there is no guarantee web sources will be cited in the response
     */
    force_web_search?: boolean | null;
    /**
     * ISO country code of the location
     * optional field
     * possible values: 'AR','AT','AU','BE','BR','CA','CH','CL','CN','DE','DK','ES','FI','FR','GB','HK','ID','IN','IT','JP','KR','MX','MY','NL','NO','NZ','PH','PL','PT','RU','SA','SE','TR','TW','US','ZA'
     */
    web_search_country_iso_code?: string | null;
    /**
     * city name of the location
     * optional field
     * Note: specify web_search_country_iso_code to use this parameter
     */
    web_search_city?: string | null;
    /**
     * instructions for the AI behaviour
     * optional field
     * defines the AI’s role, tone, or specific behavior;
     * you can specify up to 500 characters in the system_message field
     */
    system_message?: string | null;
    /**
     * conversation history
     * optional field
     * array of message objects representing previous conversation turns;
     * each object must contain:
     * role string with either user or ai role;
     * message string with message content (max 500 characters);
     * you can specify maximum of 10 message objects in the array;
     * Note: for Perplexity models, messages must strictly alternate between user and AI roles (user → ai);
     * example:
     * "message_chain": [{"role":"user","message":"Hello, what’s up?"},{"role":"ai","message":"Hello! I’m doing well, thank you. How can I assist you today?"}]
     */
    message_chain?: Array<LlmMessageChainItem | null> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type AiOptimizationClaudeLlmResponsesLiveResultInfo = {
    /**
     * name of the AI model used
     */
    model_name?: string | null;
    /**
     * number of tokens in the input
     * total count of tokens processed
     */
    input_tokens?: number | null;
    /**
     * number of tokens in the output
     * total count of tokens generated in the AI response
     */
    output_tokens?: number | null;
    /**
     * indicates if web search was used
     */
    web_search?: boolean | null;
    /**
     * cost of AI tokens, USD
     * the price charged by the third-party AI model provider for according to its Pricing
     */
    money_spent?: number | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * array of response items
     * contains structured AI response data
     */
    items?: Array<AiOptimizationItem | null> | null;
};

export type AiOptimizationClaudeLlmResponsesLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AiOptimizationClaudeLlmResponsesLiveResultInfo | null> | null;
};

export type AiOptimizationClaudeLlmResponsesLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AiOptimizationClaudeLlmResponsesLiveTaskInfo | null> | null;
};

export type AiOptimizationClaudeLlmResponsesTaskPostRequestInfo = {
    /**
     * prompt for the AI model
     * required field
     * the question or task you want to send to the AI model;
     * you can specify up to 500 characters in the user_prompt field
     */
    user_prompt?: string;
    /**
     * name of the AI model
     * required field
     * model_nameconsists of the actual model name and version name;
     * if the basic model name is specified, its latest version will be set by default;
     * for example, if claude-opus-4-0 is specified, the claude-opus-4-20250514 will be set as model_name automatically;
     * you can receive the list of available LLM models by making a separate request to the https://api.dataforseo.com/v3/ai_optimization/claude/llm_responses/models
     */
    model_name?: string;
    /**
     * maximum number of tokens in the AI response
     * optional field
     * minimum value: 1
     * maximum value: 2048
     * default value: 2048
     * Note: when web_search is set to true, the output token count may exceed the specified max_output_tokens limit
     */
    max_output_tokens?: number | null;
    /**
     * randomness of the AI response
     * optional field
     * higher values make output more diverse;
     * lower values make output more focused;
     * minimum value: 0
     * maximum value: 1
     * default value: 0.7
     */
    temperature?: number | null;
    /**
     * diversity of the AI response
     * optional field
     * controls diversity of the response by limiting token selection;
     * minimum value: 0
     * maximum value: 1
     * default value: null
     */
    top_p?: number | null;
    /**
     * enable web search for current information
     * optional field
     * when enabled, the AI model can access and cite current web information;
     * Note: refer to the Models endpoint for a list of models that support web_search;
     * default value: false;
     * The cost of the parameter can be calculated on the Pricing page
     */
    web_search?: boolean | null;
    /**
     * force AI agent to use web search
     * optional field
     * to enable this parameter, web_search must also be enabled;
     * when enabled, the AI model is forced to access and cite current web information;
     * default value: false;
     * Note: even if the parameter is set to true, there is no guarantee web sources will be cited in the response
     */
    force_web_search?: boolean | null;
    /**
     * ISO country code of the location
     * optional field
     * possible values: 'AR','AT','AU','BE','BR','CA','CH','CL','CN','DE','DK','ES','FI','FR','GB','HK','ID','IN','IT','JP','KR','MX','MY','NL','NO','NZ','PH','PL','PT','RU','SA','SE','TR','TW','US','ZA'
     */
    web_search_country_iso_code?: string | null;
    /**
     * city name of the location
     * optional field
     * Note: specify web_search_country_iso_code to use this parameter
     */
    web_search_city?: string | null;
    /**
     * instructions for the AI behaviour
     * optional field
     * defines the AI’s role, tone, or specific behavior;
     * you can specify up to 500 characters in the system_message field
     */
    system_message?: string | null;
    /**
     * conversation history
     * optional field
     * array of message objects representing previous conversation turns;
     * each object must contain:
     * role string with either user or ai role;
     * message string with message content (max 500 characters);
     * you can specify maximum of 10 message objects in the array;
     * Note: for Perplexity models, messages must strictly alternate between user and AI roles (user → ai);
     * example:
     * "message_chain": [{"role":"user","message":"Hello, what’s up?"},{"role":"ai","message":"Hello! I’m doing well, thank you. How can I assist you today?"}]
     */
    message_chain?: Array<LlmMessageChainItem | null> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data array of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special character in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special character in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type AiOptimizationClaudeLlmResponsesTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type AiOptimizationClaudeLlmResponsesTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AiOptimizationClaudeLlmResponsesTaskPostTaskInfo | null> | null;
};

export type AiOptimizationClaudeLlmResponsesTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * LLM model specified when setting the task
     */
    se?: string | null;
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the task
     */
    endpoint?: string | null;
};

export type AiOptimizationClaudeLlmResponsesTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AiOptimizationClaudeLlmResponsesTasksReadyResultInfo | null> | null;
};

export type AiOptimizationClaudeLlmResponsesTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AiOptimizationClaudeLlmResponsesTasksReadyTaskInfo | null> | null;
};

export type AiOptimizationClaudeLlmResponsesTaskGetResultInfo = {
    /**
     * name of the AI model used
     */
    model_name?: string | null;
    /**
     * number of tokens in the input
     * total count of tokens processed
     */
    input_tokens?: number | null;
    /**
     * number of tokens in the output
     * total count of tokens generated in the AI response
     */
    output_tokens?: number | null;
    /**
     * indicates if web search was used
     */
    web_search?: boolean | null;
    /**
     * cost of AI tokens, USD
     * the price charged by the third-party AI model provider for according to its Pricing
     */
    money_spent?: number | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * array of response items
     * contains structured AI response data
     */
    items?: Array<AiOptimizationItem | null> | null;
};

export type AiOptimizationClaudeLlmResponsesTaskGetTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AiOptimizationClaudeLlmResponsesTaskGetResultInfo | null> | null;
};

export type AiOptimizationClaudeLlmResponsesTaskGetResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AiOptimizationClaudeLlmResponsesTaskGetTaskInfo | null> | null;
};

export type AiOptimizationGeminiLlmResponsesModelsResultInfo = {
    /**
     * name of the AI model
     */
    model_name?: string | null;
    /**
     * web search support for the AI model
     * if true, the web_search parameter can be set with the AI model
     */
    web_search_supported?: boolean | null;
    /**
     * indicates if Standard (POST-GET) data retrieval is supported
     * if true, you can use the Standard (POST-GET) data retrieval method with the AI model
     */
    task_post_supported?: boolean | null;
};

export type AiOptimizationGeminiLlmResponsesModelsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AiOptimizationGeminiLlmResponsesModelsResultInfo | null> | null;
};

export type AiOptimizationGeminiLlmResponsesModelsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AiOptimizationGeminiLlmResponsesModelsTaskInfo | null> | null;
};

export type AiOptimizationGeminiLlmResponsesLiveRequestInfo = {
    /**
     * prompt for the AI model
     * required field
     * the question or task you want to send to the AI model;
     * you can specify up to 500 characters in the user_prompt field
     */
    user_prompt?: string;
    /**
     * name of the AI model
     * required field
     * model_nameconsists of the actual model name and version name;
     * if the basic model name is specified, its latest version will be set by default;
     * for example, if gemini-1.5-pro is specified, the gemini-1.5-pro-002 will be set as model_name automatically;
     * you can receive the list of available LLM models by making a separate request to the https://api.dataforseo.com/v3/ai_optimization/gemini/llm_responses/models
     */
    model_name?: string;
    /**
     * maximum number of tokens in the AI response
     * optional field
     * minimum value: 1
     * maximum value: 2048
     * default value: 2048
     * Note: when web_search is set to true, the output token count may exceed the specified max_output_tokens limit
     */
    max_output_tokens?: number | null;
    /**
     * randomness of the AI response
     * optional field
     * higher values make output more diverse
     * lower values make output more focused
     * minimum value: 0
     * maximum value: 2
     * default value: 1.3
     */
    temperature?: number | null;
    /**
     * diversity of the AI response
     * optional field
     * controls diversity of the response by limiting token selection
     * minimum value: 0
     * maximum value: 1
     * default value: 0.9
     */
    top_p?: number | null;
    /**
     * enable web search for current information
     * optional field
     * when enabled, the AI model can access and cite current web information;
     * Note: refer to the Models endpoint for a list of models that support web_search;
     * default value: false;
     * The cost of the parameter can be calculated on the Pricing page
     */
    web_search?: boolean | null;
    /**
     * instructions for the AI behavior
     * optional field
     * defines the AI’s role, tone, or specific behavior
     * you can specify up to 500 characters in the system_message field
     */
    system_message?: string | null;
    /**
     * conversation history
     * optional field
     * array of message objects representing previous conversation turns;
     * each object must contain:
     * role string with either user or ai role;
     * message string with message content (max 500 characters);
     * you can specify maximum of 10 message objects in the array;
     * Note: for Perplexity models, messages must strictly alternate between user and AI roles (user → ai);
     * example:
     * "message_chain": [{"role":"user","message":"Hello, what’s up?"},{"role":"ai","message":"Hello! I’m doing well, thank you. How can I assist you today?"}]
     */
    message_chain?: Array<LlmMessageChainItem | null> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type AiOptimizationGeminiLlmResponsesLiveResultInfo = {
    /**
     * name of the AI model used
     */
    model_name?: string | null;
    /**
     * number of tokens in the input
     * total count of tokens processed
     */
    input_tokens?: number | null;
    /**
     * number of tokens in the output
     * total count of tokens generated in the AI response
     */
    output_tokens?: number | null;
    /**
     * indicates if web search was used
     */
    web_search?: boolean | null;
    /**
     * cost of AI tokens, USD
     * the price charged by the third-party AI model provider for according to its Pricing
     */
    money_spent?: number | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * array of response items
     * contains structured AI response data
     */
    items?: Array<AiOptimizationItem | null> | null;
};

export type AiOptimizationGeminiLlmResponsesLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AiOptimizationGeminiLlmResponsesLiveResultInfo | null> | null;
};

export type AiOptimizationGeminiLlmResponsesLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AiOptimizationGeminiLlmResponsesLiveTaskInfo | null> | null;
};

export type AiOptimizationPerplexityLlmResponsesModelsResultInfo = {
    /**
     * name of the AI model
     */
    model_name?: string | null;
    /**
     * web search support for the AI model
     * if true, the web_search parameter can be set with the AI model
     */
    web_search_supported?: boolean | null;
    /**
     * indicates if Standard (POST-GET) data retrieval is supported
     * if true, you can use the Standard (POST-GET) data retrieval method with the AI model
     */
    task_post_supported?: boolean | null;
};

export type AiOptimizationPerplexityLlmResponsesModelsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AiOptimizationPerplexityLlmResponsesModelsResultInfo | null> | null;
};

export type AiOptimizationPerplexityLlmResponsesModelsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AiOptimizationPerplexityLlmResponsesModelsTaskInfo | null> | null;
};

export type AiOptimizationPerplexityLlmResponsesLiveRequestInfo = {
    /**
     * prompt for the AI model
     * required field
     * the question or task you want to send to the AI model;
     * you can specify up to 500 characters in the user_prompt field
     */
    user_prompt?: string;
    /**
     * name of the AI model
     * required field
     * model_nameconsists of the actual model name and version name;
     * if the basic model name is specified, its latest version will be set by default;
     * you can receive the list of available LLM models by making a separate request to the https://api.dataforseo.com/v3/ai_optimization/gemini/llm_responses/models
     */
    model_name?: string;
    /**
     * maximum number of tokens in the AI response
     * optional field
     * minimum value: 1
     * maximum value: 2048
     * default value: 2048
     */
    max_output_tokens?: number | null;
    /**
     * randomness of the AI response
     * optional field
     * higher values make output more diverse
     * lower values make output more focused
     * minimum value: 0
     * maximum value: 1.9
     * default value: 0.77
     */
    temperature?: number | null;
    /**
     * diversity of the AI response
     * optional field
     * controls diversity of the response by limiting token selection
     * minimum value: 0
     * maximum value: 1
     * default value: 0.9
     */
    top_p?: number | null;
    /**
     * country code for web search localization
     * optional field
     * specify the country  ISO code to get localized web search results
     * Note: available only for Perplexity Sonar models
     * example: US
     */
    web_search_country_iso_code?: string | null;
    /**
     * instructions for the AI behavior
     * optional field
     * defines the AI’s role, tone, or specific behavior
     * you can specify up to 500 characters in the system_message field
     */
    system_message?: string | null;
    /**
     * conversation history
     * optional field
     * array of message objects representing previous conversation turns;
     * each object must contain:
     * role string with either user or ai role;
     * message string with message content (max 500 characters);
     * you can specify maximum of 10 message objects in the array;
     * Note: for Perplexity models, messages must strictly alternate between user and AI roles (user → ai);
     * example:
     * "message_chain": [{"role":"user","message":"Hello, what’s up?"},{"role":"ai","message":"Hello! I’m doing well, thank you. How can I assist you today?"}]
     */
    message_chain?: Array<LlmMessageChainItem | null> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type AiOptimizationPerplexityLlmResponsesLiveResultInfo = {
    /**
     * name of the AI model used
     */
    model_name?: string | null;
    /**
     * number of tokens in the input
     * total count of tokens processed
     */
    input_tokens?: number | null;
    /**
     * number of tokens in the output
     * total count of tokens generated in the AI response
     */
    output_tokens?: number | null;
    /**
     * indicates if web search was used
     * Note: web search is enabled by default in Perplexity Sonar models
     */
    web_search?: boolean | null;
    /**
     * cost of AI tokens, USD
     * the price charged by the third-party AI model provider for according to its Pricing
     */
    money_spent?: number | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * array of response items
     * contains structured AI response data
     */
    items?: Array<AiOptimizationItem | null> | null;
};

export type AiOptimizationPerplexityLlmResponsesLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AiOptimizationPerplexityLlmResponsesLiveResultInfo | null> | null;
};

export type AiOptimizationPerplexityLlmResponsesLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AiOptimizationPerplexityLlmResponsesLiveTaskInfo | null> | null;
};

export type AiOptimizationAiKeywordDataAvailableFiltersResultInfo = {
    popular_questions?: {
        [key: string]: string | null;
    } | null;
};

export type AiOptimizationAiKeywordDataAvailableFiltersTaskInfo = BaseResponseTaskInfo & {
    result?: Array<AiOptimizationAiKeywordDataAvailableFiltersResultInfo | null> | null;
};

export type AiOptimizationAiKeywordDataAvailableFiltersResponseInfo = BaseResponseInfo & {
    tasks?: Array<AiOptimizationAiKeywordDataAvailableFiltersTaskInfo | null> | null;
};

export type AiOptimizationAiKeywordDataLocationsAndLanguagesResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * supported languages
     * contains the languages which are supported for a specific location
     */
    available_languages?: Array<AvailableLanguages | null> | null;
};

export type AiOptimizationAiKeywordDataLocationsAndLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AiOptimizationAiKeywordDataLocationsAndLanguagesResultInfo | null> | null;
};

export type AiOptimizationAiKeywordDataLocationsAndLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AiOptimizationAiKeywordDataLocationsAndLanguagesTaskInfo | null> | null;
};

export type AiOptimizationAiKeywordDataKeywordsSearchVolumeLiveRequestInfo = {
    /**
     * keywords
     * required field
     * UTF-8 encoding
     * The maximum number of keywords you can specify: 1000
     * The keywords will be converted to lowercase format
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keywords?: Array<string>;
    /**
     * full name of the location
     * required field if you don’t specify location_code
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_name by making a separate request to the
     * https://api.dataforseo.com/v3/ai_optimization/ai_keyword_data/locations_and_languages
     * example:
     * United Kingdom
     */
    location_name?: string | null;
    /**
     * unique location identifier
     * required field if you don’t specify location_name
     * Note: it is required to specify either location_name or location_code
     * you can receive the list of available locations with their location_code by making a separate request to the
     * https://api.dataforseo.com/v3/ai_optimization/ai_keyword_data/locations_and_languages
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with their language_name by making a separate request to the
     * https://api.dataforseo.com/v3/ai_optimization/ai_keyword_data/locations_and_languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the
     * https://api.dataforseo.com/v3/ai_optimization/ai_keyword_data/locations_and_languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type AiMonthlySearches = {
    /**
     * year
     */
    year?: number | null;
    /**
     * month
     */
    month?: number | null;
    /**
     * AI search volume rate in a certain month of a year
     * learn more about this metric here
     */
    ai_search_volume?: number | null;
};

export type AiOptimizationAiKeywordDataKeywordsSearchVolumeLiveItem = {
    /**
     * specified keyword
     */
    keyword?: string | null;
    /**
     * current AI search volume rate of a keyword
     * learn more about this metric here
     */
    ai_search_volume?: number | null;
    /**
     * monthly AI search volume rates
     * array of objects with AI search volume rates in a certain month of a year
     */
    ai_monthly_searches?: Array<AiMonthlySearches | null> | null;
};

export type AiOptimizationAiKeywordDataKeywordsSearchVolumeLiveResultInfo = {
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains specified keywords with their AI search volume rates
     */
    items?: Array<AiOptimizationAiKeywordDataKeywordsSearchVolumeLiveItem | null> | null;
};

export type AiOptimizationAiKeywordDataKeywordsSearchVolumeLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AiOptimizationAiKeywordDataKeywordsSearchVolumeLiveResultInfo | null> | null;
};

export type AiOptimizationAiKeywordDataKeywordsSearchVolumeLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AiOptimizationAiKeywordDataKeywordsSearchVolumeLiveTaskInfo | null> | null;
};

export type OnPageIdListRequestInfo = {
    /**
     * start time for filtering results
     * required field
     * if include_metadata is set to true, maximum value: a month from current datetime;
     * if include_metadata is set to false, maximum value: six months from current datetime;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_from?: string;
    /**
     * finish time for filtering results
     * required field
     * maximum value: current datetime;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-31 13:57:46 +00:00
     */
    datetime_to?: string;
    /**
     * the maximum number of returned task IDs
     * optional field
     * default value: 1000
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned task IDs
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten tasks in the results array will be omitted
     */
    offset?: number | null;
    /**
     * sorting by task execution time
     * optional field
     * possible values: "asc", "desc"
     * default value: "asc"
     */
    sort?: string | null;
    /**
     * include task metadata in the respond
     * optional field
     * default value: false
     */
    include_metadata?: boolean | null;
};

export type OnPageIdListResultInfo = {
    /**
     * id of the task
     */
    id?: string | null;
    /**
     * URL of the task
     * URL you used for making an API call
     */
    url?: string | null;
    /**
     * date and time when the task was made
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_posted?: string | null;
    /**
     * date and time when the task was completed
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_done?: string | null;
    /**
     * informational message of the task
     * you can find the full list of general informational messages here
     */
    status?: string | null;
    /**
     * cost of the task, USD
     */
    cost?: number | null;
    /**
     * contains parameters you specified in the POST request
     */
    metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | null;
    } | null;
};

export type OnPageIdListTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<OnPageIdListResultInfo | null> | null;
};

export type OnPageIdListResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageIdListTaskInfo | null> | null;
};

export type OnPageErrorsRequestInfo = {
    /**
     * the maximum number of returned tasks that responded with an error
     * optional field
     * default value: 1000
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned tasks
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten tasks in the results array will be omitted and the data will be provided for the successive tasks
     */
    offset?: number | null;
    /**
     * return tasks with a certain function
     * use this field to obtain a list of tasks that returned an error filtered by a certain function
     * you can filter the results by the values you receive in the function fields of the API response
     * i.e., once you receive unfiltered results, you can call this API again to filter them by function
     * example: on_page/task_post, postback_url, pingback_url
     */
    filtered_function?: string | null;
    /**
     * start time for filtering results
     * optional field
     * allows filtering results by the datetime parameter within the range of the last 7 days;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2021-11-15 12:57:46 +00:00
     */
    datetime_from?: string | null;
    /**
     * finish time for filtering results
     * optional field
     * allows filtering results by the datetime parameter within the range of the last 7 days;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2021-11-15 13:57:46 +00:00
     */
    datetime_to?: string | null;
};

export type OnPageErrorsResultInfo = {
    /**
     * id of the task
     */
    id?: string | null;
    /**
     * date and time when an error occurred
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * corresponding API function
     */
    function?: string | null;
    /**
     * error code
     */
    error_code?: number | null;
    /**
     * error message or error URL
     * error message (see full list) or URL that caused an error
     */
    error_message?: string | null;
    /**
     * URL that caused an error
     * URL you used for making an API call or pingback/postback URL
     */
    http_url?: string | null;
    /**
     * HTTP method
     */
    http_method?: string | null;
    /**
     * HTTP status code
     */
    http_code?: number | null;
    /**
     * time taken by HTTP request
     * for tasks set with a pingback/postback, this field will show the time it took your server to respond
     */
    http_time?: number | null;
    /**
     * HTTP response
     * server response
     */
    http_response?: string | null;
};

export type OnPageErrorsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<OnPageErrorsResultInfo | null> | null;
};

export type OnPageErrorsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageErrorsTaskInfo | null> | null;
};

export type OnPageForceStopRequestInfo = {
    /**
     * ID of the task
     * required field
     * you can get this ID in the response of the Task POST endpoint
     * example:
     * “07131248-1535-0216-1000-17384017ad04”
     * note: you can set up to 1000 id values as separate objects in the POST array
     */
    id?: string;
};

export type OnPageForceStopTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type OnPageForceStopResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageForceStopTaskInfo | null> | null;
};

export type OnPageAvailableFiltersResultInfo = {
    resources?: {
        [key: string]: string | null;
    } | null;
    pages?: {
        [key: string]: string | null;
    } | null;
    non_indexable?: {
        [key: string]: string | null;
    } | null;
    links?: {
        [key: string]: string | null;
    } | null;
    pages_by_resource?: {
        [key: string]: string | null;
    } | null;
    redirect_chains?: {
        [key: string]: string | null;
    } | null;
    keyword_density?: {
        [key: string]: string | null;
    } | null;
};

export type OnPageAvailableFiltersTaskInfo = BaseResponseTaskInfo & {
    result?: Array<OnPageAvailableFiltersResultInfo | null> | null;
};

export type OnPageAvailableFiltersResponseInfo = BaseResponseInfo & {
    tasks?: Array<OnPageAvailableFiltersTaskInfo | null> | null;
};

export type OnPageTaskPostRequestInfo = {
    /**
     * target domain
     * required field
     * domain name should be specified without https:// and www.
     * if you specify the page URL, the results will be returned for the domain included in the URL
     */
    target?: string;
    /**
     * crawled pages limit
     * required field
     * the number of pages to crawl on the specified domain
     * Note:
     * if you set max_crawl_pages to 1 and do not specify start_url or set a homepage in it, the following sitewide checks will be disabled:
     * test_canonicalization, enable_www_redirect_check, test_hidden_server_signature, test_page_not_found, test_directory_browsing, test_https_redirect
     * to enable them anyway, set force_sitewide_checks to trueif you set max_crawl_pages to 1 and specify start_url other than a homepage, all sitewide checks will be disabled;
     * to enable them anyway, set force_sitewide_checks to true
     */
    max_crawl_pages?: number;
    /**
     * the first url to crawl
     * optional field
     * Note: you should specify an absolute URL
     * if you want to crawl a single page, specify its URL in this field and additionally set the max_crawl_pages parameter to 1
     * you can also use the live Instant Pages endpoint to get page-specific data
     */
    start_url?: string | null;
    /**
     * enable sitewide checks when crawling a single page
     * optional field
     * set to true to get data on sitewide checks when crawling a single page;
     * default value: false
     */
    force_sitewide_checks?: boolean | null;
    /**
     * urls to be crawled bypassing the queue
     * optional field
     * URLs specified in this array will be crawled in the first instance, bypassing the crawling queue;
     * Note: you should specify the absolute URL;
     * you can specify up to 20 URLs;
     * all URLs in the array must belong to the target domain;
     * subdomains will be ignored unless the allow_subdomains parameter is set to trueexample:
     * "priority_urls": [
     * "https://dataforseo.com/apis/serp-api",
     * "https://dataforseo.com/contact"
     * ]
     */
    priority_urls?: Array<string> | null;
    /**
     * crawl depth
     * optional field
     * the linking depth of the pages to crawl;
     * for example, starting page of the crawl is level 0, pages that have links from that page are level 1, etc.
     */
    max_crawl_depth?: number | null;
    /**
     * delay between hits, ms
     * optional field
     * the custom delay between crawler hits to the server
     * default value: 2000
     */
    crawl_delay?: number | null;
    /**
     * store HTML of crawled pages
     * optional field
     * set to true if you want to get the HTML of the page using the OnPage Raw HTML endpoint
     * default value: false
     */
    store_raw_html?: boolean | null;
    /**
     * parse content on crawled pages
     * optional field
     * set to true to use the OnPage Content Parsing endpoint
     * default value: false
     */
    enable_content_parsing?: boolean | null;
    /**
     * support cookies on crawled pages
     * optional field
     * set to true to support cookies when crawling the pages
     * default value: false
     */
    support_cookies?: boolean | null;
    /**
     * language header for accessing the website
     * optional field
     * all locale formats are supported (xx, xx-XX, xxx-XX, etc.)
     * Note: if you do not specify this parameter, some websites may deny access; in this case, pages will be returned with the "type":"broken in the response array
     */
    accept_language?: string | null;
    /**
     * custom robots.txt settings
     * optional field
     * example: Disallow: /directory1/
     */
    custom_robots_txt?: string | null;
    /**
     * merge with or override robots.txt settings
     * optional field
     * possible values: merge, override;
     * set to override if you want to ignore website crawling restrictions and other robots.txt settings
     * default value: merge;
     * Note: if set to override, specify the custom_robots_txt parameter
     */
    robots_txt_merge_mode?: string | null;
    /**
     * custom user agent
     * optional field
     * custom user agent for crawling a website
     * example: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36
     *
     * default value: Mozilla/5.0 (compatible; RSiteAuditor)
     */
    custom_user_agent?: string | null;
    /**
     * preset for browser screen parameters
     * optional field
     * if you use this field, you don’t need to indicate browser_screen_width, browser_screen_height, browser_screen_scale_factorpossible values:
     * desktop, mobile, tabletdesktop preset will apply the following values:browser_screen_width: 1920
     * browser_screen_height: 1080
     * browser_screen_scale_factor: 1mobile preset will apply the following values:browser_screen_width: 390
     * browser_screen_height: 844
     * browser_screen_scale_factor: 3tablet preset will apply the following values:browser_screen_width: 1024
     * browser_screen_height: 1366
     * browser_screen_scale_factor: 2
     * Note: to use this parameter, set enable_javascript or enable_browser_rendering to true
     */
    browser_preset?: string | null;
    /**
     * browser screen width
     * optional field
     * you can set a custom browser screen width to perform audit for a particular device;
     * if you use this field, you don’t need to indicate browser_preset as it will be ignored;
     * Note: to use this parameter, set enable_javascript or enable_browser_rendering to trueminimum value, in pixels: 240
     * maximum value, in pixels: 9999
     */
    browser_screen_width?: number | null;
    /**
     * browser screen height
     * optional field
     * you can set a custom browser screen height to perform an audit for a particular device;
     * if you use this field, you don’t need to indicate browser_preset as it will be ignored;
     * Note: to use this parameter, set enable_javascript or enable_browser_rendering to trueminimum value, in pixels: 240
     * maximum value, in pixels: 9999
     */
    browser_screen_height?: number | null;
    /**
     * browser screen scale factor
     * optional field
     * you can set a custom browser screen resolution ratio to perform audit for a particular device;
     * if you use this field, you don’t need to indicate browser_preset as it will be ignored;
     * Note: to use this parameter, set enable_javascript or enable_browser_rendering to trueminimum value: 0.5
     * maximum value: 3
     */
    browser_screen_scale_factor?: number | null;
    /**
     * respect sitemap when crawling
     * optional field
     * set to true if you want to follow the order of pages indicated in the primary sitemap when crawling;
     * default value: false
     * Note: if set to true, the click_depth value in the API response will equal 0;
     * the max_crawl_depth field of the request will be ignored, you can specify the number of pages to crawl using the max_crawl_pages parameter
     */
    respect_sitemap?: boolean | null;
    /**
     * custom sitemap url
     * optional field
     * the URL of the page where the alternative sitemap is located
     * Note: if you want to use this parameter, respect_sitemap should be true
     */
    custom_sitemap?: string | null;
    /**
     * crawl only pages indicated in the sitemap
     * optional field
     * set to true if you want to crawl only the pages indicated in the sitemap
     * if you set this parameter to true and do not specify custom_sitemap, we will crawl the default sitemap
     * default value: false
     * Note: if you want to use this parameter, respect_sitemap should be true
     */
    crawl_sitemap_only?: boolean | null;
    /**
     * load resources
     * optional field
     * set to true if you want to load image, stylesheets, scripts, and broken resources
     * default value: false
     * Note: if you use this parameter, additional charges will apply; learn more about the cost of tasks with this parameter in our help article; the cost can be calculated on the Pricing Page
     */
    load_resources?: boolean | null;
    /**
     * check if the domain implemented the www redirection
     * optional field
     * set to true if you want to check if the requested domain implemented the www to non-www or non-www to www redirect;
     * default value: false
     */
    enable_www_redirect_check?: boolean | null;
    /**
     * load javascript on a page
     * optional field
     * set to true if you want to load the scripts available on a page
     * default value: false
     * Note: if you use this parameter, additional charges will apply; learn more about the cost of tasks with this parameter in our help article; the cost can be calculated on the Pricing Page
     */
    enable_javascript?: boolean | null;
    /**
     * enable XMLHttpRequest on a page
     * optional field
     * set to true if you want our crawler to request data from a web server using the XMLHttpRequest object
     * default value: false;if you use this field, enable_javascript must be set to true;
     */
    enable_xhr?: boolean | null;
    /**
     * emulate browser rendering to measure Core Web Vitals
     * optional field
     * by using this parameter you will be able to emulate a browser when loading a web page;
     * enable_browser_rendering loads styles, images, fonts, animations, videos, and other resources on a page;
     * default value: false
     * set to true to obtain Core Web Vitals (FID, CLS, LCP) metrics in the response;
     * if you use this field, enable_javascript, and load_resources parameters must be set to true
     * Note: if you use this parameter, additional charges will apply; learn more about the cost of tasks with this parameter in our help article; the cost can be calculated on the Pricing Page
     */
    enable_browser_rendering?: boolean | null;
    /**
     * disable the cookie popup
     * optional field
     * set to true if you want to disable the popup requesting cookie consent from the user;
     * default value:
     * false
     */
    disable_cookie_popup?: boolean | null;
    /**
     * custom javascript
     * optional field
     * Note that the execution time for the script you enter here should be 700 ms maximum, for example, you can use the following JS snippet to check if the website contains Google Tag Manager as a scr attribute:
     * let meta = { haveGoogleAnalytics: false, haveTagManager: false };\r\nfor (var i = 0; i < document.scripts.length; i++) {\r\n let src = document.scripts[i].getAttribute(\"src\");\r\n if (src != undefined) {\r\n if (src.indexOf(\"analytics.js\") >= 0)\r\n      meta.haveGoogleAnalytics = true;\r\n\tif (src.indexOf(\"gtm.js\") >= 0)\r\n      meta.haveTagManager = true;\r\n  }\r\n}\r\nmeta;the returned value depends on what you specified in this field. For instance, if you specify the following script:
     * meta = {}; meta.url = document.URL; meta.test = 'test'; meta;
     * as a response you will receive the following data:
     * "custom_js_response": {
     * "url": "https://dataforseo.com/",
     * "test": "test"
     * }
     * Note: the length of the script you enter must be no more than 2000 characters
     * Note: if you use this parameter, additional charges will apply; learn more about the cost of tasks with this parameter in our help article; the cost can be calculated on the Pricing Page
     */
    custom_js?: string | null;
    /**
     * enable microdata validation
     * optional field
     * set to true if you want to use the OnPage API Microdata endpoint
     * default value: false
     */
    validate_micromarkup?: boolean | null;
    /**
     * include pages on subdomains
     * optional field
     * set to true if you want to crawl all subdomains of a target website
     * default value: false
     */
    allow_subdomains?: boolean | null;
    /**
     * subdomains to crawl
     * optional field
     * specify subdomains that you want to crawl
     * example: ["blog.site.com", "my.site.com", "shop.site.com"]
     * Note: to use this parameter, the allow_subdomains parameter should be set to false;
     * otherwise, the content of allowed_subdomains field will be ignored and the results will be returned for all subdomains
     */
    allowed_subdomains?: Array<string> | null;
    /**
     * subdomains not to crawl
     * optional field
     * specify subdomains that you don’t want to crawl
     * example: ["status.site.com", "docs.site.com"]
     * Note: to use this parameter, the allow_subdomains parameter should be set to true
     */
    disallowed_subdomains?: Array<string> | null;
    /**
     * check spelling
     * optional field
     * set to true to check spelling on a website using Hunspell library
     * default value: false
     */
    check_spell?: boolean | null;
    /**
     * language of the spell check
     * optional field
     * supported languages: ‘hy’, ‘eu’, ‘bg’, ‘ca’, ‘hr’, ‘cs’, ‘da’, ‘nl’, ‘en’, ‘eo’, ‘et’, ‘fo’, ‘fa’, ‘fr’, ‘fy’, ‘gl’, ‘ka’, ‘de’, ‘el’, ‘he’, ‘hu’, ‘is’, ‘ia’, ‘ga’, ‘it’, ‘rw’, ‘la’, ‘lv’, ‘lt’, ‘mk’, ‘mn’, ‘ne’, ‘nb’, ‘nn’, ‘pl’, ‘pt’, ‘ro’, ‘gd’, ‘sr’, ‘sk’, ‘sl’, ‘es’, ‘sv’, ‘tr’, ‘tk’, ‘uk’, ‘vi’
     * Note: if no language is specified, it will be set automatically based on page content
     */
    check_spell_language?: string | null;
    /**
     * words excluded from spell check
     * optional field
     * specify the words that you want to exclude from spell check
     * maximum word length: 100 characters
     * maximum amount of words: 1000
     * example: "SERP", "minifiers", "JavaScript"
     */
    check_spell_exceptions?: Array<string> | null;
    /**
     * calculate keyword density for the target domain
     * optional field
     * set to true if you want to calculate keyword density for website pages
     * default value: false
     * Note: if you use this parameter, additional charges will apply; learn more about the cost of tasks with this parameter in our help article
     * once the crawl is completed, you can obtain keyword density values with the Keyword Density endpoint
     */
    calculate_keyword_density?: boolean | null;
    /**
     * custom threshold values for checks
     * optional field
     * you can specify custom threshold values for the parameters included in the checks object of OnPage API responses;
     * Note: only integer threshold values can be modified;
     * for example, the high_loading_time and large_page_size parameters are set to 3 seconds and 1 megabyte respectively by default;
     * if you want to change these thresholds to 1 second and 1000 kbytes, use the following snippet:
     * "checks_threshold": {
     * "high_loading_time": 1,
     * "large_page_size": 1000
     * }available customizable parameters with default values:
     * "title_too_short", default value: 30, type: "int"
     * "title_too_long", default value: 65, type: "int"
     * "small_page_size", default value: 1024, type: "int"
     * "large_page_size", default value: 1048576 (1024 * 1024), type: "int"
     * "low_character_count", default value: 1024, type: "int"
     * "high_character_count", default value: 256000 (250 * 1024), type: "int"
     * "low_content_rate", default value: 0.1, type: "float"
     * "high_content_rate", default value: 0.9, type: "float"
     * "high_loading_time", default value: 3000, type: "int"
     * "high_waiting_time", default value: 1500, type: "int"
     * "low_readability_rate", default value: 15.0, type: "float"
     * "irrelevant_description", default value: 0.2, type: "float"
     * "irrelevant_title", default value: 0.3, type: "float"
     * "irrelevant_meta_keywords", default value: 0.6, type: "float"
     */
    checks_threshold?: {
        [key: string]: number | null;
    } | null;
    /**
     * prevent certain sitewide checks from running
     * optional field
     * specify the following checks to prevent them from running on the target website:
     * "test_page_not_found"
     * "test_canonicalization"
     * "test_https_redirect"
     * "test_directory_browsing"example:
     * "disable_sitewide_checks": ["test_directory_browsing", "test_page_not_found"]learn more on our help center
     */
    disable_sitewide_checks?: Array<string> | null;
    /**
     * prevent certain page checks from running
     * optional field
     * specify certain checks to prevent them from running and impacting the onpage_scoreexample:
     * "disable_page_checks": ["is_5xx_code", "is_4xx_code"]
     */
    disable_page_checks?: Array<string> | null;
    /**
     * switch proxy pool
     * optional field
     * if true, additional proxy pools will be used to obtain the requested data;
     * the parameter can be used if a multitude of tasks is set simultaneously, resulting in occasional rate-limit and/or site_unreachable errors
     */
    switch_pool?: boolean | null;
    /**
     * return data on pages despite the timeout error
     * optional field
     * if true, the data will be provided on pages that failed to load within 120 seconds and responded with a timeout error;
     * default value: false
     */
    return_despite_timeout?: boolean | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type OnPageTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type OnPageTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageTaskPostTaskInfo | null> | null;
};

export type OnPageTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * target website specified when setting a task
     */
    target?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
};

export type OnPageTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<OnPageTasksReadyResultInfo | null> | null;
};

export type OnPageTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageTasksReadyTaskInfo | null> | null;
};

export type SslInfo = {
    /**
     * ssl certificate validity
     * indicates whether the ssl certificate detected on a website is not expired, suspended, revoked or invalid
     */
    valid_certificate?: boolean | null;
    /**
     * ssl certificate authority
     * the entity that issued the detected ssl certificate
     */
    certificate_issuer?: string | null;
    /**
     * ssl certificate subject
     * the entity associated with the public key
     */
    certificate_subject?: string | null;
    /**
     * ssl certificate version
     * indicates the version of X.509 used by an ssl certificate
     */
    certificate_version?: number | null;
    /**
     * ssl certificate hash
     * the version of the ssl certificate’s hash function
     */
    certificate_hash?: string | null;
    /**
     * ssl certificate expiration date
     * the date and time when the ssl certificate expires
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    certificate_expiration_date?: string | null;
};

export type DomainInfo = {
    /**
     * domain name
     */
    name?: string | null;
    /**
     * content management system
     * content management system identified on a website
     * the content of the generator meta tag
     * the data is taken from the first random page that returns the 200 response code
     * if our crawler was unable to identify the cms, the value would be null
     */
    cms?: string | null;
    /**
     * domain ip address
     */
    ip?: string | null;
    /**
     * website server
     * the version of the server detected on a website
     * the content of the server header
     * the information is taken from the first page which response code is 200
     */
    server?: string | null;
    /**
     * time when the crawling start
     * date and time when the website was sent for crawling
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    crawl_start?: string | null;
    /**
     * time when the crawling ended
     * date and time when the crawling was finished
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     * Note: informative only if "crawl_progress" is "finished"
     * if "crawl_progress" is in_progress, the value will be null
     */
    crawl_end?: string | null;
    /**
     * crawl status and errors
     * indicates the reason why a website was not crawled;
     * can take the following values:
     * no_errors – no crawling errors were detected;
     * site_unreachable – our crawler could not reach a website and thus was not able to obtain a status code;
     * invalid_page_status_code – status code of the first crawled page >= 400;
     * forbidden_meta_tag – the first crawled page contains the <meta robots=”noindex”> tag;
     * forbidden_robots – robots.txt forbids crawling the page;
     * forbidden_http_header – HTTP header of the page contains “X-Robots-Tag: noindex” ;
     * too_many_redirects – the first crawled page has more than 10 redirects;
     * unknown – the reason is unknown
     */
    extended_crawl_status?: string | null;
    /**
     * ssl certificate info
     * information about the Secure Sockets Layer protocol detected on a website
     */
    ssl_info?: SslInfo | null;
    /**
     * website checks
     * other on-page check-ups related to the website
     */
    checks?: {
        [key: string]: boolean | null;
    } | null;
    /**
     * total crawled pages
     * the total number of crawled pages
     */
    total_pages?: number | null;
    /**
     * status code returned by a non-existent page
     * in most cases, it is recommended a server returns a 404 response code
     */
    page_not_found_status_code?: number | null;
    /**
     * status code returned by a canonicalized page
     * the checkup of the server behavior when our crawler tries to access the website via IP;
     * in most cases, it is recommended that canonicalized pages respond with a 301 or 302 status code
     */
    canonicalization_status_code?: number | null;
    /**
     * status code returned by a directory
     * the status code returned by a directory page on a target website
     * in most cases, it is recommended that directories respond with a 403 or 401 status code
     */
    directory_browsing_status_code?: number | null;
    /**
     * redirect status code
     * the status code of the www to non-www redirect
     * in most cases, it is recommended that redirect returns a 301 status code
     */
    www_redirect_status_code?: number | null;
    /**
     * root domain name
     */
    main_domain?: string | null;
};

export type PageMetrics = {
    /**
     * number of external links
     * the number of links pointing to other websites
     */
    links_external?: number | null;
    /**
     * number of internal links
     * the number of links pointing to other pages within the target website
     */
    links_internal?: number | null;
    /**
     * number of pages with duplicate titles
     */
    duplicate_title?: number | null;
    /**
     * number of pages with duplicate descriptions
     */
    duplicate_description?: number | null;
    /**
     * number of pages with duplicate content
     */
    duplicate_content?: number | null;
    /**
     * number of broken links
     * number of broken links across all crawled pages on a target website
     */
    broken_links?: number | null;
    /**
     * number of broken resources
     * the number of images and other resources with broken links
     */
    broken_resources?: number | null;
    /**
     * number of links present on the target website that may have a conflict
     * for example, if "links_relation_conflict": 2, the target website is referring to the same source by at least one internal link with the rel="nofollow" attribute and by at least one dofollow link
     */
    links_relation_conflict?: number | null;
    /**
     * number of redirect chains that start and end at the same URL
     * number of redirect chains where the destination URL redirects back to the original URL
     */
    redirect_loop?: number | null;
    /**
     * shows how website is optimized on a 100-point scale
     * this field shows how website is optimized considering critical on-page issues and warnings detected;
     * 100 is the highest possible score that means website does not have any critical on-page issues and important warnings;
     * note that this value depends on the number of crawled pages;
     * learn more about how the metric is calculated in this help center article
     */
    onpage_score?: number | null;
    /**
     * number of non-indexable pages
     * number of pages that are blocked from being indexed by Google and other search engines by robots.txt, HTTP headers, or meta tags settings;
     * you can receive a list of non-indexable URLs using this endpoint
     */
    non_indexable?: number | null;
    /**
     * page-specific on-page check-ups
     */
    checks?: {
        [key: string]: number | null;
    } | null;
};

export type OnPageSummaryResultInfo = {
    /**
     * status of the crawling session
     * possible values: in_progress, finished
     */
    crawl_progress?: string | null;
    /**
     * details of the crawling session
     */
    crawl_status?: CrawlStatusInfo | null;
    /**
     * crawler ip address
     * displays the IP address used by the crawler to initiate the current crawling session
     * you can find the full list of IPs used by our crawler in the Overview section
     */
    crawl_gateway_address?: string | null;
    /**
     * reason why the crawling stopped
     * information about the reason why the crawling process stopped;
     * possible values:
     * limit_exceeded – the limit set in the max_crawl_pages was exceeded;
     * empty_queue – all URLs in the queue were crawled;
     * force_stopped – the crawling process was halted using the On Page API Force Stop function;
     * unexpected_exception – an internal error was encountered while crawling the target, contact support for more info
     */
    crawl_stop_reason?: string | null;
    /**
     * domain-wide info
     * on-page information about the target domain and crawling process
     */
    domain_info?: DomainInfo | null;
    /**
     * page-specific info
     * metrics information on the target website pages
     */
    page_metrics?: PageMetrics | null;
};

export type OnPageSummaryTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<OnPageSummaryResultInfo | null> | null;
};

export type OnPageSummaryResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageSummaryTaskInfo | null> | null;
};

export type OnPagePagesRequestInfo = {
    /**
     * ID of the task
     * required field
     * you can get this ID in the response of the Task POST endpoint
     * example:
     * “07131248-1535-0216-1000-17384017ad04”
     */
    id?: string;
    /**
     * the maximum number of returned pages
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned pages
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten pages in the results array will be omitted and the data will be provided for the successive pages
     */
    offset?: number | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, like, not_like
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["meta.external_links_count","<=",50]["url","like","https://dataforseo.com/apis/dataforseo-labs-api"][["checks.high_waiting_time","=",false],
     * "and",["resource_type","=","html"]][["page_timing.duration_time","<",100],"and",[["checks.large_page_size","=",false],"or",["checks.high_waiting_time","=",false]]]The full list of possible filters is available by this link.
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting type
     * example:
     * ["meta.external_links_count,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["page_timing.dom_complete,asc","size,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * token for subsequent requests
     * optional field
     * provided in the identical filed of the response to each request;
     * use this parameter to avoid timeouts while trying to obtain over 20,000 results in a single request;
     * by specifying the unique search_after_token value from the response array, you will get the subsequent results of the initial task;
     * search_after_token values are unique for each subsequent task ;
     * Note: if the search_after_token is specified in the request, all other parameters should be identical to the previous request
     */
    search_after_token?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type HtmlContentInfo = {
    /**
     * total size of the text on the page measured in bytes
     */
    plain_text_size?: number | null;
    /**
     * plaintext rate value
     * plain_text_size to size ratio
     */
    plain_text_rate?: number | null;
    /**
     * number of words on the page
     */
    plain_text_word_count?: number | null;
    /**
     * Automated Readability Index
     */
    automated_readability_index?: number | null;
    /**
     * Coleman–Liau Index
     */
    coleman_liau_readability_index?: number | null;
    /**
     * Dale–Chall Readability Index
     */
    dale_chall_readability_index?: number | null;
    /**
     * Flesch–Kincaid Readability Index
     */
    flesch_kincaid_readability_index?: number | null;
    /**
     * SMOG Readability Index
     */
    smog_readability_index?: number | null;
    /**
     * consistency of the meta description tag with the page content
     * measured from 0 to 1
     */
    description_to_content_consistency?: number | null;
    /**
     * consistency of the meta title tag with the page content
     * measured from 0 to 1
     */
    title_to_content_consistency?: number | null;
    /**
     * consistency of meta keywordstag with the page content
     * measured from 0 to 1
     */
    meta_keywords_to_content_consistency?: number | null;
};

export type HunspellMisspelledInfo = {
    /**
     * misspelled word
     */
    word?: string | null;
};

export type HunspellInfo = {
    /**
     * spellcheck language code
     */
    hunspell_language_code?: string | null;
    /**
     * array of misspelled words
     */
    misspelled?: Array<HunspellMisspelledInfo | null> | null;
};

export type PageMetaInfo = {
    /**
     * page title
     */
    title?: string | null;
    /**
     * code page
     * example: 65001
     */
    charset?: number | null;
    /**
     * indicates whether a page’s ‘meta robots’ allows crawlers to follow the links on the page
     * if false, the page’s ‘meta robots’ tag contains “nofollow” parameter instructing crawlers not to follow the links on the page
     */
    follow?: boolean | null;
    /**
     * meta tag generator
     */
    generator?: string | null;
    /**
     * HTML header tags
     */
    htags?: {
        [key: string]: Array<string> | null;
    } | null;
    /**
     * content of the meta description tag
     */
    description?: string | null;
    /**
     * favicon of the page
     */
    favicon?: string | null;
    /**
     * content of the keywords meta tag
     */
    meta_keywords?: string | null;
    /**
     * canonical page
     */
    canonical?: string | null;
    /**
     * number of internal links on the page
     */
    internal_links_count?: number | null;
    /**
     * number of external links on the page
     */
    external_links_count?: number | null;
    /**
     * number of internal links pointing at the page
     */
    inbound_links_count?: number | null;
    /**
     * number of images on the page
     */
    images_count?: number | null;
    /**
     * total size of images on the page measured in bytes
     */
    images_size?: number | null;
    /**
     * number of scripts on the page
     */
    scripts_count?: number | null;
    /**
     * total size of scripts on the page measured in bytes
     */
    scripts_size?: number | null;
    /**
     * number of stylesheets on the page
     */
    stylesheets_count?: number | null;
    /**
     * total size of stylesheets on the page measured in bytes
     */
    stylesheets_size?: number | null;
    /**
     * length of the title tag in characters
     */
    title_length?: number | null;
    /**
     * length of the description tag in characters
     */
    description_length?: number | null;
    /**
     * number of scripts on the page that block page rendering
     */
    render_blocking_scripts_count?: number | null;
    /**
     * number of CSS styles on the page that block page rendering
     */
    render_blocking_stylesheets_count?: number | null;
    /**
     * Core Web Vitals metric measuring the layout stability of the page
     * measures the sum total of all individual layout shift scores for every unexpected layout shift that occurs during the entire lifespan of the page. Learn more.
     */
    cumulative_layout_shift?: number | null;
    /**
     * meta title of the page
     * meta tag in the head section of an HTML document that defines the title of a page
     */
    meta_title?: string | null;
    /**
     * overall information about content of the page
     */
    content?: HtmlContentInfo | null;
    /**
     * deprecated tags on the page
     */
    deprecated_tags?: Array<string | null> | null;
    /**
     * duplicate meta tags on the page
     */
    duplicate_meta_tags?: Array<string | null> | null;
    /**
     * spellcheck
     * hunspell spellcheck errors
     */
    spell?: HunspellInfo | null;
    /**
     * object of social media tags found on the page
     * contains social media tags and their content
     * supported tags include but are not limited to Open Graph and Twitter card
     */
    social_media_tags?: {
        [key: string]: string | null;
    } | null;
    /**
     * resource errors and warnings
     */
    broken_html?: OnPageResourceIssueInfo | null;
};

export type PageTiming = {
    /**
     * Time To Interactive (TTI) metric
     * the time it takes until the user can interact with a page (in milliseconds)
     */
    time_to_interactive?: number | null;
    /**
     * time to load resources
     * the time it takes until the page and all of its subresources are downloaded (in milliseconds)
     */
    dom_complete?: number | null;
    /**
     * Core Web Vitals metric measuring how fast the largest above-the-fold content element is displayed
     * The amount of time (in milliseconds) to render the largest content element visible in the viewport, from when the user requests the URL. Learn more.
     */
    largest_contentful_paint?: number | null;
    /**
     * Core Web Vitals metric indicating the responsiveness of a page
     * The time (in milliseconds) from when a user first interacts with your page to the time when the browser responds to that interaction. Learn more.
     */
    first_input_delay?: number | null;
    /**
     * time to connect to a server
     * the time it takes until the connection with a server is established (in milliseconds)
     */
    connection_time?: number | null;
    /**
     * time to establish a secure connection
     * the time it takes until the secure connection with a server is established (in milliseconds)
     */
    time_to_secure_connection?: number | null;
    /**
     * time to send a request to a server
     * the time it takes until the request to a server is sent (in milliseconds)
     */
    request_sent_time?: number | null;
    /**
     * time to first byte (TTFB) in milliseconds
     */
    waiting_time?: number | null;
    /**
     * time it takes for a browser to receive a response (in milliseconds)
     */
    download_time?: number | null;
    /**
     * total time it takes until a browser receives a complete response from a server (in milliseconds)
     */
    duration_time?: number | null;
    /**
     * time to start downloading the HTML resource
     * the amount of time the browser needs to start downloading a page
     */
    fetch_start?: number | null;
    /**
     * time to complete downloading the HTML resource
     * the amount of time the browser needs to complete downloading a page
     */
    fetch_end?: number | null;
};

export type OnPageResourceIssueItemInfo = {
    /**
     * line where the error was found
     */
    line?: number | null;
    /**
     * column where the error was found
     */
    column?: number | null;
    /**
     * text message of the error
     * the full list of possible HTML errors can be found here
     */
    message?: string | null;
    /**
     * status code of the error
     * possible values:
     * 0 — Unidentified Error;
     * 501 — Html Parse Error;
     * 1501 — JS Parse Error;
     * 2501 — CSS Parse Error;
     * 3501 — Image Parse Error;
     * 3502 — Image Scale Is Zero;
     * 3503 — Image Size Is Zero;
     * 3504 — Image Format Invalid
     */
    status_code?: number | null;
};

/**
 * resource errors and warnings
 */
export type OnPageResourceIssueInfo = {
    /**
     * resource errors
     */
    errors?: Array<OnPageResourceIssueItemInfo | null> | null;
    /**
     * resource warnings
     */
    warnings?: Array<OnPageResourceIssueItemInfo | null> | null;
};

export type CacheControl = {
    /**
     * indicates whether the page is cacheable
     */
    cachable?: boolean | null;
    /**
     * time to live
     * the amount of time the browser caches a resource
     */
    ttl?: number | null;
};

export type LastModified = {
    /**
     * date and time when the header was last modified
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     * if there is no data, the value will be null
     */
    header?: string | null;
    /**
     * date and time when the sitemap was last modified
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     * if there is no data, the value will be null
     */
    sitemap?: string | null;
    /**
     * date and time when the meta tag was last modified
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     * if there is no data, the value will be null
     */
    meta_tag?: string | null;
};

export type OnPageHtmlResourceItem = (BaseOnPageResourceItem | null) & {
    meta?: (PageMetaInfo | null) & {
        social_media_tags?: {
            [key: string]: string | null;
        } | null;
        /**
         * resource errors and warnings
         */
        broken_html?: OnPageResourceIssueInfo | null;
    };
    /**
     * object of page load metrics
     */
    page_timing?: PageTiming | null;
    /**
     * shows how page is optimized on a 100-point scale
     * this field shows how page is optimized considering critical on-page issues and warnings detected;
     * 100 is the highest possible score that means the page does not have any critical on-page issues and important warnings;
     * learn more about how the metric is calculated in this help center article
     */
    onpage_score?: number | null;
    /**
     * total DOM size of a page
     */
    total_dom_size?: number | null;
    /**
     * the result of executing a specified JS script
     * note that you should specify a custom_js field when setting a task to receive this data and the field type and its value will totally depend on the script you specified;
     * you can also filter the results by this value specifying filters in the following way:
     * ["custom_js_response.url", "like", "pixel"]
     */
    custom_js_response?: {
        [key: string]: unknown;
    } | null;
    /**
     * error when executing a custom js
     * if the error occurred when executing the script you specified in the custom_js field, the error message would be displayed here
     */
    custom_js_client_exception?: string | null;
    /**
     * indicates whether a page contains broken resources
     */
    broken_resources?: boolean | null;
    /**
     * indicates whether a page contains broken links
     */
    broken_links?: boolean | null;
    /**
     * indicates whether a page has duplicate title tags
     */
    duplicate_title?: boolean | null;
    /**
     * indicates whether a page has a duplicate description
     */
    duplicate_description?: boolean | null;
    /**
     * indicates whether a page has duplicate content
     */
    duplicate_content?: boolean | null;
    /**
     * number of clicks it takes to get to the page
     * indicates the number of clicks from the homepage needed before landing at the target page
     */
    click_depth?: number | null;
    /**
     * indicates whether a page is a single resource
     */
    is_resource?: boolean | null;
    /**
     * page URL length in characters
     */
    url_length?: number | null;
    /**
     * relative URL length in characters
     */
    relative_url_length?: number | null;
};

export type FetchTiming = {
    /**
     * indicates how many seconds it took to download a page
     */
    duration_time?: number | null;
    /**
     * time to start downloading the HTML resource
     * the amount of time the browser needs to start downloading a page
     */
    fetch_start?: number | null;
    /**
     * time to complete downloading the HTML resource
     * the amount of time the browser needs to complete downloading a page
     */
    fetch_end?: number | null;
};

export type OnPageBrokenResourceItem = (BaseOnPageResourceItem | null) & {
    /**
     * time range within which a result was fetched
     */
    fetch_timing?: FetchTiming | null;
    /**
     * indicates whether a page is a single resource
     */
    is_resource?: boolean | null;
    /**
     * resource properties
     * the value depends on the resource_type
     * note that if you do not indicate a url when setting a task, resource’s meta is returned based on the data from the page where our crawler first saw the resource;
     * to obtain resource’s meta from a particular url, specify that URL when setting a task
     */
    meta?: PageMetaInfo | null;
    /**
     * indicates the expected type of resource
     * for example, if "resource_type": "broken", accept_type will indicate the type of the broken resource
     * possible values:
     * any, none, image, sitemap, robots, script, stylesheet, redirect, html, text, other, font
     */
    accept_type?: string | null;
};

export type OnPageRedirectResourceItem = (BaseOnPageResourceItem | null) & {
    /**
     * time range within which a result was fetched
     */
    fetch_timing?: FetchTiming | null;
    /**
     * indicates whether a page is a single resource
     */
    is_resource?: boolean | null;
};

export type OnPageScriptResourceItem = (BaseOnPageResourceItem | null) & {
    meta?: ResourceMetaInfo | null;
    /**
     * time range within which a result was fetched
     */
    fetch_timing?: FetchTiming | null;
    /**
     * indicates the expected type of resource
     * for example, if "resource_type": "broken", accept_type will indicate the type of the broken resource
     * possible values:
     * any, none, image, sitemap, robots, script, stylesheet, redirect, html, text, other, font
     */
    accept_type?: string | null;
};

export type OnPageImageResourceItem = (BaseOnPageResourceItem | null) & {
    /**
     * page properties
     * the value depends on the resource_type
     */
    meta?: ResourceMetaInfo | null;
    /**
     * time range within which a result was fetched
     */
    fetch_timing?: FetchTiming | null;
    /**
     * indicates the expected type of resource
     * for example, if "resource_type": "broken", accept_type will indicate the type of the broken resource
     * possible values:
     * any, none, image, sitemap, robots, script, stylesheet, redirect, html, text, other, font
     */
    accept_type?: string | null;
};

export type OnPageStylesheetResourceItem = (BaseOnPageResourceItem | null) & {
    /**
     * page properties
     * the value depends on the resource_type
     */
    meta?: ResourceMetaInfo | null;
    /**
     * time range within which a result was fetched
     */
    fetch_timing?: FetchTiming | null;
    /**
     * indicates the expected type of resource
     * for example, if "resource_type": "broken", accept_type will indicate the type of the broken resource
     * possible values:
     * any, none, image, sitemap, robots, script, stylesheet, redirect, html, text, other, font
     */
    accept_type?: string | null;
};

export type OnPagePagesResultInfo = {
    /**
     * status of the crawling session
     * possible values: in_progress, finished
     */
    crawl_progress?: string | null;
    /**
     * details of the crawling session
     */
    crawl_status?: CrawlStatusInfo | null;
    search_after_token?: string | null;
    current_offset?: number | null;
    /**
     * total number of relevant items in the database
     */
    total_items_count?: number | null;
    /**
     * number of items in the results array
     */
    items_count?: number | null;
    /**
     * items array
     */
    items?: Array<BaseOnPageResourceItem | null> | null;
};

export type OnPagePagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<OnPagePagesResultInfo | null> | null;
};

export type OnPagePagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPagePagesTaskInfo | null> | null;
};

export type OnPagePagesByResourceRequestInfo = {
    /**
     * ID of the task
     * required field
     * you can get this ID in the response of the Task POST endpoint
     * example:
     * “07131248-1535-0216-1000-17384017ad04”
     */
    id?: string;
    /**
     * resource URL
     * required field
     * you can get this URL in the response of the Resources endpoint
     * example:
     * https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js
     */
    url?: string;
    /**
     * the maximum number of returned pages
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned pages
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten pages in the results array will be omitted and the data will be provided for the successive pages
     */
    offset?: number | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, like, not_like
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["meta.external_links_count","<=",50]["url","like","https://dataforseo.com/apis/dataforseo-labs-api"]
     * [["checks.high_waiting_time","=",false],
     * "and",["resource_type","=","html"]]
     * [["page_timing.duration_time","<",100],"and",[["checks.large_page_size","=",false],"or",["checks.high_waiting_time","=",false]]]
     * The full list of possible filters is available by this link.
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting type
     * example:
     * ["meta.external_links_count,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["page_timing.dom_complete,asc","size,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type OnPagePagesByResourceResultInfo = {
    /**
     * status of the crawling session
     * possible values: in_progress, finished
     */
    crawl_progress?: string | null;
    /**
     * details of the crawling session
     */
    crawl_status?: CrawlStatusInfo | null;
    /**
     * total number of relevant items in the database
     */
    total_items_count?: number | null;
    /**
     * number of items in the results array
     */
    items_count?: number | null;
    /**
     * items array
     */
    items?: Array<OnPageHtmlResourceItem | null> | null;
};

export type OnPagePagesByResourceTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<OnPagePagesByResourceResultInfo | null> | null;
};

export type OnPagePagesByResourceResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPagePagesByResourceTaskInfo | null> | null;
};

export type OnPageResourcesRequestInfo = {
    /**
     * ID of the task
     * required field
     * you can get this ID in the response of the Task POST endpoint
     * example:
     * “07131248-1535-0216-1000-17384017ad04”
     */
    id?: string;
    /**
     * page URL
     * optional field
     * specify this field if you want to get the resources for a specific page
     * note that to obtain resource’s meta from a particular URL, you should specify the URL in this field;
     * if you do not indicate a url when setting a task, resource’s meta in the results will be returned based on the data from the page where our crawler first saw the resource
     */
    url?: string | null;
    /**
     * the maximum number of returned resources
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned resources
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten resources in the results array will be omitted and the data will be provided for the successive resources
     */
    offset?: number | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, like, not_like
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["resource_type","=","stylesheet"]
     * [["resource_type","=","image"],
     * "and",["checks.is_https","=",false]]
     * [["fetch_timing.duration_time",">",1],"and",[["total_transfer_size",">",100],"or",["checks.high_loading_time","=",true]]]
     * The full list of possible filters is available by this link.
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * filter the resources by relevant pages
     * optional field
     * you can use this field to obtain resources from pages matching to the defined parameters
     * you can apply the same filters here as available for the pages endpoint
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, like, not_like
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["checks.no_image_title","=",true]
     */
    relevant_pages_filters?: Array<string> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting type
     * example:
     * ["size,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["size,desc","fetch_timing.fetch_end,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * token for subsequent requests
     * optional field
     * provided in the identical filed of the response to each request;
     * use this parameter to avoid timeouts while trying to obtain over 20,000 results in a single request;
     * by specifying the unique search_after_token value from the response array, you will get the subsequent results of the initial task;
     * search_after_token values are unique for each subsequent task ;
     * Note: if the search_after_token is specified in the request, all other parameters should be identical to the previous request
     */
    search_after_token?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type OnPageResourcesResultInfo = {
    /**
     * status of the crawling session
     * possible values: in_progress, finished
     */
    crawl_progress?: string | null;
    /**
     * details of the crawling session
     */
    crawl_status?: CrawlStatusInfo | null;
    search_after_token?: string | null;
    current_offset?: number | null;
    /**
     * total number of relevant items crawled
     */
    total_items_count?: number | null;
    /**
     * number of items in the results array
     */
    items_count?: number | null;
    /**
     * items array
     */
    items?: Array<BaseOnPageResourceItem | null> | null;
};

export type OnPageResourcesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<OnPageResourcesResultInfo | null> | null;
};

export type OnPageResourcesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageResourcesTaskInfo | null> | null;
};

export type OnPageDuplicateTagsRequestInfo = {
    /**
     * ID of the task
     * required field
     * you can get this ID in the response of the Task POST endpoint
     * example:
     * “07131248-1535-0216-1000-17384017ad04”
     */
    id?: string;
    /**
     * type of element
     */
    type?: string;
    /**
     * tag value
     * optional field
     * specify a title or description here if you want to receive a list of duplicate pages that contains this tag
     */
    accumulator?: string | null;
    /**
     * the maximum number of returned pages
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned pages
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten pages in the results array will be omitted and the data will be provided for the successive pages
     */
    offset?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type OnPageDuplicateTagsItem = {
    /**
     * contains the value of duplicated tag
     */
    accumulator?: string | null;
    /**
     * total count of duplicate pages
     */
    total_count?: number | null;
    /**
     * pages with duplicate tags
     */
    pages?: Array<OnPageHtmlResourceItem | null> | null;
};

export type OnPageDuplicateTagsResultInfo = {
    /**
     * status of the crawling session
     * possible values: in_progress, finished
     */
    crawl_progress?: string | null;
    /**
     * details of the crawling session
     */
    crawl_status?: CrawlStatusInfo | null;
    /**
     * total number of pages with duplicate tags
     * displays the total number of pages with duplicate tags of the target website
     */
    total_pages_count?: number | null;
    /**
     * number of pages with duplicate tags in the response
     * displays the number of pages with duplicate tags returned in the response
     */
    pages_count?: number | null;
    /**
     * number of items in the results array
     */
    items_count?: number | null;
    /**
     * items array
     */
    items?: Array<OnPageDuplicateTagsItem | null> | null;
};

export type OnPageDuplicateTagsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<OnPageDuplicateTagsResultInfo | null> | null;
};

export type OnPageDuplicateTagsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageDuplicateTagsTaskInfo | null> | null;
};

export type OnPageDuplicateContentRequestInfo = {
    /**
     * ID of the task
     * required field
     * you can get this ID in the response of the Task POST endpoint
     * example:
     * “07131248-1535-0216-1000-17384017ad04”
     */
    id?: string;
    /**
     * page URL
     * required field
     * specify the initial page you want to receive duplicate content for
     */
    url?: string;
    /**
     * content similarity score
     * by default, the content is considered duplicate if the value is greater than or equals 6
     * you can specify any similarity score in the 0-to-10 range
     */
    similarity?: number | null;
    /**
     * the maximum number of returned pages
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned pages
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten pages in the results array will be omitted and the data will be provided for the successive pages
     */
    offset?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type DuplicatePageInfo = {
    /**
     * content similarity score
     * by default, the content is considered duplicate if the value is greater than or equals 6
     * can take values from 0 to 10
     */
    similarity?: number | null;
    /**
     * information about the page with duplicate content
     */
    page?: Array<OnPageHtmlResourceItem | null> | null;
};

export type OnPageDuplicateContentItem = {
    /**
     * URL of the specified page
     */
    url?: string | null;
    /**
     * total count of duplicate pages
     */
    total_count?: number | null;
    /**
     * pages with duplicate content
     */
    pages?: Array<DuplicatePageInfo | null> | null;
};

export type OnPageDuplicateContentResultInfo = {
    /**
     * status of the crawling session
     * possible values: in_progress, finished
     */
    crawl_progress?: string | null;
    /**
     * details of the crawling session
     */
    crawl_status?: CrawlStatusInfo | null;
    /**
     * number of items in the results array
     */
    items_count?: number | null;
    /**
     * items array
     */
    items?: Array<OnPageDuplicateContentItem | null> | null;
};

export type OnPageDuplicateContentTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<OnPageDuplicateContentResultInfo | null> | null;
};

export type OnPageDuplicateContentResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageDuplicateContentTaskInfo | null> | null;
};

export type OnPageLinksRequestInfo = {
    /**
     * ID of the task
     * required field
     * you can get this ID in the response of the Task POST endpoint
     * example:
     * “07131248-1535-0216-1000-17384017ad04”
     */
    id?: string;
    /**
     * relative page URL
     * optional field
     * if you use this field, the API response will contain only links from the specified page
     * note that in this field you can specify relative URLs only
     */
    page_from?: string | null;
    /**
     * relative page URL
     * optional field
     * if you use this field, the API response will contain only internal links pointing to the specified page
     * note that in this field you can specify relative URLs only
     */
    page_to?: string | null;
    /**
     * the maximum number of returned links
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned links
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten links in the results array will be omitted and the data will be provided for the successive links
     */
    offset?: number | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, =, <>, in, not_in, like, not_like
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["direction","=","external"]
     * [["domain_to","<>","example.com"],
     * "and",
     * ["link_from","not_like","%example.com/blog%"]]
     * [["direction","=","external"],
     * "and",
     * [["link_from","like","%example.com/blog%"],"or",["link_from","like","%example.com/help%"]]]
     * The full list of possible filters is available by this link.
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * token for subsequent requests
     * optional field
     * provided in the identical filed of the response to each request;
     * use this parameter to avoid timeouts while trying to obtain over 20,000 results in a single request;
     * by specifying the unique search_after_token value from the response array, you will get the subsequent results of the initial task;
     * search_after_token values are unique for each subsequent task ;
     * Note: if the search_after_token is specified in the request, all other parameters should be identical to the previous request
     */
    search_after_token?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type OnPageAnchorLinkItem = (BaseOnPageLinkItem | null) & {
    /**
     * link attribute added to external link
     * indicates link attributes added to the link_to on the page_from
     * example:
     * ["ugc","noopener"]
     */
    link_attribute?: Array<string | null> | null;
    /**
     * anchor text
     */
    text?: string | null;
};

export type OnPageImageLinkItem = (BaseOnPageLinkItem | null) & {
    /**
     * link attribute added to external link
     * indicates link attributes added to the link_to on the page_from
     * example:
     * ["ugc","noopener"]
     */
    link_attribute?: Array<string | null> | null;
    /**
     * anchor text
     */
    text?: string | null;
    /**
     * alternative text for the image
     */
    image_alt?: string | null;
    /**
     * url of the image
     */
    image_src?: string | null;
};

export type OnPageCanonicalLinkItem = (BaseOnPageLinkItem | null) & {
    [key: string]: unknown;
};

export type OnPageAlternateLinkItem = (BaseOnPageLinkItem | null) & {
    [key: string]: unknown;
};

export type OnPageLinkLinkItem = (BaseOnPageLinkItem | null) & {
    [key: string]: unknown;
};

export type OnPageRedirectLinkItem = (BaseOnPageLinkItem | null) & {
    [key: string]: unknown;
};

export type OnPageMetaLinkItem = (BaseOnPageLinkItem | null) & {
    [key: string]: unknown;
};

export type OnPageLinksResultInfo = {
    /**
     * status of the crawling session
     * possible values: in_progress, finished
     */
    crawl_progress?: string | null;
    /**
     * details of the crawling session
     */
    crawl_status?: CrawlStatusInfo | null;
    search_after_token?: string | null;
    current_offset?: number | null;
    /**
     * total number of relevant items in the database
     */
    total_items_count?: number | null;
    /**
     * number of items in the results array
     */
    items_count?: number | null;
    /**
     * items array
     */
    items?: Array<BaseOnPageLinkItem | null> | null;
};

export type OnPageLinksTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<OnPageLinksResultInfo | null> | null;
};

export type OnPageLinksResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageLinksTaskInfo | null> | null;
};

export type OnPageRedirectChainsRequestInfo = {
    /**
     * ID of the task
     * required field
     * you can get this ID in the response of the Task POST endpoint
     * example:
     * “07131248-1535-0216-1000-17384017ad04”
     */
    id?: string;
    /**
     * page URL
     * optional field
     * absolute URL of the target page
     * if you use this field, the API response will return only redirect chains which contain the specified URL
     */
    url?: string | null;
    /**
     * the maximum number of returned redirect chains
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned redirect chains
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten redirect chains in the results array will be omitted and the data will be provided for the successive redirect chains
     */
    offset?: number | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can use only one filtering parameter with this endpoint
     * the following filtering parameter is supported:
     * is_redirect_loop
     * the following operators are supported:
     * regex, not_regex, =, <>
     * examples:
     * ["is_redirect_loop","=","true"]
     * ["is_redirect_loop","<>","false"]
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type OnPageRedirectChainsItem = {
    /**
     * indicates if redirects in chain start and end at the same URL
     * if true, the last URL from the chain redirects back to the original URL
     */
    is_redirect_loop?: boolean | null;
    /**
     * contains links that form a chain
     */
    chain?: Array<OnPageRedirectLinkItem | null> | null;
};

export type OnPageRedirectChainsResultInfo = {
    /**
     * status of the crawling session
     * possible values: in_progress, finished
     */
    crawl_progress?: string | null;
    /**
     * details of the crawling session
     */
    crawl_status?: CrawlStatusInfo | null;
    /**
     * total number of relevant items in the database
     */
    total_items_count?: number | null;
    /**
     * number of items in the results array
     */
    items_count?: number | null;
    /**
     * items array
     */
    items?: Array<OnPageRedirectChainsItem | null> | null;
};

export type OnPageRedirectChainsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<OnPageRedirectChainsResultInfo | null> | null;
};

export type OnPageRedirectChainsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageRedirectChainsTaskInfo | null> | null;
};

export type OnPageNonIndexableRequestInfo = {
    /**
     * ID of the task
     * required field
     * you can get this ID in the response of the Task POST endpoint
     * example:
     * “07131248-1535-0216-1000-17384017ad04”
     */
    id?: string;
    /**
     * the maximum number of returned pages
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned pages
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten pages in the results array will be omitted and the data will be provided for the successive pages
     */
    offset?: number | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, like, not_like
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["reason","=","robots_txt"][["reason","<>","robots_txt"],
     * "and",
     * ["url","not_like","%/wp-admin/%"]]
     * [["url","not_like","%/wp-admin/%"],
     * "and",
     * [["reason","<>","meta_tag"],"or",["reason","<>","http_header"]]]
     * The full list of possible filters is available by this link.
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
};

export type OnPageNonIndexableItem = {
    /**
     * the reason why the page is non-indexable
     * can take the following values: robots_txt, meta_tag, http_header, attribute, too_many_redirects
     */
    reason?: string | null;
    /**
     * url of the non-indexable page
     */
    url?: string | null;
};

export type OnPageNonIndexableResultInfo = {
    /**
     * status of the crawling session
     * possible values: in_progress, finished
     */
    crawl_progress?: string | null;
    /**
     * details of the crawling session
     */
    crawl_status?: CrawlStatusInfo | null;
    /**
     * total number of relevant items in the database
     */
    total_items_count?: number | null;
    /**
     * number of items in the results array
     */
    items_count?: number | null;
    /**
     * items array
     */
    items?: Array<OnPageNonIndexableItem | null> | null;
};

export type OnPageNonIndexableTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<OnPageNonIndexableResultInfo | null> | null;
};

export type OnPageNonIndexableResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageNonIndexableTaskInfo | null> | null;
};

export type OnPageWaterfallRequestInfo = {
    /**
     * ID of the task
     * required field
     * you can get this ID in the response of the Task POST endpoint
     * example:
     * “07131248-1535-0216-1000-17384017ad04”
     */
    id?: string;
    /**
     * page URL
     * required field
     * specify the pages you want to receive timing for
     */
    url?: string;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type OnPageResourceLocationInfo = {
    /**
     * line number
     * the number of the line on which the resource is located
     */
    line?: number | null;
    /**
     * position in line
     * the number of line characters before the resource;
     * sometimes referred to as column
     * Note: counts from 1, i.e. if the resource doesn’t have any characters to the left, the value will be 1
     */
    offset_left?: number | null;
    /**
     * position in the document
     * the total number of characters between the resource and the top of HTML
     */
    offset_top?: number | null;
};

export type WaterfallResourceInfo = {
    resource_type?: string | null;
    /**
     * resource URL
     */
    url?: string | null;
    /**
     * resource initiator
     */
    initiator?: string | null;
    /**
     * total time it takes until a browser receives a complete response from a server (in milliseconds)
     */
    duration_time?: number | null;
    /**
     * time to start downloading the resource
     * the amount of time the browser needs to start downloading a resource
     */
    fetch_start?: number | null;
    /**
     * time to complete downloading the resource
     * the amount of time the browser needs to complete downloading a resource
     */
    fetch_end?: number | null;
    /**
     * location of the resource in the document
     * parameters defining the location of the specific resource within the document’s HTML
     */
    location?: OnPageResourceLocationInfo | null;
    /**
     * indicates whether the resource blocks rendering
     */
    is_render_blocking?: boolean | null;
};

export type OnPageWaterfallItem = {
    /**
     * URL of the page
     */
    page_url?: string | null;
    /**
     * Time To Interactive (TTI) metric
     * the time it takes until the user can interact with a page (in milliseconds)
     */
    time_to_interactive?: number | null;
    /**
     * time to load resources
     * the time it takes until the page and all of its subresources are downloaded (in milliseconds)
     */
    dom_complete?: number | null;
    /**
     * time to connect to a server
     * the time it takes until the connection with a server is established (in milliseconds)
     */
    connection_time?: number | null;
    /**
     * time to establish a secure connection
     * the time it takes until the secure connection with a server is established (in milliseconds)
     */
    time_to_secure_connection?: number | null;
    /**
     * time to send a request to a server
     * the time it takes until the request to a server is sent (in milliseconds)
     */
    request_sent_time?: number | null;
    /**
     * time to first byte (TTFB) in milliseconds
     */
    waiting_time?: number | null;
    /**
     * time it takes for a browser to receive a response (in milliseconds)
     */
    download_time?: number | null;
    /**
     * total time it takes until a browser receives a complete response from a server (in milliseconds)
     */
    duration_time?: number | null;
    /**
     * time to start downloading the HTML resource
     * the amount of time the browser needs to start downloading a page
     */
    fetch_start?: number | null;
    /**
     * time to complete downloading the HTML resource
     * the amount of time the browser needs to complete downloading a page
     */
    fetch_end?: number | null;
    /**
     * resource-specific timing
     * contains separate arrays with timing for each resource found on the page
     */
    resources?: Array<WaterfallResourceInfo | null> | null;
};

export type OnPageWaterfallResultInfo = {
    /**
     * status of the crawling session
     * possible values: in_progress, finished
     */
    crawl_progress?: string | null;
    /**
     * details of the crawling session
     */
    crawl_status?: CrawlStatusInfo | null;
    /**
     * number of items in the results array
     */
    items_count?: number | null;
    /**
     * items array
     */
    items?: Array<OnPageWaterfallItem | null> | null;
};

export type OnPageWaterfallTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<OnPageWaterfallResultInfo | null> | null;
};

export type OnPageWaterfallResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageWaterfallTaskInfo | null> | null;
};

export type OnPageKeywordDensityRequestInfo = {
    /**
     * ID of the task
     * required field
     * you can get this ID in the response of the Task POST endpoint
     * example:
     * “07131248-1535-0216-1000-17384017ad04”
     */
    id?: string;
    /**
     * number of words for a keyword
     * required field
     * possible values:
     * 1, 2, 3, 4, 5
     */
    keyword_length?: number;
    /**
     * page URL
     * optional field
     * if you do not specify a page here, the results will be provided for the whole website
     * if you use this field, the API response will contain only keywords from the specified page
     * a page should be specified with absolute URL (including http:// or https://)
     */
    url?: string | null;
    /**
     * the maximum number of returned keywords
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, =, <>, in, not_in, like, not_like
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["keyword","=","%seo%"]
     * [["keyword","=","%seo%"],
     * "and",
     * ["frequency","<","6"]]
     * [["keyword","not_like","%seo%"],
     * "and",
     * [["frequency",">","6"],"or",["density",">","0.02"]]]
     * The full list of possible filters is available by this link.
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting type
     * example:
     * ["frequency,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["keyword,asc","frequency,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type OnPageKeywordDensityItem = {
    /**
     * returned keyword
     */
    keyword?: string | null;
    /**
     * keyword frequency
     * number of times the keyword appears on the website (or webpage if you specified a url)
     */
    frequency?: number | null;
    /**
     * keyword density
     * calculated as a ratio of frequency to the total count of keywords with the set keyword_length on the web page or website
     */
    density?: number | null;
};

export type OnPageKeywordDensityResultInfo = {
    /**
     * status of the crawling session
     * possible values: in_progress, finished
     */
    crawl_progress?: string | null;
    /**
     * details of the crawling session
     */
    crawl_status?: CrawlStatusInfo | null;
    /**
     * total number of relevant items
     * total number of keywords on the specified website or web page matching the set keyword_length and filters
     */
    total_items_count?: number | null;
    /**
     * number of items in the results array
     */
    items_count?: number | null;
    /**
     * items array
     */
    items?: Array<OnPageKeywordDensityItem | null> | null;
};

export type OnPageKeywordDensityTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<OnPageKeywordDensityResultInfo | null> | null;
};

export type OnPageKeywordDensityResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageKeywordDensityTaskInfo | null> | null;
};

export type OnPageMicrodataRequestInfo = {
    /**
     * ID of the task
     * required field
     * you can get this ID in the response of the Task POST endpoint
     * example:
     * "07131248-1535-0216-1000-17384017ad04"
     */
    id?: string;
    /**
     * resource URL
     * required field
     * you can get this URL in the response of the Pages endpoint
     * example:
     * https://dataforseo.com/apis
     */
    url?: string;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type TestSummary = {
    /**
     * number of fatal microdata errors
     */
    fatal?: number | null;
    /**
     * number of serious microdata errors
     */
    error?: number | null;
    /**
     * number of microdata warnings
     */
    warning?: number | null;
    /**
     * number of microdata information flags
     */
    info?: number | null;
};

export type MicrodataFieldsInfo = {
    /**
     * field name
     * name of the data field
     */
    name?: string | null;
    /**
     * list of microdata types
     */
    types?: Array<string | null> | null;
    /**
     * microdata value
     * microdata value specified on a target web page
     */
    value?: string | null;
    /**
     * microdata validation test results
     * sub-type microdata test results that contain detected errors and related messages
     */
    test_results?: MessageInfo | null;
    /**
     * microdata fields
     * an array of objects containing data fields related to the certain microdata type
     */
    fields?: Array<MicrodataFieldsInfo | null> | null;
};

export type MicrodataInspectionInfo = {
    /**
     * parent microdata types
     * for a full list of available types, please visit schema.org
     */
    types?: Array<string | null> | null;
    /**
     * microdata fields
     * an array of objects containing data fields related to the certain microdata type
     */
    fields?: Array<MicrodataFieldsInfo | null> | null;
};

export type OnPageMicrodataInfoItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * information related to microdata validation
     */
    inspection_info?: MicrodataInspectionInfo | null;
};

export type OnPageMicrodataResultInfo = {
    /**
     * status of the crawling session
     * possible values: in_progress, finished
     */
    crawl_progress?: string | null;
    /**
     * details of the crawling session
     */
    crawl_status?: CrawlStatusInfo | null;
    /**
     * microdata validation test results
     */
    test_summary?: TestSummary | null;
    /**
     * number of items in the results array
     */
    items_count?: number | null;
    /**
     * items array
     */
    items?: Array<OnPageMicrodataInfoItem | null> | null;
};

export type OnPageMicrodataTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<OnPageMicrodataResultInfo | null> | null;
};

export type OnPageMicrodataResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageMicrodataTaskInfo | null> | null;
};

export type OnPageRawHtmlRequestInfo = {
    /**
     * ID of the task
     * required field
     * you can get this ID in the response of the Task POST endpoint
     * example:
     * “07131248-1535-0216-1000-17384017ad04”
     */
    id?: string;
    /**
     * page url
     * required field
     * the absolute URL of a page to request HTML
     * Note: this field is optional if the task was set using the Instant Pages endpoint
     */
    url?: string;
};

export type OnPageRawHtmlItem = {
    /**
     * HTML page
     */
    html?: string | null;
};

export type OnPageRawHtmlResultInfo = {
    /**
     * status of the crawling session
     * possible values: in_progress, finished
     */
    crawl_progress?: string | null;
    /**
     * details of the crawling session
     */
    crawl_status?: CrawlStatusInfo | null;
    /**
     * number of items in the results array
     */
    items_count?: number | null;
    /**
     * items object
     */
    items?: OnPageRawHtmlItem | null;
};

export type OnPageRawHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<OnPageRawHtmlResultInfo | null> | null;
};

export type OnPageRawHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageRawHtmlTaskInfo | null> | null;
};

export type OnPagePageScreenshotRequestInfo = {
    /**
     * page url
     * required field
     * absolute URL of the page to snap
     * note: if the URL you indicate here returns a 404 status code or the indicated value is not a valid URL, you will obtain "error_message":"Screenshot is empty" in the response array
     */
    url?: string;
    /**
     * language header for accessing the website
     * optional field
     * all locale formats are supported (xx, xx-XX, xxx-XX, etc.)
     * note: if you do not specify this parameter, some websites may deny access; in this case, you will obtain "error_message":"Screenshot is empty" in the response array
     */
    accept_language?: string | null;
    /**
     * custom user agent
     * optional field
     * custom user agent for crawling a website
     * example: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36
     *
     * default value: Mozilla/5.0 (compatible; RSiteAuditor)
     */
    custom_user_agent?: string | null;
    /**
     * preset for browser screen parameters
     * optional field
     * if you use this field, you don’t need to indicate browser_screen_width, browser_screen_height, browser_screen_scale_factor
     * possible values:
     * desktop, mobile, tablet
     * desktop preset will apply the following values:
     * browser_screen_width: 1920
     * browser_screen_height: 1080
     * browser_screen_scale_factor: 1
     * mobile preset will apply the following values:
     * browser_screen_width: 390
     * browser_screen_height: 844
     * browser_screen_scale_factor: 3
     * tablet preset will apply the following values:
     * browser_screen_width: 1024
     * browser_screen_height: 1366
     * browser_screen_scale_factor: 2
     * Note: in this endpoint, the enable_browser_rendering, enable_javascript, load_resources, and enable_xhr parameters are always enabled.
     */
    browser_preset?: string | null;
    /**
     * browser screen width
     * optional field
     * you can set a custom browser screen width to perform audit for a particular device;
     * if you use this field, you don’t need to indicate browser_preset as it will be ignored;
     * minimum value, in pixels: 240
     * maximum value, in pixels: 9999
     */
    browser_screen_width?: number | null;
    /**
     * browser screen height
     * optional field
     * you can set a custom browser screen height to perform audit for a particular device;
     * if you use this field, you don’t need to indicate browser_preset as it will be ignored;
     * minimum value, in pixels: 240
     * maximum value, in pixels: 9999
     */
    browser_screen_height?: number | null;
    /**
     * browser screen scale factor
     * optional field
     * you can set a custom browser screen resolution ratio to perform audit for a particular device;
     * if you use this field, you don’t need to indicate browser_preset as it will be ignored;
     * minimum value: 0.5
     * maximum value: 3
     */
    browser_screen_scale_factor?: number | null;
    /**
     * take a screenshot of the full page
     * optional field
     * set to false if you want to capture only the part of the page displayed before scrolling
     * default value: true
     */
    full_page_screenshot?: boolean | null;
    /**
     * disable the cookie popup
     * optional field
     * set to true if you want to disable the popup requesting cookie consent from the user;
     * default value:
     * false
     */
    disable_cookie_popup?: boolean | null;
    /**
     * switch proxy pool
     * optional field
     * if true, additional proxy pools will be used to obtain the requested data;
     * the parameter can be used if a multitude of tasks is set simultaneously, resulting in occasional rate-limit and/or site_unreachable errors
     */
    switch_pool?: boolean | null;
    /**
     * proxy pool
     * optional field
     * you can choose a location of the proxy pool that will be used to obtain the requested data;
     * the parameter can be used if page content is inaccessible in one of the locations, resulting in occasional site_unreachable errors
     * possible values: us, de
     */
    ip_pool_for_scan?: string | null;
};

export type OnPagePageScreenshotResultInfo = {
    /**
     * status of the crawling session
     * possible values: in_progress, finished
     */
    crawl_progress?: string | null;
    /**
     * error message
     * if the url you indicated returns a 404 status code or is not a valid URL, you will obtain "error_message":"Screenshot is empty"
     * if no error is encountered, the value will be null
     */
    error_message?: string | null;
    /**
     * number of items in the results array
     */
    items_count?: number | null;
    /**
     * items array
     */
    items?: Array<ScreenshotItem | null> | null;
};

export type OnPagePageScreenshotTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<OnPagePageScreenshotResultInfo | null> | null;
};

export type OnPagePageScreenshotResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPagePageScreenshotTaskInfo | null> | null;
};

export type OnPageContentParsingRequestInfo = {
    /**
     * URL of the content to parse
     * required field
     * URL of the page to parse
     * example:
     * https://dataforseo.com/blog/a-versatile-alternative-to-google-trends-exploring-the-power-of-dataforseo-trends-api
     */
    url?: string;
    /**
     * ID of the task
     * required field
     * you can get this ID in the response of the Task POST endpoint
     * note: the enable_content_parsing parameter in the POST request must be set to true
     * example:
     * "07131248-1535-0216-1000-17384017ad04"
     */
    id?: string;
    /**
     * return page content as markdown
     * optional field
     * if set to true, the markdown-formatted content of the page will be returned in the page_as_markdown field of the response;
     * default value: false
     */
    markdown_view?: boolean | null;
};

export type PageSectionContentInfo = {
    /**
     * primary content on the page
     * you can find more information about content priority calculation in this help center article
     */
    primary_content?: Array<SectionContentItemInfo | null> | null;
    /**
     * secondary content on the page
     * you can find more information about content priority calculation in this help center article
     */
    secondary_content?: Array<SectionContentItemInfo | null> | null;
    /**
     * content of the table on the page
     */
    table_content?: Array<TableContentInfo | null> | null;
};

export type TopicInfo = {
    /**
     * meta title
     */
    h_title?: string | null;
    /**
     * main title of the block
     */
    main_title?: string | null;
    /**
     * content author name
     */
    author?: string | null;
    /**
     * content language
     */
    language?: string | null;
    /**
     * HTML level
     */
    level?: number | null;
    /**
     * primary content on the page
     * you can find more information about content priority calculation in this help center article
     */
    primary_content?: Array<SectionContentItemInfo | null> | null;
    /**
     * secondary content on the page
     * you can find more information about content priority calculation in this help center article
     */
    secondary_content?: Array<SectionContentItemInfo | null> | null;
    /**
     * content of the table on the page
     */
    table_content?: Array<TableContentInfo | null> | null;
};

export type Contacts = {
    /**
     * array of telephone numbers
     */
    telephones?: Array<string | null> | null;
    /**
     * array of emails
     */
    emails?: Array<string | null> | null;
};

export type PageContentInfo = {
    /**
     * content of the header of the table
     */
    header?: PageSectionContentInfo | null;
    /**
     * content of the footer of the table
     */
    footer?: PageSectionContentInfo | null;
    /**
     * main topic on the page
     * you can find more information about topic priority calculation in this help center article
     */
    main_topic?: Array<TopicInfo | null> | null;
    /**
     * secondary topic on the page
     * you can find more information about topic priority calculation in this help center article
     */
    secondary_topic?: Array<TopicInfo | null> | null;
    /**
     * contains objects with rating information for the products displayed on the page
     */
    ratings?: Array<ContentRatingInfo | null> | null;
    /**
     * array of products displayed on the page
     * contains objects with information on products displayed on the page
     */
    offers?: Array<ContentOfferInfo | null> | null;
    /**
     * array of comments displayed on the page
     * contains objects with information on comments related to displayed products
     */
    comments?: Array<ContentCommentInfo | null> | null;
    /**
     * contact information
     * contains contact information displayed on the page
     */
    contacts?: Contacts | null;
};

export type ContentParsingElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * date and time when the content was fethced
     * example:
     * "2022-11-01 10:02:52 +00:00"
     */
    fetch_time?: string | null;
    /**
     * status code of the page
     */
    status_code?: number | null;
    /**
     * parsed content of the page
     */
    page_content?: PageContentInfo | null;
    /**
     * page content in the markdown format
     * page content in the text-to-HTML markdown format
     * specify markdown_view as true in the request to return the value
     */
    page_as_markdown?: string | null;
};

export type OnPageContentParsingResultInfo = {
    /**
     * status of the crawling session
     * possible values: in_progress, finished
     */
    crawl_progress?: string | null;
    /**
     * details of the crawling session
     */
    crawl_status?: CrawlStatusInfo | null;
    /**
     * number of items in the results array
     */
    items_count?: number | null;
    /**
     * items array
     */
    items?: Array<ContentParsingElement | null> | null;
};

export type OnPageContentParsingTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<OnPageContentParsingResultInfo | null> | null;
};

export type OnPageContentParsingResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageContentParsingTaskInfo | null> | null;
};

export type OnPageContentParsingLiveRequestInfo = {
    /**
     * URL of the content to parse
     * required field
     * URL of the page to parse
     * example:
     * https://www.fujielectric.com/
     */
    url?: string;
    /**
     * custom user agent
     * optional field
     * custom user agent for crawling a website
     * example: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36
     *
     * default value: Mozilla/5.0 (compatible; RSiteAuditor)
     */
    custom_user_agent?: string | null;
    /**
     * preset for browser screen parameters
     * optional field
     * if you use this field, you don’t need to indicate browser_screen_width, browser_screen_height, browser_screen_scale_factor
     * possible values:
     * desktop, mobile, tablet
     * desktop preset will apply the following values:
     * browser_screen_width: 1920
     * browser_screen_height: 1080
     * browser_screen_scale_factor: 1
     * mobile preset will apply the following values:
     * browser_screen_width: 390
     * browser_screen_height: 844
     * browser_screen_scale_factor: 3
     * tablet preset will apply the following values:
     * browser_screen_width: 1024
     * browser_screen_height: 1366
     * browser_screen_scale_factor: 2
     * Note: to use this parameter, set enable_javascript or enable_browser_rendering to true
     */
    browser_preset?: string | null;
    /**
     * browser screen width
     * optional field
     * you can set a custom browser screen width to perform audit for a particular device;
     * if you use this field, you don’t need to indicate browser_preset as it will be ignored;
     * Note: to use this parameter, set enable_javascript or enable_browser_rendering to true
     * minimum value, in pixels: 240
     * maximum value, in pixels: 9999
     */
    browser_screen_width?: number | null;
    /**
     * browser screen height
     * optional field
     * you can set a custom browser screen height to perform audit for a particular device;
     * if you use this field, you don’t need to indicate browser_preset as it will be ignored;
     * Note: to use this parameter, set enable_javascript or enable_browser_rendering to true
     * minimum value, in pixels: 240
     * maximum value, in pixels: 9999
     */
    browser_screen_height?: number | null;
    /**
     * browser screen scale factor
     * optional field
     * you can set a custom browser screen resolution ratio to perform audit for a particular device;
     * if you use this field, you don’t need to indicate browser_preset as it will be ignored;
     * Note: to use this parameter, set enable_javascript or enable_browser_rendering to true
     * minimum value: 0.5
     * maximum value: 3
     */
    browser_screen_scale_factor?: number | null;
    /**
     * store HTML of a crawled page
     * optional field
     * set to true if you want to get the HTML of the page using the OnPage Raw HTML endpoint
     * default value: false
     */
    store_raw_html?: boolean | null;
    /**
     * disable the cookie popup
     * optional field
     * set to true if you want to disable the popup requesting cookie consent from the user;
     * default value:
     * false
     */
    disable_cookie_popup?: boolean | null;
    /**
     * language header for accessing the website
     * optional field
     * all locale formats are supported (xx, xx-XX, xxx-XX, etc.)
     * Note: if you do not specify this parameter, some websites may deny access; in this case, pages will be returned with the "type":"broken in the response array
     */
    accept_language?: string | null;
    /**
     * load javascript on a page
     * optional field
     * set to true if you want to load the scripts available on a page
     * default value: false
     * Note: if you use this parameter, additional charges will apply; learn more about the cost of tasks with this parameter in our help article; the cost can be calculated on the Pricing Page
     */
    enable_javascript?: boolean | null;
    /**
     * emulate browser rendering to measure Core Web Vitals
     * optional field
     * by using this parameter you will be able to emulate a browser when loading a web page;
     * enable_browser_rendering loads styles, images, fonts, animations, videos, and other resources on a page;
     * default value: false
     * set to true to obtain Core Web Vitals (FID, CLS, LCP) metrics in the response;
     * if you use this field, enable_javascript, and load_resources parameters must be set to true
     * Note: if you use this parameter, additional charges will apply; learn more about the cost of tasks with this parameter in our help article; the cost can be calculated on the Pricing Page
     */
    enable_browser_rendering?: boolean | null;
    /**
     * enable XMLHttpRequest on a page
     * optional field
     * set to true if you want our crawler to request data from a web server using the XMLHttpRequest object
     * default value:
     * false
     * if you use this field, enable_javascript must be set to true;
     */
    enable_xhr?: boolean | null;
    /**
     * switch proxy pool
     * optional field
     * if true, additional proxy pools will be used to obtain the requested data;
     * the parameter can be used if a multitude of tasks is set simultaneously, resulting in occasional rate-limit and/or site_unreachable errors
     */
    switch_pool?: boolean | null;
    /**
     * proxy pool
     * optional field
     * you can choose a location of the proxy pool that will be used to obtain the requested data;
     * the parameter can be used if page content is inaccessible in one of the locations, resulting in occasional site_unreachable errors
     * possible values: us, de
     */
    ip_pool_for_scan?: string | null;
    /**
     * return page content as markdown
     * optional field
     * if set to true, the markdown-formatted content of the page will be returned in the page_as_markdown field of the response;
     * default value: false
     */
    markdown_view?: boolean | null;
};

export type OnPageContentParsingLiveResultInfo = {
    /**
     * status of the crawling session
     * possible values: in_progress, finished
     */
    crawl_progress?: string | null;
    /**
     * details of the crawling session
     */
    crawl_status?: CrawlStatusInfo | null;
    /**
     * number of items in the results array
     */
    items_count?: number | null;
    /**
     * items array
     */
    items?: Array<ContentParsingElement | null> | null;
};

export type OnPageContentParsingLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<OnPageContentParsingLiveResultInfo | null> | null;
};

export type OnPageContentParsingLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageContentParsingLiveTaskInfo | null> | null;
};

export type OnPageInstantPagesRequestInfo = {
    /**
     * target page url
     * required field
     * absolute URL of the target page;
     * Note #1: results will be returned for the specified URL only;
     * Note #2: to prevent denial-of-service events, tasks that contain a duplicate crawl host will be returned with a 40501 error;
     * to prevent this error from occurring, avoid setting tasks with the same domain if at least one of your previous tasks with this domain (including a page URL on the domain) is still in a crawling queue
     */
    url?: string;
    /**
     * custom user agent
     * optional field
     * custom user agent for crawling a website
     * example: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36
     *
     * default value: Mozilla/5.0 (compatible; RSiteAuditor)
     */
    custom_user_agent?: string | null;
    /**
     * preset for browser screen parameters
     * optional field
     * if you use this field, you don’t need to indicate browser_screen_width, browser_screen_height, browser_screen_scale_factorpossible values:
     * desktop, mobile, tabletdesktop preset will apply the following values:
     * browser_screen_width: 1920
     * browser_screen_height: 1080
     * browser_screen_scale_factor: 1
     * mobile preset will apply the following values:
     * browser_screen_width: 390
     * browser_screen_height: 844
     * browser_screen_scale_factor: 3
     * tablet preset will apply the following values:
     * browser_screen_width: 1024
     * browser_screen_height: 1366
     * browser_screen_scale_factor: 2
     * Note: to use this parameter, set enable_javascript or enable_browser_rendering to true
     */
    browser_preset?: string | null;
    /**
     * browser screen width
     * optional field
     * you can set a custom browser screen width to perform audit for a particular device;
     * if you use this field, you don’t need to indicate browser_preset as it will be ignored;Note: to use this parameter, set enable_javascript or enable_browser_rendering to trueminimum value, in pixels: 240
     * maximum value, in pixels: 9999
     */
    browser_screen_width?: number | null;
    /**
     * browser screen height
     * optional field
     * you can set a custom browser screen height to perform audit for a particular device;
     * if you use this field, you don’t need to indicate browser_preset as it will be ignored;Note: to use this parameter, set enable_javascript or enable_browser_rendering to trueminimum value, in pixels: 240
     * maximum value, in pixels: 9999
     */
    browser_screen_height?: number | null;
    /**
     * browser screen scale factor
     * optional field
     * you can set a custom browser screen resolution ratio to perform audit for a particular device;
     * if you use this field, you don’t need to indicate browser_preset as it will be ignored;Note: to use this parameter, set enable_javascript or enable_browser_rendering to trueminimum value: 0.5
     * maximum value: 3
     */
    browser_screen_scale_factor?: number | null;
    /**
     * store HTML of a crawled page
     * optional field
     * set to true if you want get the HTML of the page using the OnPage Raw HTML endpoint
     * default value: false
     */
    store_raw_html?: boolean | null;
    /**
     * language header for accessing the website
     * optional field
     * all locale formats are supported (xx, xx-XX, xxx-XX, etc.)
     * Note: if you do not specify this parameter, some websites may deny access; in this case, pages will be returned with the "type":"broken in the response array
     */
    accept_language?: string | null;
    /**
     * load resources
     * optional field
     * set to true if you want to load image, stylesheets, scripts, and broken resources
     * default value: false
     * Note: if you use this parameter, additional charges will apply; learn more about the cost of tasks with this parameter in our help article; the cost can be calculated on the Pricing Page
     */
    load_resources?: boolean | null;
    /**
     * load javascript on a page
     * optional field
     * set to true if you want to load the scripts available on a page
     * default value: false
     * Note: if you use this parameter, additional charges will apply; learn more about the cost of tasks with this parameter in our help article; the cost can be calculated on the Pricing Page
     */
    enable_javascript?: boolean | null;
    /**
     * emulate browser rendering to measure Core Web Vitals
     * optional field
     * by using this parameter you will be able to emulate a browser when loading a web page;
     * enable_browser_rendering loads styles, images, fonts, animations, videos, and other resources on a page;
     * default value: false
     * set to true to obtain Core Web Vitals (FID, CLS, LCP) metrics in the response;
     * if you use this field, parameters enable_javascript, and load_resources are enabled automatically;
     * Note: if you use this parameter, additional charges will apply; learn more about the cost of tasks with this parameter in our help article; the cost can be calculated on the Pricing Page
     */
    enable_browser_rendering?: boolean | null;
    /**
     * disable the cookie popup
     * optional field
     * set to true if you want to disable the popup requesting cookie consent from the user;
     * default value:
     * false
     */
    disable_cookie_popup?: boolean | null;
    /**
     * return data on pages despite the timeout error
     * optional field
     * if true, the data will be provided on pages that failed to load within 120 seconds and responded with a timeout error;
     * default value: false
     */
    return_despite_timeout?: boolean | null;
    /**
     * enable XMLHttpRequest on a page
     * optional field
     * set to true if you want our crawler to request data from a web server using the XMLHttpRequest object
     * default value:
     * falseif you use this field, enable_javascript must be set to true;
     */
    enable_xhr?: boolean | null;
    /**
     * custom javascript
     * optional fieldNote that the execution time for the script you enter here should be 700 ms maximum;
     * for example, you can use the following JS snippet to check if the website contains Google Tag Manager as a scr attribute:
     * let meta = { haveGoogleAnalytics: false, haveTagManager: false };\r\nfor (var i = 0; i < document.scripts.length; i++) {\r\n let src = document.scripts[i].getAttribute(\"src\");\r\n if (src != undefined) {\r\n if (src.indexOf(\"analytics.js\") >= 0)\r\n      meta.haveGoogleAnalytics = true;\r\n\tif (src.indexOf(\"gtm.js\") >= 0)\r\n      meta.haveTagManager = true;\r\n  }\r\n}\r\nmeta;the returned value depends on what you specified in this field. For instance, if you specify the following script:
     * meta = {}; meta.url = document.URL; meta.test = 'test'; meta;
     * as a response you will receive the following data:
     * "custom_js_response": {
     * "url": "https://dataforseo.com/",
     * "test": "test"
     * }
     * Note: if you use this parameter, additional charges will apply; learn more about the cost of tasks with this parameter in our help article; the cost can be calculated on the Pricing Page
     */
    custom_js?: string | null;
    /**
     * enable microdata validation
     * optional field
     * if set to true, you can use the OnPage API Microdata endpoint with the id of the task;
     * default value: false
     */
    validate_micromarkup?: boolean | null;
    /**
     * check spelling
     * optional field
     * set to true to check spelling on a website using Hunspell library
     * default value: false
     */
    check_spell?: boolean | null;
    /**
     * custom threshold values for checks
     * optional field
     * you can specify custom threshold values for the parameters included in the checks array of OnPage API responses;
     * Note: only integer threshold values can be modified;
     */
    checks_threshold?: {
        [key: string]: number | null;
    } | null;
    /**
     * switch proxy pool
     * optional field
     * if true, additional proxy pools will be used to obtain the requested data;
     * the parameter can be used if a multitude of tasks is set simultaneously, resulting in occasional rate-limit and/or site_unreachable errors
     */
    switch_pool?: boolean | null;
    /**
     * proxy pool
     * optional field
     * you can choose a location of the proxy pool that will be used to obtain the requested data;
     * the parameter can be used if page content is inaccessible in one of the locations, resulting in occasional site_unreachable errors
     * possible values: us, de
     */
    ip_pool_for_scan?: string | null;
};

export type OnPageInstantPagesResultInfo = {
    /**
     * status of the crawling session
     * possible values: in_progress, finished
     */
    crawl_progress?: string | null;
    /**
     * details of the crawling session
     * in this case the value will be null
     */
    crawl_status?: CrawlStatusInfo | null;
    /**
     * crawler ip address
     * displays the IP address used by the crawler to initiate the current crawling session
     * you can find the full list of IPs used by our crawler in the Overview section
     */
    crawl_gateway_address?: string | null;
    /**
     * number of items in the results array
     */
    items_count?: number | null;
    /**
     * items array
     */
    items?: Array<OnPageStylesheetResourceItem | null> | null;
};

export type OnPageInstantPagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<OnPageInstantPagesResultInfo | null> | null;
};

export type OnPageInstantPagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageInstantPagesTaskInfo | null> | null;
};

export type OnPageLighthouseLanguagesResultInfo = {
    /**
     * language name
     */
    language_name?: string | null;
    /**
     * language code according to ISO 639-1
     */
    language_code?: string | null;
};

export type OnPageLighthouseLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<OnPageLighthouseLanguagesResultInfo | null> | null;
};

export type OnPageLighthouseLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageLighthouseLanguagesTaskInfo | null> | null;
};

export type OnPageLighthouseAuditsResultInfo = {
    /**
     * the list of available lighthouse audits
     * an array containing the titles of available audits;
     * Note: the titles can change depending on if the audit passed or failed and may contain markdown code;
     * Note #2: if you’re using the audit that contains a slash (/) in its name, search by the last word after the slash
     */
    audits?: Array<string | null> | null;
};

export type OnPageLighthouseAuditsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<OnPageLighthouseAuditsResultInfo | null> | null;
};

export type OnPageLighthouseAuditsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageLighthouseAuditsTaskInfo | null> | null;
};

export type AvailibleVersions = {
    /**
     * lighthouse version
     */
    version?: string | null;
    /**
     * the version is used by default
     * if false, the version is not used by default and should be specified in the corresponding field of the POST request if necessary
     */
    default?: boolean | null;
};

export type OnPageLighthouseVersionsResultInfo = {
    availible_versions?: Array<AvailibleVersions | null> | null;
};

export type OnPageLighthouseVersionsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<OnPageLighthouseVersionsResultInfo | null> | null;
};

export type OnPageLighthouseVersionsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageLighthouseVersionsTaskInfo | null> | null;
};

export type OnPageLighthouseTaskPostRequestInfo = {
    /**
     * target URL
     * required field
     * target page should be specified with its absolute URL (including http:// or https://)
     * example:
     * https://dataforseo.com/
     */
    url?: string;
    /**
     * applies mobile emulation
     * optional field
     * if set to true, Lighthouse will use mobile device and screen emulation to test the page against mobile environment
     * if set to false, the results will be provided for desktop
     * default value: false
     */
    for_mobile?: boolean | null;
    /**
     * categories of Lighthouse audits
     * optional field
     * each category is a collection of audits and audit groups that applies weighting and scoring to the section (see official definition)
     * if you ignore this field, we will return data for all categories unless you specify audits
     * use this field to get data for specific categories you indicate here
     * possible values:
     * seo, pwa, performance, best_practices, accessibility
     */
    categories?: Array<string> | null;
    /**
     * Lighthouse audits
     * optional field
     * audits are individual tests Lighthouse runs for each specific feature/optimization/metric to produce a numeric score (see official definition)
     * if you ignore this field, we will return data for all audits
     * use this field to get data for specific audits you indicate here
     * note that some audits do not belong to a specific category and are stand-alone page quality measurements
     * in general, there can be several use cases:
     * 1. if you ignore categories, you can use this field to get data for the specified audits only
     * for example, if you ignore "categories" and specify "audits": ["metrics/cumulative-layout-shift","metrics/largest-contentful-paint","metrics/total-blocking-time"], you will get data only for these audits
     * 2. if you specify a category, you can use this field to additionally receive audits that do not belong to the category(-ies) you specified
     * for example, if you specify "categories": ["seo"] and "audits": ["metrics/cumulative-layout-shift","metrics/largest-contentful-paint","metrics/total-blocking-time"], you will get only these audits under “performance” and all audits under “seo”
     * you can get the full list of possible audits here
     */
    audits?: Array<string> | null;
    /**
     * lighthouse version
     * optional field
     * you can obtain the results specific to a certain Lighthouse version by specifying its number
     * the list of available versions is available through the Lighthouse Versions endpoint
     */
    version?: string | null;
    /**
     * lighthouse language name
     * optional field
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to https://api.dataforseo.com/v3/on_page/lighthouse/languages
     * default value:
     * English
     */
    language_name?: string | null;
    /**
     * lighthouse language code
     * optional field
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to https://api.dataforseo.com/v3/on_page/lighthouse/languages
     * default value:
     * en
     */
    language_code?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
};

export type OnPageLighthouseTaskPostTaskInfo = BaseResponseTaskInfo & {
    result?: Array<{
        [key: string]: {
            [key: string]: unknown;
        } | null;
    } | null> | null;
};

export type OnPageLighthouseTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageLighthouseTaskPostTaskInfo | null> | null;
};

export type OnPageLighthouseTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the OnPage Lighthouse JSON task
     */
    endpoint_json?: string | null;
};

export type OnPageLighthouseTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<OnPageLighthouseTasksReadyResultInfo | null> | null;
};

export type OnPageLighthouseTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageLighthouseTasksReadyTaskInfo | null> | null;
};

export type OnPageLighthouseTaskGetJsonTaskInfo = BaseResponseTaskInfo & {
    /**
     * results of Lighthouse audit
     * this array will include data according to the parameters specified in the POST request;
     * description of the fields in the result array is available in the official documentation
     */
    result?: Array<{
        [key: string]: {
            [key: string]: unknown;
        } | null;
    } | null> | null;
};

export type OnPageLighthouseTaskGetJsonResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageLighthouseTaskGetJsonTaskInfo | null> | null;
};

export type OnPageLighthouseLiveJsonRequestInfo = {
    /**
     * target URL
     * required field
     * target page should be specified with its absolute URL (including http:// or https://)
     * example:
     * https://dataforseo.com/
     */
    url?: string;
    /**
     * applies mobile emulation
     * optional field
     * if set to true, Lighthouse will use mobile device and screen emulation to test the page against mobile environment
     * if set to false, the results will be provided for desktop
     * default value: false
     */
    for_mobile?: boolean | null;
    /**
     * categories of Lighthouse audits
     * optional field
     * each category is a collection of audits and audit groups that applies weighting and scoring to the section (see official definition)
     * if you ignore this field, we will return data for all categories unless you specify audits
     * use this field to get data for specific categories you indicate here
     * possible values:
     * seo, pwa, performance, best_practices, accessibility
     */
    categories?: Array<string> | null;
    /**
     * Lighthouse audits
     * optional field
     * audits are individual tests Lighthouse runs for each specific feature/optimization/metric to produce a numeric score (see official definition);
     * if you ignore this field, we will return data for all audits;
     * use this field to get data for specific audits you indicate here;
     * Note: that some audits do not belong to a specific category and are stand-alone page quality measurements;
     * in general, there can be several use cases:
     * 1. if you ignore categories, you can use this field to get data for the specified audits only
     * for example, if you ignore "categories" and specify "audits": ["metrics/cumulative-layout-shift","metrics/largest-contentful-paint","metrics/total-blocking-time"], you will get data only for these audits
     * 2. if you specify a category, you can use this field to additionally receive audits that do not belong to the category(-ies) you specified
     * for example, if you specify "categories": ["seo"] and "audits": ["metrics/cumulative-layout-shift","metrics/largest-contentful-paint","metrics/total-blocking-time"], you will get only these audits under “performance” and all audits under “seo”
     * you can get the full list of possible audits here
     */
    audits?: Array<string> | null;
    /**
     * lighthouse version
     * optional field
     * you can obtain the results specific to a certain Lighthouse version by specifying its number
     * the list of available versions is available through the Lighthouse Versions endpoint
     */
    version?: string | null;
    /**
     * lighthouse language name
     * optional field
     * you can receive the list of available languages of the search engine with their language_name by making a separate request to https://api.dataforseo.com/v3/on_page/lighthouse/languages
     * default value:
     * English
     */
    language_name?: string | null;
    /**
     * lighthouse language code
     * optional field
     * you can receive the list of available languages of the search engine with their language_code by making a separate request to https://api.dataforseo.com/v3/on_page/lighthouse/languages
     * default value:
     * en
     */
    language_code?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type OnPageLighthouseLiveJsonTaskInfo = BaseResponseTaskInfo & {
    /**
     * results of Lighthouse audit
     * this array will include data according to the parameters you specified when setting a task;
     * all fields and their descriptions are available in the official documentation by this link.
     */
    result?: Array<{
        [key: string]: {
            [key: string]: unknown;
        } | null;
    } | null> | null;
};

export type OnPageLighthouseLiveJsonResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<OnPageLighthouseLiveJsonTaskInfo | null> | null;
};

export type ContentAnalysisIdListRequestInfo = {
    /**
     * start time for filtering results
     * required field
     * if include_metadata is set to true, maximum value: a month from current datetime;
     * if include_metadata is set to false, maximum value: six months from current datetime;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_from?: string;
    /**
     * finish time for filtering results
     * required field
     * maximum value: current datetime;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-31 13:57:46 +00:00
     */
    datetime_to?: string;
    /**
     * the maximum number of returned task IDs
     * optional field
     * default value: 1000
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned task IDs
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten tasks in the results array will be omitted
     */
    offset?: number | null;
    /**
     * sorting by task execution time
     * optional field
     * possible values: "asc", "desc"
     * default value: "asc"
     */
    sort?: string | null;
    /**
     * include task metadata in the respond
     * optional field
     * default value: false
     */
    include_metadata?: boolean | null;
};

export type ContentAnalysisIdListResultInfo = {
    /**
     * id of the task
     */
    id?: string | null;
    /**
     * URL of the task
     * URL you used for making an API call
     */
    url?: string | null;
    /**
     * date and time when the task was made
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_posted?: string | null;
    /**
     * date and time when the task was completed
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_done?: string | null;
    /**
     * informational message of the task
     * you can find the full list of general informational messages here
     */
    status?: string | null;
    /**
     * cost of the task, USD
     */
    cost?: number | null;
    /**
     * contains parameters you specified in the POST request
     */
    metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | null;
    } | null;
};

export type ContentAnalysisIdListTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<ContentAnalysisIdListResultInfo | null> | null;
};

export type ContentAnalysisIdListResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<ContentAnalysisIdListTaskInfo | null> | null;
};

export type ContentAnalysisAvailableFiltersResultInfo = {
    search?: {
        [key: string]: string | null;
    } | null;
};

export type ContentAnalysisAvailableFiltersTaskInfo = BaseResponseTaskInfo & {
    result?: Array<ContentAnalysisAvailableFiltersResultInfo | null> | null;
};

export type ContentAnalysisAvailableFiltersResponseInfo = BaseResponseInfo & {
    tasks?: Array<ContentAnalysisAvailableFiltersTaskInfo | null> | null;
};

export type ContentAnalysisLocationsResultInfo = {
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
};

export type ContentAnalysisLocationsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<ContentAnalysisLocationsResultInfo | null> | null;
};

export type ContentAnalysisLocationsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<ContentAnalysisLocationsTaskInfo | null> | null;
};

export type ContentAnalysisLanguagesResultInfo = {
    location_code?: number | null;
    location_name?: string | null;
    location_code_parent?: number | null;
    country_iso_code?: string | null;
    location_type?: string | null;
};

export type ContentAnalysisLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<ContentAnalysisLanguagesResultInfo | null> | null;
};

export type ContentAnalysisLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<ContentAnalysisLanguagesTaskInfo | null> | null;
};

export type ContentAnalysisCategoriesResultInfo = {
    /**
     * category code
     */
    category_code?: number | null;
    /**
     * full name of the category
     */
    category_name?: string | null;
    /**
     * the code of the superordinate category
     * example:
     * "category_code": 10178,
     * "category_name": "Apparel Accessories",
     * "category_code_parent": 10021
     * where category_code_parent
     * corresponds to:
     * "category_code": 10178,
     * "category_name": "Apparel Accessories"
     */
    category_code_parent?: number | null;
};

export type ContentAnalysisCategoriesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<ContentAnalysisCategoriesResultInfo | null> | null;
};

export type ContentAnalysisCategoriesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<ContentAnalysisCategoriesTaskInfo | null> | null;
};

export type ContentAnalysisSearchLiveRequestInfo = {
    /**
     * target keyword
     * required field
     * UTF-8 encoding
     * the keywords will be converted to a lowercase format;
     * Note: to match an exact phrase instead of a stand-alone keyword, use double quotes and backslashes;
     * example:
     * "keyword": "\"tesla palo alto\""
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * target keyword fields and target keywords
     * optional field
     * use this parameter to filter the dataset by keywords that certain fields should contain;
     * fields you can specify: title, main_title, previous_title, snippet
     * you can indicate several fields;
     * Note: to match an exact phrase instead of a stand-alone keyword, use double quotes and backslashes;
     * example:
     * "keyword_fields": {
     * "snippet": "\"logitech mouse\"",
     * "main_title": "sale"
     * }
     */
    keyword_fields?: {
        [key: string]: string | null;
    } | null;
    /**
     * target page types
     * optional field
     * use this parameter to filter the dataset by page types
     * possible values:
     * "ecommerce", "news", "blogs", "message-boards", "organization"
     */
    page_type?: Array<string> | null;
    /**
     * results grouping type
     * optional field
     * possible grouping types:
     * as_is – returns all citations for the target keyword
     * one_per_domain – returns one citation of the keyword per domain
     * default value: as_is
     */
    search_mode?: string | null;
    /**
     * the maximum number of returned citations
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, like,not_like, match, not_match
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["country","=", "US"]
     * [["domain_rank",">",800],"and",["content_info.connotation_types.negative",">",0.9]]
     * [["domain_rank",">",800],
     * "and",
     * [["page_types","has","ecommerce"],
     * "or",
     * ["content_info.text_category","has",10994]]]
     * for more information about filters, please refer to Content Analysis API – Filters
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting type
     * example:
     * ["content_info.sentiment_connotations.anger,desc"]
     * default rule:
     * ["content_info.sentiment_connotations.anger,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["content_info.sentiment_connotations.anger,desc","keyword_data.keyword_info.cpc,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * offset in the results array of returned citations
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten citations in the results array will be omitted and the data will be provided for the successive citations
     */
    offset?: number | null;
    /**
     * offset token for subsequent requests
     * optional field
     * provided in the identical field of the response to each request;
     * use this parameter to avoid timeouts while trying to obtain over 10,000 results in a single request;
     * by specifying the unique offset_token value from the response array, you will get the subsequent results of the initial task;
     * offset_token values are unique for each subsequent task
     * Note: if the offset_token is specified in the request, all other parameters except limit will not be taken into account when processing a task
     */
    offset_token?: string | null;
    /**
     * defines the scale used for calculating and displaying the domain_rank, and url_rank values
     * optional field
     * you can use this parameter to choose whether rank values are presented on a 0–100 or 0–1000 scale
     * possible values:
     * one_hundred — rank values are displayed on a 0–100 scale
     * one_thousand — rank values are displayed on a 0–1000 scale
     * default value: one_thousand
     * learn more about how this parameter works in this Help Center article
     */
    rank_scale?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type AnalysisContentInfo = {
    /**
     * type of content
     * example:
     * page_content, comment
     */
    content_type?: string | null;
    /**
     * title of the result
     */
    title?: string | null;
    /**
     * page title
     */
    main_title?: string | null;
    /**
     * title of the previous content block
     */
    previous_title?: string | null;
    /**
     * title heading level
     * indicates h-tag level from 1 (top) to 6 (bottom)
     */
    level?: number | null;
    /**
     * author of the content
     */
    author?: string | null;
    /**
     * content snippet
     */
    snippet?: string | null;
    /**
     * character length of the snippet
     */
    snippet_length?: number | null;
    /**
     * social media engagement metrics
     * data on social media interactions associated with the content based on website embeds developed and supported by social media platforms
     */
    social_metrics?: Array<SocialMetricsInfo | null> | null;
    /**
     * highlighted text from the snippet
     */
    highlighted_text?: string | null;
    /**
     * content language
     * to obtain a full list of available languages, refer to the Languages endpoint
     */
    language?: string | null;
    /**
     * sentiment connotations
     * contains sentiments (emotional reactions) related to the given citation and probability index per each sentiment
     * possible sentiment connotations: anger, happiness, love, sadness, share, fun
     */
    sentiment_connotations?: {
        [key: string]: number | null;
    } | null;
    /**
     * connotation types
     * contains types of sentiments (sentiment polarity) related to the given citation and probability index per each sentiment type
     * possible sentiment connotation types: positive, negative, neutral
     */
    connotation_types?: {
        [key: string]: number | null;
    } | null;
    /**
     * text category
     * to obtain a full list of available categories, refer to the Categories endpoint
     */
    text_category?: Array<number> | null;
    /**
     * date and time when the content was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2017-01-24 13:20:59 +00:00
     */
    date_published?: string | null;
    /**
     * content quality score
     * this value is calculated based on the number of words, sentences and characters the content contains
     */
    content_quality_score?: number | null;
    /**
     * semantic location
     * indicates semantic element in HTML where the target keyword citation is located
     * example:
     * article, header
     */
    semantic_location?: string | null;
    /**
     * content rating
     * rating related to content_info
     */
    rating?: ContentRatingInfo | null;
    /**
     * citation group date and time
     * indicates content publication date or date and time when our crawler visited the page for the first time;
     * this field can be used to group citations by date and display citation trends;
     * date and time are provided in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2017-01-24 13:20:59 +00:00
     */
    group_date?: string | null;
};

export type ContentAnalysisSearchLiveItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * URL where the citation was found
     */
    url?: string | null;
    /**
     * domain name
     */
    domain?: string | null;
    /**
     * main domain
     */
    main_domain?: string | null;
    /**
     * rank of the url
     * this value is based on backlink data for the given URL from DataForSEO Backlink Index;
     * url_rank is calculated based on the method for node ranking in a linked database – a principle used in the original Google PageRank algorithm
     * learn more about the metric and how it is calculated in this help center article
     */
    url_rank?: number | null;
    /**
     * backlink spam score of the url
     * this value is based on backlink data for the given URL from DataForSEO Backlink Index;
     * learn more about how the metric is calculated on this help center page
     */
    spam_score?: number | null;
    /**
     * rank of the domain
     * this value is based on backlink data for the given domain from DataForSEO Backlink Index;
     * domain_rank is calculated based on the method for node ranking in a linked database – a principle used in the original Google PageRank algorithm
     * learn more about the metric and how it is calculated in this help center article
     */
    domain_rank?: number | null;
    /**
     * date and time when our crawler visited the page
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2017-01-24 13:20:59 +00:00
     */
    fetch_time?: string | null;
    /**
     * country code of the domain registration
     * to obtain a full list of available countries, refer to the Locations endpoint
     */
    country?: string | null;
    /**
     * main language of the domain
     * to obtain a full list of available languages, refer to the Languages endpoint
     */
    language?: string | null;
    /**
     * citation prominence score
     * this value is based on url_rank, domain_rank, keyword presence in title, main_title, url, snippet
     * the higher the score, the more value the related citation has
     */
    score?: number | null;
    /**
     * contains all relevant page categories
     * product and service categories relevant for the page
     * to obtain a full list of available categories, refer to the Categories endpoint
     */
    page_category?: Array<number> | null;
    /**
     * page types
     */
    page_types?: Array<string> | null;
    /**
     * ratings found on the page
     * all ratings found on the page based on microdata
     */
    ratings?: Array<ContentRatingInfo | null> | null;
    /**
     * social media engagement metrics
     * data on social media interactions associated with the content based on website embeds developed and supported by social media platforms
     */
    social_metrics?: Array<SocialMetricsInfo | null> | null;
    /**
     * contains data on citations from the given url
     */
    content_info?: AnalysisContentInfo | null;
};

export type ContentAnalysisSearchLiveResultInfo = {
    /**
     * offset token for subsequent requests
     * you can use the string provided in this field to get the subsequent results of the initial task;
     * note: offset_token values are unique for each subsequent task
     */
    offset_token?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains citations and related data
     */
    items?: Array<ContentAnalysisSearchLiveItem | null> | null;
};

export type ContentAnalysisSearchLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<ContentAnalysisSearchLiveResultInfo | null> | null;
};

export type ContentAnalysisSearchLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<ContentAnalysisSearchLiveTaskInfo | null> | null;
};

export type ContentAnalysisSummaryLiveRequestInfo = {
    /**
     * target keyword
     * required field
     * UTF-8 encoding
     * the keywords will be converted to a lowercase format;
     * Note: to match an exact phrase instead of a stand-alone keyword, use double quotes and backslashes;
     * example:
     * "keyword": "\"tesla palo alto\""
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * target keyword fields and target keywords
     * optional field
     * use this parameter to filter the dataset by keywords that certain fields should contain;
     * fields you can specify: title, main_title, previous_title, snippet
     * you can indicate several fields;
     * Note: to match an exact phrase instead of a stand-alone keyword, use double quotes and backslashes;
     * example:
     * "keyword_fields": {
     * "snippet": "\"logitech mouse\"",
     * "main_title": "sale"
     * }
     */
    keyword_fields?: {
        [key: string]: string | null;
    } | null;
    /**
     * target page types
     * optional field
     * use this parameter to filter the dataset by page types
     * possible values:
     * "ecommerce", "news", "blogs", "message-boards", "organization"
     */
    page_type?: Array<string> | null;
    /**
     * maximum number of elements within internal arrays
     * optional field
     * you can use this field to limit the number of elements within the following arrays:
     * top_domains
     * text_categories
     * page_categories
     * countries
     * languages
     * default value: 1
     * maximum value: 20
     */
    internal_list_limit?: number | null;
    /**
     * positive connotation threshold
     * optional field
     * specified as the probability index threshold for positive sentiment related to the citation content
     * if you specify this field, connotation_types object in the response will only contain data on citations with positive sentiment probability more than or equal to the specified value
     * possible values: from 0 to 1
     * default value: 0.4
     */
    positive_connotation_threshold?: number | null;
    /**
     * sentiment connotation threshold
     * optional field
     * specified as the probability index threshold for sentiment connotations related to the citation content
     * if you specify this field, sentiment_connotations object in the response will only contain data on citations where the
     * probability per each sentiment is more than or equal to the specified value
     * possible values: from 0 to 1
     * default value: 0.4
     */
    sentiments_connotation_threshold?: number | null;
    /**
     * initial dataset filtering parameters
     * optional field
     * initial filtering parameters that apply to fields in the Search endpoint
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, like,not_like, has, has_not
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["domain","<>", "logitech.com"]
     * [["domain","<>","logitech.com"],"and",["content_info.connotation_types.negative",">",1000]]
     * [["domain","<>","logitech.com"]],
     * "and",
     * [["content_info.connotation_types.negative",">",1000],
     * "or",
     * ["content_info.text_category","has",10994]]]
     * for more information about filters, please refer to Content Analysis API – Filters
     */
    initial_dataset_filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * defines the scale used for calculating and displaying the rank values
     * optional field
     * you can use this parameter to choose whether rank values are presented on a 0–100 or 0–1000 scale
     * possible values:
     * one_hundred — rank values are displayed on a 0–100 scale
     * one_thousand — rank values are displayed on a 0–1000 scale
     * default value: one_thousand
     * learn more about how this parameter works in this Help Center article
     */
    rank_scale?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type ContentAnalysisSummaryInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * total amount of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * rank of all URLs citing the keyword
     * normalized sum of ranks of all URLs citing the target keyword
     */
    rank?: number | null;
    /**
     * top domains citing the target keyword
     * contains objects with top domains citing the target keword and citation count per each domain
     */
    top_domains?: Array<TopDomainInfo | null> | null;
    /**
     * sentiment connotations
     * contains sentiments (emotional reactions) related to the target keyword citation and the number of citations per each sentiment
     * possible sentiment connotations: anger, happiness, love, sadness, share, fun
     */
    sentiment_connotations?: {
        [key: string]: number | null;
    } | null;
    /**
     * connotation types
     * contains types of sentiments (sentiment polarity) related to the keyword citation and citation count per each sentiment type
     * possible sentiment connotation types: positive, negative, neutral
     */
    connotation_types?: {
        [key: string]: number | null;
    } | null;
    /**
     * text categories
     * contains objects with text categories and citation count in each text category
     * to obtain a full list of available categories, refer to the Categories endpoint
     */
    text_categories?: Array<ContentAnalysisCategoriesInfo | null> | null;
    /**
     * page categories
     * contains objects with page categories and citation count in each page category
     * to obtain a full list of available categories, refer to the Categories endpoint
     */
    page_categories?: Array<ContentAnalysisCategoriesInfo | null> | null;
    /**
     * page types
     * contains page types and citation count per each page type
     */
    page_types?: {
        [key: string]: number | null;
    } | null;
    /**
     * countries
     * contains countries and citation count in each country
     * to obtain a full list of available countries, refer to the Locations endpoint
     */
    countries?: {
        [key: string]: number | null;
    } | null;
    /**
     * languages
     * contains languages and citation count in each language
     * to obtain a full list of available languages, refer to the Languages endpoint
     */
    languages?: {
        [key: string]: number | null;
    } | null;
};

export type ContentAnalysisSummaryLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<ContentAnalysisSummaryInfo | null> | null;
};

export type ContentAnalysisSummaryLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<ContentAnalysisSummaryLiveTaskInfo | null> | null;
};

export type ContentAnalysisSentimentAnalysisLiveRequestInfo = {
    /**
     * target keyword
     * required field
     * UTF-8 encoding
     * the keywords will be converted to a lowercase format;
     * Note: to match an exact phrase instead of a stand-alone keyword, use double quotes and backslashes;
     * example:
     * "keyword": "\"tesla palo alto\""
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * target keyword fields and target keywords
     * optional field
     * use this parameter to filter the dataset by keywords that certain fields should contain;
     * fields you can specify: title, main_title, previous_title, snippet
     * you can indicate several fields;
     * Note: to match an exact phrase instead of a stand-alone keyword, use double quotes and backslashes;
     * example:
     * "keyword_fields": {
     * "snippet": "\"logitech mouse\"",
     * "main_title": "sale"
     * }
     */
    keyword_fields?: {
        [key: string]: string | null;
    } | null;
    /**
     * target page types
     * optional field
     * use this parameter to filter the dataset by page types
     * possible values:
     * "ecommerce", "news", "blogs", "message-boards", "organization"
     */
    page_type?: Array<string> | null;
    /**
     * maximum number of elements within internal arrays
     * optional field
     * you can use this field to limit the number of elements within the following arrays:
     * top_domains
     * text_categories
     * page_categories
     * countries
     * languages
     * default value: 1
     * maximum value: 20
     */
    internal_list_limit?: number | null;
    /**
     * positive connotation threshold
     * optional field
     * specified as the probability index threshold for positive sentiment related to the citation content
     * if you specify this field, connotation_types object in the response will only contain data on citations with positive sentiment probability more than or equal to the specified value
     * possible values: from 0 to 1
     * default value: 0.4
     */
    positive_connotation_threshold?: number | null;
    /**
     * sentiment connotation threshold
     * optional field
     * specified as the probability index threshold for sentiment connotations related to the citation content
     * if you specify this field, sentiment_connotations object in the response will only contain data on citations where the probability per each sentiment is more than or equal to the specified value
     * possible values: from 0 to 1
     * default value: 0.4
     */
    sentiments_connotation_threshold?: number | null;
    /**
     * initial dataset filtering parameters
     * optional field
     * initial filtering parameters that apply to fields in the Search endpoint
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, like,not_like, has, has_not, match, not_match
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["domain","<>", "logitech.com"]
     * [["domain","<>","logitech.com"],"and",["content_info.connotation_types.negative",">",1000]]
     * [["domain","<>","logitech.com"]],
     * "and",
     * [["content_info.connotation_types.negative",">",1000],
     * "or",
     * ["content_info.text_category","has",10994]]]
     * for more information about filters, please refer to Content Analysis API – Filters
     */
    initial_dataset_filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * defines the scale used for calculating and displaying the rank values
     * optional field
     * you can use this parameter to choose whether rank values are presented on a 0–100 or 0–1000 scale
     * possible values:
     * one_hundred — rank values are displayed on a 0–100 scale
     * one_thousand — rank values are displayed on a 0–1000 scale
     * default value: one_thousand
     * learn more about how this parameter works in this Help Center article
     */
    rank_scale?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type PositiveConnotationDistribution = {
    positive?: ContentAnalysisSummaryInfo | null;
    negative?: ContentAnalysisSummaryInfo | null;
    neutral?: ContentAnalysisSummaryInfo | null;
};

export type SentimentConnotationDistribution = {
    anger?: ContentAnalysisSummaryInfo | null;
    happiness?: ContentAnalysisSummaryInfo | null;
    love?: ContentAnalysisSummaryInfo | null;
    sadness?: ContentAnalysisSummaryInfo | null;
    share?: ContentAnalysisSummaryInfo | null;
    fun?: ContentAnalysisSummaryInfo | null;
};

export type ContentAnalysisSentimentAnalysisLiveResultInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * citation distribution by sentiment connotation types
     * contains objects with citation counts and relevant data distributed by types of sentiments (sentiment polarity);
     * possible sentiment connotation types: positive, negative, neutral
     */
    positive_connotation_distribution?: PositiveConnotationDistribution | null;
    /**
     * citation distribution by sentiment connotations
     * contains objects with citation counts and relevant data distributed by sentiments (emotional reactions);
     * possible sentiment connotation types: anger, happiness, love, sadness, share, fun
     */
    sentiment_connotation_distribution?: SentimentConnotationDistribution | null;
};

export type ContentAnalysisSentimentAnalysisLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<ContentAnalysisSentimentAnalysisLiveResultInfo | null> | null;
};

export type ContentAnalysisSentimentAnalysisLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<ContentAnalysisSentimentAnalysisLiveTaskInfo | null> | null;
};

export type ContentAnalysisRatingDistributionLiveRequestInfo = {
    /**
     * target keyword
     * required field
     * UTF-8 encoding
     * the keywords will be converted to a lowercase format;
     * Note: to match an exact phrase instead of a stand-alone keyword, use double quotes and backslashes;
     * example:
     * "keyword": "\"tesla palo alto\""
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * target keyword fields and target keywords
     * optional field
     * use this parameter to filter the dataset by keywords that certain fields should contain;
     * fields you can specify: title, main_title, previous_title, snippet
     * you can indicate several fields;
     * Note: to match an exact phrase instead of a stand-alone keyword, use double quotes and backslashes;
     * example:
     * "keyword_fields": {
     * "snippet": "\"logitech mouse\"",
     * "main_title": "sale"
     * }
     */
    keyword_fields?: {
        [key: string]: string | null;
    } | null;
    /**
     * target page types
     * optional field
     * use this parameter to filter the dataset by page types
     * possible values:
     * "ecommerce", "news", "blogs", "message-boards", "organization"
     */
    page_type?: Array<string> | null;
    /**
     * maximum number of elements within internal arrays
     * optional field
     * you can use this field to limit the number of elements within the following arrays:
     * top_domains
     * text_categories
     * page_categories
     * countries
     * languages
     * default value: 1
     * maximum value: 20
     */
    internal_list_limit?: number | null;
    /**
     * results grouping type
     * optional field
     * possible grouping types:
     * as_is – returns all citations for the target keyword
     * one_per_domain – returns one citation of the keyword per domain
     * default value: as_is
     */
    search_mode?: string | null;
    /**
     * positive connotation threshold
     * optional field
     * specified as the probability index threshold for positive sentiment related to the citation content
     * if you specify this field, connotation_types object in the response will only contain data on citations with positive sentiment probability more than or equal to the specified value
     * possible values: from 0 to 1
     * default value: 0.4
     */
    positive_connotation_threshold?: number | null;
    /**
     * sentiment connotation threshold
     * optional field
     * specified as the probability index threshold for sentiment connotations related to the citation content
     * if you specify this field, sentiment_connotations object in the response will only contain data on citations where the probability per each sentiment is more than or equal to the specified value
     * possible values: from 0 to 1
     * default value: 0.4
     */
    sentiments_connotation_threshold?: number | null;
    /**
     * initial dataset filtering parameters
     * optional field
     * initial filtering parameters that apply to fields in the Search endpoint
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, like,not_like, has, has_not, match, not_match
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["domain","<>", "logitech.com"]
     * [["domain","<>","logitech.com"],"and",["content_info.connotation_types.negative",">",1000]]
     * [["domain","<>","logitech.com"]],
     * "and",
     * [["content_info.connotation_types.negative",">",1000],
     * "or",
     * ["content_info.text_category","has",10994]]]
     * for more information about filters, please refer to Content Analysis API – Filters
     */
    initial_dataset_filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * defines the scale used for calculating and displaying the rank values
     * optional field
     * you can use this parameter to choose whether rank values are presented on a 0–100 or 0–1000 scale
     * possible values:
     * one_hundred — rank values are displayed on a 0–100 scale
     * one_thousand — rank values are displayed on a 0–1000 scale
     * default value: one_thousand
     * learn more about how this parameter works in this Help Center article
     */
    rank_scale?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type ContentAnalysisRatingDistributionLiveResultInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * min rating on a distribution scale
     */
    min?: number | null;
    /**
     * max rating on a distribution scale
     */
    max?: number | null;
    /**
     * contains rating distribution metrics
     */
    metrics?: ContentAnalysisSummaryInfo | null;
};

export type ContentAnalysisRatingDistributionLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<ContentAnalysisRatingDistributionLiveResultInfo | null> | null;
};

export type ContentAnalysisRatingDistributionLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<ContentAnalysisRatingDistributionLiveTaskInfo | null> | null;
};

export type ContentAnalysisPhraseTrendsLiveRequestInfo = {
    /**
     * target keyword
     * required field
     * UTF-8 encoding
     * the keywords will be converted to a lowercase format;
     * Note: to match an exact phrase instead of a stand-alone keyword, use double quotes and backslashes;
     * example:
     * "keyword": "\"tesla palo alto\""
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * target keyword fields and target keywords
     * optional field
     * use this parameter to filter the dataset by keywords that certain fields should contain;
     * fields you can specify: title, main_title, previous_title, snippet
     * you can indicate several fields;
     * Note: to match an exact phrase instead of a stand-alone keyword, use double quotes and backslashes;
     * example:
     * "keyword_fields": {
     * "snippet": "\"logitech mouse\"",
     * "main_title": "sale"
     * }
     */
    keyword_fields?: {
        [key: string]: string | null;
    } | null;
    /**
     * target page types
     * optional field
     * use this parameter to filter the dataset by page types
     * possible values:
     * "ecommerce", "news", "blogs", "message-boards", "organization"
     */
    page_type?: Array<string> | null;
    /**
     * results grouping type
     * optional field
     * possible grouping types:
     * as_is – returns data on all citations for the target keyword
     * one_per_domain – returns data on one citation of the keyword per domain
     * default value: as_is
     */
    search_mode?: string | null;
    /**
     * maximum number of elements within internal arrays
     * optional field
     * you can use this field to limit the number of elements within the following arrays:
     * top_domains
     * text_categories
     * page_categories
     * countries
     * languages
     * default value: 1
     * maximum value: 20
     */
    internal_list_limit?: number | null;
    /**
     * starting date of the time range
     * required field
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    date_from?: string;
    /**
     * ending date of the time range
     * optional field
     * if you don’t specify this field, today’s date will be used by default
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    date_to?: string | null;
    /**
     * time range which will be used to group the results
     * optional field
     * default value: month
     * possible values: day, week, month
     */
    date_group?: string | null;
    /**
     * initial dataset filtering parameters
     * optional field
     * initial filtering parameters that apply to fields in the Search endpoint;
     * you can add several filters at once (8 filters maximum);
     * you should set a logical operator and, or between the conditions;
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, like,not_like, has, has_not, match, not_match
     * you can use the % operator with like and not_like to match any string of zero or more characters;
     * example:
     * ["domain","<>", "logitech.com"]
     * [["domain","<>","logitech.com"],"and",["content_info.connotation_types.negative",">",1000]]
     * [["domain","<>","logitech.com"]],
     * "and",
     * [["content_info.connotation_types.negative",">",1000],
     * "or",
     * ["content_info.text_category","has",10994]]]
     * for more information about filters, please refer to Content Analysis API – Filters
     */
    initial_dataset_filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * defines the scale used for calculating and displaying the rank values
     * optional field
     * you can use this parameter to choose whether rank values are presented on a 0–100 or 0–1000 scale
     * possible values:
     * one_hundred — rank values are displayed on a 0–100 scale
     * one_thousand — rank values are displayed on a 0–1000 scale
     * default value: one_thousand
     * learn more about how this parameter works in this Help Center article
     */
    rank_scale?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type ContentAnalysisPhraseTrendsLiveResultInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * date for which the data is provided
     */
    date?: string | null;
    /**
     * total number of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * rank of all URLs citing the keyword
     * normalized sum of ranks of all URLs citing the target keyword for the given date
     */
    rank?: number | null;
    /**
     * top domains citing the target keyword
     * contains objects with top domains citing the target keyword and citation count per each domain
     */
    top_domains?: Array<TopDomainInfo | null> | null;
    /**
     * sentiment connotations
     * contains sentiments (emotional reactions) related to the target keyword citation and the number of citations per each sentiment
     * possible connotations: "anger", "happiness", "love", "sadness", "share", "fun"
     */
    sentiment_connotations?: {
        [key: string]: number | null;
    } | null;
    /**
     * connotation types
     * contains types of sentiments (sentiment polarity) related to the keyword citation and citation count per each sentiment type
     * possible connotation types: "positive", "negative", "neutral"
     */
    connotation_types?: {
        [key: string]: number | null;
    } | null;
    /**
     * text categories
     * contains objects with text categories and citation count in each text category
     * to obtain a full list of available categories, refer to the Categories endpoint
     */
    text_categories?: Array<ContentAnalysisCategoriesInfo | null> | null;
    /**
     * page categories
     * contains objects with page categories and citation count in each page category
     * to obtain a full list of available categories, refer to the Categories endpoint
     */
    page_categories?: Array<ContentAnalysisCategoriesInfo | null> | null;
    /**
     * page types
     * contains page types and citation count per each page type
     */
    page_types?: {
        [key: string]: number | null;
    } | null;
    /**
     * countries
     * contains countries and citation count in each country
     * to obtain a full list of available countries, refer to the Locations endpoint
     */
    countries?: {
        [key: string]: number | null;
    } | null;
    /**
     * languages
     * contains languages and citation count in each language
     * to obtain a full list of available languages, refer to the Languages endpoint
     */
    languages?: {
        [key: string]: number | null;
    } | null;
};

export type ContentAnalysisPhraseTrendsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<ContentAnalysisPhraseTrendsLiveResultInfo | null> | null;
};

export type ContentAnalysisPhraseTrendsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<ContentAnalysisPhraseTrendsLiveTaskInfo | null> | null;
};

export type ContentAnalysisCategoryTrendsLiveRequestInfo = {
    /**
     * target category code
     * required field
     * to obtain a full list of available categories, refer to the Categories endpoint
     */
    category_code?: string;
    /**
     * target page types
     * optional field
     * use this parameter to filter the dataset by page types
     * possible values:
     * "ecommerce", "news", "blogs", "message-boards", "organization"
     */
    page_type?: Array<string> | null;
    /**
     * results grouping type
     * optional field
     * possible grouping types:
     * as_is – returns data on all citations for the target category_code
     * one_per_domain – returns data on one citation of the category_code per domain
     * default value: as_is
     */
    search_mode?: string | null;
    /**
     * maximum number of elements within internal arrays
     * optional field
     * you can use this field to limit the number of elements within the following arrays:
     * top_domains
     * text_categories
     * page_categories
     * countries
     * languages
     * default value: 1
     * maximum value: 20
     */
    internal_list_limit?: number | null;
    /**
     * starting date of the time range
     * required field
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    date_from?: string;
    /**
     * ending date of the time range
     * optional field
     * if you don’t specify this field, today’s date will be used by default
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    date_to?: string | null;
    /**
     * time range which will be used to group the results
     * optional field
     * default value: month
     * possible values: day, week, month
     */
    date_group?: string | null;
    /**
     * initial dataset filtering parameters
     * optional field
     * initial filtering parameters that apply to fields in the Search endpoint;
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, like,not_like, has, has_not, match, not_match
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["domain","<>", "logitech.com"]
     * [["domain","<>","logitech.com"],"and",["content_info.connotation_types.negative",">",1000]]
     * [["domain","<>","logitech.com"]],
     * "and",
     * [["content_info.connotation_types.negative",">",1000],
     * "or",
     * ["content_info.text_category","has",10994]]]
     * for more information about filters, please refer to Content Analysis API – Filters
     */
    initial_dataset_filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * defines the scale used for calculating and displaying the rank values
     * optional field
     * you can use this parameter to choose whether rank values are presented on a 0–100 or 0–1000 scale
     * possible values:
     * one_hundred — rank values are displayed on a 0–100 scale
     * one_thousand — rank values are displayed on a 0–1000 scale
     * default value: one_thousand
     * learn more about how this parameter works in this Help Center article
     */
    rank_scale?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type ContentAnalysisCategoryTrendsLiveResultInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * date for which the data is provided
     */
    date?: string | null;
    /**
     * total number of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * rank of all URLs citing the keyword
     * normalized sum of ranks of all URLs citing the target keyword for the given date
     */
    rank?: number | null;
    /**
     * top domains citing the target keyword
     * contains objects with top domains citing the target category and citation count per each domain
     */
    top_domains?: Array<TopDomainInfo | null> | null;
    /**
     * sentiment connotations
     * contains sentiments (emotional reactions) related to the target category citation and the number of citations per each sentiment
     * possible connotations: "anger", "fear", "happiness", "love", "sadness", "share", "neutral", "fun"
     */
    sentiment_connotations?: {
        [key: string]: number | null;
    } | null;
    /**
     * connotation types
     * contains types of sentiments (sentiment polarity) related to the category citation and citation count per each sentiment type
     * possible connotation types: "positive", "negative", "neutral"
     */
    connotation_types?: {
        [key: string]: number | null;
    } | null;
    /**
     * text categories
     * contains objects with text categories and citation count in each text category
     * to obtain a full list of available categories, refer to the Categories endpoint
     */
    text_categories?: Array<ContentAnalysisCategoriesInfo | null> | null;
    /**
     * page categories
     * contains objects with page categories and citation count in each page category
     * to obtain a full list of available categories, refer to the Categories endpoint
     */
    page_categories?: Array<ContentAnalysisCategoriesInfo | null> | null;
    /**
     * page types
     * contains page types and citation count per each page type
     */
    page_types?: {
        [key: string]: number | null;
    } | null;
    /**
     * countries
     * contains countries and citation count in each country
     * to obtain a full list of available countries, refer to the Locations endpoint
     */
    countries?: {
        [key: string]: number | null;
    } | null;
    /**
     * languages
     * contains languages and citation count in each language
     * to obtain a full list of available languages, refer to the Languages endpoint
     */
    languages?: {
        [key: string]: number | null;
    } | null;
};

export type ContentAnalysisCategoryTrendsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<ContentAnalysisCategoryTrendsLiveResultInfo | null> | null;
};

export type ContentAnalysisCategoryTrendsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<ContentAnalysisCategoryTrendsLiveTaskInfo | null> | null;
};

export type ContentGenerationGenerateLiveRequestInfo = {
    /**
     * initial target text
     * required field
     * text input for content generation;
     * can contain from 1 to 500 tokens
     * learn more about tokens on our help center
     */
    text?: string;
    /**
     * generation limit for new tokens
     * required field if max_tokens is not specified
     * the maximum number of new tokens for generated content;
     * maximum value: 300;
     * Note: the number does not include tokens specified in the text field;
     * learn more about this parameter on our help center
     */
    max_new_tokens?: number | null;
    /**
     * generation limit for all tokens
     * required field if max_new_tokens is not specified
     * the maximum total number of tokens for generated content;
     * maximum value: 1024;
     * Note: the number includes tokens specified in the text field
     * learn more about this parameter on our help center
     */
    max_tokens?: number | null;
    /**
     * creativity of content generation
     * optional field
     * if you use this field, you don’t need to use top_k / top_p / temperature
     * the randomness of the selection of equally probable subsequent tokens;
     * can take values from 0 to 1
     * default value: 0.8
     * learn more about this parameter on our help center
     */
    creativity_index?: number | null;
    /**
     * token repetition
     * optional field
     * limits the repetition of the same tokens in the generated content;
     * can take values from 0.5 to 2;
     * default value: 1
     */
    token_repetition_penalty?: number | null;
    /**
     * the number of initial tokens in each iteration for choosing a subsequent word
     * optional field
     * if you use creativity_index, this field will be ignored
     * the higher the number, the more high-probability tokens will be shortlisted for generation;
     * can take values from 1 to 100;
     * default value: 40
     * learn more about this parameter on our help center
     */
    top_k?: number | null;
    /**
     * excludes initial tokens with probability lower than one
     * optional field
     * if you use creativity_index, this field will be ignored
     * the higher the value, the less low-probability tokens may be shortlisted for generation;
     * can take values from 0 to 1
     * default value: 0.9
     * Note:if both top_k and top_p are used, top_k acts first;
     * learn more about this parameter on our help center
     */
    top_p?: number | null;
    /**
     * controls the randomness in the output
     * optional field
     * if you use creativity_index, this field will be ignored
     * the lower the temperature, the more likely the model will choose words with a higher probability of occurrence;
     * can take values from 0 to 1;
     * default value: 0.7
     * learn more about this parameter on our help center
     */
    temperature?: number | null;
    /**
     * words or phrases to avoid when generating a text
     * optional field
     * you can specify up to 50 terms;
     * example:
     * ["term", "optimization"]
     */
    avoid_words?: Array<string> | null;
    /**
     * words or phrases to avoid in the beginning of the generated text
     * optional field
     * you can specify up to 50 terms;
     * example:
     * ["SEO", "search engine optimization"]
     */
    avoid_starting_words?: Array<string> | null;
    /**
     * words or phrases to end the text
     * optional field
     * you can specify up to 50 terms;
     * example:
     * ["now","subscribe"]
     */
    stop_words?: Array<string> | null;
    /**
     * token for generating subsequent results
     * optional field
     * provided in the identical filed of the response to each request;
     * you can use this parameter to continue the generation of text from the initial response
     * supplement_token values are unique for each subsequent task
     */
    supplement_token?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type ContentGenerationGenerateLiveResultInfo = {
    /**
     * number of input tokens
     */
    input_tokens?: number | null;
    /**
     * number of output tokens
     */
    output_tokens?: number | null;
    /**
     * number of new tokens
     */
    new_tokens?: number | null;
    /**
     * resulting text
     */
    generated_text?: string | null;
    /**
     * token for generating subsequent results
     * you can use this parameter to continue the generation from the end of the current result;
     * supplement_token values are unique for each subsequent task
     */
    supplement_token?: string | null;
};

export type ContentGenerationGenerateLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<ContentGenerationGenerateLiveResultInfo | null> | null;
};

export type ContentGenerationGenerateLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<ContentGenerationGenerateLiveTaskInfo | null> | null;
};

export type ContentGenerationGenerateTextLiveRequestInfo = {
    /**
     * main topic of the content to generate
     * required field
     * main topic for generating content;
     * can contain from 1 to 50 tokens
     */
    topic?: string;
    /**
     * number of words in content
     * required field
     * the number of tokens in the generated text;
     * can take values from 1 to 1000
     */
    word_count?: number;
    /**
     * secondary topics of the content to generate
     * optional field
     * secondary topics for generating content;
     * can contain up to 10 terms;
     * example: "sub_topics": ["Apple","Pixar","Amazing Products"]
     */
    sub_topics?: Array<string> | null;
    /**
     * meta description of the content to generate
     * optional field
     * can contain from 1 to 1000 tokens
     * learn more about this parameter on our help center
     */
    description?: string | null;
    /**
     * keywords for the content to generate
     * optional field
     * can contain up to 10 terms;
     * learn more about this parameter on our help center
     * example: "meta_keywords": ["iPhone","sell","CEO"]
     */
    meta_keywords?: Array<string> | null;
    /**
     * creativity of content generation
     * optional field
     * the randomness of the selection of equally probable subsequent tokens;
     * can take values from 0 to 1
     * default value: 0.8
     * learn more about this parameter on our help center
     */
    creativity_index?: number | null;
    /**
     * include conclusion in generated text
     * optional field
     * if set to true, generated content will include a logical conclusion
     */
    include_conclusion?: boolean | null;
    /**
     * token for generating subsequent results
     * optional field
     * provided in the identical filed of the response to each request;
     * you can use this parameter to continue the generation of text from the initial response
     * supplement_token values are unique for each subsequent task
     */
    supplement_token?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type ContentGenerationGenerateTextLiveResultInfo = {
    /**
     * number of input tokens
     */
    input_tokens?: number | null;
    /**
     * number of output tokens
     */
    output_tokens?: number | null;
    /**
     * number of new tokens
     */
    new_tokens?: number | null;
    /**
     * resulting text
     */
    generated_text?: string | null;
    /**
     * token for generating subsequent results
     * you can use this parameter to continue the generation from the end of the current result;
     * supplement_token values are unique for each subsequent task
     */
    supplement_token?: string | null;
};

export type ContentGenerationGenerateTextLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<ContentGenerationGenerateTextLiveResultInfo | null> | null;
};

export type ContentGenerationGenerateTextLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<ContentGenerationGenerateTextLiveTaskInfo | null> | null;
};

export type ContentGenerationGenerateMetaTagsLiveRequestInfo = {
    /**
     * initial target text
     * required field
     * text input for generating content;
     * can contain from 1 to 500 tokens
     * learn more about tokens on our help center
     */
    text?: string;
    /**
     * creativity of content generation
     * optional field
     * the randomness of the selection of equally probable subsequent tokens;
     * can take values from 0 to 1;
     * default value: 0.8
     * learn more about this parameter on our help center
     */
    creativity_index?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type ContentGenerationGenerateMetaTagsLiveResultInfo = {
    /**
     * number of input tokens
     */
    input_tokens?: number | null;
    /**
     * number of output tokens
     */
    output_tokens?: number | null;
    /**
     * number of new tokens
     */
    new_tokens?: number | null;
    /**
     * generated title
     */
    title?: string | null;
    /**
     * generated description
     */
    description?: string | null;
};

export type ContentGenerationGenerateMetaTagsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<ContentGenerationGenerateMetaTagsLiveResultInfo | null> | null;
};

export type ContentGenerationGenerateMetaTagsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<ContentGenerationGenerateMetaTagsLiveTaskInfo | null> | null;
};

export type ContentGenerationGenerateSubTopicsLiveRequestInfo = {
    /**
     * main topic of the content to generate
     * required field
     * main topic for content generation;
     * can contain from 1 to 50 tokens
     */
    topic?: string;
    /**
     * creativity of content generation
     * optional field
     * the randomness of the selection of equally probable subsequent tokens;
     * can take values from 0 to 1
     * default value: 0.8
     * learn more about this parameter on our help center
     */
    creativity_index?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type ContentGenerationGenerateSubTopicsLiveResultInfo = {
    /**
     * number of input tokens
     */
    input_tokens?: number | null;
    /**
     * number of output tokens
     */
    output_tokens?: number | null;
    /**
     * number of new tokens
     */
    new_tokens?: number | null;
    /**
     * resulting subtopics
     */
    sub_topics?: Array<string | null> | null;
};

export type ContentGenerationGenerateSubTopicsLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<ContentGenerationGenerateSubTopicsLiveResultInfo | null> | null;
};

export type ContentGenerationGenerateSubTopicsLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<ContentGenerationGenerateSubTopicsLiveTaskInfo | null> | null;
};

export type ContentGenerationParaphraseLiveRequestInfo = {
    /**
     * target text
     * required field
     * can contain from 1 to 500 tokens
     * learn more about tokens on our help center
     */
    text?: string;
    /**
     * creativity of content generation
     * required field
     * the randomness of the selection of equally probable subsequent tokens;
     * can take values from 0 to 1;
     * default value: 0.8
     * learn more about this parameter on our help center
     */
    creativity_index?: number;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type ContentGenerationParaphraseLiveResultInfo = {
    /**
     * number of input tokens in the POST request
     */
    input_tokens?: number | null;
    /**
     * number of output tokens in the response
     */
    output_tokens?: number | null;
    /**
     * number of new tokens in the response
     */
    new_tokens?: number | null;
    /**
     * paraphrased version of the given text
     */
    generated_text?: string | null;
};

export type ContentGenerationParaphraseLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<ContentGenerationParaphraseLiveResultInfo | null> | null;
};

export type ContentGenerationParaphraseLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<ContentGenerationParaphraseLiveTaskInfo | null> | null;
};

export type ContentGenerationCheckGrammarLiveRequestInfo = {
    /**
     * target text
     * required field
     * can contain from 1 to 10000 tokens
     * learn more about tokens on our help center
     */
    text?: string;
    /**
     * code of the text language
     * required field if you do not specify language_name
     * see the List of Languages for Content Generation Check Grammar API
     */
    language_code?: string | null;
    /**
     * name of the text language
     * required field if you do not specify language_code
     * see the List of Languages for Content Generation Check Grammar API
     */
    language_name?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type ContentGenerationCheckGrammarLiveItem = {
    /**
     * message of the grammar or spelling error
     */
    message?: string | null;
    /**
     * description of the grammar or spelling error
     */
    description?: string | null;
    /**
     * suggested corrections
     */
    suggestions?: Array<string | null> | null;
    /**
     * offset token for subsequent requests
     */
    offset?: number | null;
    /**
     * offset token for subsequent requests
     */
    length?: number | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * id of the grammar or spelling rule
     * see the List of Grammar Rules for Content Generation API
     */
    rule_id?: string | null;
    /**
     * description of the grammar or spelling rule
     */
    rule_description?: string | null;
    /**
     * type of the issue found by the relevant rule
     */
    rule_issue_type?: string | null;
    /**
     * id of the rule category
     */
    rule_category_id?: string | null;
    /**
     * name of the rule category
     */
    rule_category_name?: string | null;
};

export type ContentGenerationCheckGrammarLiveResultInfo = {
    /**
     * number of input tokens in the POST request
     */
    input_tokens?: number | null;
    /**
     * number of output tokens in the response
     */
    output_tokens?: number | null;
    /**
     * number of new tokens in the response
     */
    new_tokens?: number | null;
    /**
     * initial text in the POST request
     */
    initial_text?: string | null;
    /**
     * language code in the POST request
     */
    language_code?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * contains grammar or spelling errors and related data
     */
    items?: Array<ContentGenerationCheckGrammarLiveItem | null> | null;
};

export type ContentGenerationCheckGrammarLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<ContentGenerationCheckGrammarLiveResultInfo | null> | null;
};

export type ContentGenerationCheckGrammarLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<ContentGenerationCheckGrammarLiveTaskInfo | null> | null;
};

export type ContentGenerationCheckGrammarLanguagesResultInfo = {
    /**
     * language name
     */
    language_name?: string | null;
    /**
     * language code according to ISO 639-1
     */
    language_code?: string | null;
};

export type ContentGenerationCheckGrammarLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<ContentGenerationCheckGrammarLanguagesResultInfo | null> | null;
};

export type ContentGenerationCheckGrammarLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<ContentGenerationCheckGrammarLanguagesTaskInfo | null> | null;
};

export type ContentGenerationGrammarRulesResultInfo = {
    /**
     * array of rules
     */
    rules?: Array<string | null> | null;
};

export type ContentGenerationGrammarRulesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<ContentGenerationGrammarRulesResultInfo | null> | null;
};

export type ContentGenerationGrammarRulesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<ContentGenerationGrammarRulesTaskInfo | null> | null;
};

export type ContentGenerationTextSummaryLiveRequestInfo = {
    /**
     * target text
     * required field
     * can contain from 1 to 10000 tokens
     * learn more about tokens on our help center
     */
    text?: string;
    /**
     * name of the text language
     * required field if you do not specify language_code
     * see the List of Languages for Content Generation Text Summary API
     */
    language_name?: string | null;
    /**
     * code of the text language
     * required field if you do not specify language_name
     * see the List of Languages for Content Generation Text Summary API
     */
    language_code?: string | null;
    /**
     * maximum number of elements within internal arrays
     * optional field
     * you can use this field to limit the number of elements within the keyword_density array
     * default value: 10
     */
    internal_list_limit?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type ContentGenerationTextSummaryLiveResultInfo = {
    /**
     * number of sentences found in the target text
     */
    sentences?: number | null;
    /**
     * number of paragraphs found in the target text
     */
    paragraphs?: number | null;
    /**
     * number of words found in the target text
     */
    words?: number | null;
    /**
     * number of characters without spaces found in the target text
     */
    characters_without_spaces?: number | null;
    /**
     * number of characters with spaces found in the target text
     */
    characters_with_spaces?: number | null;
    /**
     * average number of words per sentence in the target text
     */
    words_per_sentence?: number | null;
    /**
     * average number of characters per word in the target text
     */
    characters_per_word?: number | null;
    /**
     * vocabulary density of the target text
     */
    vocabulary_density?: number | null;
    /**
     * keyword density of the target text
     * contains most common words and their count
     */
    keyword_density?: {
        [key: string]: number | null;
    } | null;
    /**
     * Automated Readability Index
     */
    automated_readability_index?: number | null;
    /**
     * Coleman–Liau Index
     */
    coleman_liau_index?: number | null;
    /**
     * Flesch–Kincaid Readability Index
     */
    flesch_kincaid_grade_level?: number | null;
    /**
     * SMOG Readability Index
     */
    smog_readability_index?: number | null;
    /**
     * number of spelling errors found in the target text
     */
    spelling_errors?: number | null;
    /**
     * number of grammar errors found in the target text
     */
    grammar_errors?: number | null;
};

export type ContentGenerationTextSummaryLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<ContentGenerationTextSummaryLiveResultInfo | null> | null;
};

export type ContentGenerationTextSummaryLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<ContentGenerationTextSummaryLiveTaskInfo | null> | null;
};

export type ContentGenerationTextSummaryLanguagesResultInfo = {
    /**
     * language name
     */
    language_name?: string | null;
    /**
     * language code according to ISO 639-1
     */
    language_code?: string | null;
};

export type ContentGenerationTextSummaryLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<ContentGenerationTextSummaryLanguagesResultInfo | null> | null;
};

export type ContentGenerationTextSummaryLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<ContentGenerationTextSummaryLanguagesTaskInfo | null> | null;
};

export type MerchantIdListRequestInfo = {
    /**
     * start time for filtering results
     * required field
     * if include_metadata is set to true, maximum value: a month from current datetime;
     * if include_metadata is set to false, maximum value: six months from current datetime;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_from?: string;
    /**
     * finish time for filtering results
     * required field
     * maximum value: current datetime;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-31 13:57:46 +00:00
     */
    datetime_to?: string;
    /**
     * the maximum number of returned task IDs
     * optional field
     * default value: 1000
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned task IDs
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten tasks in the results array will be omitted
     */
    offset?: number | null;
    /**
     * sorting by task execution time
     * optional field
     * possible values: "asc", "desc"
     * default value: "asc"
     */
    sort?: string | null;
    /**
     * include task metadata in the respond
     * optional field
     * default value: false
     */
    include_metadata?: boolean | null;
};

export type MerchantIdListResultInfo = {
    /**
     * id of the task
     */
    id?: string | null;
    /**
     * URL of the task
     * URL you used for making an API call
     */
    url?: string | null;
    /**
     * date and time when the task was made
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_posted?: string | null;
    /**
     * date and time when the task was completed
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_done?: string | null;
    /**
     * informational message of the task
     * you can find the full list of general informational messages here
     */
    status?: string | null;
    /**
     * cost of the task, USD
     */
    cost?: number | null;
    /**
     * contains parameters you specified in the POST request
     */
    metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | null;
    } | null;
};

export type MerchantIdListTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantIdListResultInfo | null> | null;
};

export type MerchantIdListResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantIdListTaskInfo | null> | null;
};

export type MerchantErrorsRequestInfo = {
    /**
     * the maximum number of returned tasks that responded with an error
     * optional field
     * default value: 1000
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned tasks
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten tasks in the results array will be omitted and the data will be provided for the successive tasks
     */
    offset?: number | null;
    /**
     * return tasks with a certain function
     * use this field to obtain a list of tasks that returned an error filtered by a certain function
     * you can filter the results by the values you receive in the function fields of the API response
     * i.e., once you receive unfiltered results, you can call this API again to filter them by function
     * example: sellers/ad_url, postback_url, pingback_url
     */
    filtered_function?: string | null;
    /**
     * start time for filtering results
     * optional field
     * allows filtering results by the datetime parameter within the range of the last 7 days;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2021-11-15 12:57:46 +00:00
     */
    datetime_from?: string | null;
    /**
     * finish time for filtering results
     * optional field
     * allows filtering results by the datetime parameter within the range of the last 7 days;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2021-11-15 13:57:46 +00:00
     */
    datetime_to?: string | null;
};

export type MerchantErrorsResultInfo = {
    /**
     * id of the task
     */
    id?: string | null;
    /**
     * date and time when an error occurred
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * corresponding API function
     */
    function?: string | null;
    /**
     * error code
     */
    error_code?: number | null;
    /**
     * error message or error URL
     * error message (see full list) or URL that caused an error
     */
    error_message?: string | null;
    /**
     * URL that caused an error
     * URL you used for making an API call or pingback/postback URL
     */
    http_url?: string | null;
    /**
     * HTTP method
     */
    http_method?: string | null;
    /**
     * HTTP status code
     */
    http_code?: number | null;
    /**
     * time taken by HTTP request
     * for tasks set with a pingback/postback, this field will show the time it took your server to respond
     */
    http_time?: number | null;
    /**
     * HTTP response
     * server response
     */
    http_response?: string | null;
};

export type MerchantErrorsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantErrorsResultInfo | null> | null;
};

export type MerchantErrorsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantErrorsTaskInfo | null> | null;
};

export type MerchantGoogleLanguagesResultInfo = {
    /**
     * language name
     */
    language_name?: string | null;
    /**
     * language code according to ISO 639-1
     */
    language_code?: string | null;
};

export type MerchantGoogleLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantGoogleLanguagesResultInfo | null> | null;
};

export type MerchantGoogleLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantGoogleLanguagesTaskInfo | null> | null;
};

export type MerchantGoogleLocationsResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the name of the superordinate location
     * example:
     * "location_name": "Arkansas,United States",
     * "location_name_parent": "United States"
     */
    location_name_parent?: string | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     */
    location_type?: string | null;
};

export type MerchantGoogleLocationsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantGoogleLocationsResultInfo | null> | null;
};

export type MerchantGoogleLocationsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantGoogleLocationsTaskInfo | null> | null;
};

export type MerchantGoogleLocationsCountryResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the name of the superordinate location
     * example:
     * "location_name": "Arkansas,United States",
     * "location_name_parent": "United States"
     */
    location_name_parent?: string | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     */
    location_type?: string | null;
};

export type MerchantGoogleLocationsCountryTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantGoogleLocationsCountryResultInfo | null> | null;
};

export type MerchantGoogleLocationsCountryResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantGoogleLocationsCountryTaskInfo | null> | null;
};

export type MerchantGoogleProductsTaskPostRequestInfo = {
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword filed
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://www.google.com/search?q=fish&hl=en&gl=US&gws_rd=cr&uule=w+CAIQIFISCQs2MuSEtepUEUK33kOSuTsc
     */
    url?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of the location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available Google Shopping locations with their location_name by making a separate request to the https://api.dataforseo.com/v3/merchant/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available Google Shopping locations with their location_code by making a separate request to the https://api.dataforseo.com/v3/merchant/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available Google Shopping languages with their language_name by making a separate request to the https://api.dataforseo.com/v3/merchant/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available Google Shopping languages with their language_code by making a separate request to the https://api.dataforseo.com/v3/merchant/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * google.co.uk, google.com.au, google.de, etc.
     */
    se_domain?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results to be retrieved from the Google Shopping results page
     * default value: 40
     * max value: 120
     * Your account will be billed per each SERP containing up to 40 results;
     * Setting depth above 40 may result in additional charges if the search engine returns more than 40 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * max value: 7
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * additional parameters of the search query
     * optional field
     * you can use the following search URL parameters for customizing the search;
     * example:
     * &tbs=ppr_min:45 – search for products that cost more than 45 USD;
     * &tbs=ppr_max:50 – search for products that cost less than 50 USD;
     * &tbs=p_ord:p – sort by ascending price;
     * &tbs=p_ord:pd – sort by descending price;
     * &tbs=p_ord:rv – sort by review score;
     * &tbs=ppr_max:50,p_ord:rv – sort by review score with the maximum price of 50 USD.;
     * &udm=28 – use new Google Shopping markup with 40 SERP results returned by default (the cost for one SERP is deducted accordingly);the maximum depth is 200; this parameter must be specified without tbm=shop in the url;
     * Note that search_param values will be ignored if any of the following parameters are used: price_min, price_max, sort_by
     */
    search_param?: string | null;
    /**
     * minimum product price
     * optional field
     * minimum price of the returned products listed on Google Shopping for the specified query
     * example:
     * 5
     * Note: if you specify price_min, the search_param parameter will be ignored
     */
    price_min?: number | null;
    /**
     * maximum product price
     * optional field
     * maximum price of the returned products listed on Google Shopping for the specified query
     * example:
     * 100
     * Note: if you specify price_max, the search_param parameter will be ignored
     */
    price_max?: number | null;
    /**
     * results sorting rules
     * optional field
     * the following sorting rules are supported:
     * review_score, price_low_to_high, price_high_to_low
     * example:
     * sort_by:"review_score"
     * Note: if you specify sort_by, the search_param parameter will be ignored
     */
    sort_by?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type MerchantGoogleProductsTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type MerchantGoogleProductsTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantGoogleProductsTaskPostTaskInfo | null> | null;
};

export type MerchantGoogleProductsTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * example: products
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of Google Shopping Products Advanced task
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of Google Shopping Products HTML task
     */
    endpoint_html?: string | null;
};

export type MerchantGoogleProductsTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantGoogleProductsTasksReadyResultInfo | null> | null;
};

export type MerchantGoogleProductsTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantGoogleProductsTasksReadyTaskInfo | null> | null;
};

export type MerchantTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the Amazon Reviews Advanced task
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the Amazon Reviews HTML task
     */
    endpoint_html?: string | null;
};

export type MerchantTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantTasksReadyResultInfo | null> | null;
};

export type MerchantTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantTasksReadyTaskInfo | null> | null;
};

export type DeliveryInfo = {
    /**
     * delivery information
     * message accompanying the delivery information as posted by the seller
     */
    delivery_message?: string | null;
    /**
     * price for the delivery
     * price of the delivery based on the location you specified in the POST request;
     * if free delivery is available, the value is null
     */
    delivery_price?: PriceInfo | null;
};

export type StoresCountInfo = {
    /**
     * number of stores that offer the product
     */
    count?: number | null;
    /**
     * text displayed on the Google Shopping page
     */
    displayed_text?: string | null;
    /**
     * whether the number of stores is taken from text
     * indicates whether the number of stores is taken from displayed_text;
     * if the API finds the exact number of stores in the HTML code of the Google Shopping page, this parameter is false;
     * if the API cannot find the number of stores in the HTML code of the page, it takes the number from the displayed_text;
     * in this case, the parameter is true
     */
    count_from_text?: boolean | null;
};

export type GoogleShoppingSerpElementItem = (BaseMerchantGoogleShoppingProductsElementItem | null) & {
    /**
     * domain of the URL
     * domain of the URL where a special offer is posted
     */
    domain?: string | null;
    /**
     * title of the element
     */
    title?: string | null;
    /**
     * description of the product in Google Shopping SERP
     */
    description?: string | null;
    /**
     * URL pointing at special offer page
     * URL where a special offer is posted
     */
    url?: string | null;
    /**
     * URL to the product page on Google Shopping
     */
    shopping_url?: string | null;
    /**
     * tags assigned to the product
     */
    tags?: Array<string | null> | null;
    /**
     * product price
     * example:
     * 384.99
     */
    price?: number | null;
    /**
     * price multiplier for instalment plan
     * indicates the number of months covered by the monthly payment for the product
     */
    price_multiplier?: number | null;
    /**
     * product old price
     * displayed if the product price has been changed
     * example:
     * 499
     */
    old_price?: number | null;
    /**
     * currency in the ISO format
     * example:
     * USD
     */
    currency?: string | null;
    /**
     * unique product identifier on Google Shopping
     * note that there is no full list of possible values as the product_id is a dynamic value assigned by Google
     * if there are no values, you will get null
     * example:
     * 4485466949985702538
     * learn more about the parameter in this help center guide
     */
    product_id?: string | null;
    /**
     * unique identifier of the SERP data element
     * note that there is no full list of possible values as the data_docid is a dynamic value assigned by Google
     * example:
     * 17363035694596624076
     */
    data_docid?: string | null;
    /**
     * name of the seller
     * the name of the company that placed a corresponding product on Google Shopping
     */
    seller?: string | null;
    /**
     * object containing additional url parameters
     * you can get more details about the product by using this object in the POST request to the Google Shopping Product Specification and Google Shopping Sellers endpoint
     */
    additional_specifications?: {
        [key: string]: string | null;
    } | null;
    /**
     * number of product reviews
     * indicates the number of reviews left by users on Google Shopping
     * if there are no values, you will get null
     */
    reviews_count?: number | null;
    /**
     * “best match” label
     * if the value is true, the product is marked with the “best match” label
     * if there are no values, you will get null
     */
    is_best_match?: boolean | null;
    /**
     * product rating
     * the product popularity rate based on product reviews
     */
    product_rating?: RatingElement | null;
    /**
     * shop rating
     * the popularity rate of the seller based on user reviews
     */
    shop_rating?: RatingElement | null;
    /**
     * URLs to the images of the product
     * the first URL in the array is the featured image of the product
     */
    product_images?: Array<string | null> | null;
    /**
     * unique ad click referral parameter
     * using this parameter you can get a URL of the advertisement in Google Shopping Sellers Ad URL
     */
    shop_ad_aclk?: string | null;
    /**
     * delivery information
     * delivery information including free and fast delivery date ranges
     */
    delivery_info?: DeliveryInfo | null;
    /**
     * stores count information
     * contains information about the number of stores that offer the same product
     */
    stores_count_info?: StoresCountInfo | null;
};

export type GoogleShoppingPaidElementItem = (BaseMerchantGoogleShoppingProductsElementItem | null) & {
    /**
     * domain in SERP
     */
    domain?: string | null;
    /**
     * product title
     */
    title?: string | null;
    /**
     * description of the product in Google Shopping SERP
     */
    description?: string | null;
    /**
     * URL to the product page on the seller’s website
     */
    url?: string | null;
    /**
     * unique ad click referral parameter
     * using this parameter you can get a URL of the advertisement in Google Shopping Sellers Ad URL
     */
    shop_ad_aclk?: string | null;
};

export type SpecialOfferInfo = {
    /**
     * product title
     */
    title?: string | null;
    /**
     * subtitle of the special offer
     */
    sub_title?: string | null;
    /**
     * amount of the fixed discount
     */
    fixed_discount?: number | null;
    /**
     * currency of the fixed discount
     */
    fixed_discount_currency?: string | null;
    /**
     * percentage of the discount
     */
    percentage_discount?: number | null;
    /**
     * code of coupon discount
     */
    coupon_code?: string | null;
    /**
     * information on coupon discount
     */
    coupon_info?: string | null;
    /**
     * URL to the product page on the seller’s website
     */
    url?: string | null;
    /**
     * domain in SERP
     */
    domain?: string | null;
};

export type GoogleShoppingSponsoredCarouselElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * XPath of the element
     */
    xpath?: string | null;
    /**
     * product title
     */
    title?: string | null;
    /**
     * tags assigned to the product
     */
    tags?: Array<string | null> | null;
    /**
     * name of the seller
     * the name of the company that placed a corresponding product on Google Shopping
     */
    seller?: string | null;
    /**
     * product price
     * example:
     * 384.99
     */
    price?: number | null;
    /**
     * currency in the ISO format
     * example:
     * USD
     */
    currency?: string | null;
    /**
     * product rating
     * the product popularity rate based on product reviews
     */
    product_rating?: RatingElement | null;
    /**
     * URLs to the images of the product
     * the first URL in the array is the featured image of the product
     */
    product_images?: Array<string | null> | null;
    /**
     * unique ad click referral parameter
     * using this parameter you can get a URL of the advertisement in Google Shopping Sellers Ad URL
     */
    shop_ad_aclk?: string | null;
    /**
     * delivery information
     * delivery information including free and fast delivery date ranges
     */
    delivery_info?: DeliveryInfo | null;
    /**
     * special offer from the seller
     * information on the special offer from the seller, including discount and coupon info
     */
    special_offer_info?: SpecialOfferInfo | null;
};

export type GoogleShoppingSponsoredCarouselElementItem = (BaseMerchantGoogleShoppingProductsElementItem | null) & {
    /**
     * title of the special offer
     */
    title?: string | null;
    /**
     * items in SERP
     */
    items?: Array<GoogleShoppingSponsoredCarouselElement | null> | null;
};

export type RelatedSearchesElementItem = (BaseMerchantGoogleShoppingProductsElementItem | null) & {
    /**
     * additional items present in the element
     * if there are none, equals null
     */
    items?: Array<string | null> | null;
};

export type MerchantGoogleProductsTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to Google Shopping results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * types of search results found in Google Shopping SERP
     * contains types of all search results (items) found in the returned SERP
     * possible item types:
     * google_shopping_sponsored_carousel, google_shopping_paid, google_shopping_serp
     */
    item_types?: Array<string | null> | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * additional items present in the element
     * contains a list of related keywords;
     * if there are none, equals null
     */
    items?: Array<BaseMerchantGoogleShoppingProductsElementItem | null> | null;
};

export type MerchantGoogleProductsTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantGoogleProductsTaskGetAdvancedResultInfo | null> | null;
};

export type MerchantGoogleProductsTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantGoogleProductsTaskGetAdvancedTaskInfo | null> | null;
};

export type MerchantGoogleProductsTaskGetHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found on Google Shopping
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type MerchantGoogleProductsTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantGoogleProductsTaskGetHtmlResultInfo | null> | null;
};

export type MerchantGoogleProductsTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantGoogleProductsTaskGetHtmlTaskInfo | null> | null;
};

export type MerchantGoogleSellersTaskPostRequestInfo = {
    /**
     * unique product identifier on Google Shopping
     * required field if data_docid is not specified
     * you can get this value for a certain product by making a separate request to the Google Shopping Products endpoint
     * example:
     * 4485466949985702538
     * learn more about the parameter in this help center guide
     */
    product_id?: string | null;
    /**
     * unique identifier of the SERP data element
     * required field if product_id is not specified
     * you can get this value for a certain element by making a separate request to the Google Shopping Products endpoint
     * example:
     * 13071766526042404278
     */
    data_docid?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of the location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available Google Shopping locations with their location_name by making a separate request to the https://api.dataforseo.com/v3/merchant/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available Google Shopping locations with their location_code by making a separate request to the https://api.dataforseo.com/v3/merchant/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available Google Shopping languages with their language_name by making a separate request to the https://api.dataforseo.com/v3/merchant/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available Google Shopping languages with their language_code by making a separate request to the https://api.dataforseo.com/v3/merchant/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * google.co.uk, google.com.au, google.de, etc.
     */
    se_domain?: string | null;
    /**
     * include “buy on Google” shops
     * optional field
     * if set to true, the response will contain the list of sellers that allow to purchase a given product directly on Google
     * Note: if set to true, the cost of a task will be doubled
     */
    get_shops_on_google?: boolean | null;
    /**
     * object containing additional url parameters
     * you can get additional information about the product by using the "additional_specifications object, which you can get by making a separate request to the Google Shopping Products endpoint
     * example:
     * "additional_specifications": {
     * "eto": "16157121050167572763_0"
     * }
     */
    additional_specifications?: {
        [key: string]: string | null;
    } | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type MerchantGoogleSellersTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type MerchantGoogleSellersTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantGoogleSellersTaskPostTaskInfo | null> | null;
};

export type MerchantGoogleSellersTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: shopping
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of Google Shopping Sellers Advanced task
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of Google Shopping Sellers HTML task
     */
    endpoint_html?: string | null;
};

export type MerchantGoogleSellersTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantGoogleSellersTasksReadyResultInfo | null> | null;
};

export type MerchantGoogleSellersTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantGoogleSellersTasksReadyTaskInfo | null> | null;
};

export type GoogleShoppingSellersShopsListElementItem = (BaseMerchantGoogleShoppingSellersElementItem | null) & {
    /**
     * monthly price multiplier
     * indicates the number of months covered by the monthly payment for the product
     */
    price_multiplier?: number | null;
    /**
     * installment details as displayed in the results
     * shows how the product price can be broken down into monthly payments, if applicable
     */
    displayed_payment_breakdown?: string | null;
    /**
     * indicated condition of the product
     * possible values: Used, Refurbished, New, null
     */
    product_condition?: string | null;
    /**
     * data from annotations and badges with special offers
     * if there is no annotation for this product, the value will be null
     * examples: LOW PRICE, SPECIAL OFFER, SALE, PRICE DROP
     */
    product_annotation?: string | null;
};

export type GoogleShoppingSellersBuyOnGoogleElementItem = (BaseMerchantGoogleShoppingSellersElementItem | null) & {
    [key: string]: unknown;
};

export type MerchantGoogleSellersTaskGetAdvancedResultInfo = {
    /**
     * product_id received in a POST array
     * learn more about the parameter in this help center guide
     */
    product_id?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to Google Shopping results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * title of the product
     */
    title?: string | null;
    /**
     * URL to the product page
     */
    url?: string | null;
    /**
     * URL to the product image
     */
    image_url?: string | null;
    /**
     * product rating
     * the product popularity rate based on product reviews
     */
    rating?: RatingElement | null;
    /**
     * types of search results found in Google Shopping SERP
     * contains types of all search results (items) found in the returned SERP
     * possible item types:
     * shops_list, buy_on_google
     */
    item_types?: Array<string | null> | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items in SERP
     */
    items?: Array<BaseMerchantGoogleShoppingSellersElementItem | null> | null;
};

export type MerchantGoogleSellersTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantGoogleSellersTaskGetAdvancedResultInfo | null> | null;
};

export type MerchantGoogleSellersTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantGoogleSellersTaskGetAdvancedTaskInfo | null> | null;
};

export type MerchantGoogleSellersTaskGetHtmlResultInfo = {
    /**
     * product_id received in a POST array
     */
    product_id?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found on Google Shopping
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type MerchantGoogleSellersTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantGoogleSellersTaskGetHtmlResultInfo | null> | null;
};

export type MerchantGoogleSellersTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantGoogleSellersTaskGetHtmlTaskInfo | null> | null;
};

export type MerchantGoogleProductSpecTaskPostRequestInfo = {
    /**
     * unique product identifier on Google Shopping
     * required field if data_docid is not specified
     * you can get this value for a certain product by making a separate request to the Google Shopping Products endpoint
     * example:
     * 4485466949985702538
     * learn more about the parameter in this help center guide
     */
    product_id?: string | null;
    /**
     * unique identifier of the SERP data element
     * required field if product_id is not specified
     * you can get this value for a certain element by making a separate request to the Google Shopping Products endpoint
     * example:
     * 13071766526042404278
     */
    data_docid?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * the cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of the location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available Google Shopping locations with their location_name by making a separate request to the https://api.dataforseo.com/v3/merchant/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available Google Shopping locations with their location_code by making a separate request to the https://api.dataforseo.com/v3/merchant/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available Google Shopping languages with their language_name by making a separate request to the https://api.dataforseo.com/v3/merchant/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available Google Shopping languages with their language_code by making a separate request to the https://api.dataforseo.com/v3/merchant/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * google.co.uk, google.com.au, google.de, etc.
     */
    se_domain?: string | null;
    /**
     * object containing additional url parameters
     * you can get additional information about the product by using the "additional_specifications object, which you can get by making a separate request to the Google Shopping Products endpoint
     * example:
     * "additional_specifications": {
     * "eto": "16157121050167572763_0"
     * }
     */
    additional_specifications?: {
        [key: string]: string | null;
    } | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type MerchantGoogleProductSpecTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type MerchantGoogleProductSpecTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantGoogleProductSpecTaskPostTaskInfo | null> | null;
};

export type MerchantGoogleProductSpecTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: shopping_specifications
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the Google Shopping Product Specifications Advanced task
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the Google Shopping Product Specifications HTML task
     */
    endpoint_html?: string | null;
};

export type MerchantGoogleProductSpecTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantGoogleProductSpecTasksReadyResultInfo | null> | null;
};

export type MerchantGoogleProductSpecTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantGoogleProductSpecTasksReadyTaskInfo | null> | null;
};

export type ShoppingSpecification = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank on the product specification page
     * absolute position among all the elements found on the product specification page
     */
    rank_absolute?: number | null;
    /**
     * alignment of the element on the product specification page
     * can take the following values:
     * right
     */
    position?: string | null;
    /**
     * XPath of the element
     */
    xpath?: string | null;
    /**
     * name of the block of product attributes
     * indicates the name of the product specification section in which the related element is listed
     */
    block_name?: string | null;
    /**
     * product attribute
     * attribute name of the product data specification
     */
    specification_name?: string | null;
    /**
     * content of the specification
     */
    specification_value?: string | null;
};

export type MerchantGoogleProductSpecTaskGetAdvancedResultInfo = {
    /**
     * product ID in a POST array
     * learn more about the parameter in this help center guide
     */
    product_id?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * title of the product
     */
    title?: string | null;
    /**
     * description of the product
     */
    description?: string | null;
    /**
     * URL of the product image
     */
    image_url?: string | null;
    /**
     * tags of the product
     */
    tags?: Array<string | null> | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the format: “year-month-date:minutes:UTC_difference_hours:UTC_difference_minutes”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * types of items found on the product specification page
     * possible item types:
     * shopping_specification
     */
    item_types?: Array<string | null> | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items on the product specification page
     * contains all product attributes and related data listed on the product specification page
     */
    items?: Array<ShoppingSpecification | null> | null;
};

export type MerchantGoogleProductSpecTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantGoogleProductSpecTaskGetAdvancedResultInfo | null> | null;
};

export type MerchantGoogleProductSpecTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantGoogleProductSpecTaskGetAdvancedTaskInfo | null> | null;
};

export type MerchantGoogleProductSpecTaskGetHtmlResultInfo = {
    /**
     * product ID in a POST array
     */
    product_id?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found on Google Shopping
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type MerchantGoogleProductSpecTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantGoogleProductSpecTaskGetHtmlResultInfo | null> | null;
};

export type MerchantGoogleProductSpecTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantGoogleProductSpecTaskGetHtmlTaskInfo | null> | null;
};

export type MerchantGoogleProductInfoTaskPostRequestInfo = {
    /**
     * unique product identifier on Google Shopping
     * required field if data_docid is not specified
     * you can get this value for a certain product by making a separate request to the Google Shopping Products endpoint
     * example:
     * 4485466949985702538
     * learn more about the parameter in this help center guide
     */
    product_id?: string | null;
    /**
     * unique identifier of the SERP data element
     * required field if product_id is not specified
     * you can get this value for a certain element by making a separate request to the Google Shopping Products endpoint
     * example:
     * 13071766526042404278
     */
    data_docid?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of the location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available Google Shopping locations with their location_name by making a separate request to the https://api.dataforseo.com/v3/merchant/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available Google Shopping locations with their location_code by making a separate request to the https://api.dataforseo.com/v3/merchant/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available Google Shopping languages with their language_name by making a separate request to the https://api.dataforseo.com/v3/merchant/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available Google Shopping languages with their language_code by making a separate request to the https://api.dataforseo.com/v3/merchant/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * google.co.uk, google.com.au, google.de, etc.
     */
    se_domain?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type MerchantGoogleProductInfoTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type MerchantGoogleProductInfoTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantGoogleProductInfoTaskPostTaskInfo | null> | null;
};

export type MerchantGoogleProductInfoTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: shopping_specifications
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the Google Shopping Product Specifications Advanced task
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the Google Shopping Product Specifications HTML task
     * note: HTML is not available for this endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type MerchantGoogleProductInfoTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantGoogleProductInfoTasksReadyResultInfo | null> | null;
};

export type MerchantGoogleProductInfoTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantGoogleProductInfoTasksReadyTaskInfo | null> | null;
};

export type ProductSeller = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * product title
     */
    title?: string | null;
    /**
     * seller url
     * url of the page where the product is sold
     */
    url?: string | null;
    /**
     * rating of the seller
     */
    seller_rating?: RatingElement | null;
    /**
     * number of seller reviews
     * number of reviews on the product seller’s account
     */
    seller_review_count?: number | null;
    /**
     * product price
     * product price details on the seller’s website
     */
    price?: PriceInfo | null;
    /**
     * delivery information
     * product delivery information
     */
    delivery_info?: DeliveryInfo | null;
};

export type ProductVariation = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * product ID in a POST array
     * learn more about the parameter in this help center guide
     */
    product_id?: string | null;
    /**
     * name of the product seller
     */
    title?: string | null;
    /**
     * seller url
     * url of the webpage on the seller’s website where the product is sold
     */
    url?: string | null;
};

export type ProductInfoElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank on the product specification page
     * absolute position among all the elements found on the product specification page
     */
    rank_absolute?: number | null;
    /**
     * alignment of the element on the product specification page
     * can take the following values:
     * right, left
     */
    position?: string | null;
    /**
     * product_id received in a POST array
     * ilearn more about the parameter in this help center guide
     */
    product_id?: string | null;
    /**
     * title of the product
     */
    title?: string | null;
    /**
     * description of the product
     */
    description?: string | null;
    /**
     * product url
     * url of the product on Google Shopping
     */
    url?: string | null;
    /**
     * product images
     * contains urls to product images
     */
    images?: Array<string | null> | null;
    /**
     * product features
     * contains snippets with the description of product features
     */
    features?: Array<string | null> | null;
    /**
     * product rating
     * the popularity rate based on reviews
     */
    rating?: RatingElement | null;
    /**
     * number of seller reviews
     * number of reviews on the product seller’s account
     */
    seller_reviews_count?: number | null;
    /**
     * sellers of the product
     * number of reviews on the product seller’s account
     */
    sellers?: Array<ProductSeller | null> | null;
    /**
     * variations of the product
     * contains brief information about different product variations
     */
    variations?: Array<ProductVariation | null> | null;
};

export type MerchantGoogleProductInfoTaskGetAdvancedResultInfo = {
    /**
     * product ID in a POST array
     * learn more about the parameter in this help center guide
     */
    product_id?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the format: “year-month-date:minutes:UTC_difference_hours:UTC_difference_minutes”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * types of items found on the product specification page
     * possible item types:
     * product_info_element
     */
    item_types?: Array<string | null> | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items on the product page
     * contains all product attributes and related data listed on the product page
     */
    items?: Array<ProductInfoElement | null> | null;
};

export type MerchantGoogleProductInfoTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantGoogleProductInfoTaskGetAdvancedResultInfo | null> | null;
};

export type MerchantGoogleProductInfoTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantGoogleProductInfoTaskGetAdvancedTaskInfo | null> | null;
};

export type MerchantGoogleSellersAdUrlResultInfo = {
    /**
     * unique ad click referral parameter
     */
    ad_aclk?: string | null;
    /**
     * full URL of the advertisement
     */
    ad_url?: string | null;
    /**
     * URLs where the link from Google Shopping redirects before reaching a final URL
     * includes up to 10 URLs of the ad’s redirect path to the seller’s ad_url
     */
    ad_url_redirects?: Array<string | null> | null;
};

export type MerchantGoogleSellersAdUrlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantGoogleSellersAdUrlResultInfo | null> | null;
};

export type MerchantGoogleSellersAdUrlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantGoogleSellersAdUrlTaskInfo | null> | null;
};

export type MerchantAmazonLocationsResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the name of the superordinate location
     * example:
     * "location_code": 9041134,
     * "location_name": "90290,California,United States",
     * "location_name_parent": "California,United States"
     */
    location_name_parent?: string | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     */
    location_type?: string | null;
};

export type MerchantAmazonLocationsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantAmazonLocationsResultInfo | null> | null;
};

export type MerchantAmazonLocationsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantAmazonLocationsTaskInfo | null> | null;
};

export type MerchantAmazonLocationsCountryResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the name of the superordinate location
     * example:
     * "location_code": 9041134,
     * "location_name": "90290,California,United States",
     * "location_name_parent": "California,United States"
     */
    location_name_parent?: string | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     */
    location_type?: string | null;
};

export type MerchantAmazonLocationsCountryTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantAmazonLocationsCountryResultInfo | null> | null;
};

export type MerchantAmazonLocationsCountryResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantAmazonLocationsCountryTaskInfo | null> | null;
};

export type MerchantAmazonLanguagesResultInfo = {
    /**
     * language name
     */
    language_name?: string | null;
    /**
     * language code according to ISO 639-1
     */
    language_code?: string | null;
};

export type MerchantAmazonLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantAmazonLanguagesResultInfo | null> | null;
};

export type MerchantAmazonLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantAmazonLanguagesTaskInfo | null> | null;
};

export type MerchantAmazonProductsTaskPostRequestInfo = {
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in this field
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * direct URL of the search query
     * optional field
     * you can specify a direct URL and we will sort it out to the necessary fields. Note that this method is the most difficult for our API to process and also requires you to specify the exact language and location in the URL. In most cases, we wouldn’t recommend using this method.
     * example:
     * https://www.amazon.com/s/?field-keywords=shoes&language=en_US
     */
    url?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations with their location_name parameters by making a separate request to the https://api.dataforseo.com/v3/merchant/amazon/locations
     * example:
     * HA1,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations with their location_code parameters by making a separate request to the
     * https://api.dataforseo.com/v3/merchant/amazon/locations
     * example:
     * 9045969
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with their language_name parameters by making a separate request to the
     * https://api.dataforseo.com/v3/merchant/amazon/languages
     * example:
     * English (United Kingdom)
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code parameters by making a separate request to the https://api.dataforseo.com/v3/merchant/amazon/languages
     * example:
     * en_GB
     */
    language_code?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * amazon.com, amazon.co.uk, amazon.fr, etc.
     */
    se_domain?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results to be retrieved from the Amazon results page
     * default value: 100
     * max value: 700
     * Your account will be billed per each SERP containing up to 100 results;
     * Setting depth above 100 may result in additional charges if the search engine returns more than 100 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * page crawl limit
     * optional field
     * number of search results pages to crawl
     * max value: 7
     * Note: the max_crawl_pages and depth parameters complement each other;
     * learn more at our help center
     */
    max_crawl_pages?: number | null;
    /**
     * amazon product department
     * optional field
     * specify one of the following amazon departments for extracting product listings:
     * "Arts & Crafts", "Automotive", "Baby", "Beauty & Personal Care", "Books", "Computers", "Digital Music", "Electronics", "Kindle Store", "Prime Video", "Women's Fashion", "Men's Fashion", "Girls' Fashion", "Boys' Fashion", "Deals", "Health & Household", "Home & Kitchen", "Industrial & Scientific", "Luggage", "Movies & TV", "Music, CDs & Vinyl", "Pet Supplies", "Software", "Sports & Outdoors", "Tools & Home Improvement", "Toys & Games", "Video Games"
     */
    department?: string | null;
    /**
     * additional parameters of the search query
     * optional field
     * you can use the following Amazon search URL parameters for customizing the search
     * example:
     * &low-price=52 – search for products that cost more than 52 USD;
     * &high-price=45 – search for products that cost less than 45 USD;
     * &sort=relevancerank – sort results by relevance;
     * &sort=featured-rank – sort results by featured products;
     * &sort=price-asc-rank – sort by ascending price;
     * &sort=price-desc-rank – sort by descending price;
     * &sort=review-rank – sort by the average customer reviews value;
     * &sort=date-desc-rank – sort by the newest arrival
     * Note that search_param values will be ignored if any of the following parameters is used: price_min, price_max, sort_by
     */
    search_param?: string | null;
    /**
     * minimum product price
     * optional field
     * minimum price of the returned products listed on Amazon for the specified query
     * example:
     * 5
     * Note: if you specify price_min, the search_param parameter will be ignored
     */
    price_min?: number | null;
    /**
     * maximum product price
     * optional field
     * maximum price of the returned products listed on Amazon for the specified query
     * example:
     * 100
     * Note: if you specify price_max, the search_param parameter will be ignored
     */
    price_max?: number | null;
    /**
     * results sorting rules
     * optional field
     * the following sorting rules are supported:
     * relevance, price_low_to_high, price_high_to_low, featured, avg_customer_review, newest_arrival
     * example:
     * sort_by:"relevance"
     * Note: if you specify sort_by, the search_param parameter will be ignored
     */
    sort_by?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type MerchantAmazonProductsTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type MerchantAmazonProductsTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantAmazonProductsTaskPostTaskInfo | null> | null;
};

export type MerchantAmazonProductsTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: organic
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the Amazon Products Advanced task
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the Amazon Products HTML task
     */
    endpoint_html?: string | null;
};

export type MerchantAmazonProductsTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantAmazonProductsTasksReadyResultInfo | null> | null;
};

export type MerchantAmazonProductsTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantAmazonProductsTasksReadyTaskInfo | null> | null;
};

export type MerchantAmazonPaidSerpElementItem = (BaseMerchantAmazonElementItem | null) & {
    /**
     * Amazon domain
     */
    domain?: string | null;
    /**
     * product title
     */
    title?: string | null;
    /**
     * the URL of the product page
     */
    url?: string | null;
    /**
     * URL of the product image featured in the results
     */
    image_url?: string | null;
    /**
     * number of product purchases in the past month
     */
    bought_past_month?: number | null;
    /**
     * the regular price of a product
     * example:
     * 49.98
     */
    price_from?: number | null;
    /**
     * the upper limit of the product price range
     * example:
     * 384.99
     */
    price_to?: number | null;
    /**
     * currency in the ISO format
     * example:
     * USD
     */
    currency?: string | null;
    /**
     * special offer details
     * contains special offer details, including coupon and Subscribe & Save discounts
     */
    special_offers?: Array<string | null> | null;
    /**
     * unique product identifier on Amazon
     * note that there is no full list of possible values as the data_asin is a dynamic value assigned by Amazon
     * example:
     * B07G82D89J
     */
    data_asin?: string | null;
    /**
     * product rating info
     */
    rating?: RatingElement | null;
    /**
     * “Amazon’s choice” label
     * if the value is true, the product is marked with the “Amazon’s choice” label
     */
    is_amazon_choice?: boolean | null;
    /**
     * “Best Seller” label
     * if the value is true, the product is marked with the “Best Seller” label
     */
    is_best_seller?: boolean | null;
    /**
     * delivery information
     * delivery information including free and fast delivery date ranges
     */
    delivery_info?: AmazonDeliveryInfo | null;
};

export type MerchantAmazonSerpSerpElementItem = (BaseMerchantAmazonElementItem | null) & {
    /**
     * Amazon domain
     */
    domain?: string | null;
    /**
     * product title
     */
    title?: string | null;
    /**
     * the URL of the product page
     */
    url?: string | null;
    /**
     * URL of the product image featured in the results
     */
    image_url?: string | null;
    /**
     * number of product purchases in the past month
     */
    bought_past_month?: number | null;
    /**
     * the regular price of a product
     * example:
     * 49.98
     */
    price_from?: number | null;
    /**
     * the upper limit of the product price range
     * example:
     * 384.99
     */
    price_to?: number | null;
    /**
     * currency in the ISO format
     * example:
     * USD
     */
    currency?: string | null;
    /**
     * special offer details
     * contains special offer details, including coupon and Subscribe & Save discounts
     */
    special_offers?: Array<string | null> | null;
    /**
     * unique product identifier on Amazon
     * note that there is no full list of possible values as the data_asin is a dynamic value assigned by Amazon
     * example:
     * B07G82D89J
     */
    data_asin?: string | null;
    /**
     * product rating info
     */
    rating?: RatingElement | null;
    /**
     * “Amazon’s choice” label
     * if the value is true, the product is marked with the “Amazon’s choice” label
     */
    is_amazon_choice?: boolean | null;
    /**
     * “Best Seller” label
     * if the value is true, the product is marked with the “Best Seller” label
     */
    is_best_seller?: boolean | null;
    /**
     * delivery information
     * delivery information including free and fast delivery date ranges
     */
    delivery_info?: AmazonDeliveryInfo | null;
};

export type AmazonSerpElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
    /**
     * Amazon domain
     */
    domain?: string | null;
    /**
     * product title
     */
    title?: string | null;
    /**
     * the URL of the product page
     */
    url?: string | null;
    /**
     * URL of the product image featured in the results
     */
    image_url?: string | null;
    /**
     * number of product purchases in the past month
     */
    bought_past_month?: number | null;
    /**
     * the regular price of a product
     * example:
     * 49.98
     */
    price_from?: number | null;
    /**
     * the upper limit of the product price range
     * example:
     * 384.99
     */
    price_to?: number | null;
    /**
     * currency in the ISO format
     * example:
     * USD
     */
    currency?: string | null;
    /**
     * special offer details
     * contains special offer details, including coupon and Subscribe & Save discounts
     */
    special_offers?: Array<string | null> | null;
    /**
     * unique product identifier on Amazon
     * note that there is no full list of possible values as the data_asin is a dynamic value assigned by Amazon
     * example:
     * B07G82D89J
     */
    data_asin?: string | null;
    /**
     * product rating info
     */
    rating?: RatingElement | null;
    /**
     * “Amazon’s choice” label
     * if the value is true, the product is marked with the “Amazon’s choice” label
     */
    is_amazon_choice?: boolean | null;
    /**
     * “Best Seller” label
     * if the value is true, the product is marked with the “Best Seller” label
     */
    is_best_seller?: boolean | null;
    /**
     * delivery information
     * delivery information including free and fast delivery date ranges
     */
    delivery_info?: AmazonDeliveryInfo | null;
};

export type MerchantEditorialRecommendationsSerpElementItem = (BaseMerchantAmazonElementItem | null) & {
    /**
     * the alignment of the element in Amazon SERP
     * possible values:
     * left, right
     */
    position?: string | null;
    /**
     * Amazon product items
     */
    items?: Array<AmazonSerpElement | null> | null;
};

export type MerchantRelatedSearchesSerpElementItem = (BaseMerchantAmazonElementItem | null) & {
    /**
     * the alignment of the element in Amazon SERP
     * possible values:
     * left, right
     */
    position?: string | null;
    /**
     * Amazon product items
     */
    items?: Array<RelatedSearchesElement | null> | null;
};

export type MerchantTopRatedFromOurBrandsSerpElementItem = (BaseMerchantAmazonElementItem | null) & {
    /**
     * the alignment of the element in Amazon SERP
     * possible values:
     * left, right
     */
    position?: string | null;
    /**
     * Amazon product items
     */
    items?: Array<AmazonSerpElement | null> | null;
};

export type MerchantAmazonProductsTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to Amazon results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * types of search results found in Amazon SERP
     * contains types of all search results (items) found in the returned SERP
     * possible item types:
     * amazon_serp, amazon_paid, editorial_recommendations, top_rated_from_our_brands, related_searches
     */
    item_types?: Array<string | null> | null;
    /**
     * search engine results count
     */
    se_results_count?: number | null;
    /**
     * amazon product departments and subcategories
     */
    categories?: Array<string | null> | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * Amazon product items within the editorial_recommendations element
     */
    items?: Array<BaseMerchantAmazonElementItem | null> | null;
};

export type MerchantAmazonProductsTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantAmazonProductsTaskGetAdvancedResultInfo | null> | null;
};

export type MerchantAmazonProductsTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantAmazonProductsTaskGetAdvancedTaskInfo | null> | null;
};

export type MerchantAmazonProductsTaskGetHtmlResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * HTML pages and related data
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type MerchantAmazonProductsTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantAmazonProductsTaskGetHtmlResultInfo | null> | null;
};

export type MerchantAmazonProductsTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantAmazonProductsTaskGetHtmlTaskInfo | null> | null;
};

export type MerchantAmazonAsinTaskPostRequestInfo = {
    /**
     * product ID
     * required field
     * unique product identifier (ASIN) in Amazon
     * you can receive the asin parameter by making a separate request to the Amazon Products endpoint
     */
    asin?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations with their location_name parameters by making a separate request to the https://api.dataforseo.com/v3/merchant/amazon/locations
     * example:
     * HA1,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations with their location_code parameters by making a separate request to the
     * https://api.dataforseo.com/v3/merchant/amazon/locations
     * example:
     * 9045969
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with their language_name parameters by making a separate request to the
     * https://api.dataforseo.com/v3/merchant/amazon/languages
     * example:
     * English (United Kingdom)
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code parameters by making a separate request to the https://api.dataforseo.com/v3/merchant/amazon/languages
     * example:
     * en_GB
     */
    language_code?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * amazon.com, amazon.co.uk, amazon.fr, etc.
     */
    se_domain?: string | null;
    /**
     * load more local reviews
     * optional field
     * if set to true, additional local reviews will be loaded in the top_local_reviews array of the Task GET response;
     * Note: you will be charged double the price for using this parameter
     */
    load_more_local_reviews?: boolean | null;
    /**
     * sort local reviews
     * optional field
     * reviews in the top_local_reviews array of the Task GET response can be sorted by most helpful or most recent first;
     * possible values: helpful, recent
     * default value: helpful
     */
    local_reviews_sort?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type MerchantAmazonAsinTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type MerchantAmazonAsinTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantAmazonAsinTaskPostTaskInfo | null> | null;
};

export type MerchantAmazonAsinTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     * can take the following values: shopping
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the Amazon ASIN Advanced task
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the Amazon ASIN HTML task
     */
    endpoint_html?: string | null;
};

export type MerchantAmazonAsinTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantAmazonAsinTasksReadyResultInfo | null> | null;
};

export type MerchantAmazonAsinTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantAmazonAsinTasksReadyTaskInfo | null> | null;
};

export type AmazonApplicableVouchersItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * text of the voucher
     */
    text?: string | null;
    /**
     * value of the fixed discount
     */
    fixed_discount?: number | null;
    /**
     * currency code of the fixed discount
     */
    fixed_discount_currency?: string | null;
    /**
     * value of the percentage discount
     * if the discount is fixed, the value will be null
     */
    percentage_discount?: number | null;
    /**
     * important details about the terms of discount vouchers
     */
    important_details?: string | null;
};

export type AmazonProductNewerModelInfo = {
    /**
     * product title
     */
    title?: string | null;
    /**
     * ASIN of the newer product model
     */
    newer_model_asin?: string | null;
};

export type ProductCategoryInfo = {
    /**
     * product category name
     */
    category?: string | null;
    /**
     * product category URL
     * indicates the browse path on Amazon with the unique browse node ID (product category ID on Amazon)
     */
    url?: string | null;
};

export type ProductInformationProductInformationDetailsItem = (BaseMerchantAmazonProductInformationElementItem | null) & {
    /**
     * contains information specified about the product within the section_name
     */
    body?: {
        [key: string]: string | null;
    } | null;
};

export type ProductInformationProductInformationTextItem = (BaseMerchantAmazonProductInformationElementItem | null) & {
    /**
     * text specified under the given title within the section_name
     */
    text?: string | null;
};

export type ProductInformationRowProductInformationImageRowElementItem = (BaseMerchantAmazonProductInformationRowElementItem | null) & {
    /**
     * alternative text of the related product image
     */
    alt?: string | null;
    /**
     * URL of the image
     */
    url?: string | null;
};

export type ProductInformationRowProductInformationTextRowElementItem = (BaseMerchantAmazonProductInformationRowElementItem | null) & {
    /**
     * text of the voucher
     */
    text?: string | null;
};

export type ProductInformationRows = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title under which related product information appears on the Amazon product page
     */
    title?: string | null;
    /**
     * rows containing related product information
     */
    rows?: Array<BaseMerchantAmazonProductInformationRowElementItem | null> | null;
};

export type ProductInformationProductInformationExtendedItem = (BaseMerchantAmazonProductInformationElementItem | null) & {
    /**
     * contains information specified about the product within the section_name
     */
    contents?: Array<ProductInformationRows | null> | null;
};

export type UserProfileInfo = {
    /**
     * the name of the reviewer
     */
    name?: string | null;
    /**
     * URL to the profile picture of the reviewer
     */
    avatar?: string | null;
    /**
     * relevant url
     */
    url?: string | null;
    /**
     * total number of reviews submitted by the reviewer
     */
    reviews_count?: number | null;
    /**
     * country of the reviewer
     */
    locations?: string | null;
};

export type AmazonReviewItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank among all the listed reviews
     * absolute position among all reviews on the list
     */
    rank_absolute?: number | null;
    /**
     * the alignment of the review in SERP
     * can take the following values: right
     */
    position?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
    /**
     * indicates whether the review has the “Verified Purchase” mark
     */
    verified?: boolean | null;
    /**
     * subtitle of the review
     */
    subtitle?: string | null;
    /**
     * helpful votes count
     * number of users who clicked on the ‘Helpful” button under the review text
     */
    helpful_votes?: string | null;
    /**
     * images of the product submitted by the reviewer
     */
    images?: Array<AiModeImagesElementInfo | null> | null;
    /**
     * videos of the product submitted by the reviewer
     */
    videos?: Array<VideoElement | null> | null;
    /**
     * user profile of the reviewer
     */
    user_profile?: UserProfileInfo | null;
    /**
     * title of the review
     */
    title?: string | null;
    /**
     * URL to the reviewer’s profile
     */
    url?: string | null;
    /**
     * content of the review
     */
    review_text?: string | null;
    /**
     * date and time when the review was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”;
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    publication_date?: string | null;
    /**
     * the rating score submitted by the reviewer
     */
    rating?: RatingElement | null;
};

export type AmazonProductInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank
     * absolute position among all the elements in the response array
     */
    rank_absolute?: number | null;
    /**
     * the alignment of the element in Amazon SERP
     * possible values:
     * left, right
     */
    position?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
    /**
     * product title
     */
    title?: string | null;
    /**
     * product specs and other details
     */
    details?: string | null;
    /**
     * the URL of the product image
     */
    image_url?: string | null;
    /**
     * product brand name
     */
    author?: string | null;
    /**
     * ASIN of the product received in a POST array
     */
    data_asin?: string | null;
    /**
     * parent ASIN of the product
     */
    parent_asin?: string | null;
    /**
     * ASINs of all found product modifications
     */
    product_asins?: Array<string | null> | null;
    /**
     * the lower limit of the product price range
     * example:
     * 49.98
     */
    price_from?: number | null;
    /**
     * the upper limit of the product price range
     * example:
     * 384.99
     */
    price_to?: number | null;
    /**
     * value of the percentage discount
     */
    percentage_discount?: string | null;
    /**
     * currency in the ISO format
     * example:
     * USD
     */
    currency?: string | null;
    /**
     * “Amazon’s choice” label
     * if the value is true, the product is marked with the “Amazon’s choice” label
     */
    is_amazon_choice?: boolean | null;
    /**
     * product rating info
     */
    rating?: RatingElement | null;
    /**
     * indicates whether the newer model of the product is available
     */
    is_newer_model_available?: boolean | null;
    /**
     * array of objects containing information about applicable vouchers
     */
    applicable_vouchers?: Array<AmazonApplicableVouchersItem | null> | null;
    /**
     * information about the newer model of the product
     */
    newer_model?: AmazonProductNewerModelInfo | null;
    /**
     * contains related product categories
     */
    categories?: Array<ProductCategoryInfo | null> | null;
    /**
     * contains related product information
     */
    product_information?: Array<BaseMerchantAmazonProductInformationElementItem | null> | null;
    /**
     * contains URLs for all images of the product displayed on the left side of the main image
     */
    product_images_list?: Array<string | null> | null;
    /**
     * contains URLs for all videos of the product displayed on the right side of the main video
     */
    product_videos_list?: Array<string | null> | null;
    /**
     * contains description of the product
     */
    description?: string | null;
    /**
     * indicates whether the product is available for ordering
     * if the value is true, the product can be ordered
     */
    is_available?: boolean | null;
    /**
     * array of objects with top reviews from target location
     * to obtain additional local reviews, you can specify the load_more_local_reviews parameter in Task POST
     */
    top_local_reviews?: Array<AmazonReviewItem | null> | null;
    /**
     * array of objects with top reviews from around the world
     */
    top_global_reviews?: Array<AmazonReviewItem | null> | null;
};

export type MerchantAmazonAsinTaskGetAdvancedResultInfo = {
    /**
     * ASIN received in a POST array
     * the unique product identifier in Amazon (ASIN) received in a POST array
     * learn more about the identified in this help center guide
     */
    asin?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * Amazon domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to Amazon results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * types of search results found on Amazon
     * contains types of all search results (items) found in the returned SERP
     * possible item types:
     * amazon_product_info
     */
    item_types?: Array<string | null> | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * Amazon product info items
     */
    items?: Array<AmazonProductInfo | null> | null;
};

export type MerchantAmazonAsinTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantAmazonAsinTaskGetAdvancedResultInfo | null> | null;
};

export type MerchantAmazonAsinTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantAmazonAsinTaskGetAdvancedTaskInfo | null> | null;
};

export type MerchantAmazonAsinTaskGetHtmlResultInfo = {
    /**
     * ASIN received in a POST array
     */
    product_id?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * HTML pages and related data
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type MerchantAmazonAsinTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantAmazonAsinTaskGetHtmlResultInfo | null> | null;
};

export type MerchantAmazonAsinTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantAmazonAsinTaskGetHtmlTaskInfo | null> | null;
};

export type MerchantAmazonSellersTaskPostRequestInfo = {
    /**
     * unique product identifier on Amazon
     * required field
     * you can get this value making a separate request to the Amazon Products endpoint
     * note that there is no full list of possible values as the asin values is a dynamic value assigned by Amazon
     * example:
     * B085RFFC9Q
     * learn more about the identifier in this help center guide
     */
    asin?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of the location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available Amazon locations with their location_name by making a separate request to the https://api.dataforseo.com/v3/merchant/amazon/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available Amazon locations with their location_code by making a separate request to the https://api.dataforseo.com/v3/merchant/amazon/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of the language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available Amazon languages with their language_name by making a separate request to the https://api.dataforseo.com/v3/merchant/amazon/languages
     * example:
     * English (United States)
     */
    language_name?: string | null;
    /**
     * language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available Amazon languages with their language_code by making a separate request to the https://api.dataforseo.com/v3/merchant/amazon/languages
     * example:
     * en_US
     */
    language_code?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * amazon.co.uk, amazon.com.au, amazon.de, etc.
     */
    se_domain?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type MerchantAmazonSellersTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type MerchantAmazonSellersTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantAmazonSellersTaskPostTaskInfo | null> | null;
};

export type MerchantAmazonSellersTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of Amazon Sellers Advanced task
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of Amazon Sellers HTML task
     */
    endpoint_html?: string | null;
};

export type MerchantAmazonSellersTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantAmazonSellersTasksReadyResultInfo | null> | null;
};

export type MerchantAmazonSellersTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantAmazonSellersTasksReadyTaskInfo | null> | null;
};

export type MerchantAmazonSellerMainItemSerpElementItem = (BaseMerchantAmazonSellersElementItem | null) & {
    [key: string]: unknown;
};

export type MerchantAmazonSellerItemSerpElementItem = (BaseMerchantAmazonSellersElementItem | null) & {
    [key: string]: unknown;
};

export type MerchantAmazonSellersTaskGetAdvancedResultInfo = {
    /**
     * asin received in a POST array
     * learn more about ASINs in this help center guide
     */
    asin?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain received in a POST array
     */
    se_domain?: string | null;
    /**
     * location code received in a POST array
     */
    location_code?: number | null;
    /**
     * language code received in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to Amazon results
     * you can use it to make sure the provided results are accurate
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * product title
     * title of the product relevant to the asin received in a POST array
     */
    title?: string | null;
    /**
     * product image url
     * image URL of the product relevant to the asin received in a POST array
     */
    image?: string | null;
    /**
     * types of search results found in Amazon Sellers SERP
     * contains types of all search results (items) found in the returned SERP
     * possible item types:
     * amazon_seller_main_item, amazon_seller_item
     */
    item_types?: Array<string | null> | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * items in SERP
     */
    items?: Array<BaseMerchantAmazonSellersElementItem | null> | null;
};

export type MerchantAmazonSellersTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantAmazonSellersTaskGetAdvancedResultInfo | null> | null;
};

export type MerchantAmazonSellersTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantAmazonSellersTaskGetAdvancedTaskInfo | null> | null;
};

export type MerchantAmazonSellersTaskGetHtmlResultInfo = {
    /**
     * ASIN received in a POST array
     */
    asin?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * elements of search results found on Amazon
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type MerchantAmazonSellersTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantAmazonSellersTaskGetHtmlResultInfo | null> | null;
};

export type MerchantAmazonSellersTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantAmazonSellersTaskGetHtmlTaskInfo | null> | null;
};

export type MerchantAmazonReviewsTaskPostRequestInfo = {
    /**
     * product ID
     * required field
     * unique product identifier (ASIN) on Amazon
     * you can receive the asin parameter by making a separate request to the Amazon Products endpoint
     */
    asin?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations with their location_name parameters by making a separate request to https://api.dataforseo.com/v3/merchant/amazon/locations
     * example:
     * HA1,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations with their location_code parameters by making a separate request to
     * https://api.dataforseo.com/v3/merchant/amazon/locations
     * example:
     * 9045969
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with their language_name parameters by making a separate request to
     * https://api.dataforseo.com/v3/merchant/amazon/languages
     * example:
     * English (United Kingdom)
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code parameters by making a separate request to https://api.dataforseo.com/v3/merchant/amazon/languages
     * example:
     * en_GB
     */
    language_code?: string | null;
    /**
     * search engine domain
     * optional field
     * we choose the relevant search engine domain automatically according to the location and language you specify
     * however, you can set a custom search engine domain in this field
     * example:
     * amazon.com, amazon.co.uk, amazon.fr, etc.
     */
    se_domain?: string | null;
    /**
     * parsing depth
     * optional field
     * number of reviews in SERP;
     * we strongly recommend setting the parsing depth in the multiples of ten, because our system processes ten reviews in a row;
     * maximum value: 50
     * default value: 10
     */
    depth?: number | null;
    /**
     * results sorting parameters
     * optional field
     * possible types of sorting:
     * helpful — for now, the only available sorting value;
     * default rule: helpful
     */
    sort_by?: string | null;
    /**
     * filter reviews by reviewer type
     * optional field
     * you can use this field to filter the results;
     * possible types of filtering:
     * all_reviews — return reviews from all reviewers;
     * avp_only_reviews — return reviews with the “Verified Purchase” mark only;
     * default rule: all_reviews
     */
    reviewer_type?: string | null;
    /**
     * filter reviews by stars
     * optional field
     * you can use this field to filter the results;
     * possible types of filtering:
     * all_stars — return reviews with any number of stars;
     * five_star — return five-star reviews only;
     * four_star — return four-star reviews only;
     * three_star — return three-star reviews only;
     * two_star — return two-star reviews only;
     * one_star — return one-star reviews only;
     * positive — return positive reviews only;
     * critical — return critical reviews only;
     * default rule: all_stars
     */
    filter_by_star?: string | null;
    /**
     * filter reviews by specified keyword
     * optional field
     * you can specify up to 300 characters in this field;
     * if you use this field, the response will only include reviews that contain the specified keyword
     */
    filter_by_keyword?: string | null;
    /**
     * filter reviews by media type
     * optional field
     * you can use this field to filter the results;
     * possible types of filtering:
     * all_contents — return text, image, and video reviews;
     * media_reviews_only — return image and video reviews only;
     * default rule: all_contents
     */
    media_type?: string | null;
    /**
     * filter reviews by product modification
     * optional field
     * you can use this field to filter the results;
     * possible types of filtering:
     * all_format — return reviews for all product modifications;
     * current_format — return reviews for the current product modification only;
     * default rule: all_format;
     * Note: ASINs vary depending on a product modification. Thus, two modifications of the same product will have two different ASINs. Make sure to specify the right ASIN when setting a task with the current_format parameter
     */
    format_type?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type MerchantAmazonReviewsTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type MerchantAmazonReviewsTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantAmazonReviewsTaskPostTaskInfo | null> | null;
};

export type MerchantAmazonReviewsTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * type of search engine
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the Amazon Reviews Advanced task
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the Amazon Reviews HTML task
     */
    endpoint_html?: string | null;
};

export type MerchantAmazonReviewsTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantAmazonReviewsTasksReadyResultInfo | null> | null;
};

export type MerchantAmazonReviewsTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantAmazonReviewsTasksReadyTaskInfo | null> | null;
};

export type MerchantAmazonReviewsTaskGetAdvancedResultInfo = {
    /**
     * asin received in a POST array
     */
    asin?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * autocorrection of the search engine
     * if the search engine provided results for a keyword that was corrected, we will specify the keyword corrected by the search engine and the type of autocorrection
     */
    spell?: SpellInfo | null;
    /**
     * title of the product on Amazon
     * the title of the product for which the reviews are collected
     */
    title?: string | null;
    /**
     * product image data
     */
    image?: AiModeImagesElementInfo | null;
    /**
     * rating of the product on Amazon
     * popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
    /**
     * the total number of reviews
     */
    reviews_count?: number | null;
    /**
     * type of search results in Amazon SERP
     * contains types of search results (items) found in Amazon SERP;
     * possible item types:
     * amazon_review_item
     */
    item_types?: Array<string | null> | null;
    /**
     * the number of reviews items in the results array
     * you can get more results by using the depth parameter when setting a task
     */
    items_count?: number | null;
    /**
     * found reviews
     * you can get more results by using the depth parameter when setting a task
     */
    items?: Array<AmazonReviewItem | null> | null;
};

export type MerchantAmazonReviewsTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantAmazonReviewsTaskGetAdvancedResultInfo | null> | null;
};

export type MerchantAmazonReviewsTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantAmazonReviewsTaskGetAdvancedTaskInfo | null> | null;
};

export type MerchantAmazonReviewsTaskGetHtmlResultInfo = {
    /**
     * ASIN received in a POST array
     */
    product_id?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * HTML pages and related data
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type MerchantAmazonReviewsTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<MerchantAmazonReviewsTaskGetHtmlResultInfo | null> | null;
};

export type MerchantAmazonReviewsTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<MerchantAmazonReviewsTaskGetHtmlTaskInfo | null> | null;
};

export type AppDataIdListRequestInfo = {
    /**
     * start time for filtering results
     * required field
     * if include_metadata is set to true, maximum value: a month from current datetime;
     * if include_metadata is set to false, maximum value: six months from current datetime;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_from?: string;
    /**
     * finish time for filtering results
     * required field
     * maximum value: current datetime;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-31 13:57:46 +00:00
     */
    datetime_to?: string;
    /**
     * the maximum number of returned task IDs
     * optional field
     * default value: 1000
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned task IDs
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten tasks in the results array will be omitted
     */
    offset?: number | null;
    /**
     * sorting by task execution time
     * optional field
     * possible values: "asc", "desc"
     * default value: "asc"
     */
    sort?: string | null;
    /**
     * include task metadata in the respond
     * optional field
     * default value: false
     */
    include_metadata?: boolean | null;
};

export type AppDataIdListResultInfo = {
    /**
     * id of the task
     */
    id?: string | null;
    /**
     * URL of the task
     * URL you used for making an API call
     */
    url?: string | null;
    /**
     * date and time when the task was made
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_posted?: string | null;
    /**
     * date and time when the task was completed
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_done?: string | null;
    /**
     * informational message of the task
     * you can find the full list of general informational messages here
     */
    status?: string | null;
    /**
     * cost of the task, USD
     */
    cost?: number | null;
    /**
     * contains parameters you specified in the POST request
     */
    metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | null;
    } | null;
};

export type AppDataIdListTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataIdListResultInfo | null> | null;
};

export type AppDataIdListResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataIdListTaskInfo | null> | null;
};

export type AppDataErrorsRequestInfo = {
    /**
     * the maximum number of returned tasks that responded with an error
     * optional field
     * default value: 1000
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned tasks
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten tasks in the results array will be omitted and the data will be provided for the successive tasks
     */
    offset?: number | null;
    /**
     * return tasks with a certain function
     * use this field to obtain a list of tasks that returned an error filtered by a certain function
     * you can filter the results by the values you receive in the function fields of the API response
     * i.e., once you receive unfiltered results, you can call this API again to filter them by function
     * example: app_data/task_get/advanced, postback_url, pingback_url
     */
    filtered_function?: string | null;
    /**
     * start time for filtering results
     * optional field
     * allows filtering results by the datetime parameter within the range of the last 7 days;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2021-11-15 12:57:46 +00:00
     */
    datetime_from?: string | null;
    /**
     * finish time for filtering results
     * optional field
     * allows filtering results by the datetime parameter within the range of the last 7 days;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2021-11-15 13:57:46 +00:00
     */
    datetime_to?: string | null;
};

export type AppDataErrorsResultInfo = {
    /**
     * id of the task
     */
    id?: string | null;
    /**
     * date and time when an error occurred
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * corresponding API function
     */
    function?: string | null;
    /**
     * error code
     */
    error_code?: number | null;
    /**
     * error message or error URL
     * error message (see full list) or URL that caused an error
     */
    error_message?: string | null;
    /**
     * URL that caused an error
     * URL you used for making an API call or pingback/postback URL
     */
    http_url?: string | null;
    /**
     * HTTP method
     */
    http_method?: string | null;
    /**
     * HTTP status code
     */
    http_code?: number | null;
    /**
     * time taken by HTTP request
     * for tasks set with a pingback/postback, this field will show the time it took your server to respond
     */
    http_time?: number | null;
    /**
     * HTTP response
     * server response
     */
    http_response?: string | null;
};

export type AppDataErrorsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataErrorsResultInfo | null> | null;
};

export type AppDataErrorsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataErrorsTaskInfo | null> | null;
};

export type AppDataGoogleCategoriesResultInfo = {
    /**
     * contains full list of supported app categories
     */
    categories?: Array<string | null> | null;
};

export type AppDataGoogleCategoriesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataGoogleCategoriesResultInfo | null> | null;
};

export type AppDataGoogleCategoriesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataGoogleCategoriesTaskInfo | null> | null;
};

export type AppDataGoogleLocationsResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the name of the superordinate location
     * example:
     * "location_code": 1006473,
     * "location_name": "Altrincham,England,United Kingdom",
     * "location_name_parent": "England,United Kingdom", where location_name_parent corresponds to:
     * "location_code": 20339,
     * "location_name": "England,United Kingdom"
     */
    location_name_parent?: string | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     */
    location_type?: string | null;
};

export type AppDataGoogleLocationsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataGoogleLocationsResultInfo | null> | null;
};

export type AppDataGoogleLocationsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataGoogleLocationsTaskInfo | null> | null;
};

export type AppDataGoogleLocationsCountryResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the name of the superordinate location
     * example:
     * "location_code": 1006473,
     * "location_name": "Altrincham,England,United Kingdom",
     * "location_name_parent": "England,United Kingdom", where location_name_parent corresponds to:
     * "location_code": 20339,
     * "location_name": "England,United Kingdom"
     */
    location_name_parent?: string | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     */
    location_type?: string | null;
};

export type AppDataGoogleLocationsCountryTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataGoogleLocationsCountryResultInfo | null> | null;
};

export type AppDataGoogleLocationsCountryResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataGoogleLocationsCountryTaskInfo | null> | null;
};

export type AppDataGoogleLanguagesResultInfo = {
    /**
     * language name
     */
    language_name?: string | null;
    /**
     * language code according to ISO 639-1
     */
    language_code?: string | null;
};

export type AppDataGoogleLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataGoogleLanguagesResultInfo | null> | null;
};

export type AppDataGoogleLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataGoogleLanguagesTaskInfo | null> | null;
};

export type AppDataGoogleAppSearchesTaskPostRequestInfo = {
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field;
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character);
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/app_data/google/locations
     * example:
     * West Los Angeles,California,United States
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engine with their location_code by making a separate request to https://api.dataforseo.com/v3/app_data/google/locations
     * example:
     * 9061121
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * optional field
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with language_name by making a separate request to https://api.dataforseo.com/v3/app_data/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * optional field
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to https://api.dataforseo.com/v3/app_data/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * parsing depth
     * optional field
     * number of results to be returned to be returned from the Google Play SERP;
     * we strongly recommend setting the parsing depth in the multiples of 30, because our system processes 30 results in a row;
     * default value: 30;
     * maximum value: 200;
     * Your account will be billed per each SERP containing up to 30 results;
     * Setting depth above 30 may result in additional charges if the search engine returns more than 30 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     */
    pingback_url?: string | null;
};

export type AppDataGoogleAppSearchesTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type AppDataGoogleAppSearchesTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataGoogleAppSearchesTaskPostTaskInfo | null> | null;
};

export type AppDataGoogleAppSearchesTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the Google App Searches task
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the Google App Searches HTML task
     * if HTML tasks are not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type AppDataGoogleAppSearchesTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataGoogleAppSearchesTasksReadyResultInfo | null> | null;
};

export type AppDataGoogleAppSearchesTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataGoogleAppSearchesTasksReadyTaskInfo | null> | null;
};

export type AppDataTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the Apple App Reviews task
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the Apple App Reviews HTML task
     * if HTML tasks are not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type AppDataTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataTasksReadyResultInfo | null> | null;
};

export type AppDataTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataTasksReadyTaskInfo | null> | null;
};

export type AppDataGoogleAppSearchesTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST request
     */
    keyword?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the total number of results
     */
    se_results_count?: number | null;
    /**
     * the number of items in the results array
     */
    items_count?: number | null;
    /**
     * found apps
     */
    items?: Array<GooglePlaySearchOrganic | null> | null;
};

export type AppDataGoogleAppSearchesTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataGoogleAppSearchesTaskGetAdvancedResultInfo | null> | null;
};

export type AppDataGoogleAppSearchesTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataGoogleAppSearchesTaskGetAdvancedTaskInfo | null> | null;
};

export type AppDataGoogleAppSearchesTaskGetHtmlResultInfo = {
    /**
     * keyword received in a POST request
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * HTML pages and related data
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type AppDataGoogleAppSearchesTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataGoogleAppSearchesTaskGetHtmlResultInfo | null> | null;
};

export type AppDataGoogleAppSearchesTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataGoogleAppSearchesTaskGetHtmlTaskInfo | null> | null;
};

export type AppDataGoogleAppListTaskPostRequestInfo = {
    /**
     * app collection
     * required field
     * app collection on Google Play from which apps will be collected;
     * you can specify the following values:
     * featured, topselling_paid, topselling_free, topselling_new_free, topselling_new_paid, topgrossing, movers_shakers
     * Note: if featured is selected, the app_category parameter cannot be used
     */
    app_collection?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/app_data/google/locations
     * example:
     * West Los Angeles,California,United States
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engine with their location_code by making a separate request to https://api.dataforseo.com/v3/app_data/google/locations
     * example:
     * 9061121
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if language_code is not specified
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with language_name by making a separate request to https://api.dataforseo.com/v3/app_data/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if language_name is not specified
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to https://api.dataforseo.com/v3/app_data/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * parsing depth
     * optional field
     * number of apps to be returned in the API response;
     * we strongly recommend setting the parsing depth in the multiples of 100, because our system processes 100 results in a row;
     * default value: 100;
     * maximum value: 200;
     * Your account will be billed per each SERP containing up to 100 results;
     * Setting depth above 100 may result in additional charges if the search engine returns more than 100 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * application category on Google Play
     * optional field
     * you can filter the results by app category;
     * example:
     * family;
     * you can receive the full list of available categories by making a separate request to https://api.dataforseo.com/v3/app_data/google/categories
     * Note: app_category cannot be used if app_collection parameter is set to featured
     */
    app_category?: string | null;
    /**
     * filter results by age rating
     * optional field
     * you can use this field to filter the results by age rating;
     * possible types of filtering:
     * ages_up_to_5 — return apps approved for children up to 5 years old;
     * ages_6_8 — return apps approved for children from 6 to 8 years old;
     * ages_9_12 — return apps approved for children from 9 to 12 years old;
     * by default, the API returns apps for all ages;
     * Note: this filter works only in conjunction with the "category": "family" parameter
     */
    age_rating?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     */
    pingback_url?: string | null;
};

export type AppDataGoogleAppListTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type AppDataGoogleAppListTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataGoogleAppListTaskPostTaskInfo | null> | null;
};

export type AppDataGoogleAppListTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the Google App List task
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the Google App List HTML task
     * if HTML tasks are not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type AppDataGoogleAppListTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataGoogleAppListTasksReadyResultInfo | null> | null;
};

export type AppDataGoogleAppListTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataGoogleAppListTasksReadyTaskInfo | null> | null;
};

export type AppDataGoogleAppListTaskGetAdvancedResultInfo = {
    /**
     * app collection received in a POST array
     */
    keyword?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the total number of results
     */
    se_results_count?: number | null;
    /**
     * the number of app items in the results array
     * you can get more results by using the depth parameter when setting a task
     */
    items_count?: number | null;
    /**
     * found apps
     */
    items?: Array<GooglePlaySearchOrganic | null> | null;
};

export type AppDataGoogleAppListTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataGoogleAppListTaskGetAdvancedResultInfo | null> | null;
};

export type AppDataGoogleAppListTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataGoogleAppListTaskGetAdvancedTaskInfo | null> | null;
};

export type AppDataGoogleAppListTaskGetHtmlResultInfo = {
    /**
     * app collection received in a POST array
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * HTML pages and related data
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type AppDataGoogleAppListTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataGoogleAppListTaskGetHtmlResultInfo | null> | null;
};

export type AppDataGoogleAppListTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataGoogleAppListTaskGetHtmlTaskInfo | null> | null;
};

export type AppDataGoogleAppInfoTaskPostRequestInfo = {
    /**
     * id of the app
     * required field
     * ID of the mobile application on Google Play;
     * you can find the ID in the URL of every app listed on Google Play;
     * example:
     * in the URL https://play.google.com/store/apps/details?id=org.telegram.messenger
     * the id is org.telegram.messenger
     */
    app_id?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/app_data/google/locations
     * example:
     * West Los Angeles,California,United States
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engine with their location_code by making a separate request to https://api.dataforseo.com/v3/app_data/google/locations
     * example:
     * 9061121
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if language_code is not specified
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with language_name by making a separate request to https://api.dataforseo.com/v3/app_data/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if language_name is not specified
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to https://api.dataforseo.com/v3/app_data/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     */
    pingback_url?: string | null;
};

export type AppDataGoogleAppInfoTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type AppDataGoogleAppInfoTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataGoogleAppInfoTaskPostTaskInfo | null> | null;
};

export type AppDataGoogleAppInfoTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the Google App Info task
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the Google App Info HTML task
     * if HTML tasks are not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type AppDataGoogleAppInfoTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataGoogleAppInfoTasksReadyResultInfo | null> | null;
};

export type AppDataGoogleAppInfoTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataGoogleAppInfoTasksReadyTaskInfo | null> | null;
};

export type AppsInfo = {
    /**
     * ID of the app
     */
    app_id?: string | null;
    /**
     * title of the app
     */
    title?: string | null;
    /**
     * URL to the app page on Google Play
     */
    url?: string | null;
};

export type GooglePlayInfoOrganic = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank among all the listed apps
     * absolute position among all apps on the list
     */
    rank_absolute?: number | null;
    /**
     * the alignment of the element in SERP
     * can take the following values: left
     */
    position?: string | null;
    /**
     * ID of the app
     */
    app_id?: string | null;
    /**
     * title of the app
     */
    title?: string | null;
    /**
     * URL to the app page on Google Play
     */
    url?: string | null;
    /**
     * URL to the app icon
     */
    icon?: string | null;
    /**
     * description of the app
     */
    description?: string | null;
    /**
     * the total number of reviews the app has
     */
    reviews_count?: number | null;
    /**
     * average rating of the app
     */
    rating?: RatingElement | null;
    /**
     * price of the app
     */
    price?: PriceInfo | null;
    /**
     * indicates whether the app is free
     */
    is_free?: boolean | null;
    /**
     * main category of the app
     */
    main_category?: string | null;
    /**
     * number of installs of the app
     * approximate number of installs as displayed on the app page
     */
    installs?: string | null;
    /**
     * number of installs of the app
     * the exact number of installs of the app
     */
    installs_count?: number | null;
    /**
     * name of the app developer
     */
    developer?: string | null;
    /**
     * ID of the app developer
     */
    developer_id?: string | null;
    /**
     * URL to the developer page on Google Play
     */
    developer_url?: string | null;
    /**
     * email address of the developer
     */
    developer_email?: string | null;
    /**
     * physical address of the developer
     */
    developer_address?: string | null;
    /**
     * official website of the developer
     */
    developer_website?: string | null;
    /**
     * current version of the app
     */
    version?: string | null;
    /**
     * minimum OS version required to install the app
     */
    minimum_os_version?: string | null;
    /**
     * size of the app
     */
    size?: string | null;
    /**
     * date and time when the app was released
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”;
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    released_date?: string | null;
    /**
     * date and time when the app was last updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”;
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    last_update_date?: string | null;
    /**
     * update notes
     * contains the latest update notes from the developer
     */
    update_notes?: string | null;
    /**
     * app images
     * contains URLs to the images published on the app page on Google Play
     */
    images?: Array<string | null> | null;
    /**
     * app videos
     * contains URLs to the video published on the app page on Google Play
     */
    videos?: Array<string | null> | null;
    /**
     * similar apps
     * displays apps similar to the app in a POST request
     */
    similar_apps?: Array<AppsInfo | null> | null;
    /**
     * similar apps
     * information about apps built by the same developer
     */
    more_apps_by_developer?: Array<AppsInfo | null> | null;
    /**
     * app genres
     * contains relevant app categories
     */
    genres?: Array<string | null> | null;
    /**
     * app tags
     * contains relevant app tags
     */
    tags?: Array<string | null> | null;
};

export type AppDataGoogleAppInfoTaskGetAdvancedResultInfo = {
    /**
     * application id received in a POST request
     */
    app_id?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the total number of results
     */
    se_results_count?: number | null;
    /**
     * the number of items in the results array
     */
    items_count?: number | null;
    /**
     * found app info
     */
    items?: Array<GooglePlayInfoOrganic | null> | null;
};

export type AppDataGoogleAppInfoTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataGoogleAppInfoTaskGetAdvancedResultInfo | null> | null;
};

export type AppDataGoogleAppInfoTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataGoogleAppInfoTaskGetAdvancedTaskInfo | null> | null;
};

export type AppDataGoogleAppInfoTaskGetHtmlResultInfo = {
    /**
     * application ID received in a POST request
     */
    app_id?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * HTML pages and related data
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type AppDataGoogleAppInfoTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataGoogleAppInfoTaskGetHtmlResultInfo | null> | null;
};

export type AppDataGoogleAppInfoTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataGoogleAppInfoTaskGetHtmlTaskInfo | null> | null;
};

export type AppDataGoogleAppReviewsTaskPostRequestInfo = {
    /**
     * id of the app
     * required field
     * ID of the mobile application on Google Play;
     * you can find the ID in the URL of every app listed on Google Play;
     * example:
     * https://play.google.com/store/apps/details?id=org.telegram.messenger
     */
    app_id?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/app_data/google/locations
     * example:
     * West Los Angeles,California,United States
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engine with their location_code by making a separate request to https://api.dataforseo.com/v3/app_data/google/locations
     * example:
     * 9061121
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with language_name by making a separate request to https://api.dataforseo.com/v3/app_data/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to https://api.dataforseo.com/v3/app_data/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * parsing depth
     * optional field
     * number of reviews to be returned in the API response;
     * we strongly recommend setting the parsing depth in the multiples of 150, because our system processes 150 reviews in a row;
     * default value: 150;
     * maximum value: 100000;
     * Your account will be billed per each SERP containing up to 150 results;
     * Setting depth above 150 may result in additional charges if the search engine returns more than 150 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * filter reviews by rating
     * optional field
     * you can use this field to filter the results;
     * possible types of filtering:
     * 5 — return reviews with five-star rating only;
     * 4 — return reviews with four-star rating only;
     * 3 — return reviews with three-star rating only;
     * 2 — return reviews with two-star rating only;
     * 1 — return reviews with one-star rating only;
     * by default, the API returns all reviews regardless of the number of stars
     */
    rating?: number | null;
    /**
     * results sorting parameters
     * optional field
     * you can use this field to sort the results;
     * possible types of sorting:
     * newest — sort by the most recent reviews;
     * most_relevant — sort by the most relevant reviews;
     * default rule: most_relevant
     */
    sort_by?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     */
    pingback_url?: string | null;
};

export type AppDataGoogleAppReviewsTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type AppDataGoogleAppReviewsTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataGoogleAppReviewsTaskPostTaskInfo | null> | null;
};

export type AppDataGoogleAppReviewsTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the Google App Reviews task
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the Google App Reviews HTML task
     * if HTML tasks are not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type AppDataGoogleAppReviewsTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataGoogleAppReviewsTasksReadyResultInfo | null> | null;
};

export type AppDataGoogleAppReviewsTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataGoogleAppReviewsTasksReadyTaskInfo | null> | null;
};

export type AppUserProfileInfo = {
    /**
     * profile name of the reviewer
     */
    profile_name?: string | null;
    /**
     * URL to the reviewer’s profile image
     */
    profile_image_url?: string | null;
};

export type ResponseDataInfo = {
    /**
     * author of the response
     */
    author?: string | null;
    /**
     * title of the response
     * in this case, will equal null
     */
    title?: string | null;
    /**
     * content of the response
     */
    text?: string | null;
    /**
     * date and time when the response was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”;
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
};

export type GooglePlayReviewsSearch = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank among all the listed reviews
     * absolute position among all reviews on the list
     */
    rank_absolute?: number | null;
    /**
     * the alignment of the review in SERP
     * can take the following values: left
     */
    position?: string | null;
    /**
     * version of the app
     * version of the app for which the review is submitted
     */
    version?: string | null;
    /**
     * the rating score submitted by the reviewer
     */
    rating?: RatingElement | null;
    /**
     * date and time when the review was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”;
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
    /**
     * id of the review
     */
    id?: string | null;
    /**
     * number of helpful votes
     * indicates how many users considered the review helpful and voted with the thumbs up icon
     */
    helpful_count?: number | null;
    /**
     * title of the review
     * Google Play doesn’t provide an option to title reviews, so this parameter will always equal null
     */
    title?: string | null;
    /**
     * content of the review
     */
    review_text?: string | null;
    /**
     * user profile of the reviewer
     */
    user_profile?: AppUserProfileInfo | null;
    /**
     * response from the developer
     */
    responses?: Array<ResponseDataInfo | null> | null;
};

export type AppDataGoogleAppReviewsTaskGetAdvancedResultInfo = {
    /**
     * application id received in a POST array
     */
    app_id?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * title of the app
     * title of the application for which the reviews are collected
     */
    title?: string | null;
    /**
     * rating of the app
     * rating of the application for which the reviews are collected
     */
    rating?: RatingElement | null;
    /**
     * the total number of reviews
     */
    reviews_count?: number | null;
    /**
     * the number of reviews items in the results array
     * you can get more results by using the depth parameter when setting a task
     */
    items_count?: number | null;
    /**
     * found reviews
     * you can get more results by using the depth parameter when setting a task
     */
    items?: Array<GooglePlayReviewsSearch | null> | null;
};

export type AppDataGoogleAppReviewsTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataGoogleAppReviewsTaskGetAdvancedResultInfo | null> | null;
};

export type AppDataGoogleAppReviewsTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataGoogleAppReviewsTaskGetAdvancedTaskInfo | null> | null;
};

export type AppDataGoogleAppReviewsTaskGetHtmlResultInfo = {
    /**
     * app id received in a POST array
     */
    app_id?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * HTML pages and related data
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type AppDataGoogleAppReviewsTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataGoogleAppReviewsTaskGetHtmlResultInfo | null> | null;
};

export type AppDataGoogleAppReviewsTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataGoogleAppReviewsTaskGetHtmlTaskInfo | null> | null;
};

export type AppDataGoogleAppListingsCategoriesResultInfo = {
    /**
     * name of the supported app category
     */
    category?: string | null;
    /**
     * number of app listings that make up the supported app category
     */
    count?: number | null;
};

export type AppDataGoogleAppListingsCategoriesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataGoogleAppListingsCategoriesResultInfo | null> | null;
};

export type AppDataGoogleAppListingsCategoriesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataGoogleAppListingsCategoriesTaskInfo | null> | null;
};

export type AppDataGoogleAppListingsSearchLiveRequestInfo = {
    /**
     * app categories
     * optional field
     * the categories you specify are used to search for app listings;
     * you can get the full list of available app listing categories by this link
     * you can specify up to 10 categories
     */
    categories?: Array<string> | null;
    /**
     * keyword in the app’s description
     * optional field
     * keywords that occur in the description of the app;
     * can contain up to 200 characters
     */
    description?: string | null;
    /**
     * keyword in the app’s title
     * optional field
     * keywords that occur in the title of the app;
     * can contain up to 200 characters
     */
    title?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, like, not_like
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["item.rating.value",">",3]
     * you can receive the list of available filters by making a separate request to https://api.dataforseo.com/v3/app_data/google/app_listings/available_filters
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting parameter
     * example:
     * ["item.installs_count,asc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["item.rating.value,desc","item.installs_count,asc"]
     */
    order_by?: Array<string> | null;
    /**
     * the maximum number of returned apps
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned apps
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten entities in the results array will be omitted and the data will be provided for the successive entities
     */
    offset?: number | null;
    /**
     * token for subsequent requests
     * optional field
     * provided in the identical filed of the response to each request;
     * use this parameter to avoid timeouts while trying to obtain over 100,000 results in a single request;
     * by specifying the unique offset_token value from the response array, you will get the subsequent results of the initial task;
     * offset_token values are unique for each subsequent task
     * Note: if the offset_token is specified in the request, all other parameters should be identical to the previous request
     */
    offset_token?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type AppDataGoogleAppListingsSearchLiveItem = {
    /**
     * ID of the returned app
     */
    app_id?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when SERP data was last updated
     * in the ISO 8601 format: “YYYY-MM-DDThh:mm:ss.sssssssZ”
     * example:
     * 2023-05-23 10:16:19 +00:00
     */
    time_update?: string | null;
    /**
     * detailed information about the app
     */
    item?: GooglePlayInfoOrganic | null;
};

export type AppDataGoogleAppListingsSearchLiveResultInfo = {
    /**
     * the total number of relevant results in the database
     */
    total_count?: number | null;
    /**
     * the number of items in the results array
     */
    count?: number | null;
    /**
     * offset in the results array of returned apps
     */
    offset?: number | null;
    /**
     * token for subsequent requests
     * you can use this parameter in the POST request to avoid timeouts while trying to obtain over 100,000 results in a single request
     */
    offset_token?: string | null;
    /**
     * array of apps and related data
     */
    items?: Array<AppDataGoogleAppListingsSearchLiveItem | null> | null;
};

export type AppDataGoogleAppListingsSearchLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataGoogleAppListingsSearchLiveResultInfo | null> | null;
};

export type AppDataGoogleAppListingsSearchLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataGoogleAppListingsSearchLiveTaskInfo | null> | null;
};

export type AppDataAppleCategoriesResultInfo = {
    /**
     * contains full list of supported app categories
     */
    categories?: Array<string | null> | null;
};

export type AppDataAppleCategoriesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataAppleCategoriesResultInfo | null> | null;
};

export type AppDataAppleCategoriesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataAppleCategoriesTaskInfo | null> | null;
};

export type AppDataAppleLocationsResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the name of the superordinate location
     * example:
     * "location_code": 1006473,
     * "location_name": "Altrincham,England,United Kingdom",
     * "location_name_parent": "England,United Kingdom", where location_name_parent corresponds to:
     * "location_code": 20339,
     * "location_name": "England,United Kingdom"
     * note: Apple App Data API currently supports countries only, that is why this value will always be null
     */
    location_name_parent?: string | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     */
    location_type?: string | null;
};

export type AppDataAppleLocationsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataAppleLocationsResultInfo | null> | null;
};

export type AppDataAppleLocationsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataAppleLocationsTaskInfo | null> | null;
};

export type AppDataAppleLanguagesResultInfo = {
    /**
     * language name
     */
    language_name?: string | null;
    /**
     * language code according to ISO 639-1
     */
    language_code?: string | null;
};

export type AppDataAppleLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataAppleLanguagesResultInfo | null> | null;
};

export type AppDataAppleLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataAppleLanguagesTaskInfo | null> | null;
};

export type AppDataAppleAppSearchesTaskPostRequestInfo = {
    /**
     * keyword
     * required field
     * you can specify up to 700 characters in the keyword field;
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character);
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if you need to use the “+” character for your keyword, please specify it as “%2B”
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/app_data/apple/locations
     * example:
     * West Los Angeles,California,United States
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engine with their location_code by making a separate request to https://api.dataforseo.com/v3/app_data/apple/locations
     * example:
     * 9061121
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if language_code is not specified
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with language_name by making a separate request to https://api.dataforseo.com/v3/app_data/apple/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if language_name is not specified
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to https://api.dataforseo.com/v3/app_data/apple/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * parsing depth
     * optional field
     * number of results to be returned from the App Store SERP;
     * we strongly recommend setting the parsing depth in the multiples of 100, because our system processes 100 results in a row;
     * default value: 100
     * maximum value: 700
     * Your account will be billed per each SERP containing up to 100 results;
     * Setting depth above 100 may result in additional charges if the search engine returns more than 100 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * advanced
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type AppDataAppleAppSearchesTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type AppDataAppleAppSearchesTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataAppleAppSearchesTaskPostTaskInfo | null> | null;
};

export type AppDataAppleAppSearchesTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the Apple App Searches task
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the Apple App Searches HTML task
     * if HTML tasks are not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type AppDataAppleAppSearchesTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataAppleAppSearchesTasksReadyResultInfo | null> | null;
};

export type AppDataAppleAppSearchesTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataAppleAppSearchesTasksReadyTaskInfo | null> | null;
};

export type AppDataAppleAppSearchesTaskGetAdvancedResultInfo = {
    /**
     * keyword received in a POST request
     */
    keyword?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * in this case, the value will be null
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the total number of results
     */
    se_results_count?: number | null;
    /**
     * the number of items in the results array
     */
    items_count?: number | null;
    /**
     * found apps
     */
    items?: Array<AppStoreSearchOrganic | null> | null;
};

export type AppDataAppleAppSearchesTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataAppleAppSearchesTaskGetAdvancedResultInfo | null> | null;
};

export type AppDataAppleAppSearchesTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataAppleAppSearchesTaskGetAdvancedTaskInfo | null> | null;
};

export type AppDataAppleAppInfoTaskPostRequestInfo = {
    /**
     * id of the app
     * required field
     * ID of the mobile application on App Store;
     * you can find the ID in the URL of every app listed on App Store;
     * example:
     * in the URL https://apps.apple.com/us/app/id835599320
     * the id is 835599320
     */
    app_id?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/app_data/apple/locations
     * example:
     * West Los Angeles,California,United States
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engine with their location_code by making a separate request to https://api.dataforseo.com/v3/app_data/apple/locations
     * example:
     * 9061121
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with language_name by making a separate request to https://api.dataforseo.com/v3/app_data/apple/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to https://api.dataforseo.com/v3/app_data/apple/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * advanced
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type AppDataAppleAppInfoTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type AppDataAppleAppInfoTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataAppleAppInfoTaskPostTaskInfo | null> | null;
};

export type AppDataAppleAppInfoTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the Apple App Info task
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the Apple App Info HTML task
     * if HTML tasks are not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type AppDataAppleAppInfoTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataAppleAppInfoTasksReadyResultInfo | null> | null;
};

export type AppDataAppleAppInfoTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataAppleAppInfoTasksReadyTaskInfo | null> | null;
};

export type AppStoreInfoOrganic = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank among all the listed apps
     * absolute position among all apps on the list
     */
    rank_absolute?: number | null;
    /**
     * the alignment of the element in SERP
     * can take the following values: left
     */
    position?: string | null;
    /**
     * ID of the app
     */
    app_id?: string | null;
    /**
     * title of the app
     */
    title?: string | null;
    /**
     * URL to the app page on App Store
     */
    url?: string | null;
    /**
     * URL to the app icon
     */
    icon?: string | null;
    /**
     * description of the app
     */
    description?: string | null;
    /**
     * the total number of reviews of the app
     */
    reviews_count?: number | null;
    /**
     * average rating of the app
     */
    rating?: RatingElement | null;
    /**
     * price of the app
     */
    price?: PriceInfo | null;
    /**
     * indicates whether the app is free
     */
    is_free?: boolean | null;
    /**
     * main category/genre of the app
     */
    main_category?: string | null;
    /**
     * all relevant categories/genres of the app
     */
    categories?: Array<string | null> | null;
    /**
     * languages supported in the app
     */
    languages?: Array<string | null> | null;
    /**
     * age rating and age-based content advisories
     */
    advisories?: Array<string | null> | null;
    /**
     * name of the app developer
     */
    developer?: string | null;
    /**
     * ID of the app developer
     */
    developer_id?: string | null;
    /**
     * URL to the developer page on App Store
     */
    developer_url?: string | null;
    /**
     * current version of the app
     */
    version?: string | null;
    /**
     * minimum OS version required to install the app
     */
    minimum_os_version?: string | null;
    /**
     * size of the app
     */
    size?: string | null;
    /**
     * date and time when the app was released
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”;
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    released_date?: string | null;
    /**
     * date and time when the app was last updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”;
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    last_update_date?: string | null;
    /**
     * update notes
     * contains the latest update notes from the developer
     */
    update_notes?: string | null;
    /**
     * app images
     * contains URLs to the images used on the app page on App Store
     */
    images?: Array<string | null> | null;
    /**
     * similar apps
     * displays apps similar to the app in a POST request
     */
    similar_apps?: Array<AppsInfo | null> | null;
    /**
     * similar apps
     * information about apps built by the same developer
     */
    more_apps_by_developer?: Array<AppsInfo | null> | null;
};

export type AppDataAppleAppInfoTaskGetAdvancedResultInfo = {
    /**
     * application id received in a POST request
     */
    app_id?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the total number of results
     */
    se_results_count?: number | null;
    /**
     * the number of items in the results array
     */
    items_count?: number | null;
    /**
     * found app info
     */
    items?: Array<AppStoreInfoOrganic | null> | null;
};

export type AppDataAppleAppInfoTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataAppleAppInfoTaskGetAdvancedResultInfo | null> | null;
};

export type AppDataAppleAppInfoTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataAppleAppInfoTaskGetAdvancedTaskInfo | null> | null;
};

export type AppDataAppleAppListTaskPostRequestInfo = {
    /**
     * app collection
     * required field
     * app collection on App Store from which apps will be collected;
     * you can specify the following values:
     * top_free_ios, top_paid_ios, top_grossing_ios, new_ios, new_free_ios, new_paid_ios
     */
    app_collection?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/app_data/apple/locations
     * example:
     * West Los Angeles,California,United States
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engine with their location_code by making a separate request to https://api.dataforseo.com/v3/app_data/apple/locations
     * example:
     * 9061121
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with language_name by making a separate request to https://api.dataforseo.com/v3/app_data/apple/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to https://api.dataforseo.com/v3/app_data/apple/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * parsing depth
     * optional field
     * number of apps to be returned from the App Store SERP;
     * we strongly recommend setting the parsing depth in the multiples of 100, because our system processes 100 results in a row;
     * default value: 100
     * maximum value: 1000
     * Your account will be billed per each SERP containing up to 100 results;
     * Setting depth above 100 may result in additional charges if the search engine returns more than 100 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * application category on the App Store
     * optional field
     * you can filter the results by app category;
     * example:
     * lifestyle;
     * you can review the full list of available categories here or by making a separate request to https://api.dataforseo.com/v3/app_data/apple/categories
     */
    app_category?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * advanced
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type AppDataAppleAppListTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type AppDataAppleAppListTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataAppleAppListTaskPostTaskInfo | null> | null;
};

export type AppDataAppleAppListTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the Apple App List task
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the Apple App List HTML task
     * if HTML tasks are not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type AppDataAppleAppListTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataAppleAppListTasksReadyResultInfo | null> | null;
};

export type AppDataAppleAppListTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataAppleAppListTasksReadyTaskInfo | null> | null;
};

export type AppDataAppleAppListTaskGetAdvancedResultInfo = {
    /**
     * app collection received in a POST array
     */
    keyword?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * in this case, the value will be null
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the total number of results
     */
    se_results_count?: number | null;
    /**
     * the number of app items in the results array
     * you can get more results by using the depth parameter when setting a task
     */
    items_count?: number | null;
    /**
     * found apps
     * you can get more results by using the depth parameter when setting a task
     */
    items?: Array<AppStoreSearchOrganic | null> | null;
};

export type AppDataAppleAppListTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataAppleAppListTaskGetAdvancedResultInfo | null> | null;
};

export type AppDataAppleAppListTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataAppleAppListTaskGetAdvancedTaskInfo | null> | null;
};

export type AppDataAppleAppReviewsTaskPostRequestInfo = {
    /**
     * id of the app
     * required field
     * ID of the mobile application on App Store;
     * you can find the ID in the URL of every app listed on App Store;
     * example:
     * in the URL https://apps.apple.com/us/app/id835599320
     * the id is 835599320
     */
    app_id?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * if you use this field, you don’t need to specify location_code
     * you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/app_data/apple/locations
     * example:
     * West Los Angeles,California,United States
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * if you use this field, you don’t need to specify location_name
     * you can receive the list of available locations of the search engine with their location_code by making a separate request to https://api.dataforseo.com/v3/app_data/apple/locations
     * example:
     * 9061121
     */
    location_code?: number | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with language_name by making a separate request to https://api.dataforseo.com/v3/app_data/apple/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to https://api.dataforseo.com/v3/app_data/apple/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * parsing depth
     * optional field
     * number of reviews to be returned in the API response;
     * we strongly recommend setting the parsing depth in the multiples of 50, because our system processes 50 reviews in a row;
     * default value: 50;
     * maximum value: 500;
     * Your account will be billed per each SERP containing up to 50 results;
     * Setting depth above 50 may result in additional charges if the search engine returns more than 50 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * results sorting parameters
     * optional field
     * you can use this field to sort the results;
     * possible types of sorting:
     * most_recent — sort by the most recent reviews;
     * most_helpful — sort by the most relevant reviews;
     * default rule: most_helpful
     */
    sort_by?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * advanced
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type AppDataAppleAppReviewsTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type AppDataAppleAppReviewsTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataAppleAppReviewsTaskPostTaskInfo | null> | null;
};

export type AppDataAppleAppReviewsTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     */
    se?: string | null;
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the Apple App Reviews task
     */
    endpoint_advanced?: string | null;
    /**
     * URL for collecting the results of the Apple App Reviews HTML task
     * if HTML tasks are not supported in the specified endpoint, the value will be null
     */
    endpoint_html?: string | null;
};

export type AppDataAppleAppReviewsTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataAppleAppReviewsTasksReadyResultInfo | null> | null;
};

export type AppDataAppleAppReviewsTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataAppleAppReviewsTasksReadyTaskInfo | null> | null;
};

export type AppStoreReviewsSearch = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank among all the listed reviews
     * absolute position among all reviews on the list
     */
    rank_absolute?: number | null;
    /**
     * the alignment of the review in SERP
     * can take the following values: left
     */
    position?: string | null;
    /**
     * version of the app
     * version of the app for which the review is submitted
     */
    version?: string | null;
    /**
     * the rating score submitted by the reviewer
     */
    rating?: RatingElement | null;
    /**
     * date and time when the review was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”;
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
    /**
     * id of the review
     */
    id?: string | null;
    /**
     * title of the review
     */
    title?: string | null;
    /**
     * content of the review
     */
    review_text?: string | null;
    /**
     * user profile of the reviewer
     */
    user_profile?: AppUserProfileInfo | null;
};

export type AppDataAppleAppReviewsTaskGetAdvancedResultInfo = {
    /**
     * application id received in a POST array
     */
    app_id?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * title of the app
     * title of the application for which the reviews are collected
     */
    title?: string | null;
    /**
     * rating of the app
     * rating of the application for which the reviews are collected
     */
    rating?: RatingElement | null;
    /**
     * the total number of reviews
     * in this case, the value will be null as App Store does not indicate the total number of app reviews
     */
    reviews_count?: number | null;
    /**
     * the number of reviews items in the results array
     * you can get more results by using the depth parameter when setting a task
     */
    items_count?: number | null;
    /**
     * found reviews
     */
    items?: Array<AppStoreReviewsSearch | null> | null;
};

export type AppDataAppleAppReviewsTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataAppleAppReviewsTaskGetAdvancedResultInfo | null> | null;
};

export type AppDataAppleAppReviewsTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataAppleAppReviewsTaskGetAdvancedTaskInfo | null> | null;
};

export type AppDataAppleAppListingsCategoriesResultInfo = {
    /**
     * name of the supported app category
     */
    category?: string | null;
    /**
     * number of app listings that make up the supported app category
     */
    count?: number | null;
};

export type AppDataAppleAppListingsCategoriesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataAppleAppListingsCategoriesResultInfo | null> | null;
};

export type AppDataAppleAppListingsCategoriesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataAppleAppListingsCategoriesTaskInfo | null> | null;
};

export type AppDataAppleAppListingsSearchLiveRequestInfo = {
    /**
     * app categories
     * optional field
     * the categories you specify are used to search for app listings;
     * you can get the full list of available app listing categories by this link
     * you can specify up to 10 categories
     */
    categories?: Array<string> | null;
    /**
     * keyword in the app’s description
     * optional field
     * keywords that occur in the description of the app;
     * can contain up to 200 characters
     */
    description?: string | null;
    /**
     * keyword in the app’s title
     * optional field
     * keywords that occur in the title of the app;
     * can contain up to 200 characters
     */
    title?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, like, not_like
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["rating.value",">",3]
     * you can receive the list of available filters by making a separate request to https://api.dataforseo.com/v3/app_data/apple/app_listings/available_filters
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting parameter
     * example:
     * ["item.rating.value,desc"]
     * note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["item.rating.value,desc","item.rating.value,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * the maximum number of returned apps
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned apps
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten entities in the results array will be omitted and the data will be provided for the successive entities
     */
    offset?: number | null;
    /**
     * token for subsequent requests
     * optional field
     * provided in the identical filed of the response to each request;
     * use this parameter to avoid timeouts while trying to obtain over 100,000 results in a single request;
     * by specifying the unique offset_token value from the response array, you will get the subsequent results of the initial task;
     * offset_token values are unique for each subsequent task
     * Note: if the offset_token is specified in the request, all other parameters should be identical to the previous request
     */
    offset_token?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type AppDataAppleAppListingsSearchLiveItem = {
    /**
     * ID of the returned app
     */
    app_id?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when SERP data was last updated
     * in the ISO 8601 format: “YYYY-MM-DDThh:mm:ss.sssssssZ”
     * example:
     * 2023-05-23 10:16:19 +00:00
     */
    time_update?: string | null;
    /**
     * detailed information about the app
     */
    item?: AppStoreInfoOrganic | null;
};

export type AppDataAppleAppListingsSearchLiveResultInfo = {
    /**
     * the total number of relevant results in the database
     */
    total_count?: number | null;
    /**
     * the number of items in the results array
     */
    count?: number | null;
    /**
     * offset in the results array of returned apps
     */
    offset?: number | null;
    /**
     * token for subsequent requests
     * you can use this parameter in the POST request to avoid timeouts while trying to obtain over 100,000 results in a single request
     */
    offset_token?: string | null;
    /**
     * array of apps and related data
     */
    items?: Array<AppDataAppleAppListingsSearchLiveItem | null> | null;
};

export type AppDataAppleAppListingsSearchLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppDataAppleAppListingsSearchLiveResultInfo | null> | null;
};

export type AppDataAppleAppListingsSearchLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppDataAppleAppListingsSearchLiveTaskInfo | null> | null;
};

export type BusinessDataIdListRequestInfo = {
    /**
     * start time for filtering results
     * required field
     * if include_metadata is set to true, maximum value: a month from current datetime;
     * if include_metadata is set to false, maximum value: six months from current datetime;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_from?: string;
    /**
     * finish time for filtering results
     * required field
     * maximum value: current datetime;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-31 13:57:46 +00:00
     */
    datetime_to?: string;
    /**
     * the maximum number of returned task IDs
     * optional field
     * default value: 1000
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned task IDs
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten tasks in the results array will be omitted
     */
    offset?: number | null;
    /**
     * sorting by task execution time
     * optional field
     * possible values: "asc", "desc"
     * default value: "asc"
     */
    sort?: string | null;
    /**
     * include task metadata in the respond
     * optional field
     * default value: false
     */
    include_metadata?: boolean | null;
};

export type BusinessDataIdListResultInfo = {
    /**
     * id of the task
     */
    id?: string | null;
    /**
     * URL of the task
     * URL you used for making an API call
     */
    url?: string | null;
    /**
     * date and time when the task was made
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_posted?: string | null;
    /**
     * date and time when the task was completed
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-15 12:57:46 +00:00
     */
    datetime_done?: string | null;
    /**
     * informational message of the task
     * you can find the full list of general informational messages here
     */
    status?: string | null;
    /**
     * cost of the task, USD
     */
    cost?: number | null;
    /**
     * contains parameters you specified in the POST request
     */
    metadata?: Array<string | null> | null;
};

export type BusinessDataIdListTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataIdListResultInfo | null> | null;
};

export type BusinessDataIdListResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataIdListTaskInfo | null> | null;
};

export type BusinessDataErrorsRequestInfo = {
    /**
     * the maximum number of returned tasks that responded with an error
     * optional field
     * default value: 1000
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned tasks
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten tasks in the results array will be omitted and the data will be provided for the successive tasks
     */
    offset?: number | null;
    /**
     * return tasks with a certain function
     * use this field to obtain a list of tasks that returned an error filtered by a certain function
     * you can filter the results by the values you receive in the function fields of the API response
     * i.e., once you receive unfiltered results, you can call this API again to filter them by function
     * example: hotel_searches/task_post, postback_url, pingback_url
     */
    filtered_function?: string | null;
    /**
     * start time for filtering results
     * optional field
     * allows filtering results by the datetime parameter within the range of the last 7 days;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2021-11-15 12:57:46 +00:00
     */
    datetime_from?: string | null;
    /**
     * finish time for filtering results
     * optional field
     * allows filtering results by the datetime parameter within the range of the last 7 days;
     * must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2021-11-15 13:57:46 +00:00
     */
    datetime_to?: string | null;
};

export type BusinessDataErrorsResultInfo = {
    /**
     * id of the task
     */
    id?: string | null;
    /**
     * date and time when an error occurred
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * corresponding API function
     */
    function?: string | null;
    /**
     * error code
     */
    error_code?: number | null;
    /**
     * error message or error URL
     * error message (see full list) or URL that caused an error
     */
    error_message?: string | null;
    /**
     * URL that caused an error
     * URL you used for making an API call or pingback/postback URL
     */
    http_url?: string | null;
    /**
     * HTTP method
     */
    http_method?: string | null;
    /**
     * HTTP status code
     */
    http_code?: number | null;
    /**
     * time taken by HTTP request
     * for tasks set with a pingback/postback, this field will show the time it took your server to respond
     */
    http_time?: number | null;
    /**
     * HTTP response
     * server response
     */
    http_response?: string | null;
};

export type BusinessDataErrorsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataErrorsResultInfo | null> | null;
};

export type BusinessDataErrorsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataErrorsTaskInfo | null> | null;
};

export type BusinessDataBusinessListingsLocationsResultInfo = {
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * number of businesses in this location in our database
     */
    business_count?: number | null;
};

export type BusinessDataBusinessListingsLocationsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataBusinessListingsLocationsResultInfo | null> | null;
};

export type BusinessDataBusinessListingsLocationsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataBusinessListingsLocationsTaskInfo | null> | null;
};

export type BusinessDataBusinessListingsCategoriesResultInfo = {
    /**
     * full name of the category
     */
    category_name?: string | null;
    /**
     * number of businesses in the category
     */
    business_count?: number | null;
};

export type BusinessDataBusinessListingsCategoriesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataBusinessListingsCategoriesResultInfo | null> | null;
};

export type BusinessDataBusinessListingsCategoriesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataBusinessListingsCategoriesTaskInfo | null> | null;
};

export type BusinessDataBusinessListingsAvailableFiltersResultInfo = {
    search?: {
        [key: string]: string | null;
    } | null;
    categories_aggregation?: {
        [key: string]: string | null;
    } | null;
};

export type BusinessDataBusinessListingsAvailableFiltersTaskInfo = BaseResponseTaskInfo & {
    result?: Array<BusinessDataBusinessListingsAvailableFiltersResultInfo | null> | null;
};

export type BusinessDataBusinessListingsAvailableFiltersResponseInfo = BaseResponseInfo & {
    tasks?: Array<BusinessDataBusinessListingsAvailableFiltersTaskInfo | null> | null;
};

export type BusinessDataBusinessListingsSearchLiveRequestInfo = {
    /**
     * business categories
     * optional field
     * the categories you specify are used to search for business listings;
     * if you don’t use this field, we will return business listings found in the specified location;
     * you can specify up to 10 categories
     */
    categories?: Array<string> | null;
    /**
     * description of the element in SERP
     * optional field
     * the description of the business entity for which the results are collected;
     * can contain up to 200 characters
     */
    description?: string | null;
    /**
     * title of the element in SERP
     * optional field
     * the name of the business entity for which the results are collected;
     * can contain up to 200 characters
     */
    title?: string | null;
    /**
     * indicates whether the business is verified by its owner on Google Maps
     * optional field
     */
    is_claimed?: boolean | null;
    /**
     * GPS coordinates of a location
     * optional field
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the value of “radius” is specified in kilometres (km)
     * the minimum value for “radius”: 1
     * the maximum value for “radius”: 100000
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, like, not_like, ilike, not_ilike, match, not_match
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["rating.value",">",3]
     * you can receive the list of available filters by making a separate request to https://api.dataforseo.com/v3/business_data/business_listings/available_filters
     */
    filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * results sorting rules
     * optional field
     * you can use the same values as in the filters array to sort the results
     * possible sorting types:
     * asc – results will be sorted in the ascending order
     * desc – results will be sorted in the descending order
     * you should use a comma to set up a sorting parameter
     * example:
     * ["rating.value,desc"]note that you can set no more than three sorting rules in a single request
     * you should use a comma to separate several sorting rules
     * example:
     * ["rating.value,desc","rating.votes_count,desc"]
     */
    order_by?: Array<string> | null;
    /**
     * the maximum number of returned businesses
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * offset in the results array of returned businesses
     * optional field
     * default value: 0
     * if you specify the 10 value, the first ten entities in the results array will be omitted and the data will be provided for the successive entities
     */
    offset?: number | null;
    /**
     * token for subsequent requests
     * optional field
     * provided in the identical filed of the response to each request;
     * use this parameter to avoid timeouts while trying to obtain over 100,000 results in a single request;
     * by specifying the unique offset_token value from the response array, you will get the subsequent results of the initial task;
     * offset_token values are unique for each subsequent task
     * Note: if the offset_token is specified in the request, all other parameters should be identical to the previous request
     */
    offset_token?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BusinessDataAttributesInfo = {
    /**
     * available attributes
     * indicates attributes a business entity can offer
     */
    available_attributes?: {
        [key: string]: Array<string | null> | null;
    } | null;
    /**
     * unavailable attributes
     * indicates attributes a business entity cannot offer
     */
    unavailable_attributes?: {
        [key: string]: Array<string | null> | null;
    } | null;
};

export type PeopleAlsoSearch = {
    /**
     * google-defined client id
     * unique id of a local establishment
     * learn more about the identifier in this help center article
     */
    cid?: string | null;
    /**
     * the unique identifier of the element in SERP
     * learn more about the identifier in this help center article
     */
    feature_id?: string | null;
    /**
     * title of the element in SERP
     * the name of the business entity for which the results are collected
     */
    title?: string | null;
    /**
     * the element’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
};

export type BusinessWorkHoursInfo = {
    /**
     * open hours
     * information about work hours of the local establishment
     */
    work_hours?: WorkHours | null;
};

export type PopularTimes = {
    /**
     * popular hours
     * information about busy hours of the local establishment on each day of the week
     */
    popular_times_by_days?: {
        [key: string]: Array<PopularWorkTimeInfo | null> | null;
    } | null;
};

export type BusinessDataContactInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * contact displayed in SERP
     * example:
     * "+119797979736"
     */
    value?: string | null;
    /**
     * data source
     */
    source?: string | null;
};

export type BusinessDataBusinessListingsSearchLiveItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of the element in SERP
     * the name of the business entity for which the results are collected
     */
    title?: string | null;
    /**
     * original title of the element
     * original title not translated by Google
     */
    original_title?: string | null;
    /**
     * description of the element in SERP
     * the description of the business entity for which the results are collected
     */
    description?: string | null;
    /**
     * business category
     * Google My Business general category that best describes the services provided by the business entity
     */
    category?: string | null;
    /**
     * global category IDs
     * universal category IDs that do not change based on the selected country
     */
    category_ids?: Array<string | null> | null;
    /**
     * additional business categories
     * additional Google My Business categories that describe the services provided by the business entity in more detail
     */
    additional_categories?: Array<string | null> | null;
    /**
     * google-defined client id
     * unique id of a local establishment
     * learn more about the identifier in this help center article
     */
    cid?: string | null;
    /**
     * the unique identifier of the element in SERP
     * learn more about the identifier in this help center article
     */
    feature_id?: string | null;
    /**
     * address of the business entity
     */
    address?: string | null;
    /**
     * object containing address components of the business entity
     */
    address_info?: AddressInfo | null;
    /**
     * unique place identifier
     * place id of the local establishment featured in the element
     * learn more about the identifier in this help center article
     */
    place_id?: string | null;
    /**
     * phone number of the business entity
     */
    phone?: string | null;
    /**
     * absolute url of the business entity
     */
    url?: string | null;
    /**
     * domain of the business entity
     */
    domain?: string | null;
    /**
     * URL of the logo featured in Google My Business profile
     */
    logo?: string | null;
    /**
     * URL of the main image featured in Google My Business profile
     */
    main_image?: string | null;
    /**
     * total count of images featured in Google My Business profile
     */
    total_photos?: number | null;
    /**
     * additional information on the business entity
     */
    snippet?: string | null;
    /**
     * latitude coordinate of the local establishments in google maps
     * example:
     * "latitude": 51.584091
     */
    latitude?: number | null;
    /**
     * longitude coordinate of the local establishment in google maps
     * example:
     * "longitude": -0.31365919999999997
     */
    longitude?: number | null;
    /**
     * shows whether the entity is verified by its owner on Google Maps
     */
    is_claimed?: boolean | null;
    /**
     * service details in a form of user-reviewed checks;
     * service details of a business entity displayed in a form of checks and based on user feedback and business category
     */
    attributes?: BusinessDataAttributesInfo | null;
    /**
     * keywords mentioned in customer reviews
     * contains most popular keywords related to products/services mentioned in customer reviews of a business entity and the number of reviews mentioning each keyword
     * example:
     * "place_topics": {
     * "egg roll": 48,
     * "birthday": 33
     * }
     */
    place_topics?: {
        [key: string]: number | null;
    } | null;
    rating?: (RatingInfo | null) & {
        /**
         * the type of rating
         * here you can find the following elements: Max5, Percents, CustomMax
         */
        rating_type?: string | null;
        /**
         * the value of the rating
         */
        value?: number | null;
        /**
         * the amount of feedback
         */
        votes_count?: number | null;
        /**
         * the maximum value for a rating_type
         */
        rating_max?: number | null;
    };
    /**
     * hotel class rating
     * class ratings range between 1-5 stars, learn more
     * if there is no hotel class rating information, the value will be null
     */
    hotel_rating?: number | null;
    /**
     * property price level
     * can take values: inexpensive, moderate, expensive, very_expensive
     * if there is no price level information, the value will be null
     */
    price_level?: string | null;
    /**
     * the distribution of ratings of the business entity
     * the object displays the number of 1-star to 5-star ratings, as reviewed by users
     */
    rating_distribution?: {
        [key: string]: number | null;
    } | null;
    /**
     * related business entities
     */
    people_also_search?: Array<PeopleAlsoSearch | null> | null;
    /**
     * work time details
     * information related to operational hours of the business entity
     */
    work_time?: BusinessWorkHoursInfo | null;
    /**
     * popular times
     * information related to busy hours of the business entity
     */
    popular_times?: PopularTimes | null;
    /**
     * available interactions with the business
     * list of options to interact with the business directly from search results
     */
    local_business_links?: Array<BaseLocalBusinessLink | null> | null;
    /**
     * available contacts of the business
     * list of contacts to interact with the business
     */
    contact_info?: Array<BusinessDataContactInfo | null> | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the data was last updated
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-01-26 09:03:15 +00:00
     */
    last_updated_time?: string | null;
    /**
     * date and time when our crawler found the business listing element for the first time
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2023-03-11 10:04:11 +00:00
     */
    first_seen?: string | null;
};

export type BusinessDataBusinessListingsSearchLiveResultInfo = {
    /**
     * total number of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * item types
     * the number of items in the items array
     */
    count?: number | null;
    /**
     * offset in the results array of returned businesses
     */
    offset?: number | null;
    /**
     * token for subsequent requests
     * by specifying the unique offset_token when setting a new task, you will get the subsequent results of the initial task;
     * offset_token values are unique for each subsequent task
     */
    offset_token?: string | null;
    /**
     * encountered item types
     * types of search engine results encountered in the items array;
     * possible item types: business_listing
     */
    items?: Array<BusinessDataBusinessListingsSearchLiveItem | null> | null;
};

export type BusinessDataBusinessListingsSearchLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataBusinessListingsSearchLiveResultInfo | null> | null;
};

export type BusinessDataBusinessListingsSearchLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataBusinessListingsSearchLiveTaskInfo | null> | null;
};

export type BusinessDataBusinessListingsCategoriesAggregationLiveRequestInfo = {
    /**
     * business categories
     * optional field
     * the categories you specify are used to search for business listings;
     * if you don’t use this field, we will return business listings found in the specified location;
     * you can specify up to 10 categories
     */
    categories?: Array<string> | null;
    /**
     * description of the element in SERP
     * optional field
     * the description of the business entity for which the results are collected;
     * can contain up to 200 characters
     */
    description?: string | null;
    /**
     * title of the element in SERP
     * optional field
     * the name of the business entity for which the results are collected;
     * can contain up to 200 characters
     */
    title?: string | null;
    /**
     * indicates whether the business is verified by its owner on Google Maps
     * optional field
     */
    is_claimed?: boolean | null;
    /**
     * GPS coordinates of a location
     * optional field
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 1
     * the maximum value for “radius”: 100000
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * array of results filtering parameters
     * optional field
     * you can add several filters at once (8 filters maximum)
     * you should set a logical operator and, or between the conditions
     * the following operators are supported:
     * regex, not_regex, <, <=, >, >=, =, <>, in, not_in, like, not_like, match, not_match
     * you can use the % operator with like and not_like to match any string of zero or more characters
     * example:
     * ["rating.value",">",3]
     * you can receive the list of available filters by making a separate request to https://api.dataforseo.com/v3/business_data/business_listings/available_filters
     */
    initial_dataset_filters?: Array<{
        [key: string]: unknown;
    } | null> | null;
    /**
     * maximum number of elements within internal arrays
     * optional field
     * you can use this field to limit the number of elements within the aggregated categories
     * default value: 10
     */
    internal_list_limit?: number | null;
    /**
     * the maximum number of returned businesses
     * optional field
     * default value: 100
     * maximum value: 1000
     */
    limit?: number | null;
    /**
     * the maximum number of returned businesses
     * optional field
     */
    offset?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BusinessListingAggregationInfo = {
    /**
     * the most mentioned related categories
     * top categories displayed with the number of businesses in each category
     */
    top_categories?: {
        [key: string]: number | null;
    } | null;
    /**
     * the most mentioned counties
     * country codes with the biggest number of businesses in the category
     */
    top_countries?: {
        [key: string]: number | null;
    } | null;
    /**
     * number of unique websites
     */
    websites_count?: number | null;
    /**
     * number of unique entities
     */
    count?: number | null;
    /**
     * the most mentioned service details
     * service details of a business entity displayed in a form of checks and the number of entities mentioning each attribute
     */
    top_attributes?: {
        [key: string]: number | null;
    } | null;
    /**
     * top keywords mentioned in customer reviews
     * contains most popular keywords related to products/services mentioned in customer reviews of a business entity and the number of reviews mentioning each keyword
     */
    top_place_topics?: {
        [key: string]: number | null;
    } | null;
};

export type BusinessDataBusinessListingsCategoriesAggregationLiveItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * business categories
     * Google My Business general category that best describes the cluster of related categories
     */
    categories?: Array<string | null> | null;
    aggregation?: (BusinessListingAggregationInfo | null) & {
        top_categories?: {
            [key: string]: number | null;
        } | null;
        top_countries?: {
            [key: string]: number | null;
        } | null;
        top_attributes?: {
            [key: string]: number | null;
        } | null;
        top_place_topics?: {
            [key: string]: number | null;
        } | null;
    };
};

export type BusinessDataBusinessListingsCategoriesAggregationLiveResultInfo = {
    /**
     * total number of results in our database relevant to your request
     */
    total_count?: number | null;
    /**
     * item types
     * the number of items in the items array
     */
    count?: number | null;
    /**
     * offset in the results array of returned categories
     */
    offset?: string | null;
    /**
     * token for subsequent requests
     * by specifying the unique offset_token when setting a new task, you will get the subsequent results of the initial task;
     * offset_token values are unique for each subsequent task
     */
    offset_token?: string | null;
    /**
     * encountered item types
     * types of search engine results encountered in the items array;
     * possible item types: business_category
     */
    items?: Array<BusinessDataBusinessListingsCategoriesAggregationLiveItem | null> | null;
};

export type BusinessDataBusinessListingsCategoriesAggregationLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataBusinessListingsCategoriesAggregationLiveResultInfo | null> | null;
};

export type BusinessDataBusinessListingsCategoriesAggregationLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataBusinessListingsCategoriesAggregationLiveTaskInfo | null> | null;
};

export type BusinessDataGoogleLocationsResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the name of the superordinate location
     * example:
     * "location_code": 9041134,
     * "location_name": "Vienna International Airport,Lower Austria,Austria",
     * "location_name_parent": "Lower Austria,Austria"
     */
    location_name_parent?: string | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     */
    location_type?: string | null;
};

export type BusinessDataGoogleLocationsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataGoogleLocationsResultInfo | null> | null;
};

export type BusinessDataGoogleLocationsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleLocationsTaskInfo | null> | null;
};

export type BusinessDataGoogleLocationsCountryResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the name of the superordinate location
     * example:
     * "location_code": 9041134,
     * "location_name": "Vienna International Airport,Lower Austria,Austria",
     * "location_name_parent": "Lower Austria,Austria"
     */
    location_name_parent?: string | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     */
    location_type?: string | null;
};

export type BusinessDataGoogleLocationsCountryTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataGoogleLocationsCountryResultInfo | null> | null;
};

export type BusinessDataGoogleLocationsCountryResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleLocationsCountryTaskInfo | null> | null;
};

export type BusinessDataGoogleLanguagesResultInfo = {
    /**
     * language name
     */
    language_name?: string | null;
    /**
     * language code according to ISO 639-1
     */
    language_code?: string | null;
};

export type BusinessDataGoogleLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataGoogleLanguagesResultInfo | null> | null;
};

export type BusinessDataGoogleLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleLanguagesTaskInfo | null> | null;
};

export type BusinessDataGoogleMyBusinessInfoTaskPostRequestInfo = {
    /**
     * keyword
     * required field
     * the keyword you specify should indicate the name of the local establishment
     * you can specify up to 700 characters in the keyword filed
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * this field can also be used to pass the following parameters:
     * cid – a unique, google-defined id of the business entity;
     * place_id – an identifier of the business entity in Google Maps;
     * spp – a unique identifier of local services featured in the local_pack element of Google SERP
     * example:
     * cid:194604053573767737
     * place_id:GhIJQWDl0CIeQUARxks3icF8U8A
     * spp:CgsvZy8xdGN4cWRraBoUChIJPZDrEzLsZIgRoNrpodC5P30
     * learn more about the cid and place_id identifiers in this help center article
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations with location_name by making a separate request to https://api.dataforseo.com/v3/business_data/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations with location_code by making a separate request to the https://api.dataforseo.com/v3/business_data/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9 (mm)
     * the maximum value for “radius”: 199999 (mm)
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with language_name by making a separate request to https://api.dataforseo.com/v3/business_data/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to https://api.dataforseo.com/v3/business_data/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type BusinessDataGoogleMyBusinessInfoTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type BusinessDataGoogleMyBusinessInfoTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleMyBusinessInfoTaskPostTaskInfo | null> | null;
};

export type BusinessDataGoogleMyBusinessInfoTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     * can take the following values: google
     */
    se?: string | null;
    /**
     * search engine specified when setting the task
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the task
     */
    endpoint?: string | null;
};

export type BusinessDataGoogleMyBusinessInfoTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataGoogleMyBusinessInfoTasksReadyResultInfo | null> | null;
};

export type BusinessDataGoogleMyBusinessInfoTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleMyBusinessInfoTasksReadyTaskInfo | null> | null;
};

export type BusinessDataTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     * can take the following values: tripadvisor
     */
    se?: string | null;
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the task
     */
    endpoint?: string | null;
};

export type BusinessDataTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataTasksReadyResultInfo | null> | null;
};

export type BusinessDataTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataTasksReadyTaskInfo | null> | null;
};

export type MapsSearch = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from the rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank among all the elements
     */
    rank_absolute?: number | null;
    /**
     * domain of the business entity
     */
    domain?: string | null;
    /**
     * directory title
     * can take the following values: At this place, Directory
     */
    title?: string | null;
    /**
     * URL to view the menu
     */
    url?: string | null;
    /**
     * the element’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
    /**
     * the distribution of ratings of the business entity
     * the object displays the number of 1-star to 5-star ratings, as reviewed by users
     */
    rating_distribution?: {
        [key: string]: number | null;
    } | null;
    /**
     * additional information about the business entity
     */
    snippet?: string | null;
    /**
     * address of the business entity
     */
    address?: string | null;
    /**
     * object containing address components of the business entity
     */
    address_info?: AddressInfo | null;
    /**
     * unique place identifier
     * place id of the local establishment featured in the element
     * learn more about the identifier in this help center article
     */
    place_id?: string | null;
    /**
     * phone number of the business entity
     */
    phone?: string | null;
    /**
     * URL of the main image featured in Google My Business profile
     */
    main_image?: string | null;
    /**
     * total count of images featured in Google My Business profile
     */
    total_photos?: string | null;
    /**
     * business category
     * Google My Business general category that best describes the services provided by the business entity
     */
    category?: string | null;
    /**
     * additional business categories
     * additional Google My Business categories that describe the services provided by the business entity in more detail
     */
    additional_categories?: Array<string> | null;
    /**
     * property price level
     * can take values: inexpensive, moderate, expensive, very_expensive
     * if there is no price level information, the value will be null
     */
    price_level?: string | null;
    /**
     * hotel class rating
     * class ratings range between 1-5 stars, learn more
     * if there is no hotel class rating information, the value will be null
     */
    hotel_rating?: string | null;
    /**
     * global category IDs
     * universal category IDs that do not change based on the selected country
     */
    category_ids?: Array<string> | null;
    /**
     * open hours
     * information about work hours of the local establishment
     */
    work_hours?: BusinessWorkHoursInfo | null;
    /**
     * the unique identifier of the element in SERP
     * learn more about the identifier in this help center article
     */
    feature_id?: string | null;
    /**
     * google-defined client id
     * unique id of a local establishment;
     * can be used with Google Reviews API to get a full list of reviews
     * learn more about the identifier in this help center article
     */
    cid?: string | null;
    /**
     * latitude coordinate of the local establishments in google maps
     * example:
     * "latitude": 51.584091
     */
    latitude?: number | null;
    /**
     * longitude coordinate of the local establishment in google maps
     * example:
     * "longitude": -0.31365919999999997
     */
    longitude?: number | null;
    /**
     * shows whether the entity is verified by its owner on Google Maps
     */
    is_claimed?: boolean | null;
    /**
     * Google local justifications
     * snippets of text that “justify” why the business is showing up for search query
     */
    local_justifications?: Array<string> | null;
    /**
     * business establishment is a part of the directory
     * indicates whether the business establishment is a part of the directory;
     * if true, the item is a part of the larger directory of businesses with the same address (e.g., a mall or a business centre);
     * note: if the business establishment is a parent item in the directory, the value will be null
     */
    is_directory_item?: boolean | null;
};

export type BusinessDirectoryInfo = {
    /**
     * title of the element
     * domain of the online menu system
     */
    title?: string | null;
    /**
     * encountered item types
     * types of search engine results encountered in the items array;
     * possible item types: google_business_info
     */
    items?: Array<MapsSearch | null> | null;
};

export type GoogleBusinessInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank among all the elements
     */
    rank_absolute?: number | null;
    /**
     * the alignment in SERP
     */
    position?: string | null;
    /**
     * title of the element in SERP
     * the name of the business entity for which the results are collected
     */
    title?: string | null;
    /**
     * original title of the element
     * original title not translated by Google
     */
    original_title?: string | null;
    /**
     * description of the element in SERP
     * the description of the business entity for which the results are collected
     */
    description?: string | null;
    /**
     * business category
     * Google My Business general category that best describes the services provided by the business entity
     */
    category?: string | null;
    /**
     * global category IDs
     * universal category IDs that do not change based on the selected country
     */
    category_ids?: Array<string> | null;
    /**
     * additional business categories
     * additional Google My Business categories that describe the services provided by the business entity in more detail
     */
    additional_categories?: Array<string> | null;
    /**
     * google-defined client id
     * unique id of a local establishment;
     * can be used with Google Reviews API to get a full list of reviews
     * learn more about the identifier in this help center article
     */
    cid?: string | null;
    /**
     * the unique identifier of the element in SERP
     * learn more about the identifier in this help center article
     */
    feature_id?: string | null;
    /**
     * address of the business entity
     */
    address?: string | null;
    /**
     * object containing address components of the business entity
     */
    address_info?: AddressInfo | null;
    /**
     * unique place identifier
     * place id of the local establishment featured in the element
     * learn more about the identifier in this help center article
     */
    place_id?: string | null;
    /**
     * phone number of the business entity
     */
    phone?: string | null;
    /**
     * absolute url of the business entity
     */
    url?: string | null;
    /**
     * URL of the preferred contact page
     */
    contact_url?: string | null;
    /**
     * URL of the user’s or entity’s Local Guides profile, if available
     */
    contributor_url?: string | null;
    /**
     * URL in the ‘book online’ button of the element
     * URL directing users to the online booking or order page of the business entity
     */
    book_online_url?: string | null;
    /**
     * domain of the business entity
     */
    domain?: string | null;
    /**
     * URL of the logo featured in Google My Business profile
     */
    logo?: string | null;
    /**
     * URL of the main image featured in Google My Business profile
     */
    main_image?: string | null;
    /**
     * total count of images featured in Google My Business profile
     */
    total_photos?: number | null;
    /**
     * additional information on the business entity
     */
    snippet?: string | null;
    /**
     * latitude coordinate of the local establishments in google maps
     * example:
     * "latitude": 51.584091
     */
    latitude?: number | null;
    /**
     * longitude coordinate of the local establishment in google maps
     * example:
     * "longitude": -0.31365919999999997
     */
    longitude?: number | null;
    /**
     * shows whether the entity is verified by its owner on Google Maps
     */
    is_claimed?: boolean | null;
    questions_and_answers_count?: number | null;
    /**
     * service details in a form of user-reviewed checks;
     * service details of a business entity displayed in a form of checks and based on user feedback and business category
     */
    attributes?: BusinessDataAttributesInfo | null;
    /**
     * keywords mentioned in customer reviews
     * contains most popular keywords related to products/services mentioned in customer reviews of a business entity and the number of reviews mentioning each keyword
     * example:
     * "place_topics": {
     * "egg roll": 48,
     * "birthday": 33
     * }
     */
    place_topics?: {
        [key: string]: number | null;
    } | null;
    /**
     * the element’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingInfo | null;
    /**
     * hotel class rating
     * class ratings range between 1-5 stars, learn more
     * if there is no hotel class rating information, the value will be null
     */
    hotel_rating?: number | null;
    /**
     * property price level
     * can take values: inexpensive, moderate, expensive, very_expensive
     * if there is no price level information, the value will be null
     */
    price_level?: string | null;
    /**
     * the distribution of ratings of the business entity
     * the object displays the number of 1-star to 5-star ratings, as reviewed by users
     */
    rating_distribution?: {
        [key: string]: number | null;
    } | null;
    /**
     * related business entities
     */
    people_also_search?: Array<PeopleAlsoSearch | null> | null;
    /**
     * work time details
     * information related to operational hours of the business entity
     */
    work_time?: BusinessWorkHoursInfo | null;
    /**
     * popular times
     * information related to busy hours of the business entity
     */
    popular_times?: PopularTimes | null;
    /**
     * available interactions with the business
     * list of options to interact with the business directly from search results
     */
    local_business_links?: Array<BaseLocalBusinessLink | null> | null;
    /**
     * business establishment is a part of the directory
     * indicates whether the business establishment is a part of the directory;
     * if true, the item is a part of the larger directory of businesses with the same address (e.g., a mall or a business centre);
     * note: if the business establishment is a parent item in the directory, the value will be null
     */
    is_directory_item?: boolean | null;
    /**
     * items of the directory
     * includes information about businesses that are located within the target business establishment and have the same address
     */
    directory?: BusinessDirectoryInfo | null;
};

export type BusinessDataGoogleMyBusinessInfoTaskGetResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     * this field will contain the cid parameter if you specified it in the keyword field when setting a task;
     * example:
     * cid:2946633002421908862
     * learn more about the parameter in this help center article
     */
    keyword?: string | null;
    /**
     * search engine domain as specified in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * item types
     * types of search engine results encountered in the items array;
     * possible item types: google_business_info
     */
    item_types?: Array<string | null> | null;
    /**
     * item types
     * the number of items in the items array
     */
    items_count?: number | null;
    /**
     * array of directory items
     */
    items?: Array<GoogleBusinessInfo | null> | null;
};

export type BusinessDataGoogleMyBusinessInfoTaskGetTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataGoogleMyBusinessInfoTaskGetResultInfo | null> | null;
};

export type BusinessDataGoogleMyBusinessInfoTaskGetResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleMyBusinessInfoTaskGetTaskInfo | null> | null;
};

export type BusinessDataGoogleMyBusinessInfoLiveRequestInfo = {
    /**
     * keyword
     * required field
     * the keyword you specify should indicate the name of the local establishment
     * you can specify up to 700 characters in the keyword filed
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * this field can also be used to pass the following parameters:
     * cid – a unique, google-defined id of the business entity;
     * place_id – an identifier of the business entity in Google Maps;
     * spp – a unique identifier of local services featured in the local_pack element of Google SERP
     * example:
     * cid:194604053573767737
     * place_id:GhIJQWDl0CIeQUARxks3icF8U8A
     * spp:CgsvZy8xdGN4cWRraBoUChIJPZDrEzLsZIgRoNrpodC5P30
     * learn more about the cid and place_id identifiers in this help center article
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations with location_name by making a separate request to https://api.dataforseo.com/v3/business_data/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations with location_code by making a separate request to the https://api.dataforseo.com/v3/business_data/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9 (mm)
     * the maximum value for “radius”: 199999 (mm)
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with language_name by making a separate request to https://api.dataforseo.com/v3/business_data/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to https://api.dataforseo.com/v3/business_data/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type ItemsGoogleBusinessInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank among all the elements
     */
    rank_absolute?: number | null;
    /**
     * the alignment in SERP
     */
    position?: string | null;
    /**
     * title of the element in SERP
     * the name of the business entity for which the results are collected
     */
    title?: string | null;
    /**
     * original title of the element
     * original title not translated by Google
     */
    original_title?: string | null;
    /**
     * description of the element in SERP
     * the description of the business entity for which the results are collected
     */
    description?: string | null;
    /**
     * business category
     * Google My Business general category that best describes the services provided by the business entity
     */
    category?: string | null;
    /**
     * global category IDs
     * universal category IDs that do not change based on the selected country
     */
    category_ids?: Array<string | null> | null;
    /**
     * additional business categories
     * additional Google My Business categories that describe the services provided by the business entity in more detail
     */
    additional_categories?: Array<string | null> | null;
    /**
     * google-defined client id
     * unique id of a local establishment;
     * can be used with Google Reviews API to get a full list of reviews
     * learn more about the identifier in this help center article
     */
    cid?: string | null;
    /**
     * the unique identifier of the element in SERP
     * learn more about the identifier in this help center article
     */
    feature_id?: string | null;
    /**
     * address of the business entity
     */
    address?: string | null;
    /**
     * object containing address components of the business entity
     */
    address_info?: AddressInfo | null;
    /**
     * unique place identifier
     * place id of the local establishment featured in the element
     * learn more about the identifier in this help center article
     */
    place_id?: string | null;
    /**
     * phone number of the business entity
     */
    phone?: string | null;
    /**
     * absolute url of the business entity
     */
    url?: string | null;
    /**
     * URL of the preferred contact page
     */
    contact_url?: string | null;
    /**
     * URL of the user’s or entity’s Local Guides profile, if available
     */
    contributor_url?: string | null;
    /**
     * URL in the ‘book online’ button of the element
     * URL directing users to the online booking or order page of the business entity
     */
    book_online_url?: string | null;
    /**
     * domain of the business entity
     */
    domain?: string | null;
    /**
     * URL of the logo featured in Google My Business profile
     */
    logo?: string | null;
    /**
     * URL of the main image featured in Google My Business profile
     */
    main_image?: string | null;
    /**
     * total count of images featured in Google My Business profile
     */
    total_photos?: number | null;
    /**
     * additional information on the business entity
     */
    snippet?: string | null;
    /**
     * latitude coordinate of the local establishments in google maps
     * example:
     * "latitude": 51.584091
     */
    latitude?: number | null;
    /**
     * longitude coordinate of the local establishment in google maps
     * example:
     * "longitude": -0.31365919999999997
     */
    longitude?: number | null;
    /**
     * shows whether the entity is verified by its owner on Google Maps
     */
    is_claimed?: boolean | null;
    /**
     * service details in a form of user-reviewed checks;
     * service details of a business entity displayed in a form of checks and based on user feedback and business category
     */
    attributes?: BusinessDataAttributesInfo | null;
    /**
     * keywords mentioned in customer reviews
     * contains most popular keywords related to products/services mentioned in customer reviews of a business entity and the number of reviews mentioning each keyword
     * example:
     * "place_topics": {
     * "egg roll": 48,
     * "birthday": 33
     * }
     */
    place_topics?: {
        [key: string]: number | null;
    } | null;
    /**
     * the element’s rating
     * the popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
    /**
     * hotel class rating
     * class ratings range between 1-5 stars, learn more
     * if there is no hotel class rating information, the value will be null
     */
    hotel_rating?: string | null;
    /**
     * property price level
     * can take values: inexpensive, moderate, expensive, very_expensive
     * if there is no price level information, the value will be null
     */
    price_level?: string | null;
    /**
     * the distribution of ratings of the business entity
     * the object displays the number of 1-star to 5-star ratings, as reviewed by users
     */
    rating_distribution?: {
        [key: string]: number | null;
    } | null;
    /**
     * related business entities
     */
    people_also_search?: Array<PeopleAlsoSearch | null> | null;
    /**
     * work time details
     * information related to operational hours of the business entity
     */
    work_time?: BusinessWorkHoursInfo | null;
    /**
     * popular times
     * information related to busy hours of the business entity
     */
    popular_times?: {
        [key: string]: unknown;
    } | null;
    /**
     * available interactions with the business
     * list of options to interact with the business directly from search results
     */
    local_business_links?: {
        [key: string]: unknown;
    } | null;
    /**
     * business establishment is a part of the directory
     * indicates whether the business establishment is a part of the directory;
     * if true, the item is a part of the larger directory of businesses with the same address (e.g., a mall or a business centre);
     * note: if the business establishment is a parent item in the directory, the value will be null
     */
    is_directory_item?: boolean | null;
    /**
     * items of the directory
     * includes information about businesses that are located within the target business establishment and have the same address
     */
    directory?: {
        [key: string]: unknown;
    } | null;
};

export type BusinessDataGoogleMyBusinessInfoLiveResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     * this field will contain the cid parameter if you specified it in the keyword field when setting a task;
     * example:
     * cid:2946633002421908862
     * learn more about the parameter in this help center article
     */
    keyword?: string | null;
    /**
     * search engine domain as specified in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * item types
     * types of search engine results encountered in the items array;
     * possible item types: google_business_info
     */
    item_types?: Array<string | null> | null;
    /**
     * item types
     * the number of items in the items array
     */
    items_count?: number | null;
    /**
     * encountered item types
     * types of search engine results encountered in the items array;
     * possible item types: google_business_info
     */
    items?: Array<ItemsGoogleBusinessInfo | null> | null;
};

export type BusinessDataGoogleMyBusinessInfoLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataGoogleMyBusinessInfoLiveResultInfo | null> | null;
};

export type BusinessDataGoogleMyBusinessInfoLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleMyBusinessInfoLiveTaskInfo | null> | null;
};

export type BusinessDataGoogleMyBusinessUpdatesTaskPostRequestInfo = {
    /**
     * keyword
     * required field
     * the keyword you specify should indicate the name of the local establishment
     * you can specify up to 700 characters in the keyword filed
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;this field can also be used to pass cid (unique, google-defined id of the business entity) or place_id (identifier of the business entity in Google Maps) parameters
     * example:
     * cid:194604053573767737
     * place_id:GhIJQWDl0CIeQUARxks3icF8U8A
     * learn more about the cid and place_id identifiers in this help center article
     */
    keyword?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations with location_name by making a separate request to the https://api.dataforseo.com/v3/business_data/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations with location_code by making a separate request to the https://api.dataforseo.com/v3/business_data/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with language_name by making a separate request to the https://api.dataforseo.com/v3/business_data/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the https://api.dataforseo.com/v3/business_data/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * parsing depth
     * optional field
     * number of updates in SERP
     * we strongly recommend setting the parsing depth in the multiples of ten, because our systems processes ten updates in a row
     * please note that Google returns 4490 updates maximum
     * default value: 10
     */
    depth?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type BusinessDataGoogleMyBusinessUpdatesTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type BusinessDataGoogleMyBusinessUpdatesTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleMyBusinessUpdatesTaskPostTaskInfo | null> | null;
};

export type BusinessDataGoogleMyBusinessUpdatesTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     * can take the following values: google
     */
    se?: string | null;
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the task
     */
    endpoint?: string | null;
};

export type BusinessDataGoogleMyBusinessUpdatesTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataGoogleMyBusinessUpdatesTasksReadyResultInfo | null> | null;
};

export type BusinessDataGoogleMyBusinessUpdatesTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleMyBusinessUpdatesTasksReadyTaskInfo | null> | null;
};

export type GoogleBusinessPost = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank among all the listed updates
     * absolute position among all present elements
     */
    rank_absolute?: number | null;
    /**
     * the alignment of the element in SERP
     * can take the following values: right
     */
    position?: string | null;
    /**
     * the XPath of the element
     */
    xpath?: string | null;
    /**
     * author of the post
     */
    author?: string | null;
    /**
     * additional content of a post
     */
    snippet?: string | null;
    /**
     * main content of a post
     */
    post_text?: string | null;
    /**
     * url of a post
     */
    url?: string | null;
    /**
     * url of an image included in the post
     */
    images_url?: string | null;
    /**
     * date when a post was published
     * in the following format:
     * "mm/dd/yyyy hh:mm:ss"
     */
    post_date?: string | null;
    /**
     * time when a post was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
    /**
     * links included in the post
     */
    links?: Array<LinkElement | null> | null;
};

export type BusinessDataGoogleMyBusinessUpdatesTaskGetResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     * this field will contain the cid parameter if you specified it in the keyword field when setting a task;
     * example:
     * cid:2946633002421908862
     * learn more about the parameter in this help center article
     */
    keyword?: string | null;
    /**
     * search engine domain as specified in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * identifier of the business updates element in SERP
     */
    business_updates_id?: string | null;
    /**
     * google-defined client id
     * unique id of a local establishment
     * learn more about the cid identifier in this help center article
     */
    cid?: string | null;
    /**
     * the unique identifier of the element in SERP
     * learn more about the identifier in this help center article
     */
    feature_id?: string | null;
    /**
     * item types
     * types of search engine results encountered in the items array;
     * possible item types: google_business_post
     */
    item_types?: Array<string | null> | null;
    /**
     * item types
     * the number of items in the items array
     */
    items_count?: number | null;
    /**
     * encountered item types
     * types of search engine results encountered in the items array;
     * possible item types: google_business_post
     */
    items?: Array<GoogleBusinessPost | null> | null;
};

export type BusinessDataGoogleMyBusinessUpdatesTaskGetTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataGoogleMyBusinessUpdatesTaskGetResultInfo | null> | null;
};

export type BusinessDataGoogleMyBusinessUpdatesTaskGetResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleMyBusinessUpdatesTaskGetTaskInfo | null> | null;
};

export type BusinessDataGoogleHotelSearchesTaskPostRequestInfo = {
    /**
     * keyword
     * optional field
     * the keyword you specify is used to search for the list of hotels;
     * if you don’t use this field, we will return the list of hotels found in a specified location;
     * you can specify up to 700 characters in the keyword filed
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * Note: in order to obtain accurate search results, the location name is appended to the keyword automatically
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations with location_name by making a separate request to https://api.dataforseo.com/v3/business_data/google/locations
     * example:
     * London,England,United Kingdom
     * Note: in order to obtain accurate search results, the location_name you specify will be automatically appended to the keyword
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations with location_code by making a separate request to the https://api.dataforseo.com/v3/business_data/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * Note: if the coordinates are used to set a location, the search will occur in the nearest settlement;
     * example:
     * 53.476225,-2.243572
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with language_name by making a separate request to https://api.dataforseo.com/v3/business_data/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to https://api.dataforseo.com/v3/business_data/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in Google Hotels
     * default value: 20 organic results
     * max value: 140
     * Note: your account will be billed per each 20 organic results regardless of paid listings in the response;
     * thus, setting a depth above 20 may result in additional charges if Google Hotels return more than 20 results;
     * if the specified depth is higher than the number of results in the response, the difference will be refunded automatically to your account balance
     */
    depth?: number | null;
    /**
     * check-in date
     * optional field
     * if you don’t specify this field, tomorrow’s date will be used by default;
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     * Note: the value cannot precede the today’s date
     */
    check_in?: string | null;
    /**
     * check-out date
     * optional field
     * if you don’t specify this field, our system will apply the date of two days from now by default;
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     * Note: the value cannot be less than or equal to check_in;
     * the range between check_in and check_out values cannot exceed 30 days
     */
    check_out?: string | null;
    /**
     * currency
     * optional field
     * example:
     * "USD"
     */
    currency?: string | null;
    /**
     * number of adults
     * optional field
     * if you don’t specify this field, the default value of 2 will be applied;
     * note that you can specify up to 6 persons including both adults and children
     * example:
     * 1
     */
    adults?: number | null;
    /**
     * number and age of children
     * optional field
     * if you don’t specify this field, no children will be included in the search;
     * age of child can be from 0 to 17;
     * note that you can specify up to 6 persons including both adults and children
     * set the following value if you want to include one 14-year-old child:
     * [14]
     * set the following value if you want to include one 13-year-old child and one 8-year-old child:
     * [13,8]
     */
    children?: Array<string> | null;
    /**
     * hotel stars
     * optional field
     * set this field to [5] if you want to get the list of 5-star hotels only
     * example:
     * [3,4,5]
     */
    stars?: Array<string> | null;
    /**
     * minimum rating
     * optional field
     * you can use this field to specify guest rating higher than a certain value
     * example:
     * 2.5
     */
    min_rating?: number | null;
    /**
     * results sorting parameters
     * optional field
     * you can use this field to sort the results
     * possible types of sorting:
     * relevance – sort by most relevant
     * lowest_price – sort by the lowest price
     * highest_rating – sort by highest rating
     * most_reviewed – sort by most reviewed
     * default value: relevance
     */
    sort_by?: string | null;
    /**
     * minimum price per night
     * optional field
     * the currency of this value depends on the currency field
     * example:
     * 100
     */
    min_price?: number | null;
    /**
     * maximum price per night
     * optional field
     * the currency of this value depends on the currency field
     * example:
     * 600
     */
    max_price?: number | null;
    /**
     * hotels with a free cancellation
     * optional field
     * set this field to true if you want to get the list of hotels with free cancellation of reservations
     * default value: false
     */
    free_cancellation?: boolean | null;
    /**
     * search for vacation rentals
     * optional field
     * set this field to true if you want to get the list of vacation rentals instead of hotels
     * default value: false
     */
    is_vacation_rentals?: boolean | null;
    /**
     * hotel amenities
     * optional field
     * you can use this field to specify different hotel amenities
     * example:
     * [
     * "free_parking",
     * "pets_allowed"
     * ]
     *
     * possible values:
     * "air_conditioning",
     * "all_inclusive_available",
     * "bar",
     * "free_breakfast",
     * "fitness_center",
     * "kid_friendly",
     * "free_parking",
     * "pets_allowed",
     * "pool",
     * "restaurant",
     * "room_service",
     * "spa",
     * "free_wifi",
     * "parking",
     * "indoor_pool",
     * "outdoor_pool",
     * "wheelchair_accessible",
     * "beach_access"
     */
    amenities?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type BusinessDataGoogleHotelSearchesTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type BusinessDataGoogleHotelSearchesTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleHotelSearchesTaskPostTaskInfo | null> | null;
};

export type BusinessDataGoogleHotelSearchesTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     * can take the following values: google
     */
    se?: string | null;
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the task
     */
    endpoint?: string | null;
};

export type BusinessDataGoogleHotelSearchesTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataGoogleHotelSearchesTasksReadyResultInfo | null> | null;
};

export type BusinessDataGoogleHotelSearchesTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleHotelSearchesTasksReadyTaskInfo | null> | null;
};

export type GpsCoordinatesLocationInfo = {
    /**
     * latitude coordinate of the hotel in google maps
     * example:
     * "latitude": 51.584091
     */
    latitude?: number | null;
    /**
     * longitude coordinate of the hotel in google maps
     * example:
     * "longitude": -0.31365919999999997
     */
    longitude?: number | null;
};

/**
 * featured price offers
 */
export type HotelInfoPriceOffer = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of the hotel
     */
    title?: string | null;
    /**
     * price per night
     */
    price?: number | null;
    /**
     * price currency
     * USD is applied by default, unless specified in the POST array
     */
    currency?: string | null;
    /**
     * url of the price offer
     * URL to the page of the website where price offer appears
     */
    url?: string | null;
    /**
     * the maximal number of visitors
     * the maximum number of visitors for which the price offer is valid
     */
    max_visitors?: number | null;
    /**
     * price offer images
     * URLs of the images featured in the price offer
     */
    offer_images?: Array<string | null> | null;
    /**
     * date until free cancellation is available
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * equals null if free cancellation is not available for the selected dates
     */
    free_cancellation_until?: string | null;
};

export type HotelPriceItemInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * title of the hotel
     */
    title?: string | null;
    /**
     * price per night
     */
    price?: number | null;
    /**
     * price currency
     * USD is applied by default, unless specified in the POST array
     */
    currency?: string | null;
    /**
     * third-party page url
     * URL to the third-party website page with pricing information
     */
    url?: string | null;
    /**
     * third-party domain
     * domain of the third-party website page with pricing information
     */
    domain?: string | null;
    /**
     * indicates a paid hotel listing
     * if true, related hotel_search_item is a paid ad
     * if false, related hotel_search_item is an organic hotel listing
     */
    is_paid?: boolean | null;
    /**
     * date until which free cancellation is available
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * equals null if free cancellation is not available for the selected dates
     */
    free_cancellation_until?: string | null;
    /**
     * featured price offers
     */
    offers?: Array<HotelInfoPriceOffer | null> | null;
};

export type PricesByDates = {
    /**
     * price per night
     */
    price?: number | null;
    /**
     * price currency
     * USD is applied by default, unless specified in the POST array
     */
    currency?: string | null;
    check_in_date?: string | null;
    check_out_date?: string | null;
};

export type HotelPriceInfo = {
    /**
     * price per night
     */
    price?: number | null;
    /**
     * full price per night without a discount applied
     */
    price_without_discount?: number | null;
    /**
     * price currency
     * USD is applied by default, unless specified in the POST array
     */
    currency?: string | null;
    /**
     * text about a discount applied
     */
    discount_text?: string | null;
    /**
     * check-in date and time
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    check_in?: string | null;
    /**
     * check-out date and time
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    check_out?: string | null;
    /**
     * number of hotel visitors for this price
     */
    visitors?: number | null;
    /**
     * encountered item types
     * types of search engine results encountered in the items array;
     * possible item types: hotel_search_item
     */
    items?: Array<HotelPriceItemInfo | null> | null;
    prices_by_dates?: Array<PricesByDates | null> | null;
};

export type BusinessDataGoogleHotelSearchesItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * unique identifier of a hotel entity in Google search
     * example:
     * CgoI-KWyzenM_MV3EAE
     */
    hotel_identifier?: string | null;
    /**
     * title of the hotel
     */
    title?: string | null;
    /**
     * hotel class rating
     * class rating that ranges between 1-5 stars
     */
    stars?: number | null;
    /**
     * indicates a paid hotel listing
     * if true, related hotel_search_item is a paid ad
     * if false, related hotel_search_item is an organic hotel listing
     */
    is_paid?: boolean | null;
    /**
     * GPS coordinates of the hotel’s location
     */
    location?: GpsCoordinatesLocationInfo | null;
    /**
     * hotel reviews and rating information
     */
    reviews?: HotelReviewInfo | null;
    /**
     * featured images for a hotel
     */
    overview_images?: Array<string | null> | null;
    /**
     * hotel price
     */
    prices?: HotelPriceInfo | null;
};

export type BusinessDataGoogleHotelSearchesTaskGetResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character);
     * in order to obtain accurate search results, the location name is appended to the keyword automatically
     */
    keyword?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * item types
     * the number of items in the items array
     */
    items_count?: number | null;
    /**
     * array of items
     * note: this field always equals null; use it to facilitate integration and ensure interoperability with the Hotel Info endpoint
     */
    items?: Array<BusinessDataGoogleHotelSearchesItem | null> | null;
};

export type BusinessDataGoogleHotelSearchesTaskGetTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataGoogleHotelSearchesTaskGetResultInfo | null> | null;
};

export type BusinessDataGoogleHotelSearchesTaskGetResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleHotelSearchesTaskGetTaskInfo | null> | null;
};

export type BusinessDataGoogleHotelSearchesLiveRequestInfo = {
    /**
     * keyword
     * optional field
     * the keyword you specify is used to search for the list of hotels;
     * if you don’t use this field, we will return the list of hotels found in a specified location;
     * you can specify up to 700 characters in the keyword filed
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * Note: in order to obtain accurate search results, the location name is appended to the keyword automatically
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations with location_name by making a separate request to https://api.dataforseo.com/v3/business_data/google/locations
     * example:
     * London,England,United Kingdom
     * Note: in order to obtain accurate search results, the location_name you specify will be automatically appended to the keyword
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations with location_code by making a separate request to the https://api.dataforseo.com/v3/business_data/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * Note: if the coordinates are used to set a location, the search will occur in the nearest settlement
     * example:
     * 53.476225,-2.243572
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with language_name by making a separate request to https://api.dataforseo.com/v3/business_data/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to https://api.dataforseo.com/v3/business_data/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in Google Hotels
     * default value: 20 organic results
     * max value: 140
     * Note: your account will be billed per each 20 organic results regardless of paid listings in the response;
     * thus, setting a depth above 20 may result in additional charges if Google Hotels return more than 20 results;
     * if the specified depth is higher than the number of results in the response, the difference will be refunded automatically to your account balance
     */
    depth?: number | null;
    /**
     * check-in date
     * optional field
     * if you don’t specify this field, tomorrow’s date will be used by default;
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     * Note: the value cannot precede the today’s date
     */
    check_in?: string | null;
    /**
     * check-out date
     * optional field
     * if you don’t specify this field, our system will apply the date of two days from now by default;
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     * Note: the value cannot be less than or equal to check_in;
     * the range between check_in and check_out values cannot exceed 30 days
     */
    check_out?: string | null;
    /**
     * currency
     * optional field
     * example:
     * "USD"
     */
    currency?: string | null;
    /**
     * number of adults
     * optional field
     * if you don’t specify this field, the default value of 2 will be applied;
     * note that you can specify up to 6 persons including both adults and children
     * example:
     * 1
     */
    adults?: number | null;
    /**
     * number and age of children
     * optional field
     * if you don’t specify this field, no children will be included in the search;
     * age of child can be from 0 to 17;
     * note that you can specify up to 6 persons including both adults and children
     * set the following value if you want to include one 14-year-old child:
     * [14]
     * set the following value if you want to include one 13-year-old child and one 8-year-old child:
     * [13,8]
     */
    children?: Array<string> | null;
    /**
     * hotel stars
     * optional field
     * set this field to [5] if you want to get the list of 5-star hotels only
     * example:
     * [3,4,5]
     */
    stars?: Array<string> | null;
    /**
     * minimum rating
     * optional field
     * you can use this field to specify guest rating higher than a certain value
     * example:
     * 2.5
     */
    min_rating?: number | null;
    /**
     * results sorting parameters
     * optional field
     * you can use this field to sort the results
     * possible types of sorting:
     * relevance – sort by most relevant
     * lowest_price – sort by the lowest price
     * highest_rating – sort by highest rating
     * most_reviewed – sort by most reviewed
     * default value: relevance
     */
    sort_by?: string | null;
    /**
     * minimum price per night
     * optional field
     * the currency of this value depends on the currency field
     * example:
     * 100
     */
    min_price?: number | null;
    /**
     * maximum price per night
     * optional field
     * the currency of this value depends on the currency field
     * example:
     * 600
     */
    max_price?: number | null;
    /**
     * hotels with a free cancellation
     * optional field
     * set this field to true if you want to get the list of hotels with free cancellation of reservations
     * default value: false
     */
    free_cancellation?: boolean | null;
    /**
     * search for vacation rentals
     * optional field
     * set this field to true if you want to get the list of vacation rentals instead of hotels
     * default value: false
     */
    is_vacation_rentals?: boolean | null;
    /**
     * hotel amenities
     * optional field
     * you can use this field to specify different hotel amenities
     * example:
     * [
     * "free_parking",
     * "pets_allowed"
     * ]
     *
     * possible values:
     * "air_conditioning",
     * "all_inclusive_available",
     * "bar",
     * "free_breakfast",
     * "fitness_center",
     * "kid_friendly",
     * "free_parking",
     * "pets_allowed",
     * "pool",
     * "restaurant",
     * "room_service",
     * "spa",
     * "free_wifi",
     * "parking",
     * "indoor_pool",
     * "outdoor_pool",
     * "wheelchair_accessible",
     * "beach_access"
     */
    amenities?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BusinessDataGoogleHotelSearchesLiveResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * item types
     * the number of items in the items array
     */
    items_count?: number | null;
    /**
     * array of items
     * note: this field always equals null; use it to facilitate integration and ensure interoperability with the Hotel Info endpoint
     */
    items?: Array<BusinessDataGoogleHotelSearchesItem | null> | null;
};

export type BusinessDataGoogleHotelSearchesLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataGoogleHotelSearchesLiveResultInfo | null> | null;
};

export type BusinessDataGoogleHotelSearchesLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleHotelSearchesLiveTaskInfo | null> | null;
};

export type BusinessDataGoogleHotelInfoTaskPostRequestInfo = {
    /**
     * unique hotel identifier
     * required field if you don’t specify keyword
     * if you use this field, you don’t need to specify keyword
     * unique identifier of a hotel entity in Google search;
     * you can obtain the value by making a request to Advanced Google SERP API (enclosed in the hotels_pack element of the response), or the Hotel Searches endpoint of Business Data API
     * example:
     * ChYIq6SB--i6p6cpGgovbS8wN2s5ODZfEAE
     */
    hotel_identifier?: string | null;
    /**
     * keyword
     * required field if you don’t specify hotel_identifier
     * if you use this field, you don’t need to specify hotel_identifier
     * the keyword you specify should indicate the name of the hotel entity
     * you can specify up to 700 characters in the keyword filed
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”
     */
    keyword?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations with location_name by making a separate request to https://api.dataforseo.com/v3/business_data/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations with location_code by making a separate request to the https://api.dataforseo.com/v3/business_data/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * Note: if the coordinates are used to set a location, the search will occur in the nearest settlement;
     * example:
     * 53.476225,-2.243572
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with language_name by making a separate request to https://api.dataforseo.com/v3/business_data/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to https://api.dataforseo.com/v3/business_data/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * check-in date
     * optional field
     * if you don’t specify this field, tomorrow’s date will be used by default;
     * the value must not be earlier than today’s date
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    check_in?: string | null;
    /**
     * check-out date
     * optional field
     * if you don’t specify this field, our system will apply the date of two days from now by default;
     * Note: the value cannot be less than or equal to check_in;
     * the range between check_in and check_out values cannot exceed 30 days
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    check_out?: string | null;
    /**
     * currency
     * optional field
     * example:
     * "USD"
     */
    currency?: string | null;
    /**
     * number of adults
     * optional field
     * if you don’t specify this field, two adults will be used by default
     * example:
     * 1
     */
    adults?: number | null;
    /**
     * number and age of children
     * optional field
     * if you don’t specify this field, no children will be included in the search;
     * set the following value if you want to include one 14-years-old child:
     * [14]
     * set the following value if you want to include one 13-years-old child and one 8-years-old child:
     * [13,8]
     */
    children?: Array<string> | null;
    /**
     * load hotel stay prices by dates
     * optional field
     * if you specify this parameter with true, the response will include the prices_by_dates array with hotel stay prices divided by dates
     * if you use this parameter, you will be charged double the base price for a request
     */
    load_prices_by_dates?: boolean | null;
    /**
     * start date to load prices by dates
     * optional field
     * to use this parameter, you must specify load_prices_by_dates with true
     * if this parameter is not specified, the start date is set to check_in date
     * date format: yyyy-mm-dd
     * example:
     * 2025-05-20
     */
    prices_start_date?: string | null;
    /**
     * end date to load prices by dates
     * optional field
     * to use this parameter, you must specify load_prices_by_dates with true
     * if this parameter is not specified, you will get prices by date for the month
     * date format: yyyy-mm-dd
     * example:
     * 2025-05-21
     */
    prices_end_date?: string | null;
    /**
     * predefined period for retrieving daily price data
     * optional field
     * to use this parameter, you must specify load_prices_by_dates with true
     * if the prices_start_date is not specified, the start date is set to check_in date
     * possible values: month, three_months, six_months, year
     * default value: month
     */
    prices_date_range?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255;
     * you can use this parameter to identify the task and match it with the result;
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified;
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request;
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * postback_url datatype
     * required field if you specify postback_url
     * corresponds to the datatype that will be sent to your server
     * possible values:
     * advanced, html
     */
    postback_data?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified;
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable;
     * we will set the necessary values before sending the request;
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type BusinessDataGoogleHotelInfoTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type BusinessDataGoogleHotelInfoTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleHotelInfoTaskPostTaskInfo | null> | null;
};

export type BusinessDataGoogleHotelInfoTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     * can take the following values: google
     */
    se?: string | null;
    /**
     * search engine specified when setting the task
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the task
     */
    endpoint?: string | null;
};

export type BusinessDataGoogleHotelInfoTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataGoogleHotelInfoTasksReadyResultInfo | null> | null;
};

export type BusinessDataGoogleHotelInfoTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleHotelInfoTasksReadyTaskInfo | null> | null;
};

export type HotelAmenityItemInfo = {
    /**
     * standardised amenity name
     */
    amenity?: string | null;
    /**
     * displayed amenity name
     */
    amenity_label?: string | null;
    /**
     * standardised details about the amenity
     */
    hint?: string | null;
    /**
     * displayed details about the amenity
     */
    hint_label?: string | null;
    /**
     * indicates whether the amenity is available in the hotel
     */
    is_available?: boolean | null;
};

export type HotelAmenityInfo = {
    /**
     * standardised category of the ammenity
     */
    category?: string | null;
    /**
     * label of the category
     */
    category_label?: string | null;
    /**
     * specific amenities and details
     */
    items?: Array<HotelAmenityItemInfo | null> | null;
};

export type HotelAboutInfo = {
    /**
     * description of the hotel
     * the description of the hotel entity for which the results are collected
     */
    description?: string | null;
    /**
     * additional description of the hotel
     * details about the hotel provided in addition to the description
     */
    sub_descriptions?: Array<string | null> | null;
    /**
     * hotel check-in time
     * check-in time indicated in the hotel listing
     */
    check_in_time?: TimeInfo | null;
    /**
     * hotel check-out time
     * check-out time indicated in the hotel listing
     */
    check_out_time?: TimeInfo | null;
    /**
     * full address of the hotel
     * address of the hotel indicated in the standardised format
     */
    full_address?: string | null;
    /**
     * hotel domain
     * domain of the hotel’s website
     */
    domain?: string | null;
    /**
     * hotel url
     * URL to the hotel’s website indicated in the listing
     */
    url?: string | null;
    /**
     * hotel amenities
     * information about hotel amenities
     */
    amenities?: Array<HotelAmenityInfo | null> | null;
    /**
     * hotel amenities
     * information about hotel amenities labelled as “popular”
     */
    popular_amenities?: Array<HotelAmenityItemInfo | null> | null;
};

export type LocationChain = {
    /**
     * card identifier
     */
    card_id?: string | null;
    /**
     * feature identifier
     * learn more about the identifier in this help center article
     */
    feature_id?: string | null;
    /**
     * client id
     * learn more about the identifier in this help center article
     */
    cid?: string | null;
    /**
     * title of the element in the location chain
     */
    title?: string | null;
};

export type HotelLocationInfo = {
    /**
     * name of the neighborhood where the hotel is located
     */
    neighborhood?: string | null;
    /**
     * description of the neighborhood where the hotel is located
     */
    neighborhood_description?: string | null;
    /**
     * url to the location of the hotel in google maps
     */
    maps_url?: string | null;
    /**
     * overall score of the hotel location
     * indicates the overall score of the hotel’s location in the range from 1 to 5;
     * calculated based on data from the hotel’s proximity to nearby things to do and restaurants, transportation, and airports;
     * note that the criteria are not weighted equally in the overall score
     */
    overall_score?: number | null;
    /**
     * category scores of the hotel location
     * the scores of the hotel’s location tied to the categories that indicate the proximity to nearby things to do, restaurants, transportation, and airports;
     */
    score_by_categories?: {
        [key: string]: number | null;
    } | null;
    /**
     * hotel latitude
     * latitude coordinates of the hotel’s location
     * example:
     * 39.4806397
     */
    latitude?: number | null;
    /**
     * hotel longitude
     * latitude coordinates of the hotel’s location
     * example:
     * -106.0512973
     */
    longitude?: number | null;
    /**
     * elements of the location chain
     * additional parameters of each element of the location chain
     */
    location_chain?: Array<LocationChain | null> | null;
};

export type ReviewMentionInfo = {
    /**
     * title of the evaluated criterion
     */
    title?: string | null;
    /**
     * positive score by criterion
     */
    positive_score?: number | null;
    /**
     * count of positive reviews by criterion
     */
    positive_count?: number | null;
    /**
     * count of negative reviews by criterion
     */
    negative_count?: number | null;
    /**
     * count of all reviews by criterion
     */
    total_count?: number | null;
    /**
     * element is visible by default
     * indicates whether the review element is visible by default
     */
    visible_by_default?: boolean | null;
};

export type OtherSitesReviewsInfo = {
    /**
     * review title
     * contains a name of the third-party site where review initially appeared
     */
    title?: string | null;
    /**
     * review url
     * URL to the a third-party site where review initially appeared
     */
    url?: string | null;
    /**
     * review text
     * text of the review
     */
    review_text?: string | null;
    /**
     * rating in the review
     * information about the rating enclosed in the review on a third-party site
     */
    rating?: RatingElement | null;
};

export type HotelReviewInfo = {
    /**
     * overall hotel rating based on customer votes
     */
    value?: number | null;
    /**
     * number of customer votes
     * the number of customer votes included in the calculation of the hotel rating
     */
    votes_count?: number | null;
    /**
     * hotel mentions
     * information about hotel reviews by criteria
     */
    mentions?: Array<ReviewMentionInfo | null> | null;
    /**
     * rating distribution by votes
     * the distribution of votes across the rating in the range from 1 to 5
     */
    rating_distribution?: {
        [key: string]: number | null;
    } | null;
    /**
     * reviews on third-party sites
     * reviews from third-paty sites
     */
    other_sites_reviews?: Array<OtherSitesReviewsInfo | null> | null;
};

export type BusinessDataGoogleHotelInfoTaskGetAdvancedResultInfo = {
    /**
     * unique hotel identifier
     * this field will contain the hotel_identifier parameter;
     * example:
     * CgoI-KWyzenM_MV3EAE
     */
    hotel_identifier?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * hotel title
     * the title of the hotel entity for which the results are collected
     */
    title?: string | null;
    /**
     * hotel class rating
     * class rating that ranges between 1-5 stars and displayed after review ratings in hotel summary
     */
    stars?: number | null;
    /**
     * hotel class rating
     * class rating that ranges between 1-5 stars and displayed after review ratings in the hotel summary
     */
    stars_description?: string | null;
    /**
     * hotel address
     * physical address of the hotel
     */
    address?: string | null;
    /**
     * hotel phone number
     * contact phone number of the hotel
     */
    phone?: string | null;
    /**
     * information about the hotel
     */
    about?: HotelAboutInfo | null;
    /**
     * information about the hotel location
     * information about the location where the hotel is located
     */
    location?: HotelLocationInfo | null;
    /**
     * hotel reviews by criteria
     * information about reviews of the hotel entity
     */
    reviews?: HotelReviewInfo | null;
    /**
     * images displayed in the hotel overview
     * array containing URLs to images displayed in the hotel overview
     */
    overview_images?: Array<string | null> | null;
    /**
     * pricing details of the hotel entity
     * contains information about the hotel’s prices
     */
    prices?: HotelPriceInfo | null;
};

export type BusinessDataGoogleHotelInfoTaskGetAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataGoogleHotelInfoTaskGetAdvancedResultInfo | null> | null;
};

export type BusinessDataGoogleHotelInfoTaskGetAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleHotelInfoTaskGetAdvancedTaskInfo | null> | null;
};

export type BusinessDataGoogleHotelInfoTaskGetHtmlResultInfo = {
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * HTML pages
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type BusinessDataGoogleHotelInfoTaskGetHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataGoogleHotelInfoTaskGetHtmlResultInfo | null> | null;
};

export type BusinessDataGoogleHotelInfoTaskGetHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleHotelInfoTaskGetHtmlTaskInfo | null> | null;
};

export type BusinessDataGoogleHotelInfoLiveAdvancedRequestInfo = {
    /**
     * unique hotel identifier
     * required field
     * unique identifier of a hotel entity in Google search;
     * you can obtain the value by making a request to Advanced Google SERP API (enclosed in the hotels element of the response), or the Hotel Searches endpoint of Business Data API
     * example:
     * ChYIq6SB--i6p6cpGgovbS8wN2s5ODZfEAE
     */
    hotel_identifier?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations with location_name by making a separate request to https://api.dataforseo.com/v3/business_data/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations with location_code by making a separate request to the https://api.dataforseo.com/v3/business_data/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude, longitude” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * Note: if the coordinates are used to set a location, the search will occur in the nearest settlement;
     * example:
     * 53.476225,-2.243572
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with language_name by making a separate request to https://api.dataforseo.com/v3/business_data/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to https://api.dataforseo.com/v3/business_data/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * check-in date
     * optional field
     * if you don’t specify this field, tomorrow’s date will be used by default;
     * the value must not be earlier than today’s date
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    check_in?: string | null;
    /**
     * check-out date
     * optional field
     * if you don’t specify this field, our system will apply the date of two days from now by default;
     * Note: the value cannot be less than or equal to check_in;
     * the range between check_in and check_out values cannot exceed 30 days
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    check_out?: string | null;
    /**
     * currency
     * optional field
     * example:
     * "USD"
     */
    currency?: string | null;
    /**
     * number of adults
     * optional field
     * if you don’t specify this field, two adults will be used by default
     * example:
     * 1
     */
    adults?: number | null;
    /**
     * number and age of children
     * optional field
     * if you don’t specify this field, no children will be included in the search;
     * set the following value if you want to include one 14-years-old child:
     * [14]
     * set the following value if you want to include one 13-years-old child and one 8-years-old child:
     * [13,8]
     */
    children?: Array<string> | null;
    /**
     * load hotel stay prices by dates
     * optional field
     * if you specify this parameter with true, the response will include the prices_by_dates array with hotel stay prices divided by dates
     * if you use this parameter, you will be charged double the base price for a request
     */
    load_prices_by_dates?: boolean | null;
    /**
     * start date to load prices by dates
     * optional field
     * to use this parameter, you must specify load_prices_by_dates with true
     * if this parameter is not specified, the start date is set to check_in date
     * date format: yyyy-mm-dd
     * example:
     * 2025-05-20
     */
    prices_start_date?: string | null;
    /**
     * end date to load prices by dates
     * optional field
     * to use this parameter, you must specify load_prices_by_dates with true
     * if this parameter is not specified, you will get prices by date for the month
     * date format: yyyy-mm-dd
     * example:
     * 2025-05-21
     */
    prices_end_date?: string | null;
    /**
     * predefined period for retrieving daily price data
     * optional field
     * to use this parameter, you must specify load_prices_by_dates with true
     * if the prices_start_date is not specified, the start date is set to check_in date
     * possible values: month, three_months, six_months, year
     * default value: month
     */
    prices_date_range?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BusinessDataGoogleHotelInfoLiveAdvancedResultInfo = {
    /**
     * identifier received in a POST array
     * this field will contain the hotel_identifier parameter specified when setting a task;
     * example:
     * CgoI-KWyzenM_MV3EAE
     */
    hotel_identifier?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * hotel title
     * the title of the hotel entity for which the results are collected
     */
    title?: string | null;
    /**
     * hotel class rating
     * class rating that ranges between 1-5 stars and displayed after review ratings in hotel summary
     */
    stars?: number | null;
    /**
     * hotel class rating
     * class rating that ranges between 1-5 stars and displayed after review ratings in the hotel summary
     */
    stars_description?: string | null;
    /**
     * hotel address
     * physical address of the hotel
     */
    address?: string | null;
    /**
     * hotel phone number
     * contact phone number of the hotel
     */
    phone?: string | null;
    /**
     * information about the hotel
     */
    about?: HotelAboutInfo | null;
    /**
     * information about the hotel location
     * information about the location where the hotel is located
     */
    location?: HotelLocationInfo | null;
    /**
     * hotel reviews by criteria
     * information about reviews of the hotel entity
     */
    reviews?: HotelReviewInfo | null;
    /**
     * images displayed in the hotel overview
     * array containing URLs to images displayed in the hotel overview
     */
    overview_images?: Array<string | null> | null;
    /**
     * pricing details of the hotel entity
     * contains information about the hotel’s prices
     */
    prices?: HotelPriceInfo | null;
};

export type BusinessDataGoogleHotelInfoLiveAdvancedTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataGoogleHotelInfoLiveAdvancedResultInfo | null> | null;
};

export type BusinessDataGoogleHotelInfoLiveAdvancedResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleHotelInfoLiveAdvancedTaskInfo | null> | null;
};

export type BusinessDataGoogleHotelInfoLiveHtmlRequestInfo = {
    /**
     * unique hotel identifier
     * required field
     * unique identifier of a hotel entity in Google search;
     * you can obtain the value by making a request to Advanced Google SERP API (enclosed in the hotels element of the response), or the Hotel Searches endpoint of Business Data API
     * example:
     * ChYIq6SB--i6p6cpGgovbS8wN2s5ODZfEAE
     */
    hotel_identifier?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations with location_name by making a separate request to https://api.dataforseo.com/v3/business_data/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations with location_code by making a separate request to the https://api.dataforseo.com/v3/business_data/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * Note: if the coordinates are used to set a location, the search will occur in the nearest settlement;
     * example:
     * 53.476225,-2.243572
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with language_name by making a separate request to https://api.dataforseo.com/v3/business_data/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to https://api.dataforseo.com/v3/business_data/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * check-in date
     * optional field
     * if you don’t specify this field, tomorrow’s date will be used by default;
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    check_in?: string | null;
    /**
     * check-out date
     * optional field
     * if you don’t specify this field, our system will apply the date of two days from now by default;
     * date format: "yyyy-mm-dd"
     * example:
     * "2019-01-15"
     */
    check_out?: string | null;
    /**
     * currency
     * optional field
     * example:
     * "USD"
     */
    currency?: string | null;
    /**
     * number of adults
     * optional field
     * if you don’t specify this field, two adults will be used by default
     * example:
     * 1
     */
    adults?: number | null;
    /**
     * number and age of children
     * optional field
     * if you don’t specify this field, no children will be included in the search;
     * set the following value if you want to include one 14-years-old child:
     * [14]
     * set the following value if you want to include one 13-years-old child and one 8-years-old child:
     * [13,8]
     */
    children?: Array<string> | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data array of the response
     */
    tag?: string | null;
};

export type BusinessDataGoogleHotelInfoLiveHtmlResultInfo = {
    /**
     * unique hotel identifier specified as "hotel_id:$"
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of results returned in the items array
     */
    items_count?: number | null;
    /**
     * HTML pages
     */
    items?: Array<HtmlItemInfo | null> | null;
};

export type BusinessDataGoogleHotelInfoLiveHtmlTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataGoogleHotelInfoLiveHtmlResultInfo | null> | null;
};

export type BusinessDataGoogleHotelInfoLiveHtmlResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleHotelInfoLiveHtmlTaskInfo | null> | null;
};

export type BusinessDataGoogleReviewsTaskPostRequestInfo = {
    /**
     * keyword
     * required field if you don’t specify cid or place_id
     * the keyword you specify should indicate the name of the local establishment;
     * you can specify up to 700 characters in the keyword filed;
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if this field contains such parameters as ‘allinanchor:’, ‘allintext:’, ‘allintitle:’, ‘allinurl:’, ‘define:’, ‘filetype:’, ‘id:’, ‘inanchor:’, ‘info:’, ‘intext:’, ‘intitle:’, ‘inurl:’, ‘link:’, ‘related:’, ‘site:’, the charge per task will be multiplied by 5
     * Note: queries containing the ‘cache:’ parameter are not supported and will return a validation error
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string | null;
    /**
     * unique, google-defined id of the business entity
     * required field if you don’t specify keyword or place_id
     * example:
     * 194604053573767737
     * learn more about the identifier in this help center article
     */
    cid?: string | null;
    /**
     * identifier of the business entity in Google Maps
     * required field if you don’t specify keyword or cid
     * example:
     * GhIJQWDl0CIeQUARxks3icF8U8A
     * learn more about the identifier in this help center article
     */
    place_id?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations with location_name by making a separate request to the https://api.dataforseo.com/v3/business_data/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations with location_code by making a separate request to the https://api.dataforseo.com/v3/business_data/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with language_name by making a separate request to the https://api.dataforseo.com/v3/business_data/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the https://api.dataforseo.com/v3/business_data/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * parsing depth
     * optional field
     * number of reviews in SERP
     * we strongly recommend setting the parsing depth in the multiples of ten, because our systems processes ten reviews in a row
     * default value: 10
     * maximum value: 4490
     * Your account will be billed per each SERP containing up to 10 results;
     * Setting depth above 10 may result in additional charges if the search engine returns more than 10 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * results sorting parameters
     * optional field
     * you can use this field to sort the results
     * possible types of sorting:
     * newest – sort by newest first
     * highest_rating – sort by highest rating
     * lowest_rating – sort by lowest rating
     * relevant – sort by relevance
     * default value: relevant
     */
    sort_by?: string | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type BusinessDataGoogleReviewsTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type BusinessDataGoogleReviewsTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleReviewsTaskPostTaskInfo | null> | null;
};

export type BusinessDataGoogleReviewsTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     * can take the following values: google
     */
    se?: string | null;
    /**
     * type of search engine
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the task
     */
    endpoint?: string | null;
};

export type BusinessDataGoogleReviewsTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataGoogleReviewsTasksReadyResultInfo | null> | null;
};

export type BusinessDataGoogleReviewsTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleReviewsTasksReadyTaskInfo | null> | null;
};

export type ReviewHighlights = {
    /**
     * reviewed feature
     */
    feature?: string | null;
    /**
     * feature assessment
     */
    assessment?: string | null;
};

export type GoogleReviewsSearch = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank among all the listed reviews
     * absolute position among all reviews on the list
     */
    rank_absolute?: number | null;
    /**
     * the alignment of the review in SERP
     * can take the following values: right
     */
    position?: string | null;
    /**
     * the XPath of the review
     */
    xpath?: string | null;
    /**
     * the content of the review
     */
    review_text?: string | null;
    /**
     * original content of the review
     * the original content of the review, no auto-translate applied
     */
    original_review_text?: string | null;
    /**
     * the time of publication
     * indicates the time (in the ‘time ago’ format) when the review was listed
     */
    time_ago?: string | null;
    /**
     * date and time when a review was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
    /**
     * the rating score submitted by the reviewer
     */
    rating?: RatingElement | null;
    /**
     * total number of reviews submitted by the reviewer
     */
    reviews_count?: number | null;
    /**
     * total number of photos submitted by the reviewer
     */
    photos_count?: number | null;
    /**
     * indicates whether the reviewer has a ‘local guide’ status
     */
    local_guide?: boolean | null;
    /**
     * profile name of the reviewer
     */
    profile_name?: string | null;
    /**
     * URL of the reviewer’s profile
     */
    profile_url?: string | null;
    /**
     * the URL of the review
     */
    review_url?: string | null;
    /**
     * URL of the reviewer’s profile image
     */
    profile_image_url?: string | null;
    /**
     * text of the owner’s response
     * the owner’s response to the review
     */
    owner_answer?: string | null;
    /**
     * original text of the owner’s response
     * the original response to the review, no auto-translate applied
     */
    original_owner_answer?: string | null;
    /**
     * publication time
     * indicates the time (in the ‘time ago’ format) when the owner submitted the response to the review
     */
    owner_time_ago?: string | null;
    /**
     * date and time of the owner’s reply to the review
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    owner_timestamp?: string | null;
    /**
     * the unique identifier of a review on Google
     * example:
     * ChZDSUhNMG9nS0VJQ0FnSUMxbHFyMFlnEAE
     */
    review_id?: string | null;
    /**
     * images submitted by the reviewer
     */
    images?: Array<AiModeImagesElementInfo | null> | null;
    /**
     * review highlights
     * contains highlighted review criteria and assessments
     */
    review_highlights?: Array<ReviewHighlights | null> | null;
};

export type BusinessDataGoogleReviewsTaskGetResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * title of the ‘reviews’ element in SERP
     * the name of the local establishment for which the reviews are collected
     */
    title?: string | null;
    /**
     * subtitle of the ‘reviews’ element in SERP
     * additional information (e.g., address) on the ‘reviews’ element for which the reviews are collected
     */
    sub_title?: string | null;
    /**
     * rating of the corresponding local establishment
     * popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
    /**
     * the unique identifier of the ‘reviews’ element in SERP
     * learn more about the identifier in this help center article
     */
    feature_id?: string | null;
    /**
     * unique identifier of a business location assigned by Google
     * learn more about the identifier in this help center article
     */
    place_id?: string | null;
    /**
     * google-defined client id
     * unique id of a local establishment
     * learn more about the identifier in this help center article
     */
    cid?: string | null;
    /**
     * the total number of reviews
     */
    reviews_count?: number | null;
    /**
     * the number of reviews items in the results array
     * you can get more results by using the depth parameter when setting a task
     */
    items_count?: number | null;
    /**
     * found reviews
     * you can get more results by using the depth parameter when setting a task
     */
    items?: Array<GoogleReviewsSearch | null> | null;
};

export type BusinessDataGoogleReviewsTaskGetTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataGoogleReviewsTaskGetResultInfo | null> | null;
};

export type BusinessDataGoogleReviewsTaskGetResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleReviewsTaskGetTaskInfo | null> | null;
};

export type BusinessDataGoogleExtendedReviewsTaskPostRequestInfo = {
    /**
     * keyword
     * required field if you don’t specify cid or place_id
     * the keyword you specify should indicate the name of the local establishment;
     * you can specify up to 700 characters in the keyword filed;
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * if this field contains such parameters as ‘allinanchor:’, ‘allintext:’, ‘allintitle:’, ‘allinurl:’, ‘define:’, ‘filetype:’, ‘id:’, ‘inanchor:’, ‘info:’, ‘intext:’, ‘intitle:’, ‘inurl:’, ‘link:’, ‘related:’, ‘site:’, the charge per task will be multiplied by 5
     * Note: queries containing the ‘cache:’ parameter are not supported and will return a validation error
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     * Note: if you use this field, your account will be charged three times the standard rate for tasks involving the Google Reviews API
     */
    keyword?: string | null;
    /**
     * unique, google-defined id of the business entity
     * required field if you don’t specify keyword or place_id
     * example:
     * 194604053573767737
     * learn more about the identifier in this help center article
     * Note: if you use this field, your account will be charged two times the standard rate for tasks involving the Google Reviews API
     */
    cid?: string | null;
    /**
     * identifier of the business entity in Google Maps
     * required field if you don’t specify keyword or cid
     * example:
     * GhIJQWDl0CIeQUARxks3icF8U8A
     * learn more about the identifier in this help center article
     * Note: if you use this field, your account will be charged two times the standard rate for tasks involving the Google Reviews API
     */
    place_id?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations with location_name by making a separate request to the https://api.dataforseo.com/v3/business_data/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations with location_code by making a separate request to the https://api.dataforseo.com/v3/business_data/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with language_name by making a separate request to the https://api.dataforseo.com/v3/business_data/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to the https://api.dataforseo.com/v3/business_data/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * parsing depth
     * optional field
     * number of reviews in SERP
     * we strongly recommend setting the parsing depth in the multiples of twenty, because our systems processes twenty reviews in a row
     * default value: 20
     * maximum value: 1000
     * Your account will be billed per each SERP containing up to 20 results;
     * Setting depth above 20 may result in additional charges if the search engine returns more than 20 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type BusinessDataGoogleExtendedReviewsTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type BusinessDataGoogleExtendedReviewsTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleExtendedReviewsTaskPostTaskInfo | null> | null;
};

export type BusinessDataGoogleExtendedReviewsTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     * can take the following values: google
     */
    se?: string | null;
    /**
     * type of search engine
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the task
     */
    endpoint?: string | null;
};

export type BusinessDataGoogleExtendedReviewsTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataGoogleExtendedReviewsTasksReadyResultInfo | null> | null;
};

export type BusinessDataGoogleExtendedReviewsTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleExtendedReviewsTasksReadyTaskInfo | null> | null;
};

export type Source = {
    /**
     * name of the source where the review was posted
     */
    title?: string | null;
    /**
     * featured image of the source
     */
    image?: string | null;
    /**
     * domain of the source where the review was posted
     */
    domain?: string | null;
};

export type GoogleExtendedReviewsSearch = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank among all the listed reviews
     * absolute position among all reviews on the list
     */
    rank_absolute?: number | null;
    /**
     * the alignment of the review in SERP
     * can take the following values: right
     */
    position?: string | null;
    /**
     * the XPath of the review
     */
    xpath?: string | null;
    /**
     * the content of the review
     */
    review_text?: string | null;
    /**
     * original content of the review
     * the original content of the review, no auto-translate applied
     */
    original_review_text?: string | null;
    /**
     * the time of publication
     * indicates the time (in the ‘time ago’ format) when the review was listed
     */
    time_ago?: string | null;
    /**
     * date and time when a review was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
    /**
     * the rating score submitted by the reviewer
     */
    rating?: RatingElement | null;
    /**
     * total number of reviews submitted by the reviewer
     */
    reviews_count?: number | null;
    /**
     * total number of photos submitted by the reviewer
     */
    photos_count?: number | null;
    /**
     * indicates whether the reviewer has a ‘local guide’ status
     */
    local_guide?: boolean | null;
    /**
     * profile name of the reviewer
     */
    profile_name?: string | null;
    /**
     * URL of the reviewer’s profile
     */
    profile_url?: string | null;
    /**
     * the URL of the review
     */
    review_url?: string | null;
    /**
     * URL of the reviewer’s profile image
     */
    profile_image_url?: string | null;
    /**
     * text of the owner’s response
     * the owner’s response to the review
     */
    owner_answer?: string | null;
    /**
     * original text of the owner’s response
     * the original response to the review, no auto-translate applied
     */
    original_owner_answer?: string | null;
    /**
     * publication time
     * indicates the time (in the ‘time ago’ format) when the owner submitted the response to the review
     */
    owner_time_ago?: string | null;
    /**
     * date and time of the owner’s reply to the review
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    owner_timestamp?: string | null;
    /**
     * the unique identifier of a review on Google
     * example:
     * ChZDSUhNMG9nS0VJQ0FnSUMxbHFyMFlnEAE
     */
    review_id?: string | null;
    /**
     * images submitted by the reviewer
     */
    images?: Array<AiModeImagesElementInfo | null> | null;
    /**
     * review highlights
     * contains highlighted review criteria and assessments
     */
    review_highlights?: Array<ReviewHighlights | null> | null;
    /**
     * source of the review
     * contains information about the source where the review was posted
     */
    source?: Source | null;
};

export type BusinessDataGoogleExtendedReviewsTaskGetResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     */
    keyword?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * title of the ‘reviews’ element in SERP
     * the name of the local establishment for which the reviews are collected
     */
    title?: string | null;
    /**
     * subtitle of the ‘reviews’ element in SERP
     * additional information (e.g., address) on the ‘reviews’ element for which the reviews are collected
     */
    sub_title?: string | null;
    /**
     * rating of the corresponding local establishment
     * popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
    /**
     * the unique identifier of the ‘reviews’ element in SERP
     * learn more about the identifier in this help center article
     */
    feature_id?: string | null;
    /**
     * unique identifier of a business location assigned by Google
     * learn more about the identifier in this help center article
     */
    place_id?: string | null;
    /**
     * google-defined client id
     * unique id of a local establishment
     * learn more about the identifier in this help center article
     */
    cid?: string | null;
    /**
     * the total number of reviews
     */
    reviews_count?: number | null;
    /**
     * the number of reviews items in the results array
     * you can get more results by using the depth parameter when setting a task
     */
    items_count?: number | null;
    /**
     * found reviews
     * you can get more results by using the depth parameter when setting a task
     */
    items?: Array<GoogleExtendedReviewsSearch | null> | null;
};

export type BusinessDataGoogleExtendedReviewsTaskGetTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataGoogleExtendedReviewsTaskGetResultInfo | null> | null;
};

export type BusinessDataGoogleExtendedReviewsTaskGetResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleExtendedReviewsTaskGetTaskInfo | null> | null;
};

export type BusinessDataGoogleQuestionsAndAnswersTaskPostRequestInfo = {
    /**
     * keyword
     * required field
     * the keyword you specify should indicate the name of the local establishment
     * you can specify up to 700 characters in the keyword filed
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * this field can also be used to pass the following parameters:
     * cid – a unique, google-defined id of the business entity;
     * place_id – an identifier of the business entity in Google Maps;
     * spp – a unique identifier of local services featured in the local_pack element of Google SERP
     * example:
     * cid:194604053573767737
     * place_id:GhIJQWDl0CIeQUARxks3icF8U8A
     * spp:CgsvZy8xdGN4cWRraBoUChIJPZDrEzLsZIgRoNrpodC5P30
     * learn more about the cid and place_id identifiers in this help center article
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations with location_name by making a separate request to https://api.dataforseo.com/v3/business_data/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations with location_code by making a separate request to the https://api.dataforseo.com/v3/business_data/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9 (mm)
     * the maximum value for “radius”: 199999 (mm)
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with language_name by making a separate request to https://api.dataforseo.com/v3/business_data/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to https://api.dataforseo.com/v3/business_data/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * parsing depth
     * optional field
     * number of question rows in the result
     * default value: 20
     * max value: 700
     * Your account will be billed per each SERP containing up to 20 results;
     * Setting depth above 20 may result in additional charges if the search engine returns more than 20 results;
     * If the specified depth is higher than the number of questions in the response, the difference will be refunded automatically to your account balance;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type BusinessDataGoogleQuestionsAndAnswersTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type BusinessDataGoogleQuestionsAndAnswersTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleQuestionsAndAnswersTaskPostTaskInfo | null> | null;
};

export type BusinessDataGoogleQuestionsAndAnswersTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     * can take the following values: google
     */
    se?: string | null;
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the task
     */
    endpoint?: string | null;
};

export type BusinessDataGoogleQuestionsAndAnswersTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataGoogleQuestionsAndAnswersTasksReadyResultInfo | null> | null;
};

export type BusinessDataGoogleQuestionsAndAnswersTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleQuestionsAndAnswersTasksReadyTaskInfo | null> | null;
};

export type GoogleBusinessQuestionItem = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank among all the elements
     */
    rank_absolute?: number | null;
    /**
     * ID of the question
     */
    question_id?: string | null;
    /**
     * URL of the question
     */
    url?: string | null;
    /**
     * URL of the user’s profile image
     */
    profile_image_url?: string | null;
    /**
     * URL of the user’s profile
     */
    profile_url?: string | null;
    /**
     * displayed name of the user
     */
    profile_name?: string | null;
    /**
     * current text of the question
     */
    question_text?: string | null;
    /**
     * original text of the question
     */
    original_question_text?: string | null;
    /**
     * estimated time when the question was posted
     */
    time_ago?: string | null;
    /**
     * exact time when the question was posted
     */
    timestamp?: string | null;
    /**
     * array of items
     * items within google_business_question_item
     */
    items?: GoogleBusinessAnswerElement | null;
};

export type GoogleBusinessAnswerElement = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * ID of the answer
     */
    answer_id?: string | null;
    /**
     * URL of the user’s profile image
     */
    profile_image_url?: string | null;
    /**
     * URL of the user’s profile
     */
    profile_url?: string | null;
    /**
     * displayed name of the user
     */
    profile_name?: string | null;
    /**
     * current text of the answer
     */
    answer_text?: string | null;
    /**
     * original text of the answer
     */
    original_answer_text?: string | null;
    /**
     * estimated time when the answer was posted
     */
    time_ago?: string | null;
    /**
     * exact time when the answer was posted
     */
    timestamp?: string | null;
};

export type BusinessDataGoogleQuestionsAndAnswersTaskGetResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     * this field will contain the cid parameter if you specified it in the keyword field when setting a task;
     * example:
     * cid:2946633002421908862
     * learn more about the parameter in this help center article
     */
    keyword?: string | null;
    /**
     * search engine domain as specified in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * google-defined client id
     * unique id of a local establishment;
     * learn more about the identifier in this help center article
     */
    cid?: string | null;
    /**
     * unique identifier of the SERP feature
     */
    feature_id?: string | null;
    /**
     * item types
     * types of search engine results encountered in the items array;
     * possible item types: google_business_question_item
     */
    item_types?: Array<string | null> | null;
    /**
     * array of google business question items without answers
     */
    items_without_answers?: Array<GoogleBusinessQuestionItem | null> | null;
    /**
     * the number of items in the items array
     */
    items_count?: number | null;
    /**
     * array of items within google_business_question_item
     * contains answers to the google business questions;
     * the maximum number of answers returned for each question: 5
     * possible item types google_business_answer_element
     */
    items?: Array<GoogleBusinessQuestionItem | null> | null;
};

export type BusinessDataGoogleQuestionsAndAnswersTaskGetTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataGoogleQuestionsAndAnswersTaskGetResultInfo | null> | null;
};

export type BusinessDataGoogleQuestionsAndAnswersTaskGetResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleQuestionsAndAnswersTaskGetTaskInfo | null> | null;
};

export type BusinessDataGoogleQuestionsAndAnswersLiveRequestInfo = {
    /**
     * keyword
     * required field
     * the keyword you specify should indicate the name of the local establishment
     * you can specify up to 700 characters in the keyword filed
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character)
     * if you need to use the “%” character for your keyword, please specify it as “%25”;
     * this field can also be used to pass the following parameters:
     * cid – a unique, google-defined id of the business entity;
     * place_id – an identifier of the business entity in Google Maps;
     * spp – a unique identifier of local services featured in the local_pack element of Google SERP
     * example:
     * cid:194604053573767737
     * place_id:GhIJQWDl0CIeQUARxks3icF8U8A
     * spp:CgsvZy8xdGN4cWRraBoUChIJPZDrEzLsZIgRoNrpodC5P30
     * learn more about the cid and place_id identifiers in this help center article
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or location_coordinate
     * if you use this field, you don’t need to specify location_code or location_coordinate
     * you can receive the list of available locations with location_name by making a separate request to https://api.dataforseo.com/v3/business_data/google/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or location_coordinate
     * if you use this field, you don’t need to specify location_name or location_coordinate
     * you can receive the list of available locations with location_code by making a separate request to the https://api.dataforseo.com/v3/business_data/google/locations
     * example:
     * 2840
     */
    location_code?: number | null;
    /**
     * GPS coordinates of a location
     * required field if you don’t specify location_name or location_code
     * if you use this field, you don’t need to specify location_name or location_code
     * location_coordinate parameter should be specified in the “latitude,longitude,radius” format
     * the maximum number of decimal digits for “latitude” and “longitude”: 7
     * the minimum value for “radius”: 199.9 (mm)
     * the maximum value for “radius”: 199999 (mm)
     * example:
     * 53.476225,-2.243572,200
     */
    location_coordinate?: string | null;
    /**
     * full name of search engine language
     * required field if you don’t specify language_code
     * if you use this field, you don’t need to specify language_code
     * you can receive the list of available languages with language_name by making a separate request to https://api.dataforseo.com/v3/business_data/google/languages
     * example:
     * English
     */
    language_name?: string | null;
    /**
     * search engine language code
     * required field if you don’t specify language_name
     * if you use this field, you don’t need to specify language_name
     * you can receive the list of available languages with their language_code by making a separate request to https://api.dataforseo.com/v3/business_data/google/languages
     * example:
     * en
     */
    language_code?: string | null;
    /**
     * parsing depth
     * optional field
     * number of results in SERP
     * default value: 20
     * max value: 100
     * Your account will be billed per each SERP containing up to 20 results;
     * Setting depth above 20 may result in additional charges if the search engine returns more than 20 results;
     * If the specified depth is higher than the number of questions in the response, the difference will be refunded automatically to your account balance;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BusinessDataGoogleQuestionsAndAnswersLiveResultInfo = {
    /**
     * keyword received in a POST array
     * keyword is returned with decoded %## (plus character ‘+’ will be decoded to a space character)
     * this field will contain the cid parameter if you specified it in the keyword field when setting a task;
     * example:
     * cid:2946633002421908862
     * learn more about the parameter in this help center article
     */
    keyword?: string | null;
    /**
     * search engine domain as specified in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * google-defined client id
     * unique id of a local establishment;
     * learn more about the identifier in this help center article
     */
    cid?: string | null;
    /**
     * unique identifier of the SERP feature
     */
    feature_id?: string | null;
    /**
     * item types
     * types of search engine results encountered in the items array;
     * possible item types: google_business_question_item
     */
    item_types?: Array<string | null> | null;
    /**
     * array of google business question items without answers
     */
    items_without_answers?: Array<GoogleBusinessQuestionItem | null> | null;
    /**
     * the number of items in the items array
     */
    items_count?: number | null;
    /**
     * array of items within google_business_question_item
     * contains answers to the google business questions;
     * possible item types google_business_answer_element
     */
    items?: Array<GoogleBusinessQuestionItem | null> | null;
};

export type BusinessDataGoogleQuestionsAndAnswersLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataGoogleQuestionsAndAnswersLiveResultInfo | null> | null;
};

export type BusinessDataGoogleQuestionsAndAnswersLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataGoogleQuestionsAndAnswersLiveTaskInfo | null> | null;
};

export type BusinessDataTrustpilotSearchTaskPostRequestInfo = {
    /**
     * keyword
     * required field
     * the keyword you specify should indicate a business category or company name;
     * you can specify up to 700 characters in the keyword filed;
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character);
     * if you need to use the “%” character for your keyword, please specify it as “%25”
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * parsing depth
     * optional field
     * number of search results to be returned from the API response
     * we strongly recommend setting the parsing depth in the multiples of twenty because our systems processes twenty search results in a row;
     * default value: 10;
     * maximum value: 140
     * Your account will be billed per each SERP containing up to 10 results;
     * Setting depth above 10 may result in additional charges if the search engine returns more than 10 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type BusinessDataTrustpilotSearchTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type BusinessDataTrustpilotSearchTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataTrustpilotSearchTaskPostTaskInfo | null> | null;
};

export type BusinessDataTrustpilotSearchTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     * can take the following values: trustpilot
     */
    se?: string | null;
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the task
     */
    endpoint?: string | null;
};

export type BusinessDataTrustpilotSearchTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataTrustpilotSearchTasksReadyResultInfo | null> | null;
};

export type BusinessDataTrustpilotSearchTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataTrustpilotSearchTasksReadyTaskInfo | null> | null;
};

export type TrustpilotSearchOrganic = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank among all the listed reviews
     * absolute position among all reviews on the list
     */
    rank_absolute?: number | null;
    /**
     * title of the establishment
     */
    title?: string | null;
    /**
     * domain of the establishment
     */
    domain?: string | null;
    /**
     * URL to the establishment
     */
    url?: string | null;
    /**
     * the total number of reviews
     */
    reviews_count?: number | null;
    /**
     * the rating score of the establishment submitted by reviewers
     */
    rating?: RatingElement | null;
};

export type BusinessDataTrustpilotSearchTaskGetResultInfo = {
    /**
     * keyword in a POST array
     */
    keyword?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * the number of items in the results array
     * you can get more results by using the depth parameter when setting a task
     */
    items_count?: number | null;
    /**
     * found reviews
     * you can get more results by using the depth parameter when setting a task
     */
    items?: Array<TrustpilotSearchOrganic | null> | null;
};

export type BusinessDataTrustpilotSearchTaskGetTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataTrustpilotSearchTaskGetResultInfo | null> | null;
};

export type BusinessDataTrustpilotSearchTaskGetResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataTrustpilotSearchTaskGetTaskInfo | null> | null;
};

export type BusinessDataTrustpilotReviewsTaskPostRequestInfo = {
    /**
     * domain of the local establishment
     * required field
     * domain of the local establishment on Trustpilot;
     * you can find the domain in the URL of every business listed on Trustpilot
     * example:
     * www.thepearlsource.com
     * https://www.trustpilot.com/review/www.thepearlsource.com
     */
    domain?: string;
    /**
     * results sorting parameter
     * optional field
     * you can use this field to sort the results;
     * possible sorting parameters:
     * recency — most recent reviews first;
     * relevance — most relevant reviews first;
     * default value: relevance
     */
    sort_by?: string | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * parsing depth
     * optional field
     * number of reviews to be returned from the API response
     * we strongly recommend setting the parsing depth in the multiples of twenty, because our system processes twenty reviews in a row
     * default value: 20
     * maximum value: 25000
     * Your account will be billed per each SERP containing up to 20 results;
     * Setting depth above 20 may result in additional charges if the search engine returns more than 20 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type BusinessDataTrustpilotReviewsTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type BusinessDataTrustpilotReviewsTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataTrustpilotReviewsTaskPostTaskInfo | null> | null;
};

export type BusinessDataTrustpilotReviewsTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     * can take the following values: trustpilot
     */
    se?: string | null;
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the task
     */
    endpoint?: string | null;
};

export type BusinessDataTrustpilotReviewsTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataTrustpilotReviewsTasksReadyResultInfo | null> | null;
};

export type BusinessDataTrustpilotReviewsTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataTrustpilotReviewsTasksReadyTaskInfo | null> | null;
};

export type BusinessDataUserProfileInfo = {
    /**
     * the name of the reviewer
     */
    name?: string | null;
    /**
     * URL to the reviewer’s profile
     */
    url?: string | null;
    /**
     * URL to the reviewer’s profile picture
     */
    image_url?: string | null;
    /**
     * country of the reviewer
     */
    location?: string | null;
    /**
     * total number of reviews submitted by the reviewer
     */
    reviews_count?: number | null;
};

export type TrustpilotReviewSearch = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank among all the listed reviews
     * absolute position among all reviews on the list
     */
    rank_absolute?: number | null;
    /**
     * the alignment of the review in SERP
     * can take the following values: right
     */
    position?: string | null;
    /**
     * the URL of the review
     */
    url?: string | null;
    /**
     * the rating score submitted by the reviewer
     */
    rating?: RatingElement | null;
    /**
     * indicates whether the review has the “Verified” mark
     */
    verified?: boolean | null;
    /**
     * the language of the review
     */
    language?: string | null;
    /**
     * date and time when a review was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
    /**
     * the title of the review
     */
    title?: string | null;
    /**
     * the content of the review
     */
    review_text?: string | null;
    /**
     * images submitted by the reviewer
     * displays URLs to the images provided by the author of the review;
     * please note that Trustpilot doesn’t allow adding images to reviews, so the review_images parameter will always equal null
     */
    review_images?: Array<string> | null;
    /**
     * user profile of the reviewer
     */
    user_profile?: BusinessDataUserProfileInfo | null;
    /**
     * owner’s response to the submitted review
     */
    responses?: Array<ReviewResponseItemInfo | null> | null;
};

export type BusinessDataTrustpilotReviewsTaskGetResultInfo = {
    /**
     * domain of the business entity
     */
    domain?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * title of the ‘reviews’ element on Trustpilot
     * the name of the business entity for which the reviews are collected
     */
    title?: string | null;
    /**
     * location of the business entity as specified on Trustpilot
     * address of the business entity for which the reviews are collected
     */
    location?: string | null;
    /**
     * the total number of reviews
     */
    reviews_count?: number | null;
    /**
     * rating of the corresponding business entity
     * popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
    /**
     * the number of items in the results array
     * you can get more results by using the depth parameter when setting a task
     */
    items_count?: number | null;
    /**
     * found reviews
     * you can get more results by using the depth parameter when setting a task
     */
    items?: Array<TrustpilotReviewSearch | null> | null;
};

export type BusinessDataTrustpilotReviewsTaskGetTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataTrustpilotReviewsTaskGetResultInfo | null> | null;
};

export type BusinessDataTrustpilotReviewsTaskGetResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataTrustpilotReviewsTaskGetTaskInfo | null> | null;
};

export type BusinessDataTripadvisorLocationsResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the name of the superordinate location
     * example:
     * "location_code": 9041134,
     * "location_name": "Vienna International Airport,Lower Austria,Austria",
     * "location_name_parent": "Lower Austria,Austria"
     */
    location_name_parent?: string | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     */
    location_type?: string | null;
};

export type BusinessDataTripadvisorLocationsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataTripadvisorLocationsResultInfo | null> | null;
};

export type BusinessDataTripadvisorLocationsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataTripadvisorLocationsTaskInfo | null> | null;
};

export type BusinessDataTripadvisorLocationsCountryResultInfo = {
    /**
     * location code
     */
    location_code?: number | null;
    /**
     * full name of the location
     */
    location_name?: string | null;
    /**
     * the name of the superordinate location
     * example:
     * "location_code": 9041134,
     * "location_name": "Vienna International Airport,Lower Austria,Austria",
     * "location_name_parent": "Lower Austria,Austria"
     */
    location_name_parent?: string | null;
    /**
     * ISO country code of the location
     */
    country_iso_code?: string | null;
    /**
     * location type
     */
    location_type?: string | null;
};

export type BusinessDataTripadvisorLocationsCountryTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataTripadvisorLocationsCountryResultInfo | null> | null;
};

export type BusinessDataTripadvisorLocationsCountryResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataTripadvisorLocationsCountryTaskInfo | null> | null;
};

export type BusinessDataTripadvisorLanguagesResultInfo = {
    /**
     * language name
     */
    language_name?: string | null;
    /**
     * language code according to ISO 639-1
     */
    language_code?: string | null;
};

export type BusinessDataTripadvisorLanguagesTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataTripadvisorLanguagesResultInfo | null> | null;
};

export type BusinessDataTripadvisorLanguagesResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataTripadvisorLanguagesTaskInfo | null> | null;
};

export type BusinessDataTripadvisorSearchTaskPostRequestInfo = {
    /**
     * keyword
     * required field
     * the keyword you specify should indicate a business category, company name, or a prominent place;
     * you can specify up to 700 characters in the keyword filed;
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character);
     * if you need to use the “%” character for your keyword, please specify it as “%25”
     * learn more about rules and limitations of keyword and keywords fields in DataForSEO APIs in this Help Center article
     */
    keyword?: string;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code
     * you can receive the list of available locations with location_name by making a separate request to the https://api.dataforseo.com/v3/business_data/tripadvisor/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name
     * you can receive the list of available locations with location_code by making a separate request to the https://api.dataforseo.com/v3/business_data/tripadvisor/locations
     * example:
     * 1003854
     */
    location_code?: number | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * parsing depth
     * optional field
     * number of search results to be returned from the API response
     * we strongly recommend setting the parsing depth in the multiples of thirty because our systems processes thirty search results in a row;
     * default value: 30;
     * maximum value: 210
     * Your account will be billed per each SERP containing up to 30 results;
     * Setting depth above 30 may result in additional charges if the search engine returns more than 30 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type BusinessDataTripadvisorSearchTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type BusinessDataTripadvisorSearchTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataTripadvisorSearchTaskPostTaskInfo | null> | null;
};

export type BusinessDataTripadvisorSearchTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     * can take the following values: tripadvisor
     */
    se?: string | null;
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the task
     */
    endpoint?: string | null;
};

export type BusinessDataTripadvisorSearchTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataTripadvisorSearchTasksReadyResultInfo | null> | null;
};

export type BusinessDataTripadvisorSearchTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataTripadvisorSearchTasksReadyTaskInfo | null> | null;
};

export type TripadvisorSearchOrganic = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank among all the listed results
     * absolute position among all reviews on the list
     */
    rank_absolute?: number | null;
    /**
     * name of the business entity
     */
    title?: string | null;
    /**
     * URL path of the business entity
     * URL path to the Tripadvisor page of the business entity
     * you can use this identifier to collect reviews for the business entity using Tripadvisor Reviews
     */
    url_path?: string | null;
    /**
     * indicates a sponsored placement
     * if true, related tripadvisor_search_organic item is a paid advertising on Tripadvisor
     */
    is_sponsored?: boolean | null;
    /**
     * the total number of reviews
     */
    reviews_count?: number | null;
    /**
     * place category
     */
    category?: string | null;
    /**
     * average price rate
     */
    price_rate?: string | null;
    /**
     * the rating score of the establishment submitted by the reviewers
     */
    rating?: RatingElement | null;
};

export type BusinessDataTripadvisorSearchTaskGetResultInfo = {
    /**
     * keyword received in a POST array
     * this field will contain the alias parameter if it was specified in a POST array
     */
    keyword?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * location code in a POST array
     */
    location_code?: number | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
    /**
     * direct URL to Tripadvisor results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * item types encountered in the result
     * possible item types: tripadvisor_search_organic
     */
    item_types?: Array<string | null> | null;
    /**
     * the total number of results
     */
    se_results_count?: number | null;
    /**
     * the number of items in the results array
     * you can get more results by using the depth parameter when setting a task
     */
    items_count?: number | null;
    /**
     * Tripadvisor search listing results
     * you can get more results by using the depth parameter when setting a task
     */
    items?: Array<TripadvisorSearchOrganic | null> | null;
};

export type BusinessDataTripadvisorSearchTaskGetTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataTripadvisorSearchTaskGetResultInfo | null> | null;
};

export type BusinessDataTripadvisorSearchTaskGetResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataTripadvisorSearchTaskGetTaskInfo | null> | null;
};

export type BusinessDataTripadvisorReviewsTaskPostRequestInfo = {
    /**
     * URL path of the business entity
     * required field if you do not specify keyword
     * URL path to the Tripadvisor page of the business entity;
     * examples:
     * Hotel_Review-g60763-d23462501-Reviews-Margaritaville_Times_Square-New_York_City_New_York.html
     * https://www.tripadvisor.com/Hotel_Review-g60763-d23462501-Reviews-Margaritaville_Times_Square-New_York_City_New_York.html
     */
    url_path?: string | null;
    /**
     * keyword
     * required field if you do not specify url_path
     * the keyword you specify should indicate a name of an existing business or prominent place on Tripadvisor;
     * you can specify up to 700 characters in the keyword filed;
     * all %## will be decoded (plus character ‘+’ will be decoded to a space character);
     * if you need to use the “%” character for your keyword, please specify it as “%25”
     */
    keyword?: string | null;
    /**
     * full name of search engine location
     * required field if you don’t specify location_code or url_path
     * you can receive the list of available locations with location_name by making a separate request to the https://api.dataforseo.com/v3/business_data/tripadvisor/locations
     * example:
     * London,England,United Kingdom
     */
    location_name?: string | null;
    /**
     * search engine location code
     * required field if you don’t specify location_name or url_path
     * you can receive the list of available locations with location_code by making a separate request to the https://api.dataforseo.com/v3/business_data/tripadvisor/locations
     * example:
     * 1003854
     */
    location_code?: number | null;
    /**
     * task priority
     * optional field
     * can take the following values:
     * 1 – normal execution priority (set by default)
     * 2 – high execution priority
     * You will be additionally charged for the tasks with high execution priority.
     * The cost can be calculated on the Pricing page.
     */
    priority?: number | null;
    /**
     * full name of search engine language
     * optional field
     * if you use this field, your account will be charged for one extra request
     * you can receive the list of available languages with language_name by making a separate request to the https://api.dataforseo.com/v3/business_data/tripadvisor/languages
     * example:
     * English
     * You will be additionally charged for setting a language parameter in this endpoint.
     * The cost can be calculated on the Pricing page.
     */
    language_name?: string | null;
    /**
     * search engine language code
     * optional field
     * if you use this field, your account will be charged for one extra request
     * you can receive the list of available languages with language_code by making a separate request to the https://api.dataforseo.com/v3/business_data/tripadvisor/languages
     * example:
     * en
     * You will be additionally charged for setting a language parameter in this endpoint.
     * The cost can be calculated on the Pricing page.
     */
    language_code?: string | null;
    /**
     * parsing depth
     * optional field
     * number of reviews in SERP;
     * we strongly recommend setting the parsing depth in the multiples of ten, because our systems processes ten reviews in a row;
     * default value: 10;
     * max value: 4490
     * Your account will be billed per each SERP containing up to 10 results;
     * Setting depth above 10 may result in additional charges if the search engine returns more than 10 results;
     * The cost can be calculated on the Pricing page.
     */
    depth?: number | null;
    /**
     * Tripadvisor traveler rating for a place of interest
     * optional field
     * rating based on the written reviews by a traveler after they visited a place.
     * possible values: excellent, very_good, average, poor, terrible
     * you can specify several values at once
     */
    ratings?: Array<string> | null;
    /**
     * filter by type of travelers who left a review
     * optional field
     * possible values: families, couples, solo, business, friends
     * you can specify several values at once
     */
    visit_type?: Array<string> | null;
    /**
     * filter by months when a traveler made a visit
     * optional field
     * possible values: january, february, march, april, may, april, june, july, august, september, october, november, december
     * you can specify several values at once
     */
    months?: Array<string> | null;
    /**
     * search reviews containing a specified keyword
     * example:
     * dessert
     */
    search_reviews_keyword?: string | null;
    /**
     * results sorting parameters
     * optional field
     * you can use this field to sort the results;
     * possible types of sorting:
     * most_recent
     * detailed_reviews
     */
    sort_by?: string | null;
    /**
     * translate reviews according to the URL path
     * optional field
     * if set to true, returned reviews will be translated to the language matching the specified url_path;
     * for example, if url_path contains tripadvisor.it and translate_reviews is true, reviews will be translated to the Italian language;
     * default value: true
     * you can learn more about how reviews are translated in this Help Center article
     */
    translate_reviews?: boolean | null;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
    /**
     * return URL for sending task results
     * optional field
     * once the task is completed, we will send a POST request with its results compressed in the gzip format to the postback_url you specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/postbackscript?id=$id
     * http://your-server.com/postbackscript?id=$id&tag=$tag
     * Note: special characters in postback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    postback_url?: string | null;
    /**
     * notification URL of a completed task
     * optional field
     * when a task is completed we will notify you by GET request sent to the URL you have specified
     * you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request.
     * example:
     * http://your-server.com/pingscript?id=$id
     * http://your-server.com/pingscript?id=$id&tag=$tag
     * Note: special characters in pingback_url will be urlencoded;
     * i.a., the # character will be encoded into %23
     * learn more on our Help Center
     */
    pingback_url?: string | null;
};

export type BusinessDataTripadvisorReviewsTaskPostTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * in this case, the value will be null
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type BusinessDataTripadvisorReviewsTaskPostResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataTripadvisorReviewsTaskPostTaskInfo | null> | null;
};

export type BusinessDataTripadvisorReviewsTasksReadyResultInfo = {
    /**
     * task identifier of the completed task
     * unique task identifier in our system in the UUID format
     */
    id?: string | null;
    /**
     * search engine specified when setting the task
     * can take the following values: tripadvisor
     */
    se?: string | null;
    /**
     * search engine type
     */
    se_type?: string | null;
    /**
     * date when the task was posted (in the UTC format)
     */
    date_posted?: string | null;
    /**
     * user-defined task identifier
     */
    tag?: string | null;
    /**
     * URL for collecting the results of the task
     */
    endpoint?: string | null;
};

export type BusinessDataTripadvisorReviewsTasksReadyTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataTripadvisorReviewsTasksReadyResultInfo | null> | null;
};

export type BusinessDataTripadvisorReviewsTasksReadyResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataTripadvisorReviewsTasksReadyTaskInfo | null> | null;
};

export type ImageUrlInfo = {
    /**
     * URL of the image used in the review
     */
    url?: string | null;
};

export type TripadvisorReviewSearch = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * position within a group of elements with identical type values
     * positions of elements with different type values are omitted from rank_group
     */
    rank_group?: number | null;
    /**
     * absolute rank among all the listed reviews
     * absolute position among all reviews on the list
     */
    rank_absolute?: number | null;
    /**
     * the alignment of the review in SERP
     * can take the following values: right
     */
    position?: string | null;
    /**
     * URL of the review
     */
    url?: string | null;
    /**
     * the rating score submitted by the reviewer
     */
    rating?: RatingElement | null;
    /**
     * date of the reviewer’s visit to the local establishment
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    date_of_visit?: string | null;
    /**
     * date and time when the review was published
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    timestamp?: string | null;
    /**
     * ID of the review
     */
    review_id?: string | null;
    /**
     * title of the review
     */
    title?: string | null;
    /**
     * content of the review
     */
    review_text?: string | null;
    /**
     * language of the review text
     */
    language?: string | null;
    /**
     * language of the untranslated review text
     */
    original_language?: string | null;
    /**
     * contains URLs of the images used in the review
     */
    review_images?: Array<ImageUrlInfo | null> | null;
    /**
     * information from the reviewer’s profile
     */
    user_profile?: BusinessDataUserProfileInfo | null;
    /**
     * contains information about the owner’s response
     */
    responses?: Array<ReviewResponseItemInfo | null> | null;
    /**
     * review highlights
     * contains highlighted review criteria and assessments
     */
    review_highlights?: {
        [key: string]: unknown;
    } | null;
};

export type BusinessDataTripadvisorReviewsTaskGetResultInfo = {
    /**
     * URL path received in a POST array
     */
    url_path?: string | null;
    /**
     * type of element
     */
    type?: string | null;
    /**
     * search engine domain in a POST array
     */
    se_domain?: string | null;
    /**
     * direct URL to search engine results
     * you can use it to make sure that we provided accurate results
     */
    check_url?: string | null;
    /**
     * date and time when the result was received
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2019-11-15 12:57:46 +00:00
     */
    datetime?: string | null;
    /**
     * title of the ‘reviews’ element in SERP
     * the name of the local establishment for which the reviews are collected
     */
    title?: string | null;
    /**
     * location of the local establishment
     * address of the local establishment for which the reviews are collected
     */
    location?: string | null;
    /**
     * the total number of reviews
     */
    reviews_count?: number | null;
    /**
     * rating of the corresponding local establishment
     * popularity rate based on reviews and displayed in SERP
     */
    rating?: RatingElement | null;
    /**
     * rating distribution by votes
     * the distribution of votes across the rating in the range from 1 to 5
     */
    rating_distribution?: {
        [key: string]: number | null;
    } | null;
    /**
     * the number of reviews items in the results array
     * you can get more results by using the depth parameter when setting a task
     */
    items_count?: number | null;
    /**
     * found reviews
     * you can get more results by using the depth parameter when setting a task
     */
    items?: Array<TripadvisorReviewSearch | null> | null;
    /**
     * language code in a POST array
     */
    language_code?: string | null;
};

export type BusinessDataTripadvisorReviewsTaskGetTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataTripadvisorReviewsTaskGetResultInfo | null> | null;
};

export type BusinessDataTripadvisorReviewsTaskGetResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataTripadvisorReviewsTaskGetTaskInfo | null> | null;
};

export type BusinessDataSocialMediaPinterestLiveRequestInfo = {
    /**
     * target URLs
     * required field
     * target page should be specified with its absolute URL (including http:// or https://)
     * example:
     * https://dataforseo.com/
     * Note: you can specify 10 targets maximum. You will be charged per earch URL you specify in this array
     */
    targets?: Array<string>;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BusinessDataSocialMediaPinterestLiveResultInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * URL of the page the data is provided for
     * corresponding URL you specified in the targets array when setting a task
     */
    page_url?: string | null;
    /**
     * number of pins for the related page_url
     * pins on Pinterest correspond to content saves;
     * this field shows the number of content saves made from the related page_url using the Pinterest Save Button
     */
    pins_count?: number | null;
};

export type BusinessDataSocialMediaPinterestLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataSocialMediaPinterestLiveResultInfo | null> | null;
};

export type BusinessDataSocialMediaPinterestLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataSocialMediaPinterestLiveTaskInfo | null> | null;
};

export type BusinessDataSocialMediaFacebookLiveRequestInfo = {
    /**
     * target URLs
     * required field
     * target page should be specified with its absolute URL (including http:// or https://)
     * example:
     * https://dataforseo.com/
     * Note: you can specify 10 targets maximum. You will be charged per earch URL you specify in this array
     */
    targets?: Array<string>;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type BusinessDataSocialMediaFacebookLiveResultInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * URL of the page the data is provided for
     * corresponding URL you specified in the targets array when setting a task
     */
    page_url?: string | null;
    /**
     * number of likes for the related page_url
     * this field shows the number of likes a page received through the Facebook Like Button embed
     */
    like_count?: number | null;
};

export type BusinessDataSocialMediaFacebookLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataSocialMediaFacebookLiveResultInfo | null> | null;
};

export type BusinessDataSocialMediaFacebookLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataSocialMediaFacebookLiveTaskInfo | null> | null;
};

export type BusinessDataSocialMediaRedditLiveRequestInfo = {
    /**
     * target URLs
     * required field
     * target page should be specified with its absolute URL (including http:// or https://)
     * example:
     * https://dataforseo.com/
     * Note: you can specify 10 targets maximum. You will be charged per earch URL you specify in this array
     */
    targets?: Array<string>;
    /**
     * user-defined task identifier
     * optional field
     * the character limit is 255
     * you can use this parameter to identify the task and match it with the result
     * you will find the specified tag value in the data object of the response
     */
    tag?: string | null;
};

export type RedditReviews = {
    /**
     * the name of the subreddit
     */
    subreddit?: string | null;
    /**
     * nickname of the author
     * nicknname of the user who published the post in the subreddit and shared the URL
     */
    author_name?: string | null;
    /**
     * title of the subreddit post
     */
    title?: string | null;
    /**
     * URL to the subreddit post
     */
    permalink?: string | null;
    /**
     * number of subreddit members
     */
    subreddit_members?: number | null;
};

export type BusinessDataSocialMediaRedditLiveResultInfo = {
    /**
     * type of element
     */
    type?: string | null;
    /**
     * URL of the page the data is provided for
     * corresponding URL you specified in the targets array when setting a task
     */
    page_url?: string | null;
    /**
     * reddit reviews for the page_url
     */
    reddit_reviews?: Array<RedditReviews | null> | null;
};

export type BusinessDataSocialMediaRedditLiveTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<BusinessDataSocialMediaRedditLiveResultInfo | null> | null;
};

export type BusinessDataSocialMediaRedditLiveResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<BusinessDataSocialMediaRedditLiveTaskInfo | null> | null;
};

export type AppendixFunctionTypeInfo = {
    regular?: number | null;
    advanced?: number | null;
    html?: number | null;
};

export type AppendixJobsSerpLimitsRatesDataInfo = {
    task_post?: number | null;
};

export type AppendixSerpDaysRatesDataInfo = {
    task_post?: number | null;
    task_get?: AppendixFunctionTypeInfo | null;
    tasks_ready?: number | null;
    locations?: number | null;
    languages?: number | null;
    live?: (AppendixFunctionTypeInfo | null) & {
        regular?: number;
        advanced?: number;
        html?: number;
    };
    errors?: number | null;
    tasks_fixed?: number | null;
    jobs?: AppendixJobsSerpLimitsRatesDataInfo | null;
    screenshot?: number | null;
};

export type AppendixInfo = {
    task_post?: number;
    task_get?: number;
    tasks_ready?: number;
    live?: number;
};

export type AppendixBingKeywordsDataLimitsRatesDataInfo = {
    keyword_performance?: AppendixInfo | null;
    search_volume?: AppendixInfo | null;
    keywords_for_site?: AppendixInfo | null;
    keywords_for_keywords?: AppendixInfo | null;
    audience_estimation?: AppendixInfo | null;
    keyword_suggestions_for_url?: AppendixInfo | null;
};

export type AppendixGoogleAdsKeywordsDataLimitsRatesDataInfo = {
    status?: number | null;
    search_volume?: AppendixInfo | null;
    keywords_for_keywords?: AppendixInfo | null;
    keywords_for_site?: AppendixInfo | null;
    ad_traffic_by_keywords?: AppendixInfo | null;
};

export type AppendixDataforseoTrendsKeywordsDataLimitsRatesDataInfo = {
    explore?: AppendixInfo | null;
    subregion_interests?: AppendixInfo | null;
    demography?: AppendixInfo | null;
    merged_data?: AppendixInfo | null;
};

export type AppendixClickstreamDataKeywordsDataLimitsRatesDataInfo = {
    dataforseo_search_volume?: AppendixInfo | null;
    locations_and_languages?: number | null;
    bulk_search_volume?: AppendixInfo | null;
    global_search_volume?: AppendixInfo | null;
};

export type AppendixKeywordsDataDaysRatesDataInfo = {
    keywords_for_keywords?: (AppendixInfo | null) & {
        task_post?: number;
        task_get?: number;
        tasks_ready?: number;
        live?: number;
    };
    keywords_for_site?: AppendixInfo | null;
    search_volume?: AppendixInfo | null;
    ad_traffic_by_keywords?: AppendixInfo | null;
    languages?: number | null;
    locations?: number | null;
    tasks_ready?: number | null;
    explore?: AppendixInfo | null;
    categories?: number | null;
    errors?: number | null;
    bing?: AppendixBingKeywordsDataLimitsRatesDataInfo | null;
    keyword_performance?: AppendixInfo | null;
    locations_and_languages?: number | null;
    google_ads?: AppendixGoogleAdsKeywordsDataLimitsRatesDataInfo | null;
    dataforseo_trends?: AppendixDataforseoTrendsKeywordsDataLimitsRatesDataInfo | null;
    clickstream_data?: AppendixClickstreamDataKeywordsDataLimitsRatesDataInfo | null;
    audience_estimation?: AppendixInfo | null;
    keyword_suggestions_for_url?: AppendixInfo | null;
};

export type AppendixAppendixDaysRatesDataInfo = {
    user_data?: number | null;
    errors?: number | null;
};

export type AppendixDataforseoLabsLimitsRatesDataInfo = {
    locations_and_languages?: number | null;
    categories?: number | null;
    errors?: number | null;
    product_competitors?: AppendixInfo | null;
    product_keyword_intersections?: AppendixInfo | null;
    product_rank_overview?: AppendixInfo | null;
    ranked_keywords?: AppendixInfo | null;
    serp_competitors?: AppendixInfo | null;
    subdomains?: AppendixInfo | null;
    relevant_pages?: AppendixInfo | null;
    competitors_domain?: AppendixInfo | null;
    related_keywords?: AppendixInfo | null;
    domain_rank_overview?: AppendixInfo | null;
    domain_intersection?: AppendixInfo | null;
    page_intersection?: AppendixInfo | null;
    bulk_traffic_estimation?: AppendixInfo | null;
    bulk_keyword_difficulty?: AppendixInfo | null;
    bulk_search_volume?: AppendixInfo | null;
    keywords_for_site?: AppendixInfo | null;
    keyword_suggestions?: AppendixInfo | null;
    keyword_ideas?: AppendixInfo | null;
    historical_search_volume?: AppendixInfo | null;
    categories_for_domain?: AppendixInfo | null;
    domain_metrics_by_categories?: AppendixInfo | null;
    top_searches?: AppendixInfo | null;
    domain_whois_overview?: AppendixInfo | null;
    historical_rank_overview?: AppendixInfo | null;
    keywords_for_categories?: AppendixInfo | null;
    historical_serps?: AppendixInfo | null;
    app_competitors?: AppendixInfo | null;
    keywords_for_app?: AppendixInfo | null;
    app_intersection?: AppendixInfo | null;
    bulk_app_metrics?: AppendixInfo | null;
    search_intent?: AppendixInfo | null;
    historical_bulk_traffic_estimation?: AppendixInfo | null;
    categories_for_keywords?: AppendixInfo | null;
    keyword_overview?: AppendixInfo | null;
    historical_keyword_data?: AppendixInfo | null;
};

export type AppendixWhoisDomainAnalyticsLimitsRatesDataInfo = {
    overview?: AppendixInfo | null;
};

export type AppendixTechnologiesDomainAnalyticsLimitsRatesDataInfo = {
    domain_technologies?: AppendixInfo | null;
    domains_by_technology?: AppendixInfo | null;
    languages?: number | null;
    locations?: number | null;
    technologies?: number | null;
    aggregation_technologies?: AppendixInfo | null;
    technologies_summary?: AppendixInfo | null;
    domains_by_html_terms?: AppendixInfo | null;
    technology_stats?: AppendixInfo | null;
};

export type AppendixDomainAnalyticsLimitsRatesDataInfo = {
    tasks_ready?: number | null;
    errors?: number | null;
    whois?: AppendixWhoisDomainAnalyticsLimitsRatesDataInfo | null;
    technologies?: AppendixTechnologiesDomainAnalyticsLimitsRatesDataInfo | null;
};

export type AppendixSellersGoogleMerchantLimitsRatesDataInfo = {
    task_post?: number | null;
    tasks_ready?: number | null;
    task_get?: AppendixFunctionTypeInfo | null;
    ad_url?: number | null;
};

export type AppendixMerchantGoogleInfo = {
    products?: AppendixSerpDaysRatesDataInfo | null;
    sellers?: AppendixSellersGoogleMerchantLimitsRatesDataInfo | null;
    product_spec?: AppendixSerpDaysRatesDataInfo | null;
    product_info?: AppendixSerpDaysRatesDataInfo | null;
};

export type AppendixMerchantAmazonInfo = {
    asin?: AppendixSerpDaysRatesDataInfo | null;
    products?: AppendixSerpDaysRatesDataInfo | null;
    sellers?: AppendixSerpDaysRatesDataInfo | null;
};

export type AppendixMerchantLimitsRatesDataInfo = {
    google?: AppendixMerchantGoogleInfo | null;
    amazon?: AppendixMerchantAmazonInfo | null;
    locations?: number | null;
    languages?: number | null;
    errors?: number | null;
    reviews?: AppendixSerpDaysRatesDataInfo | null;
    tasks_ready?: number | null;
};

export type AppendixOnPageLimitsRatesDataInfo = {
    task_post?: number | null;
    tasks_ready?: number | null;
    summary?: number | null;
    resources?: number | null;
    pages?: number | null;
    non_indexable?: number | null;
    duplicate_tags?: number | null;
    links?: number | null;
    waterfall?: number | null;
    errors?: number | null;
    pages_by_resource?: number | null;
    duplicate_content?: number | null;
    raw_html?: number | null;
    instant_pages?: number | null;
    redirect_chains?: number | null;
    lighthouse?: AppendixInfo | null;
    keyword_density?: number | null;
    page_screenshot?: number | null;
    content_parsing?: number | null;
    content_parsing_live?: number | null;
};

export type AppendixBusinessDataGoogleInfo = {
    my_business_info?: AppendixInfo | null;
    my_business_updates?: AppendixInfo | null;
    hotel_info?: AppendixSerpDaysRatesDataInfo | null;
    hotel_searches?: AppendixInfo | null;
    reviews?: AppendixInfo | null;
    questions_and_answers?: AppendixInfo | null;
    extended_reviews?: AppendixInfo | null;
};

export type AppendixBusinessDataDayLimitsRatesDataInfo = {
    reviews?: AppendixInfo | null;
    search?: AppendixInfo | null;
};

export type AppendixSocialMediaBusinessDataLimitsRatesDataInfo = {
    facebook?: AppendixInfo | null;
    pinterest?: AppendixInfo | null;
    reddit?: AppendixInfo | null;
};

export type AppendixBusinessListingsBusinessDataLimitsRatesDataInfo = {
    search?: AppendixInfo | null;
    categories_aggregation?: AppendixInfo | null;
    categories?: number | null;
    locations?: number | null;
};

export type AppendixBusinessDataLimitsRatesDataInfo = {
    google?: AppendixBusinessDataGoogleInfo | null;
    locations?: number | null;
    languages?: number | null;
    errors?: number | null;
    yelp?: AppendixBusinessDataDayLimitsRatesDataInfo | null;
    social_media?: AppendixSocialMediaBusinessDataLimitsRatesDataInfo | null;
    tripadvisor?: AppendixBusinessDataDayLimitsRatesDataInfo | null;
    trustpilot?: AppendixBusinessDataDayLimitsRatesDataInfo | null;
    business_listings?: AppendixBusinessListingsBusinessDataLimitsRatesDataInfo | null;
    tasks_ready?: number | null;
};

export type AppendixBacklinksLimitsRatesDataInfo = {
    summary?: AppendixInfo | null;
    history?: AppendixInfo | null;
    content_duplicates?: AppendixInfo | null;
    domain_intersection?: AppendixInfo | null;
    backlinks?: AppendixInfo | null;
    domain_pages?: AppendixInfo | null;
    anchors?: AppendixInfo | null;
    referring_domains?: AppendixInfo | null;
    page_intersection?: AppendixInfo | null;
    referring_networks?: AppendixInfo | null;
    bulk_ranks?: AppendixInfo | null;
    bulk_backlinks?: AppendixInfo | null;
    bulk_new_lost_backlinks?: AppendixInfo | null;
    bulk_new_lost_referring_domains?: AppendixInfo | null;
    bulk_referring_domains?: AppendixInfo | null;
    errors?: number | null;
    domain_pages_summary?: AppendixInfo | null;
    timeseries_summary?: AppendixInfo | null;
    timeseries_new_lost_summary?: AppendixInfo | null;
    competitors?: AppendixInfo | null;
    bulk_spam_score?: AppendixInfo | null;
    bulk_pages_summary?: AppendixInfo | null;
};

export type AppendixAppDataLimitsRatesDataInfo = {
    app_info?: AppendixSerpDaysRatesDataInfo | null;
    app_list?: AppendixSerpDaysRatesDataInfo | null;
    app_reviews?: AppendixSerpDaysRatesDataInfo | null;
    app_searches?: AppendixSerpDaysRatesDataInfo | null;
    errors?: number | null;
    languages?: number | null;
    locations?: number | null;
    categories?: number | null;
    app_listings?: AppendixBusinessListingsBusinessDataLimitsRatesDataInfo | null;
    tasks_ready?: number | null;
};

export type AppendixContentAnalysisLimitsRatesDataInfo = {
    search?: AppendixInfo | null;
    summary?: AppendixInfo | null;
    sentiment_analysis?: AppendixInfo | null;
    rating_distribution?: AppendixInfo | null;
    phrase_trends?: AppendixInfo | null;
    category_trends?: AppendixInfo | null;
    locations?: number | null;
    languages?: number | null;
    categories?: number | null;
    errors?: number | null;
};

export type AppendixContentGenerationDayLimitsRatesDataInfo = {
    live?: number | null;
    languages?: number | null;
};

export type AppendixContentGenerationLimitsRatesDataInfo = {
    generate?: AppendixInfo | null;
    generate_meta_tags?: AppendixInfo | null;
    generate_text?: AppendixInfo | null;
    paraphrase?: AppendixInfo | null;
    check_grammar?: AppendixContentGenerationDayLimitsRatesDataInfo | null;
    text_summary?: AppendixContentGenerationDayLimitsRatesDataInfo | null;
    generate_sub_topics?: AppendixInfo | null;
};

export type AppendixDayLimitsRatesData = {
    serp?: AppendixSerpDaysRatesDataInfo | null;
    /**
     * total amount of money deposited to your account
     */
    total?: number | null;
    total_serp?: number | null;
    keywords_data?: AppendixKeywordsDataDaysRatesDataInfo | null;
    total_keywords_data?: number | null;
    appendix?: AppendixAppendixDaysRatesDataInfo | null;
    total_appendix?: number | null;
    dataforseo_labs?: AppendixDataforseoLabsLimitsRatesDataInfo | null;
    total_dataforseo_labs?: number | null;
    domain_analytics?: AppendixDomainAnalyticsLimitsRatesDataInfo | null;
    total_domain_analytics?: number | null;
    merchant?: AppendixMerchantLimitsRatesDataInfo | null;
    total_merchant?: number | null;
    on_page?: AppendixOnPageLimitsRatesDataInfo | null;
    total_on_page?: number | null;
    business_data?: AppendixBusinessDataLimitsRatesDataInfo | null;
    total_business_data?: number | null;
    backlinks?: AppendixBacklinksLimitsRatesDataInfo | null;
    total_backlinks?: number | null;
    app_data?: AppendixAppDataLimitsRatesDataInfo | null;
    total_app_data?: number | null;
    content_analysis?: AppendixContentAnalysisLimitsRatesDataInfo | null;
    total_content_analysis?: number | null;
    content_generation?: AppendixContentGenerationLimitsRatesDataInfo | null;
    total_content_generation?: number | null;
    total_traffic_analytics?: number | null;
    total_reviews?: number | null;
    total_social?: number | null;
};

export type AppendixSerpDataInfo = {
    task_post?: number | null;
    task_get?: AppendixFunctionTypeInfo | null;
    tasks_ready?: number | null;
    locations?: number | null;
    languages?: number | null;
    live?: AppendixFunctionTypeInfo | null;
    errors?: number | null;
    tasks_fixed?: number | null;
    jobs?: AppendixJobsSerpLimitsRatesDataInfo | null;
    screenshot?: number | null;
    tasks_ready_queue?: number | null;
};

export type AppendixNaverKeywordsDataDataInfo = {
    keywords_for_category?: AppendixInfo | null;
    search_volume?: AppendixInfo | null;
};

export type AppendixKeywordsDataDataInfo = {
    keywords_for_keywords?: AppendixInfo | null;
    keywords_for_site?: AppendixInfo | null;
    search_volume?: AppendixInfo | null;
    ad_traffic_by_keywords?: AppendixInfo | null;
    languages?: number | null;
    locations?: number | null;
    tasks_ready?: number | null;
    explore?: AppendixInfo | null;
    categories?: number | null;
    errors?: number | null;
    bing?: AppendixBingKeywordsDataLimitsRatesDataInfo | null;
    keyword_performance?: AppendixInfo | null;
    locations_and_languages?: number | null;
    google_ads?: AppendixGoogleAdsKeywordsDataLimitsRatesDataInfo | null;
    dataforseo_trends?: AppendixDataforseoTrendsKeywordsDataLimitsRatesDataInfo | null;
    clickstream_data?: AppendixClickstreamDataKeywordsDataLimitsRatesDataInfo | null;
    audience_estimation?: AppendixInfo | null;
    keyword_suggestions_for_url?: AppendixInfo | null;
    naver?: AppendixNaverKeywordsDataDataInfo | null;
    google?: AppendixBingKeywordsDataLimitsRatesDataInfo | null;
    keyword_ideas_ads_api?: AppendixSerpDaysRatesDataInfo | null;
};

export type AppendixAppendixDataInfo = {
    user_data?: number | null;
    errors?: number | null;
    status?: number | null;
    test?: number | null;
};

export type AppendixDataInfo = {
    serp?: AppendixSerpDataInfo | null;
    /**
     * total amount of money deposited to your account
     */
    total?: number | null;
    total_serp?: number | null;
    keywords_data?: AppendixKeywordsDataDataInfo | null;
    total_keywords_data?: number | null;
    appendix?: AppendixAppendixDataInfo | null;
    total_appendix?: number | null;
    dataforseo_labs?: AppendixDataforseoLabsLimitsRatesDataInfo | null;
    total_dataforseo_labs?: number | null;
    domain_analytics?: AppendixDomainAnalyticsLimitsRatesDataInfo | null;
    total_domain_analytics?: number | null;
    merchant?: AppendixMerchantLimitsRatesDataInfo | null;
    total_merchant?: number | null;
    on_page?: AppendixOnPageLimitsRatesDataInfo | null;
    total_on_page?: number | null;
    business_data?: AppendixBusinessDataLimitsRatesDataInfo | null;
    total_business_data?: number | null;
    backlinks?: AppendixBacklinksLimitsRatesDataInfo | null;
    total_backlinks?: number | null;
    app_data?: AppendixAppDataLimitsRatesDataInfo | null;
    total_app_data?: number | null;
    content_analysis?: AppendixContentAnalysisLimitsRatesDataInfo | null;
    total_content_analysis?: number | null;
    content_generation?: AppendixContentGenerationLimitsRatesDataInfo | null;
    total_content_generation?: number | null;
    total_traffic_analytics?: number | null;
    traffic_analytics?: AppendixSerpDaysRatesDataInfo | null;
    total_reviews?: number | null;
    reviews?: AppendixSerpDaysRatesDataInfo | null;
    total_social?: number | null;
    social?: AppendixSerpDaysRatesDataInfo | null;
};

export type AppendixLimitsRatesData = {
    day?: AppendixDayLimitsRatesData | null;
    minute?: AppendixDataInfo | null;
};

export type AppendixStatisticsRatesDataInfo = {
    serp?: AppendixSerpDaysRatesDataInfo | null;
    /**
     * total amount of money deposited to your account
     */
    total?: number | null;
    total_serp?: number | null;
    keywords_data?: AppendixKeywordsDataDaysRatesDataInfo | null;
    total_keywords_data?: number | null;
    appendix?: AppendixAppendixDaysRatesDataInfo | null;
    total_appendix?: number | null;
    dataforseo_labs?: AppendixDataforseoLabsLimitsRatesDataInfo | null;
    total_dataforseo_labs?: number | null;
    domain_analytics?: AppendixDomainAnalyticsLimitsRatesDataInfo | null;
    total_domain_analytics?: number | null;
    merchant?: AppendixMerchantLimitsRatesDataInfo | null;
    total_merchant?: number | null;
    on_page?: AppendixOnPageLimitsRatesDataInfo | null;
    total_on_page?: number | null;
    business_data?: AppendixBusinessDataLimitsRatesDataInfo | null;
    total_business_data?: number | null;
    backlinks?: AppendixBacklinksLimitsRatesDataInfo | null;
    total_backlinks?: number | null;
    app_data?: AppendixAppDataLimitsRatesDataInfo | null;
    total_app_data?: number | null;
    content_analysis?: AppendixContentAnalysisLimitsRatesDataInfo | null;
    total_content_analysis?: number | null;
    content_generation?: AppendixContentGenerationLimitsRatesDataInfo | null;
    total_content_generation?: number | null;
    /**
     * time period for grouping
     * day in the yyyy-MM-dd format
     * minute in the yyyy-MM-dd HH:mm format
     */
    value?: string | null;
};

export type AppendixStatisticsDataInfo = {
    day?: AppendixStatisticsRatesDataInfo | null;
    minute?: AppendixStatisticsRatesDataInfo | null;
};

export type AppendixRatesData = {
    /**
     * rate limits for API calls per a certain period of time
     */
    limits?: AppendixLimitsRatesData | null;
    /**
     * statisctics for API calls
     */
    statistics?: AppendixStatisticsDataInfo | null;
};

export type AppendixLimitsMoneyData = {
    day?: AppendixDataInfo | null;
    minute?: AppendixDataInfo | null;
};

export type AppendixMoneyData = {
    /**
     * total amount of money deposited to your account
     */
    total?: number | null;
    /**
     * amount of money left in your account
     */
    balance?: number | null;
    /**
     * cost limits
     */
    limits?: AppendixLimitsMoneyData | null;
    /**
     * statistics of your spending
     */
    statistics?: AppendixStatisticsDataInfo | null;
};

export type AppendixPriorityTasksReadyKeywordsDataPriceDataInfo = {
    /**
     * charge type
     * can take the following values:
     * per_result – charge for every row in the result array
     * per_request – charge for a GET or POST request
     */
    cost_type?: string | null;
    /**
     * cost, USD
     */
    cost?: number | null;
};

export type AppendixTaskKeywordsDataPriceDataInfo = {
    priority_low?: Array<AppendixPriorityTasksReadyKeywordsDataPriceDataInfo | null> | null;
    priority_normal?: Array<AppendixPriorityTasksReadyKeywordsDataPriceDataInfo | null> | null;
    priority_high?: Array<AppendixPriorityTasksReadyKeywordsDataPriceDataInfo | null> | null;
};

export type AppendixAKeywordsDataPriceDataInfo = {
    task_get?: AppendixTaskKeywordsDataPriceDataInfo | null;
    task_post?: AppendixTaskKeywordsDataPriceDataInfo | null;
};

export type AppendixBingKeywordsDataPriceDataInfo = {
    live?: AppendixTaskKeywordsDataPriceDataInfo | null;
};

export type AppendixBingKeywordsDataPriceData = {
    audience_estimation?: AppendixBingKeywordsDataPriceDataInfo | null;
    keyword_performance?: AppendixBingKeywordsDataPriceDataInfo | null;
    keywords_for_keywords?: AppendixBingKeywordsDataPriceDataInfo | null;
    keywords_for_site?: AppendixBingKeywordsDataPriceDataInfo | null;
    keyword_suggestions_for_url?: AppendixBingKeywordsDataPriceDataInfo | null;
    search_volume?: AppendixBingKeywordsDataPriceDataInfo | null;
};

export type AppendixClickstreamDataKeywordsDataPriceData = {
    bulk_search_volume?: AppendixBingKeywordsDataPriceDataInfo | null;
    dataforseo_search_volume?: AppendixBingKeywordsDataPriceDataInfo | null;
    global_search_volume?: AppendixBingKeywordsDataPriceDataInfo | null;
    locations_and_languages?: AppendixTaskKeywordsDataPriceDataInfo | null;
};

export type AppendixGoogleAdsKeywordsDataPriceData = {
    ad_traffic_by_keywords?: AppendixBingKeywordsDataPriceDataInfo | null;
    keywords_for_keywords?: AppendixBingKeywordsDataPriceDataInfo | null;
    keywords_for_site?: AppendixBingKeywordsDataPriceDataInfo | null;
    search_volume?: AppendixBingKeywordsDataPriceDataInfo | null;
    status?: AppendixTaskKeywordsDataPriceDataInfo | null;
};

export type AppendixDataforseoTrendsKeywordsDataPriceData = {
    demography?: AppendixBingKeywordsDataPriceDataInfo | null;
    explore?: AppendixBingKeywordsDataPriceDataInfo | null;
    merged_data?: AppendixBingKeywordsDataPriceDataInfo | null;
    subregion_interests?: AppendixBingKeywordsDataPriceDataInfo | null;
};

export type AppendixExploreKeywordsDataPriceData = {
    live?: AppendixTaskKeywordsDataPriceDataInfo | null;
    task_get?: AppendixTaskKeywordsDataPriceDataInfo | null;
    task_post?: AppendixTaskKeywordsDataPriceDataInfo | null;
};

export type AppendixKeywordsDataPriceData = {
    tasks_ready?: AppendixTaskKeywordsDataPriceDataInfo | null;
    ad_traffic_by_keywords?: AppendixAKeywordsDataPriceDataInfo | null;
    audience_estimation?: AppendixAKeywordsDataPriceDataInfo | null;
    bing?: AppendixBingKeywordsDataPriceData | null;
    categories?: AppendixTaskKeywordsDataPriceDataInfo | null;
    clickstream_data?: AppendixClickstreamDataKeywordsDataPriceData | null;
    errors?: AppendixTaskKeywordsDataPriceDataInfo | null;
    google_ads?: AppendixGoogleAdsKeywordsDataPriceData | null;
    keyword_performance?: AppendixAKeywordsDataPriceDataInfo | null;
    keywords_for_keywords?: AppendixAKeywordsDataPriceDataInfo | null;
    keywords_for_site?: AppendixAKeywordsDataPriceDataInfo | null;
    keyword_suggestions_for_url?: AppendixAKeywordsDataPriceDataInfo | null;
    languages?: AppendixTaskKeywordsDataPriceDataInfo | null;
    locations?: AppendixTaskKeywordsDataPriceDataInfo | null;
    locations_and_languages?: AppendixTaskKeywordsDataPriceDataInfo | null;
    search_volume?: AppendixAKeywordsDataPriceDataInfo | null;
    dataforseo_trends?: AppendixDataforseoTrendsKeywordsDataPriceData | null;
    explore?: AppendixExploreKeywordsDataPriceData | null;
};

export type AppendixTaskGetPriceDataInfo = {
    advanced?: AppendixTaskKeywordsDataPriceDataInfo | null;
};

export type AppendixPriceDataInfo = {
    task_get?: AppendixTaskGetPriceDataInfo | null;
    tasks_ready?: AppendixTaskKeywordsDataPriceDataInfo | null;
    task_post?: AppendixTaskKeywordsDataPriceDataInfo | null;
};

export type AppendixTaskGetProductGoogleMerchantPriceDataInfo = {
    advanced?: AppendixTaskKeywordsDataPriceDataInfo | null;
    html?: AppendixTaskKeywordsDataPriceDataInfo | null;
};

export type AppendixProductGoogleMerchantPriceDataInfo = {
    task_get?: AppendixTaskGetProductGoogleMerchantPriceDataInfo | null;
    task_post?: AppendixTaskKeywordsDataPriceDataInfo | null;
    tasks_ready?: AppendixTaskKeywordsDataPriceDataInfo | null;
};

export type AppendixSellersGoogleMerchantPriceData = {
    ad_url?: AppendixTaskKeywordsDataPriceDataInfo | null;
    task_get?: AppendixTaskGetProductGoogleMerchantPriceDataInfo | null;
    task_post?: AppendixTaskKeywordsDataPriceDataInfo | null;
    tasks_ready?: AppendixTaskKeywordsDataPriceDataInfo | null;
};

export type AppendixGoogleMerchantPriceData = {
    product_info?: AppendixPriceDataInfo | null;
    product_spec?: AppendixProductGoogleMerchantPriceDataInfo | null;
    products?: AppendixProductGoogleMerchantPriceDataInfo | null;
    sellers?: AppendixSellersGoogleMerchantPriceData | null;
};

export type AppendixAmazonMerchantPriceData = {
    asin?: AppendixProductGoogleMerchantPriceDataInfo | null;
    products?: AppendixProductGoogleMerchantPriceDataInfo | null;
    sellers?: AppendixProductGoogleMerchantPriceDataInfo | null;
};

export type AppendixMerchantPriceData = {
    google?: AppendixGoogleMerchantPriceData | null;
    amazon?: AppendixAmazonMerchantPriceData | null;
    errors?: AppendixTaskKeywordsDataPriceDataInfo | null;
    languages?: AppendixTaskKeywordsDataPriceDataInfo | null;
    locations?: AppendixTaskKeywordsDataPriceDataInfo | null;
    reviews?: AppendixProductGoogleMerchantPriceDataInfo | null;
    tasks_ready?: AppendixTaskKeywordsDataPriceDataInfo | null;
};

export type AppendixSerpPriceDataInfo = {
    advanced?: AppendixTaskKeywordsDataPriceDataInfo | null;
    regular?: AppendixTaskKeywordsDataPriceDataInfo | null;
    html?: AppendixTaskKeywordsDataPriceDataInfo | null;
};

export type AppendixSerpPriceData = {
    tasks_fixed?: AppendixTaskKeywordsDataPriceDataInfo | null;
    errors?: AppendixTaskKeywordsDataPriceDataInfo | null;
    jobs?: AppendixAKeywordsDataPriceDataInfo | null;
    languages?: AppendixTaskKeywordsDataPriceDataInfo | null;
    live?: AppendixSerpPriceDataInfo | null;
    locations?: AppendixTaskKeywordsDataPriceDataInfo | null;
    screenshot?: AppendixTaskKeywordsDataPriceDataInfo | null;
    task_get?: AppendixSerpPriceDataInfo | null;
    task_post?: AppendixTaskKeywordsDataPriceDataInfo | null;
    tasks_ready?: AppendixTaskKeywordsDataPriceDataInfo | null;
};

export type AppendixAppendixPriceData = {
    errors?: AppendixTaskKeywordsDataPriceDataInfo | null;
    user_data?: AppendixTaskKeywordsDataPriceDataInfo | null;
};

export type AppendixAppListingsAppDataPriceData = {
    categories_aggregation?: AppendixBingKeywordsDataPriceDataInfo | null;
    search?: AppendixBingKeywordsDataPriceDataInfo | null;
};

export type AppendixAppDataPriceData = {
    app_info?: AppendixProductGoogleMerchantPriceDataInfo | null;
    app_listings?: AppendixAppListingsAppDataPriceData | null;
    app_list?: AppendixProductGoogleMerchantPriceDataInfo | null;
    app_reviews?: AppendixPriceDataInfo | null;
    app_searches?: AppendixProductGoogleMerchantPriceDataInfo | null;
    categories?: AppendixTaskKeywordsDataPriceDataInfo | null;
    errors?: AppendixTaskKeywordsDataPriceDataInfo | null;
    languages?: AppendixTaskKeywordsDataPriceDataInfo | null;
    locations?: AppendixTaskKeywordsDataPriceDataInfo | null;
    tasks_ready?: AppendixTaskKeywordsDataPriceDataInfo | null;
};

export type AppendixBacklinksPriceData = {
    anchors?: AppendixBingKeywordsDataPriceDataInfo | null;
    backlinks?: AppendixBingKeywordsDataPriceDataInfo | null;
    bulk_backlinks?: AppendixBingKeywordsDataPriceDataInfo | null;
    bulk_new_lost_backlinks?: AppendixBingKeywordsDataPriceDataInfo | null;
    bulk_new_lost_referring_domains?: AppendixBingKeywordsDataPriceDataInfo | null;
    bulk_pages_summary?: AppendixBingKeywordsDataPriceDataInfo | null;
    bulk_ranks?: AppendixBingKeywordsDataPriceDataInfo | null;
    bulk_referring_domains?: AppendixBingKeywordsDataPriceDataInfo | null;
    bulk_spam_score?: AppendixBingKeywordsDataPriceDataInfo | null;
    competitors?: AppendixBingKeywordsDataPriceDataInfo | null;
    content_duplicates?: AppendixBingKeywordsDataPriceDataInfo | null;
    domain_intersection?: AppendixBingKeywordsDataPriceDataInfo | null;
    domain_pages?: AppendixBingKeywordsDataPriceDataInfo | null;
    domain_pages_summary?: AppendixBingKeywordsDataPriceDataInfo | null;
    errors?: AppendixTaskKeywordsDataPriceDataInfo | null;
    history?: AppendixBingKeywordsDataPriceDataInfo | null;
    page_intersection?: AppendixBingKeywordsDataPriceDataInfo | null;
    referring_domains?: AppendixBingKeywordsDataPriceDataInfo | null;
    referring_networks?: AppendixBingKeywordsDataPriceDataInfo | null;
    summary?: AppendixBingKeywordsDataPriceDataInfo | null;
    timeseries_new_lost_summary?: AppendixBingKeywordsDataPriceDataInfo | null;
    timeseries_summary?: AppendixBingKeywordsDataPriceDataInfo | null;
};

export type AppendixBusinessListingsBusinessDataPriceData = {
    categories?: AppendixTaskKeywordsDataPriceDataInfo | null;
    categories_aggregation?: AppendixBingKeywordsDataPriceDataInfo | null;
    locations?: AppendixTaskKeywordsDataPriceDataInfo | null;
    search?: AppendixBingKeywordsDataPriceDataInfo | null;
};

export type AppendixHotelInfoGoogleBusinessDataPriceData = {
    live?: AppendixTaskGetProductGoogleMerchantPriceDataInfo | null;
    task_get?: AppendixTaskGetProductGoogleMerchantPriceDataInfo | null;
    task_post?: AppendixTaskKeywordsDataPriceDataInfo | null;
    tasks_ready?: AppendixTaskKeywordsDataPriceDataInfo | null;
};

export type AppendixGoogleBusinessDataPriceDataInfo = {
    live?: AppendixTaskKeywordsDataPriceDataInfo | null;
    task_get?: AppendixTaskKeywordsDataPriceDataInfo | null;
    task_post?: AppendixTaskKeywordsDataPriceDataInfo | null;
    tasks_ready?: AppendixTaskKeywordsDataPriceDataInfo | null;
};

export type AppendixGoogleBusinessDataPriceData = {
    extended_reviews?: AppendixAKeywordsDataPriceDataInfo | null;
    hotel_info?: AppendixHotelInfoGoogleBusinessDataPriceData | null;
    hotel_searches?: AppendixGoogleBusinessDataPriceDataInfo | null;
    my_business_info?: AppendixGoogleBusinessDataPriceDataInfo | null;
    my_business_updates?: AppendixGoogleBusinessDataPriceDataInfo | null;
    questions_and_answers?: AppendixGoogleBusinessDataPriceDataInfo | null;
    reviews?: AppendixGoogleBusinessDataPriceDataInfo | null;
};

export type AppendixSocialMediaBusinessDataPriceData = {
    facebook?: AppendixBingKeywordsDataPriceDataInfo | null;
    pinterest?: AppendixBingKeywordsDataPriceDataInfo | null;
    reddit?: AppendixBingKeywordsDataPriceDataInfo | null;
};

export type AppendixTrBusinessDataPriceDataInfo = {
    reviews?: AppendixGoogleBusinessDataPriceDataInfo | null;
    search?: AppendixGoogleBusinessDataPriceDataInfo | null;
};

export type AppendixBusinessDataPriceData = {
    business_listings?: AppendixBusinessListingsBusinessDataPriceData | null;
    errors?: AppendixTaskKeywordsDataPriceDataInfo | null;
    google?: AppendixGoogleBusinessDataPriceData | null;
    social_media?: AppendixSocialMediaBusinessDataPriceData | null;
    languages?: AppendixTaskKeywordsDataPriceDataInfo | null;
    locations?: AppendixTaskKeywordsDataPriceDataInfo | null;
    tripadvisor?: AppendixTrBusinessDataPriceDataInfo | null;
    trustpilot?: AppendixTrBusinessDataPriceDataInfo | null;
    yelp?: AppendixTrBusinessDataPriceDataInfo | null;
    tasks_ready?: AppendixTaskKeywordsDataPriceDataInfo | null;
};

export type AppendixContentAnalysisPriceData = {
    categories?: AppendixTaskKeywordsDataPriceDataInfo | null;
    category_trends?: AppendixBingKeywordsDataPriceDataInfo | null;
    errors?: AppendixTaskKeywordsDataPriceDataInfo | null;
    languages?: AppendixTaskKeywordsDataPriceDataInfo | null;
    locations?: AppendixTaskKeywordsDataPriceDataInfo | null;
    phrase_trends?: AppendixBingKeywordsDataPriceDataInfo | null;
    rating_distribution?: AppendixBingKeywordsDataPriceDataInfo | null;
    search?: AppendixBingKeywordsDataPriceDataInfo | null;
    sentiment_analysis?: AppendixBingKeywordsDataPriceDataInfo | null;
    summary?: AppendixBingKeywordsDataPriceDataInfo | null;
};

export type AppendixContentGenerationPriceDataInfo = {
    live?: AppendixTaskKeywordsDataPriceDataInfo | null;
    languages?: AppendixTaskKeywordsDataPriceDataInfo | null;
};

export type AppendixContentGenerationPriceData = {
    check_grammar?: AppendixContentGenerationPriceDataInfo | null;
    generate?: AppendixBingKeywordsDataPriceDataInfo | null;
    generate_meta_tags?: AppendixBingKeywordsDataPriceDataInfo | null;
    generate_sub_topics?: AppendixBingKeywordsDataPriceDataInfo | null;
    generate_text?: AppendixBingKeywordsDataPriceDataInfo | null;
    paraphrase?: AppendixBingKeywordsDataPriceDataInfo | null;
    text_summary?: AppendixContentGenerationPriceDataInfo | null;
};

export type AppendixDataforseoLabsPriceData = {
    app_competitors?: AppendixBingKeywordsDataPriceDataInfo | null;
    app_intersection?: AppendixBingKeywordsDataPriceDataInfo | null;
    bulk_app_metrics?: AppendixBingKeywordsDataPriceDataInfo | null;
    bulk_keyword_difficulty?: AppendixBingKeywordsDataPriceDataInfo | null;
    bulk_search_volume?: AppendixBingKeywordsDataPriceDataInfo | null;
    bulk_traffic_estimation?: AppendixBingKeywordsDataPriceDataInfo | null;
    categories?: AppendixTaskKeywordsDataPriceDataInfo | null;
    categories_for_domain?: AppendixBingKeywordsDataPriceDataInfo | null;
    categories_for_keywords?: AppendixBingKeywordsDataPriceDataInfo | null;
    competitors_domain?: AppendixBingKeywordsDataPriceDataInfo | null;
    domain_intersection?: AppendixBingKeywordsDataPriceDataInfo | null;
    domain_metrics_by_categories?: AppendixBingKeywordsDataPriceDataInfo | null;
    domain_rank_overview?: AppendixBingKeywordsDataPriceDataInfo | null;
    domain_whois_overview?: AppendixBingKeywordsDataPriceDataInfo | null;
    errors?: AppendixTaskKeywordsDataPriceDataInfo | null;
    historical_bulk_traffic_estimation?: AppendixBingKeywordsDataPriceDataInfo | null;
    historical_keyword_data?: AppendixBingKeywordsDataPriceDataInfo | null;
    historical_rank_overview?: AppendixBingKeywordsDataPriceDataInfo | null;
    historical_search_volume?: AppendixBingKeywordsDataPriceDataInfo | null;
    historical_serps?: AppendixBingKeywordsDataPriceDataInfo | null;
    keyword_ideas?: AppendixBingKeywordsDataPriceDataInfo | null;
    keyword_overview?: AppendixBingKeywordsDataPriceDataInfo | null;
    keywords_for_app?: AppendixBingKeywordsDataPriceDataInfo | null;
    keywords_for_categories?: AppendixBingKeywordsDataPriceDataInfo | null;
    keywords_for_site?: AppendixBingKeywordsDataPriceDataInfo | null;
    keyword_suggestions?: AppendixBingKeywordsDataPriceDataInfo | null;
    locations_and_languages?: AppendixTaskKeywordsDataPriceDataInfo | null;
    page_intersection?: AppendixBingKeywordsDataPriceDataInfo | null;
    product_competitors?: AppendixBingKeywordsDataPriceDataInfo | null;
    product_keyword_intersections?: AppendixBingKeywordsDataPriceDataInfo | null;
    product_rank_overview?: AppendixBingKeywordsDataPriceDataInfo | null;
    ranked_keywords?: AppendixBingKeywordsDataPriceDataInfo | null;
    related_keywords?: AppendixBingKeywordsDataPriceDataInfo | null;
    relevant_pages?: AppendixBingKeywordsDataPriceDataInfo | null;
    search_intent?: AppendixBingKeywordsDataPriceDataInfo | null;
    serp_competitors?: AppendixBingKeywordsDataPriceDataInfo | null;
    subdomains?: AppendixBingKeywordsDataPriceDataInfo | null;
    top_searches?: AppendixBingKeywordsDataPriceDataInfo | null;
};

export type AppendixWhoisDomainAnalyticsPriceData = {
    overview?: AppendixBingKeywordsDataPriceDataInfo | null;
};

export type AppendixTechnologiesDomainAnalyticsPriceData = {
    languages?: AppendixTaskKeywordsDataPriceDataInfo | null;
    locations?: AppendixTaskKeywordsDataPriceDataInfo | null;
    technologies?: AppendixTaskKeywordsDataPriceDataInfo | null;
    aggregation_technologies?: AppendixBingKeywordsDataPriceDataInfo | null;
    domains_by_html_terms?: AppendixBingKeywordsDataPriceDataInfo | null;
    domains_by_technology?: AppendixBingKeywordsDataPriceDataInfo | null;
    domain_technologies?: AppendixBingKeywordsDataPriceDataInfo | null;
    technologies_summary?: AppendixBingKeywordsDataPriceDataInfo | null;
    technology_stats?: AppendixBingKeywordsDataPriceDataInfo | null;
};

export type AppendixDomainAnalyticsPriceData = {
    whois?: AppendixWhoisDomainAnalyticsPriceData | null;
    technologies?: AppendixTechnologiesDomainAnalyticsPriceData | null;
    errors?: AppendixTaskKeywordsDataPriceDataInfo | null;
    tasks_ready?: AppendixTaskKeywordsDataPriceDataInfo | null;
};

export type AppendixOnPagePriceData = {
    errors?: AppendixTaskKeywordsDataPriceDataInfo | null;
    lighthouse?: AppendixGoogleBusinessDataPriceDataInfo | null;
    content_parsing?: AppendixTaskKeywordsDataPriceDataInfo | null;
    content_parsing_live?: AppendixTaskKeywordsDataPriceDataInfo | null;
    duplicate_content?: AppendixTaskKeywordsDataPriceDataInfo | null;
    duplicate_tags?: AppendixTaskKeywordsDataPriceDataInfo | null;
    instant_pages?: AppendixTaskKeywordsDataPriceDataInfo | null;
    keyword_density?: AppendixTaskKeywordsDataPriceDataInfo | null;
    links?: AppendixTaskKeywordsDataPriceDataInfo | null;
    non_indexable?: AppendixTaskKeywordsDataPriceDataInfo | null;
    pages?: AppendixTaskKeywordsDataPriceDataInfo | null;
    pages_by_resource?: AppendixTaskKeywordsDataPriceDataInfo | null;
    page_screenshot?: AppendixTaskKeywordsDataPriceDataInfo | null;
    raw_html?: AppendixTaskKeywordsDataPriceDataInfo | null;
    redirect_chains?: AppendixTaskKeywordsDataPriceDataInfo | null;
    resources?: AppendixTaskKeywordsDataPriceDataInfo | null;
    summary?: AppendixTaskKeywordsDataPriceDataInfo | null;
    task_post?: AppendixTaskKeywordsDataPriceDataInfo | null;
    tasks_ready?: AppendixTaskKeywordsDataPriceDataInfo | null;
    waterfall?: AppendixTaskKeywordsDataPriceDataInfo | null;
};

export type AppendixPriceData = {
    keywords_data?: AppendixKeywordsDataPriceData | null;
    merchant?: AppendixMerchantPriceData | null;
    serp?: AppendixSerpPriceData | null;
    appendix?: AppendixAppendixPriceData | null;
    app_data?: AppendixAppDataPriceData | null;
    backlinks?: AppendixBacklinksPriceData | null;
    business_data?: AppendixBusinessDataPriceData | null;
    content_analysis?: AppendixContentAnalysisPriceData | null;
    content_generation?: AppendixContentGenerationPriceData | null;
    dataforseo_labs?: AppendixDataforseoLabsPriceData | null;
    domain_analytics?: AppendixDomainAnalyticsPriceData | null;
    on_page?: AppendixOnPagePriceData | null;
};

export type AppendixUserDataResultInfo = {
    /**
     * your login
     */
    login?: string | null;
    /**
     * your time zone
     * can be set in your profile settings
     */
    timezone?: string | null;
    /**
     * your API rates
     */
    rates?: AppendixRatesData | null;
    /**
     * section of your spending, USD
     */
    money?: AppendixMoneyData | null;
    /**
     * pricing
     */
    price?: AppendixPriceData | null;
    /**
     * expiry date of the backlinks api subscription
     * date and time when the current subscription to Backlinks API expires;
     * in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00”
     * example:
     * 2025-06-15 12:57:46 +00:00
     * Note: if there is no active subscription to Backlinks API, the value equals null
     */
    backlinks_subscription_expiry_date?: string | null;
};

export type AppendixUserDataTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppendixUserDataResultInfo | null> | null;
};

export type AppendixUserDataResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppendixUserDataTaskInfo | null> | null;
};

export type AppendixErrorsResultInfo = {
    /**
     * code
     */
    code?: number | null;
    /**
     * message
     */
    message?: string | null;
};

export type AppendixErrorsTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppendixErrorsResultInfo | null> | null;
};

export type AppendixErrorsResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppendixErrorsTaskInfo | null> | null;
};

export type AppendixWebhookResendRequestInfo = {
    /**
     * task identifier
     * unique task identifier in our system in the UUID format
     * you can specify up to 100 identifiers;
     * each identifier in the task array must be specified as a separate object
     */
    id?: string | null;
};

export type AppendixWebhookResendTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     * the value of this array is always null;
     * you can get the results by the preferred method of results delivery (pingback or postback) you specified when setting a task
     */
    result?: {
        [key: string]: unknown;
    } | null;
};

export type AppendixWebhookResendResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppendixWebhookResendTaskInfo | null> | null;
};

export type AppendixStatusEndpointsInfo = {
    /**
     * name of the endpoint
     * the list of possible endpoints:
     * task_get
     * task_post
     * live
     * postback/pingback
     */
    endpoint?: string | null;
    /**
     * current status
     * you can find all information about your API statuses for the last 60 days here
     * the list of possible current statuses:
     * major_outage
     * partial_outage
     * long_response_time
     * long_execution_time
     * webhook_delay
     * send_delay
     */
    status?: string | null;
};

export type AppendixStatusResultInfo = {
    /**
     * name of the API
     * the list of APIs:
     * serp
     * keywords_data
     * appendix
     * dataforseo_labs
     * domain_analytics
     * merchant
     * on_page
     * business_data
     * backlinks
     * app_data
     * content_analysis
     * content_generation
     */
    api?: string | null;
    /**
     * current status
     * you can find all information about the statuses of our endpoints for the last 60 days here
     * the list of possible current statuses:
     * major_outage
     * partial_outage
     * long_response_time
     * long_execution_time
     * webhook_delay
     * send_delay
     */
    status?: string | null;
    /**
     * array of objects that contain status information for API endpoints
     */
    endpoints?: Array<AppendixStatusEndpointsInfo | null> | null;
};

export type AppendixStatusTaskInfo = BaseResponseTaskInfo & {
    /**
     * array of results
     */
    result?: Array<AppendixStatusResultInfo | null> | null;
};

export type AppendixStatusResponseInfo = BaseResponseInfo & {
    /**
     * array of tasks
     */
    tasks?: Array<AppendixStatusTaskInfo | null> | null;
};

export type SerpIdListData = {
    body?: Array<SerpIdListRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/id_list';
};

export type SerpIdListResponses = {
    /**
     * Successful operation
     */
    200: SerpIdListResponseInfo | null;
};

export type SerpIdListResponse = SerpIdListResponses[keyof SerpIdListResponses];

export type SerpErrorsData = {
    body?: Array<SerpErrorsRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/errors';
};

export type SerpErrorsResponses = {
    /**
     * Successful operation
     */
    200: SerpErrorsResponseInfo | null;
};

export type SerpErrorsResponse = SerpErrorsResponses[keyof SerpErrorsResponses];

export type ScreenshotData = {
    body?: Array<SerpScreenshotRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/screenshot';
};

export type ScreenshotResponses = {
    /**
     * Successful operation
     */
    200: SerpScreenshotResponseInfo | null;
};

export type ScreenshotResponse = ScreenshotResponses[keyof ScreenshotResponses];

export type AiSummaryData = {
    body?: Array<SerpAiSummaryRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/ai_summary';
};

export type AiSummaryResponses = {
    /**
     * Successful operation
     */
    200: SerpAiSummaryResponseInfo | null;
};

export type AiSummaryResponse = AiSummaryResponses[keyof AiSummaryResponses];

export type SerpGoogleLocationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/locations';
};

export type SerpGoogleLocationsResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleLocationsResponseInfo | null;
};

export type SerpGoogleLocationsResponse = SerpGoogleLocationsResponses[keyof SerpGoogleLocationsResponses];

export type SerpGoogleLocationsCountryData = {
    body?: never;
    path: {
        /**
         * country ISO code
         * optional field
         * specify the ISO code if you want to filter the list of locations by country
         * example:
         * us
         */
        country: string;
    };
    query?: never;
    url: '/v3/serp/google/locations/{country}';
};

export type SerpGoogleLocationsCountryResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleLocationsCountryResponseInfo | null;
};

export type SerpGoogleLocationsCountryResponse = SerpGoogleLocationsCountryResponses[keyof SerpGoogleLocationsCountryResponses];

export type SerpGoogleLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/languages';
};

export type SerpGoogleLanguagesResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleLanguagesResponseInfo | null;
};

export type SerpGoogleLanguagesResponse = SerpGoogleLanguagesResponses[keyof SerpGoogleLanguagesResponses];

export type GoogleOrganicTaskPostData = {
    body?: Array<SerpGoogleOrganicTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/organic/task_post';
};

export type GoogleOrganicTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleOrganicTaskPostResponseInfo | null;
};

export type GoogleOrganicTaskPostResponse = GoogleOrganicTaskPostResponses[keyof GoogleOrganicTaskPostResponses];

export type GoogleOrganicTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/organic/tasks_ready';
};

export type GoogleOrganicTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleOrganicTasksReadyResponseInfo | null;
};

export type GoogleOrganicTasksReadyResponse = GoogleOrganicTasksReadyResponses[keyof GoogleOrganicTasksReadyResponses];

export type TasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/tasks_ready';
};

export type TasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpTasksReadyResponseInfo | null;
};

export type TasksReadyResponse = TasksReadyResponses[keyof TasksReadyResponses];

export type GoogleOrganicTasksFixedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/organic/tasks_fixed';
};

export type GoogleOrganicTasksFixedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleOrganicTasksFixedResponseInfo | null;
};

export type GoogleOrganicTasksFixedResponse = GoogleOrganicTasksFixedResponses[keyof GoogleOrganicTasksFixedResponses];

export type GoogleOrganicTaskGetRegularData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/organic/task_get/regular/{id}';
};

export type GoogleOrganicTaskGetRegularResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleOrganicTaskGetRegularResponseInfo | null;
};

export type GoogleOrganicTaskGetRegularResponse = GoogleOrganicTaskGetRegularResponses[keyof GoogleOrganicTaskGetRegularResponses];

export type GoogleOrganicTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/organic/task_get/advanced/{id}';
};

export type GoogleOrganicTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleOrganicTaskGetAdvancedResponseInfo | null;
};

export type GoogleOrganicTaskGetAdvancedResponse = GoogleOrganicTaskGetAdvancedResponses[keyof GoogleOrganicTaskGetAdvancedResponses];

export type GoogleOrganicTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/organic/task_get/html/{id}';
};

export type GoogleOrganicTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleOrganicTaskGetHtmlResponseInfo | null;
};

export type GoogleOrganicTaskGetHtmlResponse = GoogleOrganicTaskGetHtmlResponses[keyof GoogleOrganicTaskGetHtmlResponses];

export type GoogleOrganicLiveRegularData = {
    body?: Array<SerpGoogleOrganicLiveRegularRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/organic/live/regular';
};

export type GoogleOrganicLiveRegularResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleOrganicLiveRegularResponseInfo | null;
};

export type GoogleOrganicLiveRegularResponse = GoogleOrganicLiveRegularResponses[keyof GoogleOrganicLiveRegularResponses];

export type GoogleOrganicLiveAdvancedData = {
    body?: Array<SerpGoogleOrganicLiveAdvancedRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/organic/live/advanced';
};

export type GoogleOrganicLiveAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleOrganicLiveAdvancedResponseInfo | null;
};

export type GoogleOrganicLiveAdvancedResponse = GoogleOrganicLiveAdvancedResponses[keyof GoogleOrganicLiveAdvancedResponses];

export type GoogleOrganicLiveHtmlData = {
    body?: Array<SerpGoogleOrganicLiveHtmlRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/organic/live/html';
};

export type GoogleOrganicLiveHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleOrganicLiveHtmlResponseInfo | null;
};

export type GoogleOrganicLiveHtmlResponse = GoogleOrganicLiveHtmlResponses[keyof GoogleOrganicLiveHtmlResponses];

export type SerpGoogleAiModeLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/ai_mode/languages';
};

export type SerpGoogleAiModeLanguagesResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleAiModeLanguagesResponseInfo | null;
};

export type SerpGoogleAiModeLanguagesResponse = SerpGoogleAiModeLanguagesResponses[keyof SerpGoogleAiModeLanguagesResponses];

export type GoogleAiModeTaskPostData = {
    body?: Array<SerpGoogleAiModeTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/ai_mode/task_post';
};

export type GoogleAiModeTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleAiModeTaskPostResponseInfo | null;
};

export type GoogleAiModeTaskPostResponse = GoogleAiModeTaskPostResponses[keyof GoogleAiModeTaskPostResponses];

export type GoogleAiModeTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/ai_mode/tasks_ready';
};

export type GoogleAiModeTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleAiModeTasksReadyResponseInfo | null;
};

export type GoogleAiModeTasksReadyResponse = GoogleAiModeTasksReadyResponses[keyof GoogleAiModeTasksReadyResponses];

export type GoogleAiModeTasksFixedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/ai_mode/tasks_fixed';
};

export type GoogleAiModeTasksFixedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleAiModeTasksFixedResponseInfo | null;
};

export type GoogleAiModeTasksFixedResponse = GoogleAiModeTasksFixedResponses[keyof GoogleAiModeTasksFixedResponses];

export type GoogleAiModeTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * a universally unique identifier (UUID)
         * unique task identifier in our system
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/ai_mode/task_get/advanced/{id}';
};

export type GoogleAiModeTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleAiModeTaskGetAdvancedResponseInfo | null;
};

export type GoogleAiModeTaskGetAdvancedResponse = GoogleAiModeTaskGetAdvancedResponses[keyof GoogleAiModeTaskGetAdvancedResponses];

export type GoogleAiModeTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/ai_mode/task_get/html/{id}';
};

export type GoogleAiModeTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleAiModeTaskGetHtmlResponseInfo | null;
};

export type GoogleAiModeTaskGetHtmlResponse = GoogleAiModeTaskGetHtmlResponses[keyof GoogleAiModeTaskGetHtmlResponses];

export type GoogleAiModeLiveAdvancedData = {
    body?: Array<SerpGoogleAiModeLiveAdvancedRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/ai_mode/live/advanced';
};

export type GoogleAiModeLiveAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleAiModeLiveAdvancedResponseInfo | null;
};

export type GoogleAiModeLiveAdvancedResponse = GoogleAiModeLiveAdvancedResponses[keyof GoogleAiModeLiveAdvancedResponses];

export type GoogleAiModeLiveHtmlData = {
    body?: Array<SerpGoogleAiModeLiveHtmlRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/ai_mode/live/html';
};

export type GoogleAiModeLiveHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleAiModeLiveHtmlResponseInfo | null;
};

export type GoogleAiModeLiveHtmlResponse = GoogleAiModeLiveHtmlResponses[keyof GoogleAiModeLiveHtmlResponses];

export type GoogleMapsTaskPostData = {
    body?: Array<SerpGoogleMapsTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/maps/task_post';
};

export type GoogleMapsTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleMapsTaskPostResponseInfo | null;
};

export type GoogleMapsTaskPostResponse = GoogleMapsTaskPostResponses[keyof GoogleMapsTaskPostResponses];

export type GoogleMapsTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/maps/tasks_ready';
};

export type GoogleMapsTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleMapsTasksReadyResponseInfo | null;
};

export type GoogleMapsTasksReadyResponse = GoogleMapsTasksReadyResponses[keyof GoogleMapsTasksReadyResponses];

export type GoogleMapsTasksFixedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/maps/tasks_fixed';
};

export type GoogleMapsTasksFixedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleMapsTasksFixedResponseInfo | null;
};

export type GoogleMapsTasksFixedResponse = GoogleMapsTasksFixedResponses[keyof GoogleMapsTasksFixedResponses];

export type GoogleMapsTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * a universally unique identifier (UUID)
         * unique task identifier in our system
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/maps/task_get/advanced/{id}';
};

export type GoogleMapsTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleMapsTaskGetAdvancedResponseInfo | null;
};

export type GoogleMapsTaskGetAdvancedResponse = GoogleMapsTaskGetAdvancedResponses[keyof GoogleMapsTaskGetAdvancedResponses];

export type GoogleMapsLiveAdvancedData = {
    body?: Array<SerpGoogleMapsLiveAdvancedRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/maps/live/advanced';
};

export type GoogleMapsLiveAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleMapsLiveAdvancedResponseInfo | null;
};

export type GoogleMapsLiveAdvancedResponse = GoogleMapsLiveAdvancedResponses[keyof GoogleMapsLiveAdvancedResponses];

export type GoogleLocalFinderTaskPostData = {
    body?: Array<SerpGoogleLocalFinderTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/local_finder/task_post';
};

export type GoogleLocalFinderTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleLocalFinderTaskPostResponseInfo | null;
};

export type GoogleLocalFinderTaskPostResponse = GoogleLocalFinderTaskPostResponses[keyof GoogleLocalFinderTaskPostResponses];

export type GoogleLocalFinderTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/local_finder/tasks_ready';
};

export type GoogleLocalFinderTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleLocalFinderTasksReadyResponseInfo | null;
};

export type GoogleLocalFinderTasksReadyResponse = GoogleLocalFinderTasksReadyResponses[keyof GoogleLocalFinderTasksReadyResponses];

export type GoogleLocalFinderTasksFixedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/local_finder/tasks_fixed';
};

export type GoogleLocalFinderTasksFixedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleLocalFinderTasksFixedResponseInfo | null;
};

export type GoogleLocalFinderTasksFixedResponse = GoogleLocalFinderTasksFixedResponses[keyof GoogleLocalFinderTasksFixedResponses];

export type GoogleLocalFinderTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * a universally unique identifier (UUID)
         * unique task identifier in our system
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/local_finder/task_get/advanced/{id}';
};

export type GoogleLocalFinderTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleLocalFinderTaskGetAdvancedResponseInfo | null;
};

export type GoogleLocalFinderTaskGetAdvancedResponse = GoogleLocalFinderTaskGetAdvancedResponses[keyof GoogleLocalFinderTaskGetAdvancedResponses];

export type GoogleLocalFinderTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/local_finder/task_get/html/{id}';
};

export type GoogleLocalFinderTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleLocalFinderTaskGetHtmlResponseInfo | null;
};

export type GoogleLocalFinderTaskGetHtmlResponse = GoogleLocalFinderTaskGetHtmlResponses[keyof GoogleLocalFinderTaskGetHtmlResponses];

export type GoogleLocalFinderLiveAdvancedData = {
    body?: Array<SerpGoogleLocalFinderLiveAdvancedRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/local_finder/live/advanced';
};

export type GoogleLocalFinderLiveAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleLocalFinderLiveAdvancedResponseInfo | null;
};

export type GoogleLocalFinderLiveAdvancedResponse = GoogleLocalFinderLiveAdvancedResponses[keyof GoogleLocalFinderLiveAdvancedResponses];

export type GoogleLocalFinderLiveHtmlData = {
    body?: Array<SerpGoogleLocalFinderLiveHtmlRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/local_finder/live/html';
};

export type GoogleLocalFinderLiveHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleLocalFinderLiveHtmlResponseInfo | null;
};

export type GoogleLocalFinderLiveHtmlResponse = GoogleLocalFinderLiveHtmlResponses[keyof GoogleLocalFinderLiveHtmlResponses];

export type GoogleNewsTaskPostData = {
    body?: Array<SerpGoogleNewsTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/news/task_post';
};

export type GoogleNewsTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleNewsTaskPostResponseInfo | null;
};

export type GoogleNewsTaskPostResponse = GoogleNewsTaskPostResponses[keyof GoogleNewsTaskPostResponses];

export type GoogleNewsTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/news/tasks_ready';
};

export type GoogleNewsTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleNewsTasksReadyResponseInfo | null;
};

export type GoogleNewsTasksReadyResponse = GoogleNewsTasksReadyResponses[keyof GoogleNewsTasksReadyResponses];

export type GoogleNewsTasksFixedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/news/tasks_fixed';
};

export type GoogleNewsTasksFixedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleNewsTasksFixedResponseInfo | null;
};

export type GoogleNewsTasksFixedResponse = GoogleNewsTasksFixedResponses[keyof GoogleNewsTasksFixedResponses];

export type GoogleNewsTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/news/task_get/advanced/{id}';
};

export type GoogleNewsTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleNewsTaskGetAdvancedResponseInfo | null;
};

export type GoogleNewsTaskGetAdvancedResponse = GoogleNewsTaskGetAdvancedResponses[keyof GoogleNewsTaskGetAdvancedResponses];

export type GoogleNewsTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/news/task_get/html/{id}';
};

export type GoogleNewsTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleNewsTaskGetHtmlResponseInfo | null;
};

export type GoogleNewsTaskGetHtmlResponse = GoogleNewsTaskGetHtmlResponses[keyof GoogleNewsTaskGetHtmlResponses];

export type GoogleNewsLiveAdvancedData = {
    body?: Array<SerpGoogleNewsLiveAdvancedRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/news/live/advanced';
};

export type GoogleNewsLiveAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleNewsLiveAdvancedResponseInfo | null;
};

export type GoogleNewsLiveAdvancedResponse = GoogleNewsLiveAdvancedResponses[keyof GoogleNewsLiveAdvancedResponses];

export type GoogleNewsLiveHtmlData = {
    body?: Array<SerpGoogleNewsLiveHtmlRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/news/live/html';
};

export type GoogleNewsLiveHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleNewsLiveHtmlResponseInfo | null;
};

export type GoogleNewsLiveHtmlResponse = GoogleNewsLiveHtmlResponses[keyof GoogleNewsLiveHtmlResponses];

export type GoogleEventsTaskPostData = {
    body?: Array<SerpGoogleEventsTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/events/task_post';
};

export type GoogleEventsTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleEventsTaskPostResponseInfo | null;
};

export type GoogleEventsTaskPostResponse = GoogleEventsTaskPostResponses[keyof GoogleEventsTaskPostResponses];

export type GoogleEventsTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/events/tasks_ready';
};

export type GoogleEventsTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleEventsTasksReadyResponseInfo | null;
};

export type GoogleEventsTasksReadyResponse = GoogleEventsTasksReadyResponses[keyof GoogleEventsTasksReadyResponses];

export type GoogleEventsTasksFixedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/events/tasks_fixed';
};

export type GoogleEventsTasksFixedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleEventsTasksFixedResponseInfo | null;
};

export type GoogleEventsTasksFixedResponse = GoogleEventsTasksFixedResponses[keyof GoogleEventsTasksFixedResponses];

export type GoogleEventsTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/events/task_get/advanced/{id}';
};

export type GoogleEventsTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleEventsTaskGetAdvancedResponseInfo | null;
};

export type GoogleEventsTaskGetAdvancedResponse = GoogleEventsTaskGetAdvancedResponses[keyof GoogleEventsTaskGetAdvancedResponses];

export type GoogleEventsLiveAdvancedData = {
    body?: Array<SerpGoogleEventsLiveAdvancedRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/events/live/advanced';
};

export type GoogleEventsLiveAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleEventsLiveAdvancedResponseInfo | null;
};

export type GoogleEventsLiveAdvancedResponse = GoogleEventsLiveAdvancedResponses[keyof GoogleEventsLiveAdvancedResponses];

export type GoogleImagesTaskPostData = {
    body?: Array<SerpGoogleImagesTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/images/task_post';
};

export type GoogleImagesTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleImagesTaskPostResponseInfo | null;
};

export type GoogleImagesTaskPostResponse = GoogleImagesTaskPostResponses[keyof GoogleImagesTaskPostResponses];

export type GoogleImagesTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/images/tasks_ready';
};

export type GoogleImagesTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleImagesTasksReadyResponseInfo | null;
};

export type GoogleImagesTasksReadyResponse = GoogleImagesTasksReadyResponses[keyof GoogleImagesTasksReadyResponses];

export type GoogleImagesTasksFixedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/images/tasks_fixed';
};

export type GoogleImagesTasksFixedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleImagesTasksFixedResponseInfo | null;
};

export type GoogleImagesTasksFixedResponse = GoogleImagesTasksFixedResponses[keyof GoogleImagesTasksFixedResponses];

export type GoogleImagesTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/images/task_get/advanced/{id}';
};

export type GoogleImagesTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleImagesTaskGetAdvancedResponseInfo | null;
};

export type GoogleImagesTaskGetAdvancedResponse = GoogleImagesTaskGetAdvancedResponses[keyof GoogleImagesTaskGetAdvancedResponses];

export type GoogleImagesTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/images/task_get/html/{id}';
};

export type GoogleImagesTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleImagesTaskGetHtmlResponseInfo | null;
};

export type GoogleImagesTaskGetHtmlResponse = GoogleImagesTaskGetHtmlResponses[keyof GoogleImagesTaskGetHtmlResponses];

export type GoogleImagesLiveAdvancedData = {
    body?: Array<SerpGoogleImagesLiveAdvancedRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/images/live/advanced';
};

export type GoogleImagesLiveAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleImagesLiveAdvancedResponseInfo | null;
};

export type GoogleImagesLiveAdvancedResponse = GoogleImagesLiveAdvancedResponses[keyof GoogleImagesLiveAdvancedResponses];

export type GoogleImagesLiveHtmlData = {
    body?: Array<SerpGoogleImagesLiveHtmlRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/images/live/html';
};

export type GoogleImagesLiveHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleImagesLiveHtmlResponseInfo | null;
};

export type GoogleImagesLiveHtmlResponse = GoogleImagesLiveHtmlResponses[keyof GoogleImagesLiveHtmlResponses];

export type GoogleSearchByImageTaskPostData = {
    body?: Array<SerpGoogleSearchByImageTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/search_by_image/task_post';
};

export type GoogleSearchByImageTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleSearchByImageTaskPostResponseInfo | null;
};

export type GoogleSearchByImageTaskPostResponse = GoogleSearchByImageTaskPostResponses[keyof GoogleSearchByImageTaskPostResponses];

export type GoogleSearchByImageTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/search_by_image/tasks_ready';
};

export type GoogleSearchByImageTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleSearchByImageTasksReadyResponseInfo | null;
};

export type GoogleSearchByImageTasksReadyResponse = GoogleSearchByImageTasksReadyResponses[keyof GoogleSearchByImageTasksReadyResponses];

export type GoogleSearchByImageTasksFixedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/search_by_image/tasks_fixed';
};

export type GoogleSearchByImageTasksFixedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleSearchByImageTasksFixedResponseInfo | null;
};

export type GoogleSearchByImageTasksFixedResponse = GoogleSearchByImageTasksFixedResponses[keyof GoogleSearchByImageTasksFixedResponses];

export type GoogleSearchByImageTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/search_by_image/task_get/advanced/{id}';
};

export type GoogleSearchByImageTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleSearchByImageTaskGetAdvancedResponseInfo | null;
};

export type GoogleSearchByImageTaskGetAdvancedResponse = GoogleSearchByImageTaskGetAdvancedResponses[keyof GoogleSearchByImageTaskGetAdvancedResponses];

export type GoogleJobsTaskPostData = {
    body?: Array<SerpGoogleJobsTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/jobs/task_post';
};

export type GoogleJobsTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleJobsTaskPostResponseInfo | null;
};

export type GoogleJobsTaskPostResponse = GoogleJobsTaskPostResponses[keyof GoogleJobsTaskPostResponses];

export type GoogleJobsTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/jobs/tasks_ready';
};

export type GoogleJobsTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleJobsTasksReadyResponseInfo | null;
};

export type GoogleJobsTasksReadyResponse = GoogleJobsTasksReadyResponses[keyof GoogleJobsTasksReadyResponses];

export type GoogleJobsTasksFixedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/jobs/tasks_fixed';
};

export type GoogleJobsTasksFixedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleJobsTasksFixedResponseInfo | null;
};

export type GoogleJobsTasksFixedResponse = GoogleJobsTasksFixedResponses[keyof GoogleJobsTasksFixedResponses];

export type GoogleJobsTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/jobs/task_get/advanced/{id}';
};

export type GoogleJobsTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleJobsTaskGetAdvancedResponseInfo | null;
};

export type GoogleJobsTaskGetAdvancedResponse = GoogleJobsTaskGetAdvancedResponses[keyof GoogleJobsTaskGetAdvancedResponses];

export type GoogleJobsTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/jobs/task_get/html/{id}';
};

export type GoogleJobsTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleJobsTaskGetHtmlResponseInfo | null;
};

export type GoogleJobsTaskGetHtmlResponse = GoogleJobsTaskGetHtmlResponses[keyof GoogleJobsTaskGetHtmlResponses];

export type GoogleAutocompleteTaskPostData = {
    body?: Array<SerpGoogleAutocompleteTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/autocomplete/task_post';
};

export type GoogleAutocompleteTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleAutocompleteTaskPostResponseInfo | null;
};

export type GoogleAutocompleteTaskPostResponse = GoogleAutocompleteTaskPostResponses[keyof GoogleAutocompleteTaskPostResponses];

export type GoogleAutocompleteTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/autocomplete/tasks_ready';
};

export type GoogleAutocompleteTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleAutocompleteTasksReadyResponseInfo | null;
};

export type GoogleAutocompleteTasksReadyResponse = GoogleAutocompleteTasksReadyResponses[keyof GoogleAutocompleteTasksReadyResponses];

export type GoogleAutocompleteTasksFixedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/autocomplete/tasks_fixed';
};

export type GoogleAutocompleteTasksFixedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleAutocompleteTasksFixedResponseInfo | null;
};

export type GoogleAutocompleteTasksFixedResponse = GoogleAutocompleteTasksFixedResponses[keyof GoogleAutocompleteTasksFixedResponses];

export type GoogleAutocompleteTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/autocomplete/task_get/advanced/{id}';
};

export type GoogleAutocompleteTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleAutocompleteTaskGetAdvancedResponseInfo | null;
};

export type GoogleAutocompleteTaskGetAdvancedResponse = GoogleAutocompleteTaskGetAdvancedResponses[keyof GoogleAutocompleteTaskGetAdvancedResponses];

export type GoogleAutocompleteLiveAdvancedData = {
    body?: Array<SerpGoogleAutocompleteLiveAdvancedRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/autocomplete/live/advanced';
};

export type GoogleAutocompleteLiveAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleAutocompleteLiveAdvancedResponseInfo | null;
};

export type GoogleAutocompleteLiveAdvancedResponse = GoogleAutocompleteLiveAdvancedResponses[keyof GoogleAutocompleteLiveAdvancedResponses];

export type GoogleDatasetSearchTaskPostData = {
    body?: Array<SerpGoogleDatasetSearchTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/dataset_search/task_post';
};

export type GoogleDatasetSearchTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleDatasetSearchTaskPostResponseInfo | null;
};

export type GoogleDatasetSearchTaskPostResponse = GoogleDatasetSearchTaskPostResponses[keyof GoogleDatasetSearchTaskPostResponses];

export type GoogleDatasetSearchTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/dataset_search/tasks_ready';
};

export type GoogleDatasetSearchTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleDatasetSearchTasksReadyResponseInfo | null;
};

export type GoogleDatasetSearchTasksReadyResponse = GoogleDatasetSearchTasksReadyResponses[keyof GoogleDatasetSearchTasksReadyResponses];

export type GoogleDatasetSearchTasksFixedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/dataset_search/tasks_fixed';
};

export type GoogleDatasetSearchTasksFixedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleDatasetSearchTasksFixedResponseInfo | null;
};

export type GoogleDatasetSearchTasksFixedResponse = GoogleDatasetSearchTasksFixedResponses[keyof GoogleDatasetSearchTasksFixedResponses];

export type GoogleDatasetSearchTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/dataset_search/task_get/advanced/{id}';
};

export type GoogleDatasetSearchTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleDatasetSearchTaskGetAdvancedResponseInfo | null;
};

export type GoogleDatasetSearchTaskGetAdvancedResponse = GoogleDatasetSearchTaskGetAdvancedResponses[keyof GoogleDatasetSearchTaskGetAdvancedResponses];

export type GoogleDatasetSearchLiveAdvancedData = {
    body?: Array<SerpGoogleDatasetSearchLiveAdvancedRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/dataset_search/live/advanced';
};

export type GoogleDatasetSearchLiveAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleDatasetSearchLiveAdvancedResponseInfo | null;
};

export type GoogleDatasetSearchLiveAdvancedResponse = GoogleDatasetSearchLiveAdvancedResponses[keyof GoogleDatasetSearchLiveAdvancedResponses];

export type GoogleDatasetInfoTaskPostData = {
    body?: Array<SerpGoogleDatasetInfoTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/dataset_info/task_post';
};

export type GoogleDatasetInfoTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleDatasetInfoTaskPostResponseInfo | null;
};

export type GoogleDatasetInfoTaskPostResponse = GoogleDatasetInfoTaskPostResponses[keyof GoogleDatasetInfoTaskPostResponses];

export type GoogleDatasetInfoTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/dataset_info/tasks_ready';
};

export type GoogleDatasetInfoTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleDatasetInfoTasksReadyResponseInfo | null;
};

export type GoogleDatasetInfoTasksReadyResponse = GoogleDatasetInfoTasksReadyResponses[keyof GoogleDatasetInfoTasksReadyResponses];

export type GoogleDatasetInfoTasksFixedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/dataset_info/tasks_fixed';
};

export type GoogleDatasetInfoTasksFixedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleDatasetInfoTasksFixedResponseInfo | null;
};

export type GoogleDatasetInfoTasksFixedResponse = GoogleDatasetInfoTasksFixedResponses[keyof GoogleDatasetInfoTasksFixedResponses];

export type GoogleDatasetInfoTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/dataset_info/task_get/advanced/{id}';
};

export type GoogleDatasetInfoTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleDatasetInfoTaskGetAdvancedResponseInfo | null;
};

export type GoogleDatasetInfoTaskGetAdvancedResponse = GoogleDatasetInfoTaskGetAdvancedResponses[keyof GoogleDatasetInfoTaskGetAdvancedResponses];

export type GoogleDatasetInfoLiveAdvancedData = {
    body?: Array<SerpGoogleDatasetInfoLiveAdvancedRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/dataset_info/live/advanced';
};

export type GoogleDatasetInfoLiveAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleDatasetInfoLiveAdvancedResponseInfo | null;
};

export type GoogleDatasetInfoLiveAdvancedResponse = GoogleDatasetInfoLiveAdvancedResponses[keyof GoogleDatasetInfoLiveAdvancedResponses];

export type SerpGoogleAdsAdvertisersLocationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/ads_advertisers/locations';
};

export type SerpGoogleAdsAdvertisersLocationsResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleAdsAdvertisersLocationsResponseInfo | null;
};

export type SerpGoogleAdsAdvertisersLocationsResponse = SerpGoogleAdsAdvertisersLocationsResponses[keyof SerpGoogleAdsAdvertisersLocationsResponses];

export type GoogleAdsAdvertisersTaskPostData = {
    body?: Array<SerpGoogleAdsAdvertisersTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/ads_advertisers/task_post';
};

export type GoogleAdsAdvertisersTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleAdsAdvertisersTaskPostResponseInfo | null;
};

export type GoogleAdsAdvertisersTaskPostResponse = GoogleAdsAdvertisersTaskPostResponses[keyof GoogleAdsAdvertisersTaskPostResponses];

export type GoogleAdsAdvertisersTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/ads_advertisers/tasks_ready';
};

export type GoogleAdsAdvertisersTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleAdsAdvertisersTasksReadyResponseInfo | null;
};

export type GoogleAdsAdvertisersTasksReadyResponse = GoogleAdsAdvertisersTasksReadyResponses[keyof GoogleAdsAdvertisersTasksReadyResponses];

export type GoogleAdsAdvertisersTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/ads_advertisers/task_get/advanced/{id}';
};

export type GoogleAdsAdvertisersTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleAdsAdvertisersTaskGetAdvancedResponseInfo | null;
};

export type GoogleAdsAdvertisersTaskGetAdvancedResponse = GoogleAdsAdvertisersTaskGetAdvancedResponses[keyof GoogleAdsAdvertisersTaskGetAdvancedResponses];

export type SerpGoogleAdsSearchLocationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/ads_search/locations';
};

export type SerpGoogleAdsSearchLocationsResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleAdsSearchLocationsResponseInfo | null;
};

export type SerpGoogleAdsSearchLocationsResponse = SerpGoogleAdsSearchLocationsResponses[keyof SerpGoogleAdsSearchLocationsResponses];

export type GoogleAdsSearchTaskPostData = {
    body?: Array<SerpGoogleAdsSearchTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/ads_search/task_post';
};

export type GoogleAdsSearchTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleAdsSearchTaskPostResponseInfo | null;
};

export type GoogleAdsSearchTaskPostResponse = GoogleAdsSearchTaskPostResponses[keyof GoogleAdsSearchTaskPostResponses];

export type GoogleAdsSearchTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/ads_search/tasks_ready';
};

export type GoogleAdsSearchTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleAdsSearchTasksReadyResponseInfo | null;
};

export type GoogleAdsSearchTasksReadyResponse = GoogleAdsSearchTasksReadyResponses[keyof GoogleAdsSearchTasksReadyResponses];

export type GoogleAdsSearchTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/ads_search/task_get/advanced/{id}';
};

export type GoogleAdsSearchTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleAdsSearchTaskGetAdvancedResponseInfo | null;
};

export type GoogleAdsSearchTaskGetAdvancedResponse = GoogleAdsSearchTaskGetAdvancedResponses[keyof GoogleAdsSearchTaskGetAdvancedResponses];

export type SerpBingLocationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/bing/locations';
};

export type SerpBingLocationsResponses = {
    /**
     * Successful operation
     */
    200: SerpBingLocationsResponseInfo | null;
};

export type SerpBingLocationsResponse = SerpBingLocationsResponses[keyof SerpBingLocationsResponses];

export type SerpBingLocationsCountryData = {
    body?: never;
    path: {
        /**
         * country ISO code
         * optional field
         * specify the ISO code if you want to filter the list of locations by country
         * example:
         * us
         */
        country: string;
    };
    query?: never;
    url: '/v3/serp/bing/locations/{country}';
};

export type SerpBingLocationsCountryResponses = {
    /**
     * Successful operation
     */
    200: SerpBingLocationsCountryResponseInfo | null;
};

export type SerpBingLocationsCountryResponse = SerpBingLocationsCountryResponses[keyof SerpBingLocationsCountryResponses];

export type SerpBingLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/bing/languages';
};

export type SerpBingLanguagesResponses = {
    /**
     * Successful operation
     */
    200: SerpBingLanguagesResponseInfo | null;
};

export type SerpBingLanguagesResponse = SerpBingLanguagesResponses[keyof SerpBingLanguagesResponses];

export type BingOrganicTaskPostData = {
    body?: Array<SerpBingOrganicTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/bing/organic/task_post';
};

export type BingOrganicTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpBingOrganicTaskPostResponseInfo | null;
};

export type BingOrganicTaskPostResponse = BingOrganicTaskPostResponses[keyof BingOrganicTaskPostResponses];

export type BingOrganicTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/bing/organic/tasks_ready';
};

export type BingOrganicTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpBingOrganicTasksReadyResponseInfo | null;
};

export type BingOrganicTasksReadyResponse = BingOrganicTasksReadyResponses[keyof BingOrganicTasksReadyResponses];

export type BingOrganicTasksFixedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/bing/organic/tasks_fixed';
};

export type BingOrganicTasksFixedResponses = {
    /**
     * Successful operation
     */
    200: SerpBingOrganicTasksFixedResponseInfo | null;
};

export type BingOrganicTasksFixedResponse = BingOrganicTasksFixedResponses[keyof BingOrganicTasksFixedResponses];

export type BingOrganicTaskGetRegularData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/bing/organic/task_get/regular/{id}';
};

export type BingOrganicTaskGetRegularResponses = {
    /**
     * Successful operation
     */
    200: SerpBingOrganicTaskGetRegularResponseInfo | null;
};

export type BingOrganicTaskGetRegularResponse = BingOrganicTaskGetRegularResponses[keyof BingOrganicTaskGetRegularResponses];

export type BingOrganicTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/bing/organic/task_get/advanced/{id}';
};

export type BingOrganicTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpBingOrganicTaskGetAdvancedResponseInfo | null;
};

export type BingOrganicTaskGetAdvancedResponse = BingOrganicTaskGetAdvancedResponses[keyof BingOrganicTaskGetAdvancedResponses];

export type BingOrganicTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/bing/organic/task_get/html/{id}';
};

export type BingOrganicTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpBingOrganicTaskGetHtmlResponseInfo | null;
};

export type BingOrganicTaskGetHtmlResponse = BingOrganicTaskGetHtmlResponses[keyof BingOrganicTaskGetHtmlResponses];

export type BingOrganicLiveRegularData = {
    body?: Array<SerpBingOrganicLiveRegularRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/bing/organic/live/regular';
};

export type BingOrganicLiveRegularResponses = {
    /**
     * Successful operation
     */
    200: SerpBingOrganicLiveRegularResponseInfo | null;
};

export type BingOrganicLiveRegularResponse = BingOrganicLiveRegularResponses[keyof BingOrganicLiveRegularResponses];

export type BingOrganicLiveAdvancedData = {
    body?: Array<SerpBingOrganicLiveAdvancedRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/bing/organic/live/advanced';
};

export type BingOrganicLiveAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpBingOrganicLiveAdvancedResponseInfo | null;
};

export type BingOrganicLiveAdvancedResponse = BingOrganicLiveAdvancedResponses[keyof BingOrganicLiveAdvancedResponses];

export type BingOrganicLiveHtmlData = {
    body?: Array<SerpBingOrganicLiveHtmlRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/bing/organic/live/html';
};

export type BingOrganicLiveHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpBingOrganicLiveHtmlResponseInfo | null;
};

export type BingOrganicLiveHtmlResponse = BingOrganicLiveHtmlResponses[keyof BingOrganicLiveHtmlResponses];

export type BingLocalPackTaskPostData = {
    body?: Array<SerpBingLocalPackTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/bing/local_pack/task_post';
};

export type BingLocalPackTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpBingLocalPackTaskPostResponseInfo | null;
};

export type BingLocalPackTaskPostResponse = BingLocalPackTaskPostResponses[keyof BingLocalPackTaskPostResponses];

export type BingLocalPackTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/bing/local_pack/tasks_ready';
};

export type BingLocalPackTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpBingLocalPackTasksReadyResponseInfo | null;
};

export type BingLocalPackTasksReadyResponse = BingLocalPackTasksReadyResponses[keyof BingLocalPackTasksReadyResponses];

export type BingLocalPackTasksFixedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/bing/local_pack/tasks_fixed';
};

export type BingLocalPackTasksFixedResponses = {
    /**
     * Successful operation
     */
    200: SerpBingLocalPackTasksFixedResponseInfo | null;
};

export type BingLocalPackTasksFixedResponse = BingLocalPackTasksFixedResponses[keyof BingLocalPackTasksFixedResponses];

export type BingLocalPackTaskGetRegularData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/bing/local_pack/task_get/regular/{id}';
};

export type BingLocalPackTaskGetRegularResponses = {
    /**
     * Successful operation
     */
    200: SerpBingLocalPackTaskGetRegularResponseInfo | null;
};

export type BingLocalPackTaskGetRegularResponse = BingLocalPackTaskGetRegularResponses[keyof BingLocalPackTaskGetRegularResponses];

export type BingLocalPackTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/bing/local_pack/task_get/html/{id}';
};

export type BingLocalPackTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpBingLocalPackTaskGetHtmlResponseInfo | null;
};

export type BingLocalPackTaskGetHtmlResponse = BingLocalPackTaskGetHtmlResponses[keyof BingLocalPackTaskGetHtmlResponses];

export type BingLocalPackLiveRegularData = {
    body?: Array<SerpBingLocalPackLiveRegularRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/bing/local_pack/live/regular';
};

export type BingLocalPackLiveRegularResponses = {
    /**
     * Successful operation
     */
    200: SerpBingLocalPackLiveRegularResponseInfo | null;
};

export type BingLocalPackLiveRegularResponse = BingLocalPackLiveRegularResponses[keyof BingLocalPackLiveRegularResponses];

export type BingLocalPackLiveHtmlData = {
    body?: Array<SerpBingLocalPackLiveHtmlRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/bing/local_pack/live/html';
};

export type BingLocalPackLiveHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpBingLocalPackLiveHtmlResponseInfo | null;
};

export type BingLocalPackLiveHtmlResponse = BingLocalPackLiveHtmlResponses[keyof BingLocalPackLiveHtmlResponses];

export type SerpYoutubeLocationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/youtube/locations';
};

export type SerpYoutubeLocationsResponses = {
    /**
     * Successful operation
     */
    200: SerpYoutubeLocationsResponseInfo | null;
};

export type SerpYoutubeLocationsResponse = SerpYoutubeLocationsResponses[keyof SerpYoutubeLocationsResponses];

export type SerpYoutubeLocationsCountryData = {
    body?: never;
    path: {
        /**
         * country ISO code
         * optional field
         * specify the ISO code if you want to filter the list of locations by country
         * example:
         * us
         */
        country: string;
    };
    query?: never;
    url: '/v3/serp/youtube/locations/{country}';
};

export type SerpYoutubeLocationsCountryResponses = {
    /**
     * Successful operation
     */
    200: SerpYoutubeLocationsCountryResponseInfo | null;
};

export type SerpYoutubeLocationsCountryResponse = SerpYoutubeLocationsCountryResponses[keyof SerpYoutubeLocationsCountryResponses];

export type SerpYoutubeLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/youtube/languages';
};

export type SerpYoutubeLanguagesResponses = {
    /**
     * Successful operation
     */
    200: SerpYoutubeLanguagesResponseInfo | null;
};

export type SerpYoutubeLanguagesResponse = SerpYoutubeLanguagesResponses[keyof SerpYoutubeLanguagesResponses];

export type YoutubeVideoInfoTaskPostData = {
    body?: Array<SerpYoutubeVideoInfoTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/youtube/video_info/task_post';
};

export type YoutubeVideoInfoTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpYoutubeVideoInfoTaskPostResponseInfo | null;
};

export type YoutubeVideoInfoTaskPostResponse = YoutubeVideoInfoTaskPostResponses[keyof YoutubeVideoInfoTaskPostResponses];

export type YoutubeVideoInfoTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/youtube/video_info/tasks_ready';
};

export type YoutubeVideoInfoTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpYoutubeVideoInfoTasksReadyResponseInfo | null;
};

export type YoutubeVideoInfoTasksReadyResponse = YoutubeVideoInfoTasksReadyResponses[keyof YoutubeVideoInfoTasksReadyResponses];

export type YoutubeVideoInfoTasksFixedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/youtube/video_info/tasks_fixed';
};

export type YoutubeVideoInfoTasksFixedResponses = {
    /**
     * Successful operation
     */
    200: SerpYoutubeVideoInfoTasksFixedResponseInfo | null;
};

export type YoutubeVideoInfoTasksFixedResponse = YoutubeVideoInfoTasksFixedResponses[keyof YoutubeVideoInfoTasksFixedResponses];

export type YoutubeVideoInfoTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/youtube/video_info/task_get/advanced/{id}';
};

export type YoutubeVideoInfoTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpYoutubeVideoInfoTaskGetAdvancedResponseInfo | null;
};

export type YoutubeVideoInfoTaskGetAdvancedResponse = YoutubeVideoInfoTaskGetAdvancedResponses[keyof YoutubeVideoInfoTaskGetAdvancedResponses];

export type YoutubeVideoInfoLiveAdvancedData = {
    body?: Array<SerpYoutubeVideoInfoLiveAdvancedRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/youtube/video_info/live/advanced';
};

export type YoutubeVideoInfoLiveAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpYoutubeVideoInfoLiveAdvancedResponseInfo | null;
};

export type YoutubeVideoInfoLiveAdvancedResponse = YoutubeVideoInfoLiveAdvancedResponses[keyof YoutubeVideoInfoLiveAdvancedResponses];

export type YoutubeVideoSubtitlesTaskPostData = {
    body?: Array<SerpYoutubeVideoSubtitlesTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/youtube/video_subtitles/task_post';
};

export type YoutubeVideoSubtitlesTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpYoutubeVideoSubtitlesTaskPostResponseInfo | null;
};

export type YoutubeVideoSubtitlesTaskPostResponse = YoutubeVideoSubtitlesTaskPostResponses[keyof YoutubeVideoSubtitlesTaskPostResponses];

export type YoutubeVideoSubtitlesTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/youtube/video_subtitles/tasks_ready';
};

export type YoutubeVideoSubtitlesTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpYoutubeVideoSubtitlesTasksReadyResponseInfo | null;
};

export type YoutubeVideoSubtitlesTasksReadyResponse = YoutubeVideoSubtitlesTasksReadyResponses[keyof YoutubeVideoSubtitlesTasksReadyResponses];

export type YoutubeVideoSubtitlesTasksFixedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/youtube/video_subtitles/tasks_fixed';
};

export type YoutubeVideoSubtitlesTasksFixedResponses = {
    /**
     * Successful operation
     */
    200: SerpYoutubeVideoSubtitlesTasksFixedResponseInfo | null;
};

export type YoutubeVideoSubtitlesTasksFixedResponse = YoutubeVideoSubtitlesTasksFixedResponses[keyof YoutubeVideoSubtitlesTasksFixedResponses];

export type YoutubeVideoSubtitlesTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/youtube/video_subtitles/task_get/advanced/{id}';
};

export type YoutubeVideoSubtitlesTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpYoutubeVideoSubtitlesTaskGetAdvancedResponseInfo | null;
};

export type YoutubeVideoSubtitlesTaskGetAdvancedResponse = YoutubeVideoSubtitlesTaskGetAdvancedResponses[keyof YoutubeVideoSubtitlesTaskGetAdvancedResponses];

export type YoutubeVideoSubtitlesLiveAdvancedData = {
    body?: Array<SerpYoutubeVideoSubtitlesLiveAdvancedRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/youtube/video_subtitles/live/advanced';
};

export type YoutubeVideoSubtitlesLiveAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpYoutubeVideoSubtitlesLiveAdvancedResponseInfo | null;
};

export type YoutubeVideoSubtitlesLiveAdvancedResponse = YoutubeVideoSubtitlesLiveAdvancedResponses[keyof YoutubeVideoSubtitlesLiveAdvancedResponses];

export type YoutubeVideoCommentsTaskPostData = {
    body?: Array<SerpYoutubeVideoCommentsTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/youtube/video_comments/task_post';
};

export type YoutubeVideoCommentsTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpYoutubeVideoCommentsTaskPostResponseInfo | null;
};

export type YoutubeVideoCommentsTaskPostResponse = YoutubeVideoCommentsTaskPostResponses[keyof YoutubeVideoCommentsTaskPostResponses];

export type YoutubeVideoCommentsTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/youtube/video_comments/tasks_ready';
};

export type YoutubeVideoCommentsTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpYoutubeVideoCommentsTasksReadyResponseInfo | null;
};

export type YoutubeVideoCommentsTasksReadyResponse = YoutubeVideoCommentsTasksReadyResponses[keyof YoutubeVideoCommentsTasksReadyResponses];

export type YoutubeVideoCommentsTasksFixedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/youtube/video_comments/tasks_fixed';
};

export type YoutubeVideoCommentsTasksFixedResponses = {
    /**
     * Successful operation
     */
    200: SerpYoutubeVideoCommentsTasksFixedResponseInfo | null;
};

export type YoutubeVideoCommentsTasksFixedResponse = YoutubeVideoCommentsTasksFixedResponses[keyof YoutubeVideoCommentsTasksFixedResponses];

export type YoutubeVideoCommentsTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/youtube/video_comments/task_get/advanced/{id}';
};

export type YoutubeVideoCommentsTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpYoutubeVideoCommentsTaskGetAdvancedResponseInfo | null;
};

export type YoutubeVideoCommentsTaskGetAdvancedResponse = YoutubeVideoCommentsTaskGetAdvancedResponses[keyof YoutubeVideoCommentsTaskGetAdvancedResponses];

export type YoutubeVideoCommentsLiveAdvancedData = {
    body?: Array<SerpYoutubeVideoCommentsLiveAdvancedRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/youtube/video_comments/live/advanced';
};

export type YoutubeVideoCommentsLiveAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpYoutubeVideoCommentsLiveAdvancedResponseInfo | null;
};

export type YoutubeVideoCommentsLiveAdvancedResponse = YoutubeVideoCommentsLiveAdvancedResponses[keyof YoutubeVideoCommentsLiveAdvancedResponses];

export type SerpYahooLocationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/yahoo/locations';
};

export type SerpYahooLocationsResponses = {
    /**
     * Successful operation
     */
    200: SerpYahooLocationsResponseInfo | null;
};

export type SerpYahooLocationsResponse = SerpYahooLocationsResponses[keyof SerpYahooLocationsResponses];

export type SerpYahooLocationsCountryData = {
    body?: never;
    path: {
        /**
         * country ISO code
         * optional field
         * specify the ISO code if you want to filter the list of locations by country
         * example:
         * us
         */
        country: string;
    };
    query?: never;
    url: '/v3/serp/yahoo/locations/{country}';
};

export type SerpYahooLocationsCountryResponses = {
    /**
     * Successful operation
     */
    200: SerpYahooLocationsCountryResponseInfo | null;
};

export type SerpYahooLocationsCountryResponse = SerpYahooLocationsCountryResponses[keyof SerpYahooLocationsCountryResponses];

export type SerpYahooLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/yahoo/languages';
};

export type SerpYahooLanguagesResponses = {
    /**
     * Successful operation
     */
    200: SerpYahooLanguagesResponseInfo | null;
};

export type SerpYahooLanguagesResponse = SerpYahooLanguagesResponses[keyof SerpYahooLanguagesResponses];

export type YahooOrganicTaskPostData = {
    body?: Array<SerpYahooOrganicTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/yahoo/organic/task_post';
};

export type YahooOrganicTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpYahooOrganicTaskPostResponseInfo | null;
};

export type YahooOrganicTaskPostResponse = YahooOrganicTaskPostResponses[keyof YahooOrganicTaskPostResponses];

export type YahooOrganicTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/yahoo/organic/tasks_ready';
};

export type YahooOrganicTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpYahooOrganicTasksReadyResponseInfo | null;
};

export type YahooOrganicTasksReadyResponse = YahooOrganicTasksReadyResponses[keyof YahooOrganicTasksReadyResponses];

export type YahooOrganicTasksFixedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/yahoo/organic/tasks_fixed';
};

export type YahooOrganicTasksFixedResponses = {
    /**
     * Successful operation
     */
    200: SerpYahooOrganicTasksFixedResponseInfo | null;
};

export type YahooOrganicTasksFixedResponse = YahooOrganicTasksFixedResponses[keyof YahooOrganicTasksFixedResponses];

export type YahooOrganicTaskGetRegularData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/yahoo/organic/task_get/regular/{id}';
};

export type YahooOrganicTaskGetRegularResponses = {
    /**
     * Successful operation
     */
    200: SerpYahooOrganicTaskGetRegularResponseInfo | null;
};

export type YahooOrganicTaskGetRegularResponse = YahooOrganicTaskGetRegularResponses[keyof YahooOrganicTaskGetRegularResponses];

export type YahooOrganicTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/yahoo/organic/task_get/advanced/{id}';
};

export type YahooOrganicTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpYahooOrganicTaskGetAdvancedResponseInfo | null;
};

export type YahooOrganicTaskGetAdvancedResponse = YahooOrganicTaskGetAdvancedResponses[keyof YahooOrganicTaskGetAdvancedResponses];

export type YahooOrganicTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/yahoo/organic/task_get/html/{id}';
};

export type YahooOrganicTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpYahooOrganicTaskGetHtmlResponseInfo | null;
};

export type YahooOrganicTaskGetHtmlResponse = YahooOrganicTaskGetHtmlResponses[keyof YahooOrganicTaskGetHtmlResponses];

export type YahooOrganicLiveRegularData = {
    body?: Array<SerpYahooOrganicLiveRegularRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/yahoo/organic/live/regular';
};

export type YahooOrganicLiveRegularResponses = {
    /**
     * Successful operation
     */
    200: SerpYahooOrganicLiveRegularResponseInfo | null;
};

export type YahooOrganicLiveRegularResponse = YahooOrganicLiveRegularResponses[keyof YahooOrganicLiveRegularResponses];

export type YahooOrganicLiveAdvancedData = {
    body?: Array<SerpYahooOrganicLiveAdvancedRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/yahoo/organic/live/advanced';
};

export type YahooOrganicLiveAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpYahooOrganicLiveAdvancedResponseInfo | null;
};

export type YahooOrganicLiveAdvancedResponse = YahooOrganicLiveAdvancedResponses[keyof YahooOrganicLiveAdvancedResponses];

export type YahooOrganicLiveHtmlData = {
    body?: Array<SerpYahooOrganicLiveHtmlRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/yahoo/organic/live/html';
};

export type YahooOrganicLiveHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpYahooOrganicLiveHtmlResponseInfo | null;
};

export type YahooOrganicLiveHtmlResponse = YahooOrganicLiveHtmlResponses[keyof YahooOrganicLiveHtmlResponses];

export type SerpBaiduLocationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/baidu/locations';
};

export type SerpBaiduLocationsResponses = {
    /**
     * Successful operation
     */
    200: SerpBaiduLocationsResponseInfo | null;
};

export type SerpBaiduLocationsResponse = SerpBaiduLocationsResponses[keyof SerpBaiduLocationsResponses];

export type SerpBaiduLocationsCountryData = {
    body?: never;
    path: {
        /**
         * country ISO code
         * optional field
         * specify the ISO code if you want to filter the list of locations by country
         * example:
         * us
         */
        country: string;
    };
    query?: never;
    url: '/v3/serp/baidu/locations/{country}';
};

export type SerpBaiduLocationsCountryResponses = {
    /**
     * Successful operation
     */
    200: SerpBaiduLocationsCountryResponseInfo | null;
};

export type SerpBaiduLocationsCountryResponse = SerpBaiduLocationsCountryResponses[keyof SerpBaiduLocationsCountryResponses];

export type SerpBaiduLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/baidu/languages';
};

export type SerpBaiduLanguagesResponses = {
    /**
     * Successful operation
     */
    200: SerpBaiduLanguagesResponseInfo | null;
};

export type SerpBaiduLanguagesResponse = SerpBaiduLanguagesResponses[keyof SerpBaiduLanguagesResponses];

export type BaiduOrganicTaskPostData = {
    body?: Array<SerpBaiduOrganicTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/baidu/organic/task_post';
};

export type BaiduOrganicTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpBaiduOrganicTaskPostResponseInfo | null;
};

export type BaiduOrganicTaskPostResponse = BaiduOrganicTaskPostResponses[keyof BaiduOrganicTaskPostResponses];

export type BaiduOrganicTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/baidu/organic/tasks_ready';
};

export type BaiduOrganicTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpBaiduOrganicTasksReadyResponseInfo | null;
};

export type BaiduOrganicTasksReadyResponse = BaiduOrganicTasksReadyResponses[keyof BaiduOrganicTasksReadyResponses];

export type BaiduOrganicTasksFixedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/baidu/organic/tasks_fixed';
};

export type BaiduOrganicTasksFixedResponses = {
    /**
     * Successful operation
     */
    200: SerpBaiduOrganicTasksFixedResponseInfo | null;
};

export type BaiduOrganicTasksFixedResponse = BaiduOrganicTasksFixedResponses[keyof BaiduOrganicTasksFixedResponses];

export type BaiduOrganicTaskGetRegularData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/baidu/organic/task_get/regular/{id}';
};

export type BaiduOrganicTaskGetRegularResponses = {
    /**
     * Successful operation
     */
    200: SerpBaiduOrganicTaskGetRegularResponseInfo | null;
};

export type BaiduOrganicTaskGetRegularResponse = BaiduOrganicTaskGetRegularResponses[keyof BaiduOrganicTaskGetRegularResponses];

export type BaiduOrganicTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/baidu/organic/task_get/advanced/{id}';
};

export type BaiduOrganicTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpBaiduOrganicTaskGetAdvancedResponseInfo | null;
};

export type BaiduOrganicTaskGetAdvancedResponse = BaiduOrganicTaskGetAdvancedResponses[keyof BaiduOrganicTaskGetAdvancedResponses];

export type BaiduOrganicTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/baidu/organic/task_get/html/{id}';
};

export type BaiduOrganicTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpBaiduOrganicTaskGetHtmlResponseInfo | null;
};

export type BaiduOrganicTaskGetHtmlResponse = BaiduOrganicTaskGetHtmlResponses[keyof BaiduOrganicTaskGetHtmlResponses];

export type NaverOrganicTaskPostData = {
    body?: Array<SerpNaverOrganicTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/naver/organic/task_post';
};

export type NaverOrganicTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpNaverOrganicTaskPostResponseInfo | null;
};

export type NaverOrganicTaskPostResponse = NaverOrganicTaskPostResponses[keyof NaverOrganicTaskPostResponses];

export type NaverOrganicTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/naver/organic/tasks_ready';
};

export type NaverOrganicTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpNaverOrganicTasksReadyResponseInfo | null;
};

export type NaverOrganicTasksReadyResponse = NaverOrganicTasksReadyResponses[keyof NaverOrganicTasksReadyResponses];

export type NaverOrganicTasksFixedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/naver/organic/tasks_fixed';
};

export type NaverOrganicTasksFixedResponses = {
    /**
     * Successful operation
     */
    200: SerpNaverOrganicTasksFixedResponseInfo | null;
};

export type NaverOrganicTasksFixedResponse = NaverOrganicTasksFixedResponses[keyof NaverOrganicTasksFixedResponses];

export type NaverOrganicTaskGetRegularData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/naver/organic/task_get/regular/{id}';
};

export type NaverOrganicTaskGetRegularResponses = {
    /**
     * Successful operation
     */
    200: SerpNaverOrganicTaskGetRegularResponseInfo | null;
};

export type NaverOrganicTaskGetRegularResponse = NaverOrganicTaskGetRegularResponses[keyof NaverOrganicTaskGetRegularResponses];

export type NaverOrganicTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/naver/organic/task_get/advanced/{id}';
};

export type NaverOrganicTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpNaverOrganicTaskGetAdvancedResponseInfo | null;
};

export type NaverOrganicTaskGetAdvancedResponse = NaverOrganicTaskGetAdvancedResponses[keyof NaverOrganicTaskGetAdvancedResponses];

export type NaverOrganicTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/naver/organic/task_get/html/{id}';
};

export type NaverOrganicTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpNaverOrganicTaskGetHtmlResponseInfo | null;
};

export type NaverOrganicTaskGetHtmlResponse = NaverOrganicTaskGetHtmlResponses[keyof NaverOrganicTaskGetHtmlResponses];

export type SerpSeznamLocationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/seznam/locations';
};

export type SerpSeznamLocationsResponses = {
    /**
     * Successful operation
     */
    200: SerpSeznamLocationsResponseInfo | null;
};

export type SerpSeznamLocationsResponse = SerpSeznamLocationsResponses[keyof SerpSeznamLocationsResponses];

export type SerpSeznamLocationsCountryData = {
    body?: never;
    path: {
        /**
         * country ISO code
         * optional field
         * specify the ISO code if you want to filter the list of locations by country
         * example:
         * us
         */
        country: string;
    };
    query?: never;
    url: '/v3/serp/seznam/locations/{country}';
};

export type SerpSeznamLocationsCountryResponses = {
    /**
     * Successful operation
     */
    200: SerpSeznamLocationsCountryResponseInfo | null;
};

export type SerpSeznamLocationsCountryResponse = SerpSeznamLocationsCountryResponses[keyof SerpSeznamLocationsCountryResponses];

export type SerpSeznamLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/seznam/languages';
};

export type SerpSeznamLanguagesResponses = {
    /**
     * Successful operation
     */
    200: SerpSeznamLanguagesResponseInfo | null;
};

export type SerpSeznamLanguagesResponse = SerpSeznamLanguagesResponses[keyof SerpSeznamLanguagesResponses];

export type SeznamOrganicTaskPostData = {
    body?: Array<SerpSeznamOrganicTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/seznam/organic/task_post';
};

export type SeznamOrganicTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpSeznamOrganicTaskPostResponseInfo | null;
};

export type SeznamOrganicTaskPostResponse = SeznamOrganicTaskPostResponses[keyof SeznamOrganicTaskPostResponses];

export type SeznamOrganicTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/seznam/organic/tasks_ready';
};

export type SeznamOrganicTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpSeznamOrganicTasksReadyResponseInfo | null;
};

export type SeznamOrganicTasksReadyResponse = SeznamOrganicTasksReadyResponses[keyof SeznamOrganicTasksReadyResponses];

export type SeznamOrganicTasksFixedData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/seznam/organic/tasks_fixed';
};

export type SeznamOrganicTasksFixedResponses = {
    /**
     * Successful operation
     */
    200: SerpSeznamOrganicTasksFixedResponseInfo | null;
};

export type SeznamOrganicTasksFixedResponse = SeznamOrganicTasksFixedResponses[keyof SeznamOrganicTasksFixedResponses];

export type SeznamOrganicTaskGetRegularData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/seznam/organic/task_get/regular/{id}';
};

export type SeznamOrganicTaskGetRegularResponses = {
    /**
     * Successful operation
     */
    200: SerpSeznamOrganicTaskGetRegularResponseInfo | null;
};

export type SeznamOrganicTaskGetRegularResponse = SeznamOrganicTaskGetRegularResponses[keyof SeznamOrganicTaskGetRegularResponses];

export type SeznamOrganicTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/seznam/organic/task_get/advanced/{id}';
};

export type SeznamOrganicTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpSeznamOrganicTaskGetAdvancedResponseInfo | null;
};

export type SeznamOrganicTaskGetAdvancedResponse = SeznamOrganicTaskGetAdvancedResponses[keyof SeznamOrganicTaskGetAdvancedResponses];

export type SeznamOrganicTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/seznam/organic/task_get/html/{id}';
};

export type SeznamOrganicTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpSeznamOrganicTaskGetHtmlResponseInfo | null;
};

export type SeznamOrganicTaskGetHtmlResponse = SeznamOrganicTaskGetHtmlResponses[keyof SeznamOrganicTaskGetHtmlResponses];

export type GoogleFinanceExploreTaskPostData = {
    body?: Array<SerpGoogleFinanceExploreTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/finance_explore/task_post';
};

export type GoogleFinanceExploreTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleFinanceExploreTaskPostResponseInfo | null;
};

export type GoogleFinanceExploreTaskPostResponse = GoogleFinanceExploreTaskPostResponses[keyof GoogleFinanceExploreTaskPostResponses];

export type GoogleFinanceExploreTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/finance_explore/tasks_ready';
};

export type GoogleFinanceExploreTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleFinanceExploreTasksReadyResponseInfo | null;
};

export type GoogleFinanceExploreTasksReadyResponse = GoogleFinanceExploreTasksReadyResponses[keyof GoogleFinanceExploreTasksReadyResponses];

export type GoogleFinanceExploreTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/finance_explore/task_get/advanced/{id}';
};

export type GoogleFinanceExploreTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleFinanceExploreTaskGetAdvancedResponseInfo | null;
};

export type GoogleFinanceExploreTaskGetAdvancedResponse = GoogleFinanceExploreTaskGetAdvancedResponses[keyof GoogleFinanceExploreTaskGetAdvancedResponses];

export type GoogleFinanceExploreTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/finance_explore/task_get/html/{id}';
};

export type GoogleFinanceExploreTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleFinanceExploreTaskGetHtmlResponseInfo | null;
};

export type GoogleFinanceExploreTaskGetHtmlResponse = GoogleFinanceExploreTaskGetHtmlResponses[keyof GoogleFinanceExploreTaskGetHtmlResponses];

export type GoogleFinanceExploreLiveAdvancedData = {
    body?: Array<SerpGoogleFinanceExploreLiveAdvancedRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/finance_explore/live/advanced';
};

export type GoogleFinanceExploreLiveAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleFinanceExploreLiveAdvancedResponseInfo | null;
};

export type GoogleFinanceExploreLiveAdvancedResponse = GoogleFinanceExploreLiveAdvancedResponses[keyof GoogleFinanceExploreLiveAdvancedResponses];

export type GoogleFinanceExploreLiveHtmlData = {
    body?: Array<SerpGoogleFinanceExploreLiveHtmlRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/finance_explore/live/html';
};

export type GoogleFinanceExploreLiveHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleFinanceExploreLiveHtmlResponseInfo | null;
};

export type GoogleFinanceExploreLiveHtmlResponse = GoogleFinanceExploreLiveHtmlResponses[keyof GoogleFinanceExploreLiveHtmlResponses];

export type GoogleFinanceMarketsTaskPostData = {
    body?: Array<SerpGoogleFinanceMarketsTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/finance_markets/task_post';
};

export type GoogleFinanceMarketsTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleFinanceMarketsTaskPostResponseInfo | null;
};

export type GoogleFinanceMarketsTaskPostResponse = GoogleFinanceMarketsTaskPostResponses[keyof GoogleFinanceMarketsTaskPostResponses];

export type GoogleFinanceMarketsTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/finance_markets/tasks_ready';
};

export type GoogleFinanceMarketsTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleFinanceMarketsTasksReadyResponseInfo | null;
};

export type GoogleFinanceMarketsTasksReadyResponse = GoogleFinanceMarketsTasksReadyResponses[keyof GoogleFinanceMarketsTasksReadyResponses];

export type GoogleFinanceMarketsTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/finance_markets/task_get/advanced/{id}';
};

export type GoogleFinanceMarketsTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleFinanceMarketsTaskGetAdvancedResponseInfo | null;
};

export type GoogleFinanceMarketsTaskGetAdvancedResponse = GoogleFinanceMarketsTaskGetAdvancedResponses[keyof GoogleFinanceMarketsTaskGetAdvancedResponses];

export type GoogleFinanceMarketsTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/finance_markets/task_get/html/{id}';
};

export type GoogleFinanceMarketsTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleFinanceMarketsTaskGetHtmlResponseInfo | null;
};

export type GoogleFinanceMarketsTaskGetHtmlResponse = GoogleFinanceMarketsTaskGetHtmlResponses[keyof GoogleFinanceMarketsTaskGetHtmlResponses];

export type GoogleFinanceMarketsLiveAdvancedData = {
    body?: Array<SerpGoogleFinanceMarketsLiveAdvancedRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/finance_markets/live/advanced';
};

export type GoogleFinanceMarketsLiveAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleFinanceMarketsLiveAdvancedResponseInfo | null;
};

export type GoogleFinanceMarketsLiveAdvancedResponse = GoogleFinanceMarketsLiveAdvancedResponses[keyof GoogleFinanceMarketsLiveAdvancedResponses];

export type GoogleFinanceMarketsLiveHtmlData = {
    body?: Array<SerpGoogleFinanceMarketsLiveHtmlRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/finance_markets/live/html';
};

export type GoogleFinanceMarketsLiveHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleFinanceMarketsLiveHtmlResponseInfo | null;
};

export type GoogleFinanceMarketsLiveHtmlResponse = GoogleFinanceMarketsLiveHtmlResponses[keyof GoogleFinanceMarketsLiveHtmlResponses];

export type GoogleFinanceQuoteTaskPostData = {
    body?: Array<SerpGoogleFinanceQuoteTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/finance_quote/task_post';
};

export type GoogleFinanceQuoteTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleFinanceQuoteTaskPostResponseInfo | null;
};

export type GoogleFinanceQuoteTaskPostResponse = GoogleFinanceQuoteTaskPostResponses[keyof GoogleFinanceQuoteTaskPostResponses];

export type GoogleFinanceQuoteTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/finance_quote/tasks_ready';
};

export type GoogleFinanceQuoteTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleFinanceQuoteTasksReadyResponseInfo | null;
};

export type GoogleFinanceQuoteTasksReadyResponse = GoogleFinanceQuoteTasksReadyResponses[keyof GoogleFinanceQuoteTasksReadyResponses];

export type GoogleFinanceQuoteTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/finance_quote/task_get/advanced/{id}';
};

export type GoogleFinanceQuoteTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleFinanceQuoteTaskGetAdvancedResponseInfo | null;
};

export type GoogleFinanceQuoteTaskGetAdvancedResponse = GoogleFinanceQuoteTaskGetAdvancedResponses[keyof GoogleFinanceQuoteTaskGetAdvancedResponses];

export type GoogleFinanceQuoteTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/finance_quote/task_get/html/{id}';
};

export type GoogleFinanceQuoteTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleFinanceQuoteTaskGetHtmlResponseInfo | null;
};

export type GoogleFinanceQuoteTaskGetHtmlResponse = GoogleFinanceQuoteTaskGetHtmlResponses[keyof GoogleFinanceQuoteTaskGetHtmlResponses];

export type GoogleFinanceQuoteLiveAdvancedData = {
    body?: Array<SerpGoogleFinanceQuoteLiveAdvancedRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/finance_quote/live/advanced';
};

export type GoogleFinanceQuoteLiveAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleFinanceQuoteLiveAdvancedResponseInfo | null;
};

export type GoogleFinanceQuoteLiveAdvancedResponse = GoogleFinanceQuoteLiveAdvancedResponses[keyof GoogleFinanceQuoteLiveAdvancedResponses];

export type GoogleFinanceQuoteLiveHtmlData = {
    body?: Array<SerpGoogleFinanceQuoteLiveHtmlRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/finance_quote/live/html';
};

export type GoogleFinanceQuoteLiveHtmlResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleFinanceQuoteLiveHtmlResponseInfo | null;
};

export type GoogleFinanceQuoteLiveHtmlResponse = GoogleFinanceQuoteLiveHtmlResponses[keyof GoogleFinanceQuoteLiveHtmlResponses];

export type GoogleFinanceTickerSearchTaskPostData = {
    body?: Array<SerpGoogleFinanceTickerSearchTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/finance_ticker_search/task_post';
};

export type GoogleFinanceTickerSearchTaskPostResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleFinanceTickerSearchTaskPostResponseInfo | null;
};

export type GoogleFinanceTickerSearchTaskPostResponse = GoogleFinanceTickerSearchTaskPostResponses[keyof GoogleFinanceTickerSearchTaskPostResponses];

export type GoogleFinanceTickerSearchTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/serp/google/finance_ticker_search/tasks_ready';
};

export type GoogleFinanceTickerSearchTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleFinanceTickerSearchTasksReadyResponseInfo | null;
};

export type GoogleFinanceTickerSearchTasksReadyResponse = GoogleFinanceTickerSearchTasksReadyResponses[keyof GoogleFinanceTickerSearchTasksReadyResponses];

export type GoogleFinanceTickerSearchTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/serp/google/finance_ticker_search/task_get/advanced/{id}';
};

export type GoogleFinanceTickerSearchTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleFinanceTickerSearchTaskGetAdvancedResponseInfo | null;
};

export type GoogleFinanceTickerSearchTaskGetAdvancedResponse = GoogleFinanceTickerSearchTaskGetAdvancedResponses[keyof GoogleFinanceTickerSearchTaskGetAdvancedResponses];

export type GoogleFinanceTickerSearchLiveAdvancedData = {
    body?: Array<SerpGoogleFinanceTickerSearchLiveAdvancedRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/serp/google/finance_ticker_search/live/advanced';
};

export type GoogleFinanceTickerSearchLiveAdvancedResponses = {
    /**
     * Successful operation
     */
    200: SerpGoogleFinanceTickerSearchLiveAdvancedResponseInfo | null;
};

export type GoogleFinanceTickerSearchLiveAdvancedResponse = GoogleFinanceTickerSearchLiveAdvancedResponses[keyof GoogleFinanceTickerSearchLiveAdvancedResponses];

export type DataforseoLabsIdListData = {
    body?: Array<DataforseoLabsIdListRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/id_list';
};

export type DataforseoLabsIdListResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsIdListResponseInfo | null;
};

export type DataforseoLabsIdListResponse = DataforseoLabsIdListResponses[keyof DataforseoLabsIdListResponses];

export type DataforseoLabsStatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/status';
};

export type DataforseoLabsStatusResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsStatusResponseInfo | null;
};

export type DataforseoLabsStatusResponse = DataforseoLabsStatusResponses[keyof DataforseoLabsStatusResponses];

export type DataforseoLabsErrorsData = {
    body?: Array<DataforseoLabsErrorsRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/errors';
};

export type DataforseoLabsErrorsResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsErrorsResponseInfo | null;
};

export type DataforseoLabsErrorsResponse = DataforseoLabsErrorsResponses[keyof DataforseoLabsErrorsResponses];

export type AvailableFiltersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/available_filters';
};

export type AvailableFiltersResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsAvailableFiltersResponseInfo | null;
};

export type AvailableFiltersResponse = AvailableFiltersResponses[keyof AvailableFiltersResponses];

export type DataforseoLabsLocationsAndLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/locations_and_languages';
};

export type DataforseoLabsLocationsAndLanguagesResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsLocationsAndLanguagesResponseInfo | null;
};

export type DataforseoLabsLocationsAndLanguagesResponse = DataforseoLabsLocationsAndLanguagesResponses[keyof DataforseoLabsLocationsAndLanguagesResponses];

export type CategoriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/categories';
};

export type CategoriesResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsCategoriesResponseInfo | null;
};

export type CategoriesResponse = CategoriesResponses[keyof CategoriesResponses];

export type GoogleAvailableHistoryData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/available_history';
};

export type GoogleAvailableHistoryResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleAvailableHistoryResponseInfo | null;
};

export type GoogleAvailableHistoryResponse = GoogleAvailableHistoryResponses[keyof GoogleAvailableHistoryResponses];

export type GoogleKeywordsForSiteLiveData = {
    body?: Array<DataforseoLabsGoogleKeywordsForSiteLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/keywords_for_site/live';
};

export type GoogleKeywordsForSiteLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleKeywordsForSiteLiveResponseInfo | null;
};

export type GoogleKeywordsForSiteLiveResponse = GoogleKeywordsForSiteLiveResponses[keyof GoogleKeywordsForSiteLiveResponses];

export type GoogleRelatedKeywordsLiveData = {
    body?: Array<DataforseoLabsGoogleRelatedKeywordsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/related_keywords/live';
};

export type GoogleRelatedKeywordsLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleRelatedKeywordsLiveResponseInfo | null;
};

export type GoogleRelatedKeywordsLiveResponse = GoogleRelatedKeywordsLiveResponses[keyof GoogleRelatedKeywordsLiveResponses];

export type GoogleKeywordSuggestionsLiveData = {
    body?: Array<DataforseoLabsGoogleKeywordSuggestionsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/keyword_suggestions/live';
};

export type GoogleKeywordSuggestionsLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleKeywordSuggestionsLiveResponseInfo | null;
};

export type GoogleKeywordSuggestionsLiveResponse = GoogleKeywordSuggestionsLiveResponses[keyof GoogleKeywordSuggestionsLiveResponses];

export type GoogleKeywordIdeasLiveData = {
    body?: Array<DataforseoLabsGoogleKeywordIdeasLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/keyword_ideas/live';
};

export type GoogleKeywordIdeasLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleKeywordIdeasLiveResponseInfo | null;
};

export type GoogleKeywordIdeasLiveResponse = GoogleKeywordIdeasLiveResponses[keyof GoogleKeywordIdeasLiveResponses];

export type GoogleBulkKeywordDifficultyLiveData = {
    body?: Array<DataforseoLabsGoogleBulkKeywordDifficultyLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/bulk_keyword_difficulty/live';
};

export type GoogleBulkKeywordDifficultyLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleBulkKeywordDifficultyLiveResponseInfo | null;
};

export type GoogleBulkKeywordDifficultyLiveResponse = GoogleBulkKeywordDifficultyLiveResponses[keyof GoogleBulkKeywordDifficultyLiveResponses];

export type GoogleSearchIntentLiveData = {
    body?: Array<DataforseoLabsGoogleSearchIntentLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/search_intent/live';
};

export type GoogleSearchIntentLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleSearchIntentLiveResponseInfo | null;
};

export type GoogleSearchIntentLiveResponse = GoogleSearchIntentLiveResponses[keyof GoogleSearchIntentLiveResponses];

export type DataforseoLabsGoogleCategoriesForKeywordsLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/categories_for_keywords/languages';
};

export type DataforseoLabsGoogleCategoriesForKeywordsLanguagesResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleCategoriesForKeywordsLanguagesResponseInfo | null;
};

export type DataforseoLabsGoogleCategoriesForKeywordsLanguagesResponse = DataforseoLabsGoogleCategoriesForKeywordsLanguagesResponses[keyof DataforseoLabsGoogleCategoriesForKeywordsLanguagesResponses];

export type GoogleCategoriesForDomainLiveData = {
    body?: Array<DataforseoLabsGoogleCategoriesForDomainLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/categories_for_domain/live';
};

export type GoogleCategoriesForDomainLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleCategoriesForDomainLiveResponseInfo | null;
};

export type GoogleCategoriesForDomainLiveResponse = GoogleCategoriesForDomainLiveResponses[keyof GoogleCategoriesForDomainLiveResponses];

export type GoogleCategoriesForKeywordsLiveData = {
    body?: Array<DataforseoLabsGoogleCategoriesForKeywordsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/categories_for_keywords/live';
};

export type GoogleCategoriesForKeywordsLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleCategoriesForKeywordsLiveResponseInfo | null;
};

export type GoogleCategoriesForKeywordsLiveResponse = GoogleCategoriesForKeywordsLiveResponses[keyof GoogleCategoriesForKeywordsLiveResponses];

export type GoogleKeywordsForCategoriesLiveData = {
    body?: Array<DataforseoLabsGoogleKeywordsForCategoriesLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/keywords_for_categories/live';
};

export type GoogleKeywordsForCategoriesLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleKeywordsForCategoriesLiveResponseInfo | null;
};

export type GoogleKeywordsForCategoriesLiveResponse = GoogleKeywordsForCategoriesLiveResponses[keyof GoogleKeywordsForCategoriesLiveResponses];

export type GoogleDomainMetricsByCategoriesLiveData = {
    body?: Array<DataforseoLabsGoogleDomainMetricsByCategoriesLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/domain_metrics_by_categories/live';
};

export type GoogleDomainMetricsByCategoriesLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleDomainMetricsByCategoriesLiveResponseInfo | null;
};

export type GoogleDomainMetricsByCategoriesLiveResponse = GoogleDomainMetricsByCategoriesLiveResponses[keyof GoogleDomainMetricsByCategoriesLiveResponses];

export type GoogleTopSearchesLiveData = {
    body?: Array<DataforseoLabsGoogleTopSearchesLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/top_searches/live';
};

export type GoogleTopSearchesLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleTopSearchesLiveResponseInfo | null;
};

export type GoogleTopSearchesLiveResponse = GoogleTopSearchesLiveResponses[keyof GoogleTopSearchesLiveResponses];

export type GoogleDomainWhoisOverviewLiveData = {
    body?: Array<DataforseoLabsGoogleDomainWhoisOverviewLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/domain_whois_overview/live';
};

export type GoogleDomainWhoisOverviewLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleDomainWhoisOverviewLiveResponseInfo | null;
};

export type GoogleDomainWhoisOverviewLiveResponse = GoogleDomainWhoisOverviewLiveResponses[keyof GoogleDomainWhoisOverviewLiveResponses];

export type GoogleRankedKeywordsLiveData = {
    body?: Array<DataforseoLabsGoogleRankedKeywordsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/ranked_keywords/live';
};

export type GoogleRankedKeywordsLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleRankedKeywordsLiveResponseInfo | null;
};

export type GoogleRankedKeywordsLiveResponse = GoogleRankedKeywordsLiveResponses[keyof GoogleRankedKeywordsLiveResponses];

export type GoogleSerpCompetitorsLiveData = {
    body?: Array<DataforseoLabsGoogleSerpCompetitorsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/serp_competitors/live';
};

export type GoogleSerpCompetitorsLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleSerpCompetitorsLiveResponseInfo | null;
};

export type GoogleSerpCompetitorsLiveResponse = GoogleSerpCompetitorsLiveResponses[keyof GoogleSerpCompetitorsLiveResponses];

export type GoogleCompetitorsDomainLiveData = {
    body?: Array<DataforseoLabsGoogleCompetitorsDomainLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/competitors_domain/live';
};

export type GoogleCompetitorsDomainLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleCompetitorsDomainLiveResponseInfo | null;
};

export type GoogleCompetitorsDomainLiveResponse = GoogleCompetitorsDomainLiveResponses[keyof GoogleCompetitorsDomainLiveResponses];

export type GoogleDomainIntersectionLiveData = {
    body?: Array<DataforseoLabsGoogleDomainIntersectionLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/domain_intersection/live';
};

export type GoogleDomainIntersectionLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleDomainIntersectionLiveResponseInfo | null;
};

export type GoogleDomainIntersectionLiveResponse = GoogleDomainIntersectionLiveResponses[keyof GoogleDomainIntersectionLiveResponses];

export type GoogleSubdomainsLiveData = {
    body?: Array<DataforseoLabsGoogleSubdomainsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/subdomains/live';
};

export type GoogleSubdomainsLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleSubdomainsLiveResponseInfo | null;
};

export type GoogleSubdomainsLiveResponse = GoogleSubdomainsLiveResponses[keyof GoogleSubdomainsLiveResponses];

export type GoogleRelevantPagesLiveData = {
    body?: Array<DataforseoLabsGoogleRelevantPagesLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/relevant_pages/live';
};

export type GoogleRelevantPagesLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleRelevantPagesLiveResponseInfo | null;
};

export type GoogleRelevantPagesLiveResponse = GoogleRelevantPagesLiveResponses[keyof GoogleRelevantPagesLiveResponses];

export type GoogleDomainRankOverviewLiveData = {
    body?: Array<DataforseoLabsGoogleDomainRankOverviewLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/domain_rank_overview/live';
};

export type GoogleDomainRankOverviewLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleDomainRankOverviewLiveResponseInfo | null;
};

export type GoogleDomainRankOverviewLiveResponse = GoogleDomainRankOverviewLiveResponses[keyof GoogleDomainRankOverviewLiveResponses];

export type GoogleHistoricalSerpsLiveData = {
    body?: Array<DataforseoLabsGoogleHistoricalSerpsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/historical_serps/live';
};

export type GoogleHistoricalSerpsLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleHistoricalSerpsLiveResponseInfo | null;
};

export type GoogleHistoricalSerpsLiveResponse = GoogleHistoricalSerpsLiveResponses[keyof GoogleHistoricalSerpsLiveResponses];

export type GoogleHistoricalRankOverviewLiveData = {
    body?: Array<DataforseoLabsGoogleHistoricalRankOverviewLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/historical_rank_overview/live';
};

export type GoogleHistoricalRankOverviewLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleHistoricalRankOverviewLiveResponseInfo | null;
};

export type GoogleHistoricalRankOverviewLiveResponse = GoogleHistoricalRankOverviewLiveResponses[keyof GoogleHistoricalRankOverviewLiveResponses];

export type GooglePageIntersectionLiveData = {
    body?: Array<DataforseoLabsGooglePageIntersectionLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/page_intersection/live';
};

export type GooglePageIntersectionLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGooglePageIntersectionLiveResponseInfo | null;
};

export type GooglePageIntersectionLiveResponse = GooglePageIntersectionLiveResponses[keyof GooglePageIntersectionLiveResponses];

export type GoogleBulkTrafficEstimationLiveData = {
    body?: Array<DataforseoLabsGoogleBulkTrafficEstimationLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/bulk_traffic_estimation/live';
};

export type GoogleBulkTrafficEstimationLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleBulkTrafficEstimationLiveResponseInfo | null;
};

export type GoogleBulkTrafficEstimationLiveResponse = GoogleBulkTrafficEstimationLiveResponses[keyof GoogleBulkTrafficEstimationLiveResponses];

export type GoogleHistoricalBulkTrafficEstimationLiveData = {
    body?: Array<DataforseoLabsGoogleHistoricalBulkTrafficEstimationLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/historical_bulk_traffic_estimation/live';
};

export type GoogleHistoricalBulkTrafficEstimationLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleHistoricalBulkTrafficEstimationLiveResponseInfo | null;
};

export type GoogleHistoricalBulkTrafficEstimationLiveResponse = GoogleHistoricalBulkTrafficEstimationLiveResponses[keyof GoogleHistoricalBulkTrafficEstimationLiveResponses];

export type GoogleHistoricalKeywordDataLiveData = {
    body?: Array<DataforseoLabsGoogleHistoricalKeywordDataLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/historical_keyword_data/live';
};

export type GoogleHistoricalKeywordDataLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleHistoricalKeywordDataLiveResponseInfo | null;
};

export type GoogleHistoricalKeywordDataLiveResponse = GoogleHistoricalKeywordDataLiveResponses[keyof GoogleHistoricalKeywordDataLiveResponses];

export type GoogleKeywordOverviewLiveData = {
    body?: Array<DataforseoLabsGoogleKeywordOverviewLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/keyword_overview/live';
};

export type GoogleKeywordOverviewLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleKeywordOverviewLiveResponseInfo | null;
};

export type GoogleKeywordOverviewLiveResponse = GoogleKeywordOverviewLiveResponses[keyof GoogleKeywordOverviewLiveResponses];

export type AmazonBulkSearchVolumeLiveData = {
    body?: Array<DataforseoLabsAmazonBulkSearchVolumeLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/amazon/bulk_search_volume/live';
};

export type AmazonBulkSearchVolumeLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsAmazonBulkSearchVolumeLiveResponseInfo | null;
};

export type AmazonBulkSearchVolumeLiveResponse = AmazonBulkSearchVolumeLiveResponses[keyof AmazonBulkSearchVolumeLiveResponses];

export type AmazonRelatedKeywordsLiveData = {
    body?: Array<DataforseoLabsAmazonRelatedKeywordsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/amazon/related_keywords/live';
};

export type AmazonRelatedKeywordsLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsAmazonRelatedKeywordsLiveResponseInfo | null;
};

export type AmazonRelatedKeywordsLiveResponse = AmazonRelatedKeywordsLiveResponses[keyof AmazonRelatedKeywordsLiveResponses];

export type AmazonRankedKeywordsLiveData = {
    body?: Array<DataforseoLabsAmazonRankedKeywordsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/amazon/ranked_keywords/live';
};

export type AmazonRankedKeywordsLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsAmazonRankedKeywordsLiveResponseInfo | null;
};

export type AmazonRankedKeywordsLiveResponse = AmazonRankedKeywordsLiveResponses[keyof AmazonRankedKeywordsLiveResponses];

export type AmazonProductRankOverviewLiveData = {
    body?: Array<DataforseoLabsAmazonProductRankOverviewLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/amazon/product_rank_overview/live';
};

export type AmazonProductRankOverviewLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsAmazonProductRankOverviewLiveResponseInfo | null;
};

export type AmazonProductRankOverviewLiveResponse = AmazonProductRankOverviewLiveResponses[keyof AmazonProductRankOverviewLiveResponses];

export type AmazonProductCompetitorsLiveData = {
    body?: Array<DataforseoLabsAmazonProductCompetitorsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/amazon/product_competitors/live';
};

export type AmazonProductCompetitorsLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsAmazonProductCompetitorsLiveResponseInfo | null;
};

export type AmazonProductCompetitorsLiveResponse = AmazonProductCompetitorsLiveResponses[keyof AmazonProductCompetitorsLiveResponses];

export type AmazonProductKeywordIntersectionsLiveData = {
    body?: Array<DataforseoLabsAmazonProductKeywordIntersectionsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/amazon/product_keyword_intersections/live';
};

export type AmazonProductKeywordIntersectionsLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsAmazonProductKeywordIntersectionsLiveResponseInfo | null;
};

export type AmazonProductKeywordIntersectionsLiveResponse = AmazonProductKeywordIntersectionsLiveResponses[keyof AmazonProductKeywordIntersectionsLiveResponses];

export type BingBulkKeywordDifficultyLiveData = {
    body?: Array<DataforseoLabsBingBulkKeywordDifficultyLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/bing/bulk_keyword_difficulty/live';
};

export type BingBulkKeywordDifficultyLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsBingBulkKeywordDifficultyLiveResponseInfo | null;
};

export type BingBulkKeywordDifficultyLiveResponse = BingBulkKeywordDifficultyLiveResponses[keyof BingBulkKeywordDifficultyLiveResponses];

export type BingBulkTrafficEstimationLiveData = {
    body?: Array<DataforseoLabsBingBulkTrafficEstimationLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/bing/bulk_traffic_estimation/live';
};

export type BingBulkTrafficEstimationLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsBingBulkTrafficEstimationLiveResponseInfo | null;
};

export type BingBulkTrafficEstimationLiveResponse = BingBulkTrafficEstimationLiveResponses[keyof BingBulkTrafficEstimationLiveResponses];

export type BingCompetitorsDomainLiveData = {
    body?: Array<DataforseoLabsBingCompetitorsDomainLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/bing/competitors_domain/live';
};

export type BingCompetitorsDomainLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsBingCompetitorsDomainLiveResponseInfo | null;
};

export type BingCompetitorsDomainLiveResponse = BingCompetitorsDomainLiveResponses[keyof BingCompetitorsDomainLiveResponses];

export type BingDomainIntersectionLiveData = {
    body?: Array<DataforseoLabsBingDomainIntersectionLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/bing/domain_intersection/live';
};

export type BingDomainIntersectionLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsBingDomainIntersectionLiveResponseInfo | null;
};

export type BingDomainIntersectionLiveResponse = BingDomainIntersectionLiveResponses[keyof BingDomainIntersectionLiveResponses];

export type BingDomainRankOverviewLiveData = {
    body?: Array<DataforseoLabsBingDomainRankOverviewLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/bing/domain_rank_overview/live';
};

export type BingDomainRankOverviewLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsBingDomainRankOverviewLiveResponseInfo | null;
};

export type BingDomainRankOverviewLiveResponse = BingDomainRankOverviewLiveResponses[keyof BingDomainRankOverviewLiveResponses];

export type BingPageIntersectionLiveData = {
    body?: Array<DataforseoLabsBingPageIntersectionLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/bing/page_intersection/live';
};

export type BingPageIntersectionLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsBingPageIntersectionLiveResponseInfo | null;
};

export type BingPageIntersectionLiveResponse = BingPageIntersectionLiveResponses[keyof BingPageIntersectionLiveResponses];

export type BingRankedKeywordsLiveData = {
    body?: Array<DataforseoLabsBingRankedKeywordsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/bing/ranked_keywords/live';
};

export type BingRankedKeywordsLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsBingRankedKeywordsLiveResponseInfo | null;
};

export type BingRankedKeywordsLiveResponse = BingRankedKeywordsLiveResponses[keyof BingRankedKeywordsLiveResponses];

export type BingRelatedKeywordsLiveData = {
    body?: Array<DataforseoLabsBingRelatedKeywordsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/bing/related_keywords/live';
};

export type BingRelatedKeywordsLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsBingRelatedKeywordsLiveResponseInfo | null;
};

export type BingRelatedKeywordsLiveResponse = BingRelatedKeywordsLiveResponses[keyof BingRelatedKeywordsLiveResponses];

export type BingRelevantPagesLiveData = {
    body?: Array<DataforseoLabsBingRelevantPagesLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/bing/relevant_pages/live';
};

export type BingRelevantPagesLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsBingRelevantPagesLiveResponseInfo | null;
};

export type BingRelevantPagesLiveResponse = BingRelevantPagesLiveResponses[keyof BingRelevantPagesLiveResponses];

export type BingSerpCompetitorsLiveData = {
    body?: Array<DataforseoLabsBingSerpCompetitorsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/bing/serp_competitors/live';
};

export type BingSerpCompetitorsLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsBingSerpCompetitorsLiveResponseInfo | null;
};

export type BingSerpCompetitorsLiveResponse = BingSerpCompetitorsLiveResponses[keyof BingSerpCompetitorsLiveResponses];

export type BingSubdomainsLiveData = {
    body?: Array<DataforseoLabsBingSubdomainsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/bing/subdomains/live';
};

export type BingSubdomainsLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsBingSubdomainsLiveResponseInfo | null;
};

export type BingSubdomainsLiveResponse = BingSubdomainsLiveResponses[keyof BingSubdomainsLiveResponses];

export type GoogleBulkAppMetricsLiveData = {
    body?: Array<DataforseoLabsGoogleBulkAppMetricsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/bulk_app_metrics/live';
};

export type GoogleBulkAppMetricsLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleBulkAppMetricsLiveResponseInfo | null;
};

export type GoogleBulkAppMetricsLiveResponse = GoogleBulkAppMetricsLiveResponses[keyof GoogleBulkAppMetricsLiveResponses];

export type GoogleKeywordsForAppLiveData = {
    body?: Array<DataforseoLabsGoogleKeywordsForAppLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/keywords_for_app/live';
};

export type GoogleKeywordsForAppLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleKeywordsForAppLiveResponseInfo | null;
};

export type GoogleKeywordsForAppLiveResponse = GoogleKeywordsForAppLiveResponses[keyof GoogleKeywordsForAppLiveResponses];

export type GoogleAppCompetitorsLiveData = {
    body?: Array<DataforseoLabsGoogleAppCompetitorsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/app_competitors/live';
};

export type GoogleAppCompetitorsLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleAppCompetitorsLiveResponseInfo | null;
};

export type GoogleAppCompetitorsLiveResponse = GoogleAppCompetitorsLiveResponses[keyof GoogleAppCompetitorsLiveResponses];

export type GoogleAppIntersectionLiveData = {
    body?: Array<DataforseoLabsGoogleAppIntersectionLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/google/app_intersection/live';
};

export type GoogleAppIntersectionLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsGoogleAppIntersectionLiveResponseInfo | null;
};

export type GoogleAppIntersectionLiveResponse = GoogleAppIntersectionLiveResponses[keyof GoogleAppIntersectionLiveResponses];

export type AppleBulkAppMetricsLiveData = {
    body?: Array<DataforseoLabsAppleBulkAppMetricsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/apple/bulk_app_metrics/live';
};

export type AppleBulkAppMetricsLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsAppleBulkAppMetricsLiveResponseInfo | null;
};

export type AppleBulkAppMetricsLiveResponse = AppleBulkAppMetricsLiveResponses[keyof AppleBulkAppMetricsLiveResponses];

export type AppleKeywordsForAppLiveData = {
    body?: Array<DataforseoLabsAppleKeywordsForAppLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/apple/keywords_for_app/live';
};

export type AppleKeywordsForAppLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsAppleKeywordsForAppLiveResponseInfo | null;
};

export type AppleKeywordsForAppLiveResponse = AppleKeywordsForAppLiveResponses[keyof AppleKeywordsForAppLiveResponses];

export type AppleAppCompetitorsLiveData = {
    body?: Array<DataforseoLabsAppleAppCompetitorsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/apple/app_competitors/live';
};

export type AppleAppCompetitorsLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsAppleAppCompetitorsLiveResponseInfo | null;
};

export type AppleAppCompetitorsLiveResponse = AppleAppCompetitorsLiveResponses[keyof AppleAppCompetitorsLiveResponses];

export type AppleAppIntersectionLiveData = {
    body?: Array<DataforseoLabsAppleAppIntersectionLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/dataforseo_labs/apple/app_intersection/live';
};

export type AppleAppIntersectionLiveResponses = {
    /**
     * Successful operation
     */
    200: DataforseoLabsAppleAppIntersectionLiveResponseInfo | null;
};

export type AppleAppIntersectionLiveResponse = AppleAppIntersectionLiveResponses[keyof AppleAppIntersectionLiveResponses];

export type DomainAnalyticsIdListData = {
    body?: Array<DomainAnalyticsIdListRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/domain_analytics/id_list';
};

export type DomainAnalyticsIdListResponses = {
    /**
     * Successful operation
     */
    200: DomainAnalyticsIdListResponseInfo | null;
};

export type DomainAnalyticsIdListResponse = DomainAnalyticsIdListResponses[keyof DomainAnalyticsIdListResponses];

export type DomainAnalyticsErrorsData = {
    body?: Array<DomainAnalyticsErrorsRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/domain_analytics/errors';
};

export type DomainAnalyticsErrorsResponses = {
    /**
     * Successful operation
     */
    200: DomainAnalyticsErrorsResponseInfo | null;
};

export type DomainAnalyticsErrorsResponse = DomainAnalyticsErrorsResponses[keyof DomainAnalyticsErrorsResponses];

export type TechnologiesAvailableFiltersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/domain_analytics/technologies/available_filters';
};

export type TechnologiesAvailableFiltersResponses = {
    /**
     * Successful operation
     */
    200: DomainAnalyticsTechnologiesAvailableFiltersResponseInfo | null;
};

export type TechnologiesAvailableFiltersResponse = TechnologiesAvailableFiltersResponses[keyof TechnologiesAvailableFiltersResponses];

export type DomainAnalyticsTechnologiesLocationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/domain_analytics/technologies/locations';
};

export type DomainAnalyticsTechnologiesLocationsResponses = {
    /**
     * Successful operation
     */
    200: DomainAnalyticsTechnologiesLocationsResponseInfo | null;
};

export type DomainAnalyticsTechnologiesLocationsResponse = DomainAnalyticsTechnologiesLocationsResponses[keyof DomainAnalyticsTechnologiesLocationsResponses];

export type DomainAnalyticsTechnologiesLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/domain_analytics/technologies/languages';
};

export type DomainAnalyticsTechnologiesLanguagesResponses = {
    /**
     * Successful operation
     */
    200: DomainAnalyticsTechnologiesLanguagesResponseInfo | null;
};

export type DomainAnalyticsTechnologiesLanguagesResponse = DomainAnalyticsTechnologiesLanguagesResponses[keyof DomainAnalyticsTechnologiesLanguagesResponses];

export type TechnologiesTechnologiesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/domain_analytics/technologies/technologies';
};

export type TechnologiesTechnologiesResponses = {
    /**
     * Successful operation
     */
    200: DomainAnalyticsTechnologiesTechnologiesResponseInfo | null;
};

export type TechnologiesTechnologiesResponse = TechnologiesTechnologiesResponses[keyof TechnologiesTechnologiesResponses];

export type TechnologiesAggregationTechnologiesLiveData = {
    body?: Array<DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/domain_analytics/technologies/aggregation_technologies/live';
};

export type TechnologiesAggregationTechnologiesLiveResponses = {
    /**
     * Successful operation
     */
    200: DomainAnalyticsTechnologiesAggregationTechnologiesLiveResponseInfo | null;
};

export type TechnologiesAggregationTechnologiesLiveResponse = TechnologiesAggregationTechnologiesLiveResponses[keyof TechnologiesAggregationTechnologiesLiveResponses];

export type TechnologiesTechnologiesSummaryLiveData = {
    body?: Array<DomainAnalyticsTechnologiesTechnologiesSummaryLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/domain_analytics/technologies/technologies_summary/live';
};

export type TechnologiesTechnologiesSummaryLiveResponses = {
    /**
     * Successful operation
     */
    200: DomainAnalyticsTechnologiesTechnologiesSummaryLiveResponseInfo | null;
};

export type TechnologiesTechnologiesSummaryLiveResponse = TechnologiesTechnologiesSummaryLiveResponses[keyof TechnologiesTechnologiesSummaryLiveResponses];

export type TechnologiesTechnologyStatsLiveData = {
    body?: Array<DomainAnalyticsTechnologiesTechnologyStatsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/domain_analytics/technologies/technology_stats/live';
};

export type TechnologiesTechnologyStatsLiveResponses = {
    /**
     * Successful operation
     */
    200: DomainAnalyticsTechnologiesTechnologyStatsLiveResponseInfo | null;
};

export type TechnologiesTechnologyStatsLiveResponse = TechnologiesTechnologyStatsLiveResponses[keyof TechnologiesTechnologyStatsLiveResponses];

export type TechnologiesDomainsByTechnologyLiveData = {
    body?: Array<DomainAnalyticsTechnologiesDomainsByTechnologyLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/domain_analytics/technologies/domains_by_technology/live';
};

export type TechnologiesDomainsByTechnologyLiveResponses = {
    /**
     * Successful operation
     */
    200: DomainAnalyticsTechnologiesDomainsByTechnologyLiveResponseInfo | null;
};

export type TechnologiesDomainsByTechnologyLiveResponse = TechnologiesDomainsByTechnologyLiveResponses[keyof TechnologiesDomainsByTechnologyLiveResponses];

export type TechnologiesDomainsByHtmlTermsLiveData = {
    body?: Array<DomainAnalyticsTechnologiesDomainsByHtmlTermsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/domain_analytics/technologies/domains_by_html_terms/live';
};

export type TechnologiesDomainsByHtmlTermsLiveResponses = {
    /**
     * Successful operation
     */
    200: DomainAnalyticsTechnologiesDomainsByHtmlTermsLiveResponseInfo | null;
};

export type TechnologiesDomainsByHtmlTermsLiveResponse = TechnologiesDomainsByHtmlTermsLiveResponses[keyof TechnologiesDomainsByHtmlTermsLiveResponses];

export type TechnologiesDomainTechnologiesLiveData = {
    body?: Array<DomainAnalyticsTechnologiesDomainTechnologiesLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/domain_analytics/technologies/domain_technologies/live';
};

export type TechnologiesDomainTechnologiesLiveResponses = {
    /**
     * Successful operation
     */
    200: DomainAnalyticsTechnologiesDomainTechnologiesLiveResponseInfo | null;
};

export type TechnologiesDomainTechnologiesLiveResponse = TechnologiesDomainTechnologiesLiveResponses[keyof TechnologiesDomainTechnologiesLiveResponses];

export type WhoisAvailableFiltersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/domain_analytics/whois/available_filters';
};

export type WhoisAvailableFiltersResponses = {
    /**
     * Successful operation
     */
    200: DomainAnalyticsWhoisAvailableFiltersResponseInfo | null;
};

export type WhoisAvailableFiltersResponse = WhoisAvailableFiltersResponses[keyof WhoisAvailableFiltersResponses];

export type WhoisOverviewLiveData = {
    body?: Array<DomainAnalyticsWhoisOverviewLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/domain_analytics/whois/overview/live';
};

export type WhoisOverviewLiveResponses = {
    /**
     * Successful operation
     */
    200: DomainAnalyticsWhoisOverviewLiveResponseInfo | null;
};

export type WhoisOverviewLiveResponse = WhoisOverviewLiveResponses[keyof WhoisOverviewLiveResponses];

export type KeywordsDataIdListData = {
    body?: Array<KeywordsDataIdListRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/id_list';
};

export type KeywordsDataIdListResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataIdListResponseInfo | null;
};

export type KeywordsDataIdListResponse = KeywordsDataIdListResponses[keyof KeywordsDataIdListResponses];

export type KeywordsDataErrorsData = {
    body?: Array<KeywordsDataErrorsRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/errors';
};

export type KeywordsDataErrorsResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataErrorsResponseInfo | null;
};

export type KeywordsDataErrorsResponse = KeywordsDataErrorsResponses[keyof KeywordsDataErrorsResponses];

export type GoogleAdsStatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/google_ads/status';
};

export type GoogleAdsStatusResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleAdsStatusResponseInfo | null;
};

export type GoogleAdsStatusResponse = GoogleAdsStatusResponses[keyof GoogleAdsStatusResponses];

export type KeywordsDataGoogleAdsLocationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/google_ads/locations';
};

export type KeywordsDataGoogleAdsLocationsResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleAdsLocationsResponseInfo | null;
};

export type KeywordsDataGoogleAdsLocationsResponse = KeywordsDataGoogleAdsLocationsResponses[keyof KeywordsDataGoogleAdsLocationsResponses];

export type KeywordsDataGoogleAdsLocationsCountryData = {
    body?: never;
    path: {
        /**
         * country ISO code
         * optional field
         * specify the ISO code if you want to filter the list of locations by country
         * example:
         * us
         */
        country: string | null;
    };
    query?: never;
    url: '/v3/keywords_data/google_ads/locations/{country}';
};

export type KeywordsDataGoogleAdsLocationsCountryResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleAdsLocationsCountryResponseInfo | null;
};

export type KeywordsDataGoogleAdsLocationsCountryResponse = KeywordsDataGoogleAdsLocationsCountryResponses[keyof KeywordsDataGoogleAdsLocationsCountryResponses];

export type KeywordsDataGoogleAdsLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/google_ads/languages';
};

export type KeywordsDataGoogleAdsLanguagesResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleAdsLanguagesResponseInfo | null;
};

export type KeywordsDataGoogleAdsLanguagesResponse = KeywordsDataGoogleAdsLanguagesResponses[keyof KeywordsDataGoogleAdsLanguagesResponses];

export type GoogleAdsSearchVolumeTaskPostData = {
    body?: Array<KeywordsDataGoogleAdsSearchVolumeTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/google_ads/search_volume/task_post';
};

export type GoogleAdsSearchVolumeTaskPostResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleAdsSearchVolumeTaskPostResponseInfo | null;
};

export type GoogleAdsSearchVolumeTaskPostResponse = GoogleAdsSearchVolumeTaskPostResponses[keyof GoogleAdsSearchVolumeTaskPostResponses];

export type GoogleAdsSearchVolumeTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/google_ads/search_volume/tasks_ready';
};

export type GoogleAdsSearchVolumeTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleAdsSearchVolumeTasksReadyResponseInfo | null;
};

export type GoogleAdsSearchVolumeTasksReadyResponse = GoogleAdsSearchVolumeTasksReadyResponses[keyof GoogleAdsSearchVolumeTasksReadyResponses];

export type GoogleAdsSearchVolumeTaskGetData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/keywords_data/google_ads/search_volume/task_get/{id}';
};

export type GoogleAdsSearchVolumeTaskGetResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleAdsSearchVolumeTaskGetResponseInfo | null;
};

export type GoogleAdsSearchVolumeTaskGetResponse = GoogleAdsSearchVolumeTaskGetResponses[keyof GoogleAdsSearchVolumeTaskGetResponses];

export type GoogleAdsSearchVolumeLiveData = {
    body?: Array<KeywordsDataGoogleAdsSearchVolumeLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/google_ads/search_volume/live';
};

export type GoogleAdsSearchVolumeLiveResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleAdsSearchVolumeLiveResponseInfo | null;
};

export type GoogleAdsSearchVolumeLiveResponse = GoogleAdsSearchVolumeLiveResponses[keyof GoogleAdsSearchVolumeLiveResponses];

export type GoogleAdsKeywordsForSiteTaskPostData = {
    body?: Array<KeywordsDataGoogleAdsKeywordsForSiteTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/google_ads/keywords_for_site/task_post';
};

export type GoogleAdsKeywordsForSiteTaskPostResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleAdsKeywordsForSiteTaskPostResponseInfo | null;
};

export type GoogleAdsKeywordsForSiteTaskPostResponse = GoogleAdsKeywordsForSiteTaskPostResponses[keyof GoogleAdsKeywordsForSiteTaskPostResponses];

export type GoogleAdsKeywordsForSiteTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/google_ads/keywords_for_site/tasks_ready';
};

export type GoogleAdsKeywordsForSiteTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleAdsKeywordsForSiteTasksReadyResponseInfo | null;
};

export type GoogleAdsKeywordsForSiteTasksReadyResponse = GoogleAdsKeywordsForSiteTasksReadyResponses[keyof GoogleAdsKeywordsForSiteTasksReadyResponses];

export type GoogleAdsKeywordsForSiteTaskGetData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/keywords_data/google_ads/keywords_for_site/task_get/{id}';
};

export type GoogleAdsKeywordsForSiteTaskGetResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleAdsKeywordsForSiteTaskGetResponseInfo | null;
};

export type GoogleAdsKeywordsForSiteTaskGetResponse = GoogleAdsKeywordsForSiteTaskGetResponses[keyof GoogleAdsKeywordsForSiteTaskGetResponses];

export type GoogleAdsKeywordsForSiteLiveData = {
    body?: Array<KeywordsDataGoogleAdsKeywordsForSiteLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/google_ads/keywords_for_site/live';
};

export type GoogleAdsKeywordsForSiteLiveResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleAdsKeywordsForSiteLiveResponseInfo | null;
};

export type GoogleAdsKeywordsForSiteLiveResponse = GoogleAdsKeywordsForSiteLiveResponses[keyof GoogleAdsKeywordsForSiteLiveResponses];

export type GoogleAdsKeywordsForKeywordsTaskPostData = {
    body?: Array<KeywordsDataGoogleAdsKeywordsForKeywordsTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/google_ads/keywords_for_keywords/task_post';
};

export type GoogleAdsKeywordsForKeywordsTaskPostResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleAdsKeywordsForKeywordsTaskPostResponseInfo | null;
};

export type GoogleAdsKeywordsForKeywordsTaskPostResponse = GoogleAdsKeywordsForKeywordsTaskPostResponses[keyof GoogleAdsKeywordsForKeywordsTaskPostResponses];

export type GoogleAdsKeywordsForKeywordsTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/google_ads/keywords_for_keywords/tasks_ready';
};

export type GoogleAdsKeywordsForKeywordsTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleAdsKeywordsForKeywordsTasksReadyResponseInfo | null;
};

export type GoogleAdsKeywordsForKeywordsTasksReadyResponse = GoogleAdsKeywordsForKeywordsTasksReadyResponses[keyof GoogleAdsKeywordsForKeywordsTasksReadyResponses];

export type GoogleAdsKeywordsForKeywordsTaskGetData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/keywords_data/google_ads/keywords_for_keywords/task_get/{id}';
};

export type GoogleAdsKeywordsForKeywordsTaskGetResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleAdsKeywordsForKeywordsTaskGetResponseInfo | null;
};

export type GoogleAdsKeywordsForKeywordsTaskGetResponse = GoogleAdsKeywordsForKeywordsTaskGetResponses[keyof GoogleAdsKeywordsForKeywordsTaskGetResponses];

export type GoogleAdsKeywordsForKeywordsLiveData = {
    body?: Array<KeywordsDataGoogleAdsKeywordsForKeywordsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/google_ads/keywords_for_keywords/live';
};

export type GoogleAdsKeywordsForKeywordsLiveResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleAdsKeywordsForKeywordsLiveResponseInfo | null;
};

export type GoogleAdsKeywordsForKeywordsLiveResponse = GoogleAdsKeywordsForKeywordsLiveResponses[keyof GoogleAdsKeywordsForKeywordsLiveResponses];

export type GoogleAdsAdTrafficByKeywordsTaskPostData = {
    body?: Array<KeywordsDataGoogleAdsAdTrafficByKeywordsTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/google_ads/ad_traffic_by_keywords/task_post';
};

export type GoogleAdsAdTrafficByKeywordsTaskPostResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleAdsAdTrafficByKeywordsTaskPostResponseInfo | null;
};

export type GoogleAdsAdTrafficByKeywordsTaskPostResponse = GoogleAdsAdTrafficByKeywordsTaskPostResponses[keyof GoogleAdsAdTrafficByKeywordsTaskPostResponses];

export type GoogleAdsAdTrafficByKeywordsTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/google_ads/ad_traffic_by_keywords/tasks_ready';
};

export type GoogleAdsAdTrafficByKeywordsTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleAdsAdTrafficByKeywordsTasksReadyResponseInfo | null;
};

export type GoogleAdsAdTrafficByKeywordsTasksReadyResponse = GoogleAdsAdTrafficByKeywordsTasksReadyResponses[keyof GoogleAdsAdTrafficByKeywordsTasksReadyResponses];

export type GoogleAdsAdTrafficByKeywordsTaskGetData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/keywords_data/google_ads/ad_traffic_by_keywords/task_get/{id}';
};

export type GoogleAdsAdTrafficByKeywordsTaskGetResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleAdsAdTrafficByKeywordsTaskGetResponseInfo | null;
};

export type GoogleAdsAdTrafficByKeywordsTaskGetResponse = GoogleAdsAdTrafficByKeywordsTaskGetResponses[keyof GoogleAdsAdTrafficByKeywordsTaskGetResponses];

export type GoogleAdsAdTrafficByKeywordsLiveData = {
    body?: Array<KeywordsDataGoogleAdsAdTrafficByKeywordsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/google_ads/ad_traffic_by_keywords/live';
};

export type GoogleAdsAdTrafficByKeywordsLiveResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleAdsAdTrafficByKeywordsLiveResponseInfo | null;
};

export type GoogleAdsAdTrafficByKeywordsLiveResponse = GoogleAdsAdTrafficByKeywordsLiveResponses[keyof GoogleAdsAdTrafficByKeywordsLiveResponses];

export type KeywordsDataGoogleTrendsLocationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/google_trends/locations';
};

export type KeywordsDataGoogleTrendsLocationsResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleTrendsLocationsResponseInfo | null;
};

export type KeywordsDataGoogleTrendsLocationsResponse = KeywordsDataGoogleTrendsLocationsResponses[keyof KeywordsDataGoogleTrendsLocationsResponses];

export type KeywordsDataGoogleTrendsLocationsCountryData = {
    body?: never;
    path: {
        /**
         * country ISO code
         * optional field
         * specify the ISO code if you want to filter the list of locations by country
         * example:
         * us
         */
        country: string;
    };
    query?: never;
    url: '/v3/keywords_data/google_trends/locations/{country}';
};

export type KeywordsDataGoogleTrendsLocationsCountryResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleTrendsLocationsCountryResponseInfo | null;
};

export type KeywordsDataGoogleTrendsLocationsCountryResponse = KeywordsDataGoogleTrendsLocationsCountryResponses[keyof KeywordsDataGoogleTrendsLocationsCountryResponses];

export type KeywordsDataGoogleTrendsLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/google_trends/languages';
};

export type KeywordsDataGoogleTrendsLanguagesResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleTrendsLanguagesResponseInfo | null;
};

export type KeywordsDataGoogleTrendsLanguagesResponse = KeywordsDataGoogleTrendsLanguagesResponses[keyof KeywordsDataGoogleTrendsLanguagesResponses];

export type GoogleTrendsCategoriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/google_trends/categories';
};

export type GoogleTrendsCategoriesResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleTrendsCategoriesResponseInfo | null;
};

export type GoogleTrendsCategoriesResponse = GoogleTrendsCategoriesResponses[keyof GoogleTrendsCategoriesResponses];

export type GoogleTrendsExploreTaskPostData = {
    body?: Array<KeywordsDataGoogleTrendsExploreTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/google_trends/explore/task_post';
};

export type GoogleTrendsExploreTaskPostResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleTrendsExploreTaskPostResponseInfo | null;
};

export type GoogleTrendsExploreTaskPostResponse = GoogleTrendsExploreTaskPostResponses[keyof GoogleTrendsExploreTaskPostResponses];

export type GoogleTrendsExploreTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/google_trends/explore/tasks_ready';
};

export type GoogleTrendsExploreTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleTrendsExploreTasksReadyResponseInfo | null;
};

export type GoogleTrendsExploreTasksReadyResponse = GoogleTrendsExploreTasksReadyResponses[keyof GoogleTrendsExploreTasksReadyResponses];

export type GoogleTrendsExploreTaskGetData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/keywords_data/google_trends/explore/task_get/{id}';
};

export type GoogleTrendsExploreTaskGetResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleTrendsExploreTaskGetResponseInfo | null;
};

export type GoogleTrendsExploreTaskGetResponse = GoogleTrendsExploreTaskGetResponses[keyof GoogleTrendsExploreTaskGetResponses];

export type GoogleTrendsExploreLiveData = {
    body?: Array<KeywordsDataGoogleTrendsExploreLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/google_trends/explore/live';
};

export type GoogleTrendsExploreLiveResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataGoogleTrendsExploreLiveResponseInfo | null;
};

export type GoogleTrendsExploreLiveResponse = GoogleTrendsExploreLiveResponses[keyof GoogleTrendsExploreLiveResponses];

export type KeywordsDataDataforseoTrendsLocationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/dataforseo_trends/locations';
};

export type KeywordsDataDataforseoTrendsLocationsResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataDataforseoTrendsLocationsResponseInfo | null;
};

export type KeywordsDataDataforseoTrendsLocationsResponse = KeywordsDataDataforseoTrendsLocationsResponses[keyof KeywordsDataDataforseoTrendsLocationsResponses];

export type KeywordsDataDataforseoTrendsLocationsCountryData = {
    body?: never;
    path: {
        /**
         * country ISO code
         * optional field
         * specify the ISO code if you want to filter the list of locations by country
         * example:
         * us
         */
        country: string;
    };
    query?: never;
    url: '/v3/keywords_data/dataforseo_trends/locations/{country}';
};

export type KeywordsDataDataforseoTrendsLocationsCountryResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataDataforseoTrendsLocationsCountryResponseInfo | null;
};

export type KeywordsDataDataforseoTrendsLocationsCountryResponse = KeywordsDataDataforseoTrendsLocationsCountryResponses[keyof KeywordsDataDataforseoTrendsLocationsCountryResponses];

export type DataforseoTrendsExploreLiveData = {
    body?: Array<KeywordsDataDataforseoTrendsExploreLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/dataforseo_trends/explore/live';
};

export type DataforseoTrendsExploreLiveResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataDataforseoTrendsExploreLiveResponseInfo | null;
};

export type DataforseoTrendsExploreLiveResponse = DataforseoTrendsExploreLiveResponses[keyof DataforseoTrendsExploreLiveResponses];

export type DataforseoTrendsSubregionInterestsLiveData = {
    body?: Array<KeywordsDataDataforseoTrendsSubregionInterestsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/dataforseo_trends/subregion_interests/live';
};

export type DataforseoTrendsSubregionInterestsLiveResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataDataforseoTrendsSubregionInterestsLiveResponseInfo | null;
};

export type DataforseoTrendsSubregionInterestsLiveResponse = DataforseoTrendsSubregionInterestsLiveResponses[keyof DataforseoTrendsSubregionInterestsLiveResponses];

export type DataforseoTrendsDemographyLiveData = {
    body?: Array<KeywordsDataDataforseoTrendsDemographyLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/dataforseo_trends/demography/live';
};

export type DataforseoTrendsDemographyLiveResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataDataforseoTrendsDemographyLiveResponseInfo | null;
};

export type DataforseoTrendsDemographyLiveResponse = DataforseoTrendsDemographyLiveResponses[keyof DataforseoTrendsDemographyLiveResponses];

export type DataforseoTrendsMergedDataLiveData = {
    body?: Array<KeywordsDataDataforseoTrendsMergedDataLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/dataforseo_trends/merged_data/live';
};

export type DataforseoTrendsMergedDataLiveResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataDataforseoTrendsMergedDataLiveResponseInfo | null;
};

export type DataforseoTrendsMergedDataLiveResponse = DataforseoTrendsMergedDataLiveResponses[keyof DataforseoTrendsMergedDataLiveResponses];

export type KeywordsDataBingLocationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/bing/locations';
};

export type KeywordsDataBingLocationsResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingLocationsResponseInfo | null;
};

export type KeywordsDataBingLocationsResponse = KeywordsDataBingLocationsResponses[keyof KeywordsDataBingLocationsResponses];

export type KeywordsDataBingLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/bing/languages';
};

export type KeywordsDataBingLanguagesResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingLanguagesResponseInfo | null;
};

export type KeywordsDataBingLanguagesResponse = KeywordsDataBingLanguagesResponses[keyof KeywordsDataBingLanguagesResponses];

export type BingSearchVolumeTaskPostData = {
    body?: Array<KeywordsDataBingSearchVolumeTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/bing/search_volume/task_post';
};

export type BingSearchVolumeTaskPostResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingSearchVolumeTaskPostResponseInfo | null;
};

export type BingSearchVolumeTaskPostResponse = BingSearchVolumeTaskPostResponses[keyof BingSearchVolumeTaskPostResponses];

export type BingSearchVolumeTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/bing/search_volume/tasks_ready';
};

export type BingSearchVolumeTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingSearchVolumeTasksReadyResponseInfo | null;
};

export type BingSearchVolumeTasksReadyResponse = BingSearchVolumeTasksReadyResponses[keyof BingSearchVolumeTasksReadyResponses];

export type BingSearchVolumeTaskGetData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/keywords_data/bing/search_volume/task_get/{id}';
};

export type BingSearchVolumeTaskGetResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingSearchVolumeTaskGetResponseInfo | null;
};

export type BingSearchVolumeTaskGetResponse = BingSearchVolumeTaskGetResponses[keyof BingSearchVolumeTaskGetResponses];

export type BingSearchVolumeLiveData = {
    body?: Array<KeywordsDataBingSearchVolumeLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/bing/search_volume/live';
};

export type BingSearchVolumeLiveResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingSearchVolumeLiveResponseInfo | null;
};

export type BingSearchVolumeLiveResponse = BingSearchVolumeLiveResponses[keyof BingSearchVolumeLiveResponses];

export type BingAudienceEstimationJobFunctionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/bing/audience_estimation/job_functions';
};

export type BingAudienceEstimationJobFunctionsResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingAudienceEstimationJobFunctionsResponseInfo | null;
};

export type BingAudienceEstimationJobFunctionsResponse = BingAudienceEstimationJobFunctionsResponses[keyof BingAudienceEstimationJobFunctionsResponses];

export type BingAudienceEstimationIndustriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/bing/audience_estimation/industries';
};

export type BingAudienceEstimationIndustriesResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingAudienceEstimationIndustriesResponseInfo | null;
};

export type BingAudienceEstimationIndustriesResponse = BingAudienceEstimationIndustriesResponses[keyof BingAudienceEstimationIndustriesResponses];

export type BingAudienceEstimationTaskPostData = {
    body?: Array<KeywordsDataBingAudienceEstimationTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/bing/audience_estimation/task_post';
};

export type BingAudienceEstimationTaskPostResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingAudienceEstimationTaskPostResponseInfo | null;
};

export type BingAudienceEstimationTaskPostResponse = BingAudienceEstimationTaskPostResponses[keyof BingAudienceEstimationTaskPostResponses];

export type BingAudienceEstimationTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/bing/audience_estimation/tasks_ready';
};

export type BingAudienceEstimationTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingAudienceEstimationTasksReadyResponseInfo | null;
};

export type BingAudienceEstimationTasksReadyResponse = BingAudienceEstimationTasksReadyResponses[keyof BingAudienceEstimationTasksReadyResponses];

export type BingAudienceEstimationTaskGetData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/keywords_data/bing/audience_estimation/task_get/{id}';
};

export type BingAudienceEstimationTaskGetResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingAudienceEstimationTaskGetResponseInfo | null;
};

export type BingAudienceEstimationTaskGetResponse = BingAudienceEstimationTaskGetResponses[keyof BingAudienceEstimationTaskGetResponses];

export type BingAudienceEstimationLiveData = {
    body?: Array<KeywordsDataBingAudienceEstimationLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/bing/audience_estimation/live';
};

export type BingAudienceEstimationLiveResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingAudienceEstimationLiveResponseInfo | null;
};

export type BingAudienceEstimationLiveResponse = BingAudienceEstimationLiveResponses[keyof BingAudienceEstimationLiveResponses];

export type BingKeywordsForSiteTaskPostData = {
    body?: Array<KeywordsDataBingKeywordsForSiteTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/bing/keywords_for_site/task_post';
};

export type BingKeywordsForSiteTaskPostResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingKeywordsForSiteTaskPostResponseInfo | null;
};

export type BingKeywordsForSiteTaskPostResponse = BingKeywordsForSiteTaskPostResponses[keyof BingKeywordsForSiteTaskPostResponses];

export type BingKeywordsForSiteTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/bing/keywords_for_site/tasks_ready';
};

export type BingKeywordsForSiteTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingKeywordsForSiteTasksReadyResponseInfo | null;
};

export type BingKeywordsForSiteTasksReadyResponse = BingKeywordsForSiteTasksReadyResponses[keyof BingKeywordsForSiteTasksReadyResponses];

export type BingKeywordsForSiteTaskGetData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/keywords_data/bing/keywords_for_site/task_get/{id}';
};

export type BingKeywordsForSiteTaskGetResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingKeywordsForSiteTaskGetResponseInfo | null;
};

export type BingKeywordsForSiteTaskGetResponse = BingKeywordsForSiteTaskGetResponses[keyof BingKeywordsForSiteTaskGetResponses];

export type BingKeywordsForSiteLiveData = {
    body?: Array<KeywordsDataBingKeywordsForSiteLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/bing/keywords_for_site/live';
};

export type BingKeywordsForSiteLiveResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingKeywordsForSiteLiveResponseInfo | null;
};

export type BingKeywordsForSiteLiveResponse = BingKeywordsForSiteLiveResponses[keyof BingKeywordsForSiteLiveResponses];

export type BingKeywordsForKeywordsTaskPostData = {
    body?: Array<KeywordsDataBingKeywordsForKeywordsTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/bing/keywords_for_keywords/task_post';
};

export type BingKeywordsForKeywordsTaskPostResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingKeywordsForKeywordsTaskPostResponseInfo | null;
};

export type BingKeywordsForKeywordsTaskPostResponse = BingKeywordsForKeywordsTaskPostResponses[keyof BingKeywordsForKeywordsTaskPostResponses];

export type BingKeywordsForKeywordsTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/bing/keywords_for_keywords/tasks_ready';
};

export type BingKeywordsForKeywordsTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingKeywordsForKeywordsTasksReadyResponseInfo | null;
};

export type BingKeywordsForKeywordsTasksReadyResponse = BingKeywordsForKeywordsTasksReadyResponses[keyof BingKeywordsForKeywordsTasksReadyResponses];

export type BingKeywordsForKeywordsTaskGetData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/keywords_data/bing/keywords_for_keywords/task_get/{id}';
};

export type BingKeywordsForKeywordsTaskGetResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingKeywordsForKeywordsTaskGetResponseInfo | null;
};

export type BingKeywordsForKeywordsTaskGetResponse = BingKeywordsForKeywordsTaskGetResponses[keyof BingKeywordsForKeywordsTaskGetResponses];

export type BingKeywordsForKeywordsLiveData = {
    body?: Array<KeywordsDataBingKeywordsForKeywordsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/bing/keywords_for_keywords/live';
};

export type BingKeywordsForKeywordsLiveResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingKeywordsForKeywordsLiveResponseInfo | null;
};

export type BingKeywordsForKeywordsLiveResponse = BingKeywordsForKeywordsLiveResponses[keyof BingKeywordsForKeywordsLiveResponses];

export type KeywordsDataBingKeywordPerformanceLocationsAndLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/bing/keyword_performance/locations_and_languages';
};

export type KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResponseInfo | null;
};

export type KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResponse = KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResponses[keyof KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResponses];

export type BingKeywordPerformanceTaskPostData = {
    body?: Array<KeywordsDataBingKeywordPerformanceTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/bing/keyword_performance/task_post';
};

export type BingKeywordPerformanceTaskPostResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingKeywordPerformanceTaskPostResponseInfo | null;
};

export type BingKeywordPerformanceTaskPostResponse = BingKeywordPerformanceTaskPostResponses[keyof BingKeywordPerformanceTaskPostResponses];

export type BingKeywordPerformanceTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/bing/keyword_performance/tasks_ready';
};

export type BingKeywordPerformanceTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingKeywordPerformanceTasksReadyResponseInfo | null;
};

export type BingKeywordPerformanceTasksReadyResponse = BingKeywordPerformanceTasksReadyResponses[keyof BingKeywordPerformanceTasksReadyResponses];

export type BingKeywordPerformanceTaskGetData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/keywords_data/bing/keyword_performance/task_get/{id}';
};

export type BingKeywordPerformanceTaskGetResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingKeywordPerformanceTaskGetResponseInfo | null;
};

export type BingKeywordPerformanceTaskGetResponse = BingKeywordPerformanceTaskGetResponses[keyof BingKeywordPerformanceTaskGetResponses];

export type BingKeywordPerformanceLiveData = {
    body?: Array<KeywordsDataBingKeywordPerformanceLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/bing/keyword_performance/live';
};

export type BingKeywordPerformanceLiveResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingKeywordPerformanceLiveResponseInfo | null;
};

export type BingKeywordPerformanceLiveResponse = BingKeywordPerformanceLiveResponses[keyof BingKeywordPerformanceLiveResponses];

export type KeywordsDataBingSearchVolumeHistoryLocationsAndLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/bing/search_volume_history/locations_and_languages';
};

export type KeywordsDataBingSearchVolumeHistoryLocationsAndLanguagesResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingSearchVolumeHistoryLocationsAndLanguagesResponseInfo | null;
};

export type KeywordsDataBingSearchVolumeHistoryLocationsAndLanguagesResponse = KeywordsDataBingSearchVolumeHistoryLocationsAndLanguagesResponses[keyof KeywordsDataBingSearchVolumeHistoryLocationsAndLanguagesResponses];

export type BingSearchVolumeHistoryTaskPostData = {
    body?: Array<KeywordsDataBingSearchVolumeHistoryTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/bing/search_volume_history/task_post';
};

export type BingSearchVolumeHistoryTaskPostResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingSearchVolumeHistoryTaskPostResponseInfo | null;
};

export type BingSearchVolumeHistoryTaskPostResponse = BingSearchVolumeHistoryTaskPostResponses[keyof BingSearchVolumeHistoryTaskPostResponses];

export type BingSearchVolumeHistoryTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/bing/search_volume_history/tasks_ready';
};

export type BingSearchVolumeHistoryTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingSearchVolumeHistoryTasksReadyResponseInfo | null;
};

export type BingSearchVolumeHistoryTasksReadyResponse = BingSearchVolumeHistoryTasksReadyResponses[keyof BingSearchVolumeHistoryTasksReadyResponses];

export type BingSearchVolumeHistoryTaskGetData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/keywords_data/bing/search_volume_history/task_get/{id}';
};

export type BingSearchVolumeHistoryTaskGetResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingSearchVolumeHistoryTaskGetResponseInfo | null;
};

export type BingSearchVolumeHistoryTaskGetResponse = BingSearchVolumeHistoryTaskGetResponses[keyof BingSearchVolumeHistoryTaskGetResponses];

export type BingSearchVolumeHistoryLiveData = {
    body?: Array<KeywordsDataBingSearchVolumeHistoryLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/bing/search_volume_history/live';
};

export type BingSearchVolumeHistoryLiveResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataBingSearchVolumeHistoryLiveResponseInfo | null;
};

export type BingSearchVolumeHistoryLiveResponse = BingSearchVolumeHistoryLiveResponses[keyof BingSearchVolumeHistoryLiveResponses];

export type KeywordsDataClickstreamDataLocationsAndLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/clickstream_data/locations_and_languages';
};

export type KeywordsDataClickstreamDataLocationsAndLanguagesResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataClickstreamDataLocationsAndLanguagesResponseInfo | null;
};

export type KeywordsDataClickstreamDataLocationsAndLanguagesResponse = KeywordsDataClickstreamDataLocationsAndLanguagesResponses[keyof KeywordsDataClickstreamDataLocationsAndLanguagesResponses];

export type ClickstreamDataDataforseoSearchVolumeLiveData = {
    body?: Array<KeywordsDataClickstreamDataDataforseoSearchVolumeLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/clickstream_data/dataforseo_search_volume/live';
};

export type ClickstreamDataDataforseoSearchVolumeLiveResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResponseInfo | null;
};

export type ClickstreamDataDataforseoSearchVolumeLiveResponse = ClickstreamDataDataforseoSearchVolumeLiveResponses[keyof ClickstreamDataDataforseoSearchVolumeLiveResponses];

export type ClickstreamDataGlobalSearchVolumeLiveData = {
    body?: Array<KeywordsDataClickstreamDataGlobalSearchVolumeLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/clickstream_data/global_search_volume/live';
};

export type ClickstreamDataGlobalSearchVolumeLiveResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataClickstreamDataGlobalSearchVolumeLiveResponseInfo | null;
};

export type ClickstreamDataGlobalSearchVolumeLiveResponse = ClickstreamDataGlobalSearchVolumeLiveResponses[keyof ClickstreamDataGlobalSearchVolumeLiveResponses];

export type ClickstreamDataBulkSearchVolumeLiveData = {
    body?: Array<KeywordsDataClickstreamDataBulkSearchVolumeLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/keywords_data/clickstream_data/bulk_search_volume/live';
};

export type ClickstreamDataBulkSearchVolumeLiveResponses = {
    /**
     * Successful operation
     */
    200: KeywordsDataClickstreamDataBulkSearchVolumeLiveResponseInfo | null;
};

export type ClickstreamDataBulkSearchVolumeLiveResponse = ClickstreamDataBulkSearchVolumeLiveResponses[keyof ClickstreamDataBulkSearchVolumeLiveResponses];

export type BacklinksIdListData = {
    body?: Array<BacklinksIdListRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/backlinks/id_list';
};

export type BacklinksIdListResponses = {
    /**
     * Successful operation
     */
    200: BacklinksIdListResponseInfo | null;
};

export type BacklinksIdListResponse = BacklinksIdListResponses[keyof BacklinksIdListResponses];

export type BacklinksErrorsData = {
    body?: Array<BacklinksErrorsRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/backlinks/errors';
};

export type BacklinksErrorsResponses = {
    /**
     * Successful operation
     */
    200: BacklinksErrorsResponseInfo | null;
};

export type BacklinksErrorsResponse = BacklinksErrorsResponses[keyof BacklinksErrorsResponses];

export type BacklinksAvailableFiltersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/backlinks/available_filters';
};

export type BacklinksAvailableFiltersResponses = {
    /**
     * Successful operation
     */
    200: BacklinksAvailableFiltersResponseInfo | null;
};

export type BacklinksAvailableFiltersResponse = BacklinksAvailableFiltersResponses[keyof BacklinksAvailableFiltersResponses];

export type IndexData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/backlinks/index';
};

export type IndexResponses = {
    /**
     * Successful operation
     */
    200: BacklinksIndexResponseInfo | null;
};

export type IndexResponse = IndexResponses[keyof IndexResponses];

export type SummaryLiveData = {
    body?: Array<BacklinksSummaryLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/backlinks/summary/live';
};

export type SummaryLiveResponses = {
    /**
     * Successful operation
     */
    200: BacklinksSummaryLiveResponseInfo | null;
};

export type SummaryLiveResponse = SummaryLiveResponses[keyof SummaryLiveResponses];

export type HistoryLiveData = {
    body?: Array<BacklinksHistoryLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/backlinks/history/live';
};

export type HistoryLiveResponses = {
    /**
     * Successful operation
     */
    200: BacklinksHistoryLiveResponseInfo | null;
};

export type HistoryLiveResponse = HistoryLiveResponses[keyof HistoryLiveResponses];

export type BacklinksLiveData = {
    body?: Array<BacklinksBacklinksLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/backlinks/backlinks/live';
};

export type BacklinksLiveResponses = {
    /**
     * Successful operation
     */
    200: BacklinksBacklinksLiveResponseInfo | null;
};

export type BacklinksLiveResponse = BacklinksLiveResponses[keyof BacklinksLiveResponses];

export type AnchorsLiveData = {
    body?: Array<BacklinksAnchorsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/backlinks/anchors/live';
};

export type AnchorsLiveResponses = {
    /**
     * Successful operation
     */
    200: BacklinksAnchorsLiveResponseInfo | null;
};

export type AnchorsLiveResponse = AnchorsLiveResponses[keyof AnchorsLiveResponses];

export type DomainPagesLiveData = {
    body?: Array<BacklinksDomainPagesLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/backlinks/domain_pages/live';
};

export type DomainPagesLiveResponses = {
    /**
     * Successful operation
     */
    200: BacklinksDomainPagesLiveResponseInfo | null;
};

export type DomainPagesLiveResponse = DomainPagesLiveResponses[keyof DomainPagesLiveResponses];

export type DomainPagesSummaryLiveData = {
    body?: Array<BacklinksDomainPagesSummaryLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/backlinks/domain_pages_summary/live';
};

export type DomainPagesSummaryLiveResponses = {
    /**
     * Successful operation
     */
    200: BacklinksDomainPagesSummaryLiveResponseInfo | null;
};

export type DomainPagesSummaryLiveResponse = DomainPagesSummaryLiveResponses[keyof DomainPagesSummaryLiveResponses];

export type ReferringDomainsLiveData = {
    body?: Array<BacklinksReferringDomainsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/backlinks/referring_domains/live';
};

export type ReferringDomainsLiveResponses = {
    /**
     * Successful operation
     */
    200: BacklinksReferringDomainsLiveResponseInfo | null;
};

export type ReferringDomainsLiveResponse = ReferringDomainsLiveResponses[keyof ReferringDomainsLiveResponses];

export type ReferringNetworksLiveData = {
    body?: Array<BacklinksReferringNetworksLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/backlinks/referring_networks/live';
};

export type ReferringNetworksLiveResponses = {
    /**
     * Successful operation
     */
    200: BacklinksReferringNetworksLiveResponseInfo | null;
};

export type ReferringNetworksLiveResponse = ReferringNetworksLiveResponses[keyof ReferringNetworksLiveResponses];

export type CompetitorsLiveData = {
    body?: Array<BacklinksCompetitorsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/backlinks/competitors/live';
};

export type CompetitorsLiveResponses = {
    /**
     * Successful operation
     */
    200: BacklinksCompetitorsLiveResponseInfo | null;
};

export type CompetitorsLiveResponse = CompetitorsLiveResponses[keyof CompetitorsLiveResponses];

export type DomainIntersectionLiveData = {
    body?: Array<BacklinksDomainIntersectionLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/backlinks/domain_intersection/live';
};

export type DomainIntersectionLiveResponses = {
    /**
     * Successful operation
     */
    200: BacklinksDomainIntersectionLiveResponseInfo | null;
};

export type DomainIntersectionLiveResponse = DomainIntersectionLiveResponses[keyof DomainIntersectionLiveResponses];

export type PageIntersectionLiveData = {
    body?: Array<BacklinksPageIntersectionLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/backlinks/page_intersection/live';
};

export type PageIntersectionLiveResponses = {
    /**
     * Successful operation
     */
    200: BacklinksPageIntersectionLiveResponseInfo | null;
};

export type PageIntersectionLiveResponse = PageIntersectionLiveResponses[keyof PageIntersectionLiveResponses];

export type TimeseriesSummaryLiveData = {
    body?: Array<BacklinksTimeseriesSummaryLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/backlinks/timeseries_summary/live';
};

export type TimeseriesSummaryLiveResponses = {
    /**
     * Successful operation
     */
    200: BacklinksTimeseriesSummaryLiveResponseInfo | null;
};

export type TimeseriesSummaryLiveResponse = TimeseriesSummaryLiveResponses[keyof TimeseriesSummaryLiveResponses];

export type TimeseriesNewLostSummaryLiveData = {
    body?: Array<BacklinksTimeseriesNewLostSummaryLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/backlinks/timeseries_new_lost_summary/live';
};

export type TimeseriesNewLostSummaryLiveResponses = {
    /**
     * Successful operation
     */
    200: BacklinksTimeseriesNewLostSummaryLiveResponseInfo | null;
};

export type TimeseriesNewLostSummaryLiveResponse = TimeseriesNewLostSummaryLiveResponses[keyof TimeseriesNewLostSummaryLiveResponses];

export type BulkRanksLiveData = {
    body?: Array<BacklinksBulkRanksLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/backlinks/bulk_ranks/live';
};

export type BulkRanksLiveResponses = {
    /**
     * Successful operation
     */
    200: BacklinksBulkRanksLiveResponseInfo | null;
};

export type BulkRanksLiveResponse = BulkRanksLiveResponses[keyof BulkRanksLiveResponses];

export type BulkBacklinksLiveData = {
    body?: Array<BacklinksBulkBacklinksLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/backlinks/bulk_backlinks/live';
};

export type BulkBacklinksLiveResponses = {
    /**
     * Successful operation
     */
    200: BacklinksBulkBacklinksLiveResponseInfo | null;
};

export type BulkBacklinksLiveResponse = BulkBacklinksLiveResponses[keyof BulkBacklinksLiveResponses];

export type BulkSpamScoreLiveData = {
    body?: Array<BacklinksBulkSpamScoreLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/backlinks/bulk_spam_score/live';
};

export type BulkSpamScoreLiveResponses = {
    /**
     * Successful operation
     */
    200: BacklinksBulkSpamScoreLiveResponseInfo | null;
};

export type BulkSpamScoreLiveResponse = BulkSpamScoreLiveResponses[keyof BulkSpamScoreLiveResponses];

export type BulkReferringDomainsLiveData = {
    body?: Array<BacklinksBulkReferringDomainsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/backlinks/bulk_referring_domains/live';
};

export type BulkReferringDomainsLiveResponses = {
    /**
     * Successful operation
     */
    200: BacklinksBulkReferringDomainsLiveResponseInfo | null;
};

export type BulkReferringDomainsLiveResponse = BulkReferringDomainsLiveResponses[keyof BulkReferringDomainsLiveResponses];

export type BulkNewLostBacklinksLiveData = {
    body?: Array<BacklinksBulkNewLostBacklinksLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/backlinks/bulk_new_lost_backlinks/live';
};

export type BulkNewLostBacklinksLiveResponses = {
    /**
     * Successful operation
     */
    200: BacklinksBulkNewLostBacklinksLiveResponseInfo | null;
};

export type BulkNewLostBacklinksLiveResponse = BulkNewLostBacklinksLiveResponses[keyof BulkNewLostBacklinksLiveResponses];

export type BulkNewLostReferringDomainsLiveData = {
    body?: Array<BacklinksBulkNewLostReferringDomainsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/backlinks/bulk_new_lost_referring_domains/live';
};

export type BulkNewLostReferringDomainsLiveResponses = {
    /**
     * Successful operation
     */
    200: BacklinksBulkNewLostReferringDomainsLiveResponseInfo | null;
};

export type BulkNewLostReferringDomainsLiveResponse = BulkNewLostReferringDomainsLiveResponses[keyof BulkNewLostReferringDomainsLiveResponses];

export type BulkPagesSummaryLiveData = {
    body?: Array<BacklinksBulkPagesSummaryLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/backlinks/bulk_pages_summary/live';
};

export type BulkPagesSummaryLiveResponses = {
    /**
     * Successful operation
     */
    200: BacklinksBulkPagesSummaryLiveResponseInfo | null;
};

export type BulkPagesSummaryLiveResponse = BulkPagesSummaryLiveResponses[keyof BulkPagesSummaryLiveResponses];

export type ChatGptLlmResponsesModelsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/ai_optimization/chat_gpt/llm_responses/models';
};

export type ChatGptLlmResponsesModelsResponses = {
    /**
     * Successful operation
     */
    200: AiOptimizationChatGptLlmResponsesModelsResponseInfo | null;
};

export type ChatGptLlmResponsesModelsResponse = ChatGptLlmResponsesModelsResponses[keyof ChatGptLlmResponsesModelsResponses];

export type ChatGptLlmResponsesLiveData = {
    body?: Array<AiOptimizationChatGptLlmResponsesLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/ai_optimization/chat_gpt/llm_responses/live';
};

export type ChatGptLlmResponsesLiveResponses = {
    /**
     * Successful operation
     */
    200: AiOptimizationChatGptLlmResponsesLiveResponseInfo | null;
};

export type ChatGptLlmResponsesLiveResponse = ChatGptLlmResponsesLiveResponses[keyof ChatGptLlmResponsesLiveResponses];

export type ChatGptLlmResponsesTaskPostData = {
    body?: Array<AiOptimizationChatGptLlmResponsesTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/ai_optimization/chat_gpt/llm_responses/task_post';
};

export type ChatGptLlmResponsesTaskPostResponses = {
    /**
     * Successful operation
     */
    200: AiOptimizationChatGptLlmResponsesTaskPostResponseInfo | null;
};

export type ChatGptLlmResponsesTaskPostResponse = ChatGptLlmResponsesTaskPostResponses[keyof ChatGptLlmResponsesTaskPostResponses];

export type ChatGptLlmResponsesTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/ai_optimization/chat_gpt/llm_responses/tasks_ready';
};

export type ChatGptLlmResponsesTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: AiOptimizationChatGptLlmResponsesTasksReadyResponseInfo | null;
};

export type ChatGptLlmResponsesTasksReadyResponse = ChatGptLlmResponsesTasksReadyResponses[keyof ChatGptLlmResponsesTasksReadyResponses];

export type ChatGptLlmResponsesTaskGetData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/ai_optimization/chat_gpt/llm_responses/task_get/{id}';
};

export type ChatGptLlmResponsesTaskGetResponses = {
    /**
     * Successful operation
     */
    200: AiOptimizationChatGptLlmResponsesTaskGetResponseInfo | null;
};

export type ChatGptLlmResponsesTaskGetResponse = ChatGptLlmResponsesTaskGetResponses[keyof ChatGptLlmResponsesTaskGetResponses];

export type ClaudeLlmResponsesModelsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/ai_optimization/claude/llm_responses/models';
};

export type ClaudeLlmResponsesModelsResponses = {
    /**
     * Successful operation
     */
    200: AiOptimizationClaudeLlmResponsesModelsResponseInfo | null;
};

export type ClaudeLlmResponsesModelsResponse = ClaudeLlmResponsesModelsResponses[keyof ClaudeLlmResponsesModelsResponses];

export type ClaudeLlmResponsesLiveData = {
    body?: Array<AiOptimizationClaudeLlmResponsesLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/ai_optimization/claude/llm_responses/live';
};

export type ClaudeLlmResponsesLiveResponses = {
    /**
     * Successful operation
     */
    200: AiOptimizationClaudeLlmResponsesLiveResponseInfo | null;
};

export type ClaudeLlmResponsesLiveResponse = ClaudeLlmResponsesLiveResponses[keyof ClaudeLlmResponsesLiveResponses];

export type ClaudeLlmResponsesTaskPostData = {
    body?: Array<AiOptimizationClaudeLlmResponsesTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/ai_optimization/claude/llm_responses/task_post';
};

export type ClaudeLlmResponsesTaskPostResponses = {
    /**
     * Successful operation
     */
    200: AiOptimizationClaudeLlmResponsesTaskPostResponseInfo | null;
};

export type ClaudeLlmResponsesTaskPostResponse = ClaudeLlmResponsesTaskPostResponses[keyof ClaudeLlmResponsesTaskPostResponses];

export type ClaudeLlmResponsesTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/ai_optimization/claude/llm_responses/tasks_ready';
};

export type ClaudeLlmResponsesTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: AiOptimizationClaudeLlmResponsesTasksReadyResponseInfo | null;
};

export type ClaudeLlmResponsesTasksReadyResponse = ClaudeLlmResponsesTasksReadyResponses[keyof ClaudeLlmResponsesTasksReadyResponses];

export type ClaudeLlmResponsesTaskGetData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/ai_optimization/claude/llm_responses/task_get/{id}';
};

export type ClaudeLlmResponsesTaskGetResponses = {
    /**
     * Successful operation
     */
    200: AiOptimizationClaudeLlmResponsesTaskGetResponseInfo | null;
};

export type ClaudeLlmResponsesTaskGetResponse = ClaudeLlmResponsesTaskGetResponses[keyof ClaudeLlmResponsesTaskGetResponses];

export type GeminiLlmResponsesModelsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/ai_optimization/gemini/llm_responses/models';
};

export type GeminiLlmResponsesModelsResponses = {
    /**
     * Successful operation
     */
    200: AiOptimizationGeminiLlmResponsesModelsResponseInfo | null;
};

export type GeminiLlmResponsesModelsResponse = GeminiLlmResponsesModelsResponses[keyof GeminiLlmResponsesModelsResponses];

export type GeminiLlmResponsesLiveData = {
    body?: Array<AiOptimizationGeminiLlmResponsesLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/ai_optimization/gemini/llm_responses/live';
};

export type GeminiLlmResponsesLiveResponses = {
    /**
     * Successful operation
     */
    200: AiOptimizationGeminiLlmResponsesLiveResponseInfo | null;
};

export type GeminiLlmResponsesLiveResponse = GeminiLlmResponsesLiveResponses[keyof GeminiLlmResponsesLiveResponses];

export type PerplexityLlmResponsesModelsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/ai_optimization/perplexity/llm_responses/models';
};

export type PerplexityLlmResponsesModelsResponses = {
    /**
     * Successful operation
     */
    200: AiOptimizationPerplexityLlmResponsesModelsResponseInfo | null;
};

export type PerplexityLlmResponsesModelsResponse = PerplexityLlmResponsesModelsResponses[keyof PerplexityLlmResponsesModelsResponses];

export type PerplexityLlmResponsesLiveData = {
    body?: Array<AiOptimizationPerplexityLlmResponsesLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/ai_optimization/perplexity/llm_responses/live';
};

export type PerplexityLlmResponsesLiveResponses = {
    /**
     * Successful operation
     */
    200: AiOptimizationPerplexityLlmResponsesLiveResponseInfo | null;
};

export type PerplexityLlmResponsesLiveResponse = PerplexityLlmResponsesLiveResponses[keyof PerplexityLlmResponsesLiveResponses];

export type AiKeywordDataAvailableFiltersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/ai_optimization/ai_keyword_data/available_filters';
};

export type AiKeywordDataAvailableFiltersResponses = {
    /**
     * Successful operation
     */
    200: AiOptimizationAiKeywordDataAvailableFiltersResponseInfo | null;
};

export type AiKeywordDataAvailableFiltersResponse = AiKeywordDataAvailableFiltersResponses[keyof AiKeywordDataAvailableFiltersResponses];

export type AiOptimizationAiKeywordDataLocationsAndLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/ai_optimization/ai_keyword_data/locations_and_languages';
};

export type AiOptimizationAiKeywordDataLocationsAndLanguagesResponses = {
    /**
     * Successful operation
     */
    200: AiOptimizationAiKeywordDataLocationsAndLanguagesResponseInfo | null;
};

export type AiOptimizationAiKeywordDataLocationsAndLanguagesResponse = AiOptimizationAiKeywordDataLocationsAndLanguagesResponses[keyof AiOptimizationAiKeywordDataLocationsAndLanguagesResponses];

export type AiKeywordDataKeywordsSearchVolumeLiveData = {
    body?: Array<AiOptimizationAiKeywordDataKeywordsSearchVolumeLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/ai_optimization/ai_keyword_data/keywords_search_volume/live';
};

export type AiKeywordDataKeywordsSearchVolumeLiveResponses = {
    /**
     * Successful operation
     */
    200: AiOptimizationAiKeywordDataKeywordsSearchVolumeLiveResponseInfo | null;
};

export type AiKeywordDataKeywordsSearchVolumeLiveResponse = AiKeywordDataKeywordsSearchVolumeLiveResponses[keyof AiKeywordDataKeywordsSearchVolumeLiveResponses];

export type OnPageIdListData = {
    body?: Array<OnPageIdListRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/on_page/id_list';
};

export type OnPageIdListResponses = {
    /**
     * Successful operation
     */
    200: OnPageIdListResponseInfo | null;
};

export type OnPageIdListResponse = OnPageIdListResponses[keyof OnPageIdListResponses];

export type OnPageErrorsData = {
    body?: Array<OnPageErrorsRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/on_page/errors';
};

export type OnPageErrorsResponses = {
    /**
     * Successful operation
     */
    200: OnPageErrorsResponseInfo | null;
};

export type OnPageErrorsResponse = OnPageErrorsResponses[keyof OnPageErrorsResponses];

export type ForceStopData = {
    body?: Array<OnPageForceStopRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/on_page/force_stop';
};

export type ForceStopResponses = {
    /**
     * Successful operation
     */
    200: OnPageForceStopResponseInfo | null;
};

export type ForceStopResponse = ForceStopResponses[keyof ForceStopResponses];

export type OnPageAvailableFiltersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/on_page/available_filters';
};

export type OnPageAvailableFiltersResponses = {
    /**
     * Successful operation
     */
    200: OnPageAvailableFiltersResponseInfo | null;
};

export type OnPageAvailableFiltersResponse = OnPageAvailableFiltersResponses[keyof OnPageAvailableFiltersResponses];

export type TaskPostData = {
    body?: Array<OnPageTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/on_page/task_post';
};

export type TaskPostResponses = {
    /**
     * Successful operation
     */
    200: OnPageTaskPostResponseInfo | null;
};

export type TaskPostResponse = TaskPostResponses[keyof TaskPostResponses];

export type OnPageTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/on_page/tasks_ready';
};

export type OnPageTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: OnPageTasksReadyResponseInfo | null;
};

export type OnPageTasksReadyResponse = OnPageTasksReadyResponses[keyof OnPageTasksReadyResponses];

export type SummaryData = {
    body?: never;
    path: {
        /**
         * task identifier
         * required field
         * you can get this ID in the response of the Task POST endpoint
         * example:
         * “07131248-1535-0216-1000-17384017ad04”
         */
        id: string;
    };
    query?: never;
    url: '/v3/on_page/summary/{id}';
};

export type SummaryResponses = {
    /**
     * Successful operation
     */
    200: OnPageSummaryResponseInfo | null;
};

export type SummaryResponse = SummaryResponses[keyof SummaryResponses];

export type PagesData = {
    body?: Array<OnPagePagesRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/on_page/pages';
};

export type PagesResponses = {
    /**
     * Successful operation
     */
    200: OnPagePagesResponseInfo | null;
};

export type PagesResponse = PagesResponses[keyof PagesResponses];

export type PagesByResourceData = {
    body?: Array<OnPagePagesByResourceRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/on_page/pages_by_resource';
};

export type PagesByResourceResponses = {
    /**
     * Successful operation
     */
    200: OnPagePagesByResourceResponseInfo | null;
};

export type PagesByResourceResponse = PagesByResourceResponses[keyof PagesByResourceResponses];

export type ResourcesData = {
    body?: Array<OnPageResourcesRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/on_page/resources';
};

export type ResourcesResponses = {
    /**
     * Successful operation
     */
    200: OnPageResourcesResponseInfo | null;
};

export type ResourcesResponse = ResourcesResponses[keyof ResourcesResponses];

export type DuplicateTagsData = {
    body?: Array<OnPageDuplicateTagsRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/on_page/duplicate_tags';
};

export type DuplicateTagsResponses = {
    /**
     * Successful operation
     */
    200: OnPageDuplicateTagsResponseInfo | null;
};

export type DuplicateTagsResponse = DuplicateTagsResponses[keyof DuplicateTagsResponses];

export type DuplicateContentData = {
    body?: Array<OnPageDuplicateContentRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/on_page/duplicate_content';
};

export type DuplicateContentResponses = {
    /**
     * Successful operation
     */
    200: OnPageDuplicateContentResponseInfo | null;
};

export type DuplicateContentResponse = DuplicateContentResponses[keyof DuplicateContentResponses];

export type LinksData = {
    body?: Array<OnPageLinksRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/on_page/links';
};

export type LinksResponses = {
    /**
     * Successful operation
     */
    200: OnPageLinksResponseInfo | null;
};

export type LinksResponse = LinksResponses[keyof LinksResponses];

export type RedirectChainsData = {
    body?: Array<OnPageRedirectChainsRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/on_page/redirect_chains';
};

export type RedirectChainsResponses = {
    /**
     * Successful operation
     */
    200: OnPageRedirectChainsResponseInfo | null;
};

export type RedirectChainsResponse = RedirectChainsResponses[keyof RedirectChainsResponses];

export type NonIndexableData = {
    body?: Array<OnPageNonIndexableRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/on_page/non_indexable';
};

export type NonIndexableResponses = {
    /**
     * Successful operation
     */
    200: OnPageNonIndexableResponseInfo | null;
};

export type NonIndexableResponse = NonIndexableResponses[keyof NonIndexableResponses];

export type WaterfallData = {
    body?: Array<OnPageWaterfallRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/on_page/waterfall';
};

export type WaterfallResponses = {
    /**
     * Successful operation
     */
    200: OnPageWaterfallResponseInfo | null;
};

export type WaterfallResponse = WaterfallResponses[keyof WaterfallResponses];

export type KeywordDensityData = {
    body?: Array<OnPageKeywordDensityRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/on_page/keyword_density';
};

export type KeywordDensityResponses = {
    /**
     * Successful operation
     */
    200: OnPageKeywordDensityResponseInfo | null;
};

export type KeywordDensityResponse = KeywordDensityResponses[keyof KeywordDensityResponses];

export type MicrodataData = {
    body?: Array<OnPageMicrodataRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/on_page/microdata';
};

export type MicrodataResponses = {
    /**
     * Successful operation
     */
    200: OnPageMicrodataResponseInfo | null;
};

export type MicrodataResponse = MicrodataResponses[keyof MicrodataResponses];

export type RawHtmlData = {
    body?: Array<OnPageRawHtmlRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/on_page/raw_html';
};

export type RawHtmlResponses = {
    /**
     * Successful operation
     */
    200: OnPageRawHtmlResponseInfo | null;
};

export type RawHtmlResponse = RawHtmlResponses[keyof RawHtmlResponses];

export type PageScreenshotData = {
    body?: Array<OnPagePageScreenshotRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/on_page/page_screenshot';
};

export type PageScreenshotResponses = {
    /**
     * Successful operation
     */
    200: OnPagePageScreenshotResponseInfo | null;
};

export type PageScreenshotResponse = PageScreenshotResponses[keyof PageScreenshotResponses];

export type ContentParsingData = {
    body?: Array<OnPageContentParsingRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/on_page/content_parsing';
};

export type ContentParsingResponses = {
    /**
     * Successful operation
     */
    200: OnPageContentParsingResponseInfo | null;
};

export type ContentParsingResponse = ContentParsingResponses[keyof ContentParsingResponses];

export type ContentParsingLiveData = {
    body?: Array<OnPageContentParsingLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/on_page/content_parsing/live';
};

export type ContentParsingLiveResponses = {
    /**
     * Successful operation
     */
    200: OnPageContentParsingLiveResponseInfo | null;
};

export type ContentParsingLiveResponse = ContentParsingLiveResponses[keyof ContentParsingLiveResponses];

export type InstantPagesData = {
    body?: Array<OnPageInstantPagesRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/on_page/instant_pages';
};

export type InstantPagesResponses = {
    /**
     * Successful operation
     */
    200: OnPageInstantPagesResponseInfo | null;
};

export type InstantPagesResponse = InstantPagesResponses[keyof InstantPagesResponses];

export type OnPageLighthouseLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/on_page/lighthouse/languages';
};

export type OnPageLighthouseLanguagesResponses = {
    /**
     * Successful operation
     */
    200: OnPageLighthouseLanguagesResponseInfo | null;
};

export type OnPageLighthouseLanguagesResponse = OnPageLighthouseLanguagesResponses[keyof OnPageLighthouseLanguagesResponses];

export type LighthouseAuditsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/on_page/lighthouse/audits';
};

export type LighthouseAuditsResponses = {
    /**
     * Successful operation
     */
    200: OnPageLighthouseAuditsResponseInfo | null;
};

export type LighthouseAuditsResponse = LighthouseAuditsResponses[keyof LighthouseAuditsResponses];

export type LighthouseVersionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/on_page/lighthouse/versions';
};

export type LighthouseVersionsResponses = {
    /**
     * Successful operation
     */
    200: OnPageLighthouseVersionsResponseInfo | null;
};

export type LighthouseVersionsResponse = LighthouseVersionsResponses[keyof LighthouseVersionsResponses];

export type LighthouseTaskPostData = {
    body?: Array<OnPageLighthouseTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/on_page/lighthouse/task_post';
};

export type LighthouseTaskPostResponses = {
    /**
     * Successful operation
     */
    200: OnPageLighthouseTaskPostResponseInfo | null;
};

export type LighthouseTaskPostResponse = LighthouseTaskPostResponses[keyof LighthouseTaskPostResponses];

export type LighthouseTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/on_page/lighthouse/tasks_ready';
};

export type LighthouseTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: OnPageLighthouseTasksReadyResponseInfo | null;
};

export type LighthouseTasksReadyResponse = LighthouseTasksReadyResponses[keyof LighthouseTasksReadyResponses];

export type LighthouseTaskGetJsonData = {
    body?: never;
    path: {
        /**
         * task identifier
         * required field
         * you can get this ID in the response of the Task POST endpoint
         * example:
         * “07131248-1535-0216-1000-17384017ad04”
         */
        id: string;
    };
    query?: never;
    url: '/v3/on_page/lighthouse/task_get/json/{id}';
};

export type LighthouseTaskGetJsonResponses = {
    /**
     * Successful operation
     */
    200: OnPageLighthouseTaskGetJsonResponseInfo | null;
};

export type LighthouseTaskGetJsonResponse = LighthouseTaskGetJsonResponses[keyof LighthouseTaskGetJsonResponses];

export type LighthouseLiveJsonData = {
    body?: Array<OnPageLighthouseLiveJsonRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/on_page/lighthouse/live/json';
};

export type LighthouseLiveJsonResponses = {
    /**
     * Successful operation
     */
    200: OnPageLighthouseLiveJsonResponseInfo | null;
};

export type LighthouseLiveJsonResponse = LighthouseLiveJsonResponses[keyof LighthouseLiveJsonResponses];

export type ContentAnalysisIdListData = {
    body?: Array<ContentAnalysisIdListRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/content_analysis/id_list';
};

export type ContentAnalysisIdListResponses = {
    /**
     * Successful operation
     */
    200: ContentAnalysisIdListResponseInfo | null;
};

export type ContentAnalysisIdListResponse = ContentAnalysisIdListResponses[keyof ContentAnalysisIdListResponses];

export type ContentAnalysisAvailableFiltersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/content_analysis/available_filters';
};

export type ContentAnalysisAvailableFiltersResponses = {
    /**
     * Successful operation
     */
    200: ContentAnalysisAvailableFiltersResponseInfo | null;
};

export type ContentAnalysisAvailableFiltersResponse = ContentAnalysisAvailableFiltersResponses[keyof ContentAnalysisAvailableFiltersResponses];

export type ContentAnalysisLocationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/content_analysis/locations';
};

export type ContentAnalysisLocationsResponses = {
    /**
     * Successful operation
     */
    200: ContentAnalysisLocationsResponseInfo | null;
};

export type ContentAnalysisLocationsResponse = ContentAnalysisLocationsResponses[keyof ContentAnalysisLocationsResponses];

export type ContentAnalysisLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/content_analysis/languages';
};

export type ContentAnalysisLanguagesResponses = {
    /**
     * Successful operation
     */
    200: ContentAnalysisLanguagesResponseInfo | null;
};

export type ContentAnalysisLanguagesResponse = ContentAnalysisLanguagesResponses[keyof ContentAnalysisLanguagesResponses];

export type ContentAnalysisCategoriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/content_analysis/categories';
};

export type ContentAnalysisCategoriesResponses = {
    /**
     * Successful operation
     */
    200: ContentAnalysisCategoriesResponseInfo | null;
};

export type ContentAnalysisCategoriesResponse = ContentAnalysisCategoriesResponses[keyof ContentAnalysisCategoriesResponses];

export type SearchLiveData = {
    body?: Array<ContentAnalysisSearchLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/content_analysis/search/live';
};

export type SearchLiveResponses = {
    /**
     * Successful operation
     */
    200: ContentAnalysisSearchLiveResponseInfo | null;
};

export type SearchLiveResponse = SearchLiveResponses[keyof SearchLiveResponses];

export type ContentAnalysisSummaryLiveData = {
    body?: Array<ContentAnalysisSummaryLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/content_analysis/summary/live';
};

export type ContentAnalysisSummaryLiveResponses = {
    /**
     * Successful operation
     */
    200: ContentAnalysisSummaryLiveResponseInfo | null;
};

export type ContentAnalysisSummaryLiveResponse = ContentAnalysisSummaryLiveResponses[keyof ContentAnalysisSummaryLiveResponses];

export type SentimentAnalysisLiveData = {
    body?: Array<ContentAnalysisSentimentAnalysisLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/content_analysis/sentiment_analysis/live';
};

export type SentimentAnalysisLiveResponses = {
    /**
     * Successful operation
     */
    200: ContentAnalysisSentimentAnalysisLiveResponseInfo | null;
};

export type SentimentAnalysisLiveResponse = SentimentAnalysisLiveResponses[keyof SentimentAnalysisLiveResponses];

export type RatingDistributionLiveData = {
    body?: Array<ContentAnalysisRatingDistributionLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/content_analysis/rating_distribution/live';
};

export type RatingDistributionLiveResponses = {
    /**
     * Successful operation
     */
    200: ContentAnalysisRatingDistributionLiveResponseInfo | null;
};

export type RatingDistributionLiveResponse = RatingDistributionLiveResponses[keyof RatingDistributionLiveResponses];

export type PhraseTrendsLiveData = {
    body?: Array<ContentAnalysisPhraseTrendsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/content_analysis/phrase_trends/live';
};

export type PhraseTrendsLiveResponses = {
    /**
     * Successful operation
     */
    200: ContentAnalysisPhraseTrendsLiveResponseInfo | null;
};

export type PhraseTrendsLiveResponse = PhraseTrendsLiveResponses[keyof PhraseTrendsLiveResponses];

export type CategoryTrendsLiveData = {
    body?: Array<ContentAnalysisCategoryTrendsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/content_analysis/category_trends/live';
};

export type CategoryTrendsLiveResponses = {
    /**
     * Successful operation
     */
    200: ContentAnalysisCategoryTrendsLiveResponseInfo | null;
};

export type CategoryTrendsLiveResponse = CategoryTrendsLiveResponses[keyof CategoryTrendsLiveResponses];

export type GenerateLiveData = {
    body?: Array<ContentGenerationGenerateLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/content_generation/generate/live';
};

export type GenerateLiveResponses = {
    /**
     * Successful operation
     */
    200: ContentGenerationGenerateLiveResponseInfo | null;
};

export type GenerateLiveResponse = GenerateLiveResponses[keyof GenerateLiveResponses];

export type GenerateTextLiveData = {
    body?: Array<ContentGenerationGenerateTextLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/content_generation/generate_text/live';
};

export type GenerateTextLiveResponses = {
    /**
     * Successful operation
     */
    200: ContentGenerationGenerateTextLiveResponseInfo | null;
};

export type GenerateTextLiveResponse = GenerateTextLiveResponses[keyof GenerateTextLiveResponses];

export type GenerateMetaTagsLiveData = {
    body?: Array<ContentGenerationGenerateMetaTagsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/content_generation/generate_meta_tags/live';
};

export type GenerateMetaTagsLiveResponses = {
    /**
     * Successful operation
     */
    200: ContentGenerationGenerateMetaTagsLiveResponseInfo | null;
};

export type GenerateMetaTagsLiveResponse = GenerateMetaTagsLiveResponses[keyof GenerateMetaTagsLiveResponses];

export type GenerateSubTopicsLiveData = {
    body?: Array<ContentGenerationGenerateSubTopicsLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/content_generation/generate_sub_topics/live';
};

export type GenerateSubTopicsLiveResponses = {
    /**
     * Successful operation
     */
    200: ContentGenerationGenerateSubTopicsLiveResponseInfo | null;
};

export type GenerateSubTopicsLiveResponse = GenerateSubTopicsLiveResponses[keyof GenerateSubTopicsLiveResponses];

export type ParaphraseLiveData = {
    body?: Array<ContentGenerationParaphraseLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/content_generation/paraphrase/live';
};

export type ParaphraseLiveResponses = {
    /**
     * Successful operation
     */
    200: ContentGenerationParaphraseLiveResponseInfo | null;
};

export type ParaphraseLiveResponse = ParaphraseLiveResponses[keyof ParaphraseLiveResponses];

export type CheckGrammarLiveData = {
    body?: Array<ContentGenerationCheckGrammarLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/content_generation/check_grammar/live';
};

export type CheckGrammarLiveResponses = {
    /**
     * Successful operation
     */
    200: ContentGenerationCheckGrammarLiveResponseInfo | null;
};

export type CheckGrammarLiveResponse = CheckGrammarLiveResponses[keyof CheckGrammarLiveResponses];

export type ContentGenerationCheckGrammarLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/content_generation/check_grammar/languages';
};

export type ContentGenerationCheckGrammarLanguagesResponses = {
    /**
     * Successful operation
     */
    200: ContentGenerationCheckGrammarLanguagesResponseInfo | null;
};

export type ContentGenerationCheckGrammarLanguagesResponse = ContentGenerationCheckGrammarLanguagesResponses[keyof ContentGenerationCheckGrammarLanguagesResponses];

export type GrammarRulesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/content_generation/grammar_rules';
};

export type GrammarRulesResponses = {
    /**
     * Successful operation
     */
    200: ContentGenerationGrammarRulesResponseInfo | null;
};

export type GrammarRulesResponse = GrammarRulesResponses[keyof GrammarRulesResponses];

export type TextSummaryLiveData = {
    body?: Array<ContentGenerationTextSummaryLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/content_generation/text_summary/live';
};

export type TextSummaryLiveResponses = {
    /**
     * Successful operation
     */
    200: ContentGenerationTextSummaryLiveResponseInfo | null;
};

export type TextSummaryLiveResponse = TextSummaryLiveResponses[keyof TextSummaryLiveResponses];

export type ContentGenerationTextSummaryLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/content_generation/text_summary/languages';
};

export type ContentGenerationTextSummaryLanguagesResponses = {
    /**
     * Successful operation
     */
    200: ContentGenerationTextSummaryLanguagesResponseInfo | null;
};

export type ContentGenerationTextSummaryLanguagesResponse = ContentGenerationTextSummaryLanguagesResponses[keyof ContentGenerationTextSummaryLanguagesResponses];

export type MerchantIdListData = {
    body?: Array<MerchantIdListRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/merchant/id_list';
};

export type MerchantIdListResponses = {
    /**
     * Successful operation
     */
    200: MerchantIdListResponseInfo | null;
};

export type MerchantIdListResponse = MerchantIdListResponses[keyof MerchantIdListResponses];

export type MerchantErrorsData = {
    body?: Array<MerchantErrorsRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/merchant/errors';
};

export type MerchantErrorsResponses = {
    /**
     * Successful operation
     */
    200: MerchantErrorsResponseInfo | null;
};

export type MerchantErrorsResponse = MerchantErrorsResponses[keyof MerchantErrorsResponses];

export type MerchantGoogleLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/merchant/google/languages';
};

export type MerchantGoogleLanguagesResponses = {
    /**
     * Successful operation
     */
    200: MerchantGoogleLanguagesResponseInfo | null;
};

export type MerchantGoogleLanguagesResponse = MerchantGoogleLanguagesResponses[keyof MerchantGoogleLanguagesResponses];

export type MerchantGoogleLocationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/merchant/google/locations';
};

export type MerchantGoogleLocationsResponses = {
    /**
     * Successful operation
     */
    200: MerchantGoogleLocationsResponseInfo | null;
};

export type MerchantGoogleLocationsResponse = MerchantGoogleLocationsResponses[keyof MerchantGoogleLocationsResponses];

export type MerchantGoogleLocationsCountryData = {
    body?: never;
    path: {
        /**
         * country ISO code
         * optional field
         * specify the ISO code if you want to filter the list of locations by country
         * example:
         * us
         */
        country: string;
    };
    query?: never;
    url: '/v3/merchant/google/locations/{country}';
};

export type MerchantGoogleLocationsCountryResponses = {
    /**
     * Successful operation
     */
    200: MerchantGoogleLocationsCountryResponseInfo | null;
};

export type MerchantGoogleLocationsCountryResponse = MerchantGoogleLocationsCountryResponses[keyof MerchantGoogleLocationsCountryResponses];

export type GoogleProductsTaskPostData = {
    body?: Array<MerchantGoogleProductsTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/merchant/google/products/task_post';
};

export type GoogleProductsTaskPostResponses = {
    /**
     * Successful operation
     */
    200: MerchantGoogleProductsTaskPostResponseInfo | null;
};

export type GoogleProductsTaskPostResponse = GoogleProductsTaskPostResponses[keyof GoogleProductsTaskPostResponses];

export type GoogleProductsTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/merchant/google/products/tasks_ready';
};

export type GoogleProductsTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: MerchantGoogleProductsTasksReadyResponseInfo | null;
};

export type GoogleProductsTasksReadyResponse = GoogleProductsTasksReadyResponses[keyof GoogleProductsTasksReadyResponses];

export type MerchantTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/merchant/tasks_ready';
};

export type MerchantTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: MerchantTasksReadyResponseInfo | null;
};

export type MerchantTasksReadyResponse = MerchantTasksReadyResponses[keyof MerchantTasksReadyResponses];

export type GoogleProductsTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/merchant/google/products/task_get/advanced/{id}';
};

export type GoogleProductsTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: MerchantGoogleProductsTaskGetAdvancedResponseInfo | null;
};

export type GoogleProductsTaskGetAdvancedResponse = GoogleProductsTaskGetAdvancedResponses[keyof GoogleProductsTaskGetAdvancedResponses];

export type GoogleProductsTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/merchant/google/products/task_get/html/{id}';
};

export type GoogleProductsTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: MerchantGoogleProductsTaskGetHtmlResponseInfo | null;
};

export type GoogleProductsTaskGetHtmlResponse = GoogleProductsTaskGetHtmlResponses[keyof GoogleProductsTaskGetHtmlResponses];

export type GoogleSellersTaskPostData = {
    body?: Array<MerchantGoogleSellersTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/merchant/google/sellers/task_post';
};

export type GoogleSellersTaskPostResponses = {
    /**
     * Successful operation
     */
    200: MerchantGoogleSellersTaskPostResponseInfo | null;
};

export type GoogleSellersTaskPostResponse = GoogleSellersTaskPostResponses[keyof GoogleSellersTaskPostResponses];

export type GoogleSellersTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/merchant/google/sellers/tasks_ready';
};

export type GoogleSellersTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: MerchantGoogleSellersTasksReadyResponseInfo | null;
};

export type GoogleSellersTasksReadyResponse = GoogleSellersTasksReadyResponses[keyof GoogleSellersTasksReadyResponses];

export type GoogleSellersTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/merchant/google/sellers/task_get/advanced/{id}';
};

export type GoogleSellersTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: MerchantGoogleSellersTaskGetAdvancedResponseInfo | null;
};

export type GoogleSellersTaskGetAdvancedResponse = GoogleSellersTaskGetAdvancedResponses[keyof GoogleSellersTaskGetAdvancedResponses];

export type GoogleSellersTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/merchant/google/sellers/task_get/html/{id}';
};

export type GoogleSellersTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: MerchantGoogleSellersTaskGetHtmlResponseInfo | null;
};

export type GoogleSellersTaskGetHtmlResponse = GoogleSellersTaskGetHtmlResponses[keyof GoogleSellersTaskGetHtmlResponses];

export type GoogleProductSpecTaskPostData = {
    body?: Array<MerchantGoogleProductSpecTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/merchant/google/product_spec/task_post';
};

export type GoogleProductSpecTaskPostResponses = {
    /**
     * Successful operation
     */
    200: MerchantGoogleProductSpecTaskPostResponseInfo | null;
};

export type GoogleProductSpecTaskPostResponse = GoogleProductSpecTaskPostResponses[keyof GoogleProductSpecTaskPostResponses];

export type GoogleProductSpecTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/merchant/google/product_spec/tasks_ready';
};

export type GoogleProductSpecTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: MerchantGoogleProductSpecTasksReadyResponseInfo | null;
};

export type GoogleProductSpecTasksReadyResponse = GoogleProductSpecTasksReadyResponses[keyof GoogleProductSpecTasksReadyResponses];

export type GoogleProductSpecTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/merchant/google/product_spec/task_get/advanced/{id}';
};

export type GoogleProductSpecTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: MerchantGoogleProductSpecTaskGetAdvancedResponseInfo | null;
};

export type GoogleProductSpecTaskGetAdvancedResponse = GoogleProductSpecTaskGetAdvancedResponses[keyof GoogleProductSpecTaskGetAdvancedResponses];

export type GoogleProductSpecTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/merchant/google/product_spec/task_get/html/{id}';
};

export type GoogleProductSpecTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: MerchantGoogleProductSpecTaskGetHtmlResponseInfo | null;
};

export type GoogleProductSpecTaskGetHtmlResponse = GoogleProductSpecTaskGetHtmlResponses[keyof GoogleProductSpecTaskGetHtmlResponses];

export type GoogleProductInfoTaskPostData = {
    body?: Array<MerchantGoogleProductInfoTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/merchant/google/product_info/task_post';
};

export type GoogleProductInfoTaskPostResponses = {
    /**
     * Successful operation
     */
    200: MerchantGoogleProductInfoTaskPostResponseInfo | null;
};

export type GoogleProductInfoTaskPostResponse = GoogleProductInfoTaskPostResponses[keyof GoogleProductInfoTaskPostResponses];

export type GoogleProductInfoTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/merchant/google/product_info/tasks_ready';
};

export type GoogleProductInfoTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: MerchantGoogleProductInfoTasksReadyResponseInfo | null;
};

export type GoogleProductInfoTasksReadyResponse = GoogleProductInfoTasksReadyResponses[keyof GoogleProductInfoTasksReadyResponses];

export type GoogleProductInfoTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/merchant/google/product_info/task_get/advanced/{id}';
};

export type GoogleProductInfoTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: MerchantGoogleProductInfoTaskGetAdvancedResponseInfo | null;
};

export type GoogleProductInfoTaskGetAdvancedResponse = GoogleProductInfoTaskGetAdvancedResponses[keyof GoogleProductInfoTaskGetAdvancedResponses];

export type GoogleSellersAdUrlData = {
    body?: never;
    path: {
        /**
         * unique ad click referral parameter
         * you can obtain this parameter with Google Shopping Products or Google Shopping Sellers
         */
        shop_ad_aclk: string;
    };
    query?: never;
    url: '/v3/merchant/google/sellers/ad_url/{shop_ad_aclk}';
};

export type GoogleSellersAdUrlResponses = {
    /**
     * Successful operation
     */
    200: MerchantGoogleSellersAdUrlResponseInfo | null;
};

export type GoogleSellersAdUrlResponse = GoogleSellersAdUrlResponses[keyof GoogleSellersAdUrlResponses];

export type MerchantAmazonLocationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/merchant/amazon/locations';
};

export type MerchantAmazonLocationsResponses = {
    /**
     * Successful operation
     */
    200: MerchantAmazonLocationsResponseInfo | null;
};

export type MerchantAmazonLocationsResponse = MerchantAmazonLocationsResponses[keyof MerchantAmazonLocationsResponses];

export type MerchantAmazonLocationsCountryData = {
    body?: never;
    path: {
        /**
         * country ISO code
         * optional field
         * specify the ISO code if you want to filter the list of locations by country
         * example:
         * us
         */
        country: string;
    };
    query?: never;
    url: '/v3/merchant/amazon/locations/{country}';
};

export type MerchantAmazonLocationsCountryResponses = {
    /**
     * Successful operation
     */
    200: MerchantAmazonLocationsCountryResponseInfo | null;
};

export type MerchantAmazonLocationsCountryResponse = MerchantAmazonLocationsCountryResponses[keyof MerchantAmazonLocationsCountryResponses];

export type MerchantAmazonLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/merchant/amazon/languages';
};

export type MerchantAmazonLanguagesResponses = {
    /**
     * Successful operation
     */
    200: MerchantAmazonLanguagesResponseInfo | null;
};

export type MerchantAmazonLanguagesResponse = MerchantAmazonLanguagesResponses[keyof MerchantAmazonLanguagesResponses];

export type AmazonProductsTaskPostData = {
    body?: Array<MerchantAmazonProductsTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/merchant/amazon/products/task_post';
};

export type AmazonProductsTaskPostResponses = {
    /**
     * Successful operation
     */
    200: MerchantAmazonProductsTaskPostResponseInfo | null;
};

export type AmazonProductsTaskPostResponse = AmazonProductsTaskPostResponses[keyof AmazonProductsTaskPostResponses];

export type AmazonProductsTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/merchant/amazon/products/tasks_ready';
};

export type AmazonProductsTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: MerchantAmazonProductsTasksReadyResponseInfo | null;
};

export type AmazonProductsTasksReadyResponse = AmazonProductsTasksReadyResponses[keyof AmazonProductsTasksReadyResponses];

export type AmazonProductsTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/merchant/amazon/products/task_get/advanced/{id}';
};

export type AmazonProductsTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: MerchantAmazonProductsTaskGetAdvancedResponseInfo | null;
};

export type AmazonProductsTaskGetAdvancedResponse = AmazonProductsTaskGetAdvancedResponses[keyof AmazonProductsTaskGetAdvancedResponses];

export type AmazonProductsTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/merchant/amazon/products/task_get/html/{id}';
};

export type AmazonProductsTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: MerchantAmazonProductsTaskGetHtmlResponseInfo | null;
};

export type AmazonProductsTaskGetHtmlResponse = AmazonProductsTaskGetHtmlResponses[keyof AmazonProductsTaskGetHtmlResponses];

export type AmazonAsinTaskPostData = {
    body?: Array<MerchantAmazonAsinTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/merchant/amazon/asin/task_post';
};

export type AmazonAsinTaskPostResponses = {
    /**
     * Successful operation
     */
    200: MerchantAmazonAsinTaskPostResponseInfo | null;
};

export type AmazonAsinTaskPostResponse = AmazonAsinTaskPostResponses[keyof AmazonAsinTaskPostResponses];

export type AmazonAsinTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/merchant/amazon/asin/tasks_ready';
};

export type AmazonAsinTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: MerchantAmazonAsinTasksReadyResponseInfo | null;
};

export type AmazonAsinTasksReadyResponse = AmazonAsinTasksReadyResponses[keyof AmazonAsinTasksReadyResponses];

export type AmazonAsinTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/merchant/amazon/asin/task_get/advanced/{id}';
};

export type AmazonAsinTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: MerchantAmazonAsinTaskGetAdvancedResponseInfo | null;
};

export type AmazonAsinTaskGetAdvancedResponse = AmazonAsinTaskGetAdvancedResponses[keyof AmazonAsinTaskGetAdvancedResponses];

export type AmazonAsinTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/merchant/amazon/asin/task_get/html/{id}';
};

export type AmazonAsinTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: MerchantAmazonAsinTaskGetHtmlResponseInfo | null;
};

export type AmazonAsinTaskGetHtmlResponse = AmazonAsinTaskGetHtmlResponses[keyof AmazonAsinTaskGetHtmlResponses];

export type AmazonSellersTaskPostData = {
    body?: Array<MerchantAmazonSellersTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/merchant/amazon/sellers/task_post';
};

export type AmazonSellersTaskPostResponses = {
    /**
     * Successful operation
     */
    200: MerchantAmazonSellersTaskPostResponseInfo | null;
};

export type AmazonSellersTaskPostResponse = AmazonSellersTaskPostResponses[keyof AmazonSellersTaskPostResponses];

export type AmazonSellersTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/merchant/amazon/sellers/tasks_ready';
};

export type AmazonSellersTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: MerchantAmazonSellersTasksReadyResponseInfo | null;
};

export type AmazonSellersTasksReadyResponse = AmazonSellersTasksReadyResponses[keyof AmazonSellersTasksReadyResponses];

export type AmazonSellersTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/merchant/amazon/sellers/task_get/advanced/{id}';
};

export type AmazonSellersTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: MerchantAmazonSellersTaskGetAdvancedResponseInfo | null;
};

export type AmazonSellersTaskGetAdvancedResponse = AmazonSellersTaskGetAdvancedResponses[keyof AmazonSellersTaskGetAdvancedResponses];

export type AmazonSellersTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/merchant/amazon/sellers/task_get/html/{id}';
};

export type AmazonSellersTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: MerchantAmazonSellersTaskGetHtmlResponseInfo | null;
};

export type AmazonSellersTaskGetHtmlResponse = AmazonSellersTaskGetHtmlResponses[keyof AmazonSellersTaskGetHtmlResponses];

export type AmazonReviewsTaskPostData = {
    body?: Array<MerchantAmazonReviewsTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/merchant/amazon/reviews/task_post';
};

export type AmazonReviewsTaskPostResponses = {
    /**
     * Successful operation
     */
    200: MerchantAmazonReviewsTaskPostResponseInfo | null;
};

export type AmazonReviewsTaskPostResponse = AmazonReviewsTaskPostResponses[keyof AmazonReviewsTaskPostResponses];

export type AmazonReviewsTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/merchant/amazon/reviews/tasks_ready';
};

export type AmazonReviewsTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: MerchantAmazonReviewsTasksReadyResponseInfo | null;
};

export type AmazonReviewsTasksReadyResponse = AmazonReviewsTasksReadyResponses[keyof AmazonReviewsTasksReadyResponses];

export type AmazonReviewsTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/merchant/amazon/reviews/task_get/advanced/{id}';
};

export type AmazonReviewsTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: MerchantAmazonReviewsTaskGetAdvancedResponseInfo | null;
};

export type AmazonReviewsTaskGetAdvancedResponse = AmazonReviewsTaskGetAdvancedResponses[keyof AmazonReviewsTaskGetAdvancedResponses];

export type AmazonReviewsTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/merchant/amazon/reviews/task_get/html/{id}';
};

export type AmazonReviewsTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: MerchantAmazonReviewsTaskGetHtmlResponseInfo | null;
};

export type AmazonReviewsTaskGetHtmlResponse = AmazonReviewsTaskGetHtmlResponses[keyof AmazonReviewsTaskGetHtmlResponses];

export type AppDataIdListData = {
    body?: Array<AppDataIdListRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/app_data/id_list';
};

export type AppDataIdListResponses = {
    /**
     * Successful operation
     */
    200: AppDataIdListResponseInfo | null;
};

export type AppDataIdListResponse = AppDataIdListResponses[keyof AppDataIdListResponses];

export type AppDataErrorsData = {
    body?: Array<AppDataErrorsRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/app_data/errors';
};

export type AppDataErrorsResponses = {
    /**
     * Successful operation
     */
    200: AppDataErrorsResponseInfo | null;
};

export type AppDataErrorsResponse = AppDataErrorsResponses[keyof AppDataErrorsResponses];

export type GoogleCategoriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/app_data/google/categories';
};

export type GoogleCategoriesResponses = {
    /**
     * Successful operation
     */
    200: AppDataGoogleCategoriesResponseInfo | null;
};

export type GoogleCategoriesResponse = GoogleCategoriesResponses[keyof GoogleCategoriesResponses];

export type AppDataGoogleLocationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/app_data/google/locations';
};

export type AppDataGoogleLocationsResponses = {
    /**
     * Successful operation
     */
    200: AppDataGoogleLocationsResponseInfo | null;
};

export type AppDataGoogleLocationsResponse = AppDataGoogleLocationsResponses[keyof AppDataGoogleLocationsResponses];

export type AppDataGoogleLocationsCountryData = {
    body?: never;
    path: {
        /**
         * country ISO code
         * optional field
         * specify the ISO code if you want to filter the list of locations by country
         * example:
         * us
         */
        country: string | null;
    };
    query?: never;
    url: '/v3/app_data/google/locations/{country}';
};

export type AppDataGoogleLocationsCountryResponses = {
    /**
     * Successful operation
     */
    200: AppDataGoogleLocationsCountryResponseInfo | null;
};

export type AppDataGoogleLocationsCountryResponse = AppDataGoogleLocationsCountryResponses[keyof AppDataGoogleLocationsCountryResponses];

export type AppDataGoogleLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/app_data/google/languages';
};

export type AppDataGoogleLanguagesResponses = {
    /**
     * Successful operation
     */
    200: AppDataGoogleLanguagesResponseInfo | null;
};

export type AppDataGoogleLanguagesResponse = AppDataGoogleLanguagesResponses[keyof AppDataGoogleLanguagesResponses];

export type GoogleAppSearchesTaskPostData = {
    body?: Array<AppDataGoogleAppSearchesTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/app_data/google/app_searches/task_post';
};

export type GoogleAppSearchesTaskPostResponses = {
    /**
     * Successful operation
     */
    200: AppDataGoogleAppSearchesTaskPostResponseInfo | null;
};

export type GoogleAppSearchesTaskPostResponse = GoogleAppSearchesTaskPostResponses[keyof GoogleAppSearchesTaskPostResponses];

export type GoogleAppSearchesTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/app_data/google/app_searches/tasks_ready';
};

export type GoogleAppSearchesTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: AppDataGoogleAppSearchesTasksReadyResponseInfo | null;
};

export type GoogleAppSearchesTasksReadyResponse = GoogleAppSearchesTasksReadyResponses[keyof GoogleAppSearchesTasksReadyResponses];

export type AppDataTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/app_data/tasks_ready';
};

export type AppDataTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: AppDataTasksReadyResponseInfo | null;
};

export type AppDataTasksReadyResponse = AppDataTasksReadyResponses[keyof AppDataTasksReadyResponses];

export type GoogleAppSearchesTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/app_data/google/app_searches/task_get/advanced/{id}';
};

export type GoogleAppSearchesTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: AppDataGoogleAppSearchesTaskGetAdvancedResponseInfo | null;
};

export type GoogleAppSearchesTaskGetAdvancedResponse = GoogleAppSearchesTaskGetAdvancedResponses[keyof GoogleAppSearchesTaskGetAdvancedResponses];

export type GoogleAppSearchesTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/app_data/google/app_searches/task_get/html/{id}';
};

export type GoogleAppSearchesTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: AppDataGoogleAppSearchesTaskGetHtmlResponseInfo | null;
};

export type GoogleAppSearchesTaskGetHtmlResponse = GoogleAppSearchesTaskGetHtmlResponses[keyof GoogleAppSearchesTaskGetHtmlResponses];

export type GoogleAppListTaskPostData = {
    body?: Array<AppDataGoogleAppListTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/app_data/google/app_list/task_post';
};

export type GoogleAppListTaskPostResponses = {
    /**
     * Successful operation
     */
    200: AppDataGoogleAppListTaskPostResponseInfo | null;
};

export type GoogleAppListTaskPostResponse = GoogleAppListTaskPostResponses[keyof GoogleAppListTaskPostResponses];

export type GoogleAppListTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/app_data/google/app_list/tasks_ready';
};

export type GoogleAppListTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: AppDataGoogleAppListTasksReadyResponseInfo | null;
};

export type GoogleAppListTasksReadyResponse = GoogleAppListTasksReadyResponses[keyof GoogleAppListTasksReadyResponses];

export type GoogleAppListTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/app_data/google/app_list/task_get/advanced/{id}';
};

export type GoogleAppListTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: AppDataGoogleAppListTaskGetAdvancedResponseInfo | null;
};

export type GoogleAppListTaskGetAdvancedResponse = GoogleAppListTaskGetAdvancedResponses[keyof GoogleAppListTaskGetAdvancedResponses];

export type GoogleAppListTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/app_data/google/app_list/task_get/html/{id}';
};

export type GoogleAppListTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: AppDataGoogleAppListTaskGetHtmlResponseInfo | null;
};

export type GoogleAppListTaskGetHtmlResponse = GoogleAppListTaskGetHtmlResponses[keyof GoogleAppListTaskGetHtmlResponses];

export type GoogleAppInfoTaskPostData = {
    body?: Array<AppDataGoogleAppInfoTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/app_data/google/app_info/task_post';
};

export type GoogleAppInfoTaskPostResponses = {
    /**
     * Successful operation
     */
    200: AppDataGoogleAppInfoTaskPostResponseInfo | null;
};

export type GoogleAppInfoTaskPostResponse = GoogleAppInfoTaskPostResponses[keyof GoogleAppInfoTaskPostResponses];

export type GoogleAppInfoTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/app_data/google/app_info/tasks_ready';
};

export type GoogleAppInfoTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: AppDataGoogleAppInfoTasksReadyResponseInfo | null;
};

export type GoogleAppInfoTasksReadyResponse = GoogleAppInfoTasksReadyResponses[keyof GoogleAppInfoTasksReadyResponses];

export type GoogleAppInfoTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/app_data/google/app_info/task_get/advanced/{id}';
};

export type GoogleAppInfoTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: AppDataGoogleAppInfoTaskGetAdvancedResponseInfo | null;
};

export type GoogleAppInfoTaskGetAdvancedResponse = GoogleAppInfoTaskGetAdvancedResponses[keyof GoogleAppInfoTaskGetAdvancedResponses];

export type GoogleAppInfoTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/app_data/google/app_info/task_get/html/{id}';
};

export type GoogleAppInfoTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: AppDataGoogleAppInfoTaskGetHtmlResponseInfo | null;
};

export type GoogleAppInfoTaskGetHtmlResponse = GoogleAppInfoTaskGetHtmlResponses[keyof GoogleAppInfoTaskGetHtmlResponses];

export type GoogleAppReviewsTaskPostData = {
    body?: Array<AppDataGoogleAppReviewsTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/app_data/google/app_reviews/task_post';
};

export type GoogleAppReviewsTaskPostResponses = {
    /**
     * Successful operation
     */
    200: AppDataGoogleAppReviewsTaskPostResponseInfo | null;
};

export type GoogleAppReviewsTaskPostResponse = GoogleAppReviewsTaskPostResponses[keyof GoogleAppReviewsTaskPostResponses];

export type GoogleAppReviewsTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/app_data/google/app_reviews/tasks_ready';
};

export type GoogleAppReviewsTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: AppDataGoogleAppReviewsTasksReadyResponseInfo | null;
};

export type GoogleAppReviewsTasksReadyResponse = GoogleAppReviewsTasksReadyResponses[keyof GoogleAppReviewsTasksReadyResponses];

export type GoogleAppReviewsTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/app_data/google/app_reviews/task_get/advanced/{id}';
};

export type GoogleAppReviewsTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: AppDataGoogleAppReviewsTaskGetAdvancedResponseInfo | null;
};

export type GoogleAppReviewsTaskGetAdvancedResponse = GoogleAppReviewsTaskGetAdvancedResponses[keyof GoogleAppReviewsTaskGetAdvancedResponses];

export type GoogleAppReviewsTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/app_data/google/app_reviews/task_get/html/{id}';
};

export type GoogleAppReviewsTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: AppDataGoogleAppReviewsTaskGetHtmlResponseInfo | null;
};

export type GoogleAppReviewsTaskGetHtmlResponse = GoogleAppReviewsTaskGetHtmlResponses[keyof GoogleAppReviewsTaskGetHtmlResponses];

export type GoogleAppListingsCategoriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/app_data/google/app_listings/categories';
};

export type GoogleAppListingsCategoriesResponses = {
    /**
     * Successful operation
     */
    200: AppDataGoogleAppListingsCategoriesResponseInfo | null;
};

export type GoogleAppListingsCategoriesResponse = GoogleAppListingsCategoriesResponses[keyof GoogleAppListingsCategoriesResponses];

export type GoogleAppListingsSearchLiveData = {
    body?: Array<AppDataGoogleAppListingsSearchLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/app_data/google/app_listings/search/live';
};

export type GoogleAppListingsSearchLiveResponses = {
    /**
     * Successful operation
     */
    200: AppDataGoogleAppListingsSearchLiveResponseInfo | null;
};

export type GoogleAppListingsSearchLiveResponse = GoogleAppListingsSearchLiveResponses[keyof GoogleAppListingsSearchLiveResponses];

export type AppleCategoriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/app_data/apple/categories';
};

export type AppleCategoriesResponses = {
    /**
     * Successful operation
     */
    200: AppDataAppleCategoriesResponseInfo | null;
};

export type AppleCategoriesResponse = AppleCategoriesResponses[keyof AppleCategoriesResponses];

export type AppDataAppleLocationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/app_data/apple/locations';
};

export type AppDataAppleLocationsResponses = {
    /**
     * Successful operation
     */
    200: AppDataAppleLocationsResponseInfo | null;
};

export type AppDataAppleLocationsResponse = AppDataAppleLocationsResponses[keyof AppDataAppleLocationsResponses];

export type AppDataAppleLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/app_data/apple/languages';
};

export type AppDataAppleLanguagesResponses = {
    /**
     * Successful operation
     */
    200: AppDataAppleLanguagesResponseInfo | null;
};

export type AppDataAppleLanguagesResponse = AppDataAppleLanguagesResponses[keyof AppDataAppleLanguagesResponses];

export type AppleAppSearchesTaskPostData = {
    body?: Array<AppDataAppleAppSearchesTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/app_data/apple/app_searches/task_post';
};

export type AppleAppSearchesTaskPostResponses = {
    /**
     * Successful operation
     */
    200: AppDataAppleAppSearchesTaskPostResponseInfo | null;
};

export type AppleAppSearchesTaskPostResponse = AppleAppSearchesTaskPostResponses[keyof AppleAppSearchesTaskPostResponses];

export type AppleAppSearchesTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/app_data/apple/app_searches/tasks_ready';
};

export type AppleAppSearchesTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: AppDataAppleAppSearchesTasksReadyResponseInfo | null;
};

export type AppleAppSearchesTasksReadyResponse = AppleAppSearchesTasksReadyResponses[keyof AppleAppSearchesTasksReadyResponses];

export type AppleAppSearchesTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/app_data/apple/app_searches/task_get/advanced/{id}';
};

export type AppleAppSearchesTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: AppDataAppleAppSearchesTaskGetAdvancedResponseInfo | null;
};

export type AppleAppSearchesTaskGetAdvancedResponse = AppleAppSearchesTaskGetAdvancedResponses[keyof AppleAppSearchesTaskGetAdvancedResponses];

export type AppleAppInfoTaskPostData = {
    body?: Array<AppDataAppleAppInfoTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/app_data/apple/app_info/task_post';
};

export type AppleAppInfoTaskPostResponses = {
    /**
     * Successful operation
     */
    200: AppDataAppleAppInfoTaskPostResponseInfo | null;
};

export type AppleAppInfoTaskPostResponse = AppleAppInfoTaskPostResponses[keyof AppleAppInfoTaskPostResponses];

export type AppleAppInfoTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/app_data/apple/app_info/tasks_ready';
};

export type AppleAppInfoTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: AppDataAppleAppInfoTasksReadyResponseInfo | null;
};

export type AppleAppInfoTasksReadyResponse = AppleAppInfoTasksReadyResponses[keyof AppleAppInfoTasksReadyResponses];

export type AppleAppInfoTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/app_data/apple/app_info/task_get/advanced/{id}';
};

export type AppleAppInfoTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: AppDataAppleAppInfoTaskGetAdvancedResponseInfo | null;
};

export type AppleAppInfoTaskGetAdvancedResponse = AppleAppInfoTaskGetAdvancedResponses[keyof AppleAppInfoTaskGetAdvancedResponses];

export type AppleAppListTaskPostData = {
    body?: Array<AppDataAppleAppListTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/app_data/apple/app_list/task_post';
};

export type AppleAppListTaskPostResponses = {
    /**
     * Successful operation
     */
    200: AppDataAppleAppListTaskPostResponseInfo | null;
};

export type AppleAppListTaskPostResponse = AppleAppListTaskPostResponses[keyof AppleAppListTaskPostResponses];

export type AppleAppListTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/app_data/apple/app_list/tasks_ready';
};

export type AppleAppListTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: AppDataAppleAppListTasksReadyResponseInfo | null;
};

export type AppleAppListTasksReadyResponse = AppleAppListTasksReadyResponses[keyof AppleAppListTasksReadyResponses];

export type AppleAppListTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/app_data/apple/app_list/task_get/advanced/{id}';
};

export type AppleAppListTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: AppDataAppleAppListTaskGetAdvancedResponseInfo | null;
};

export type AppleAppListTaskGetAdvancedResponse = AppleAppListTaskGetAdvancedResponses[keyof AppleAppListTaskGetAdvancedResponses];

export type AppleAppReviewsTaskPostData = {
    body?: Array<AppDataAppleAppReviewsTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/app_data/apple/app_reviews/task_post';
};

export type AppleAppReviewsTaskPostResponses = {
    /**
     * Successful operation
     */
    200: AppDataAppleAppReviewsTaskPostResponseInfo | null;
};

export type AppleAppReviewsTaskPostResponse = AppleAppReviewsTaskPostResponses[keyof AppleAppReviewsTaskPostResponses];

export type AppleAppReviewsTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/app_data/apple/app_reviews/tasks_ready';
};

export type AppleAppReviewsTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: AppDataAppleAppReviewsTasksReadyResponseInfo | null;
};

export type AppleAppReviewsTasksReadyResponse = AppleAppReviewsTasksReadyResponses[keyof AppleAppReviewsTasksReadyResponses];

export type AppleAppReviewsTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/app_data/apple/app_reviews/task_get/advanced/{id}';
};

export type AppleAppReviewsTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: AppDataAppleAppReviewsTaskGetAdvancedResponseInfo | null;
};

export type AppleAppReviewsTaskGetAdvancedResponse = AppleAppReviewsTaskGetAdvancedResponses[keyof AppleAppReviewsTaskGetAdvancedResponses];

export type AppleAppListingsCategoriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/app_data/apple/app_listings/categories';
};

export type AppleAppListingsCategoriesResponses = {
    /**
     * Successful operation
     */
    200: AppDataAppleAppListingsCategoriesResponseInfo | null;
};

export type AppleAppListingsCategoriesResponse = AppleAppListingsCategoriesResponses[keyof AppleAppListingsCategoriesResponses];

export type AppleAppListingsSearchLiveData = {
    body?: Array<AppDataAppleAppListingsSearchLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/app_data/apple/app_listings/search/live';
};

export type AppleAppListingsSearchLiveResponses = {
    /**
     * Successful operation
     */
    200: AppDataAppleAppListingsSearchLiveResponseInfo | null;
};

export type AppleAppListingsSearchLiveResponse = AppleAppListingsSearchLiveResponses[keyof AppleAppListingsSearchLiveResponses];

export type BusinessDataIdListData = {
    body?: Array<BusinessDataIdListRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/business_data/id_list';
};

export type BusinessDataIdListResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataIdListResponseInfo | null;
};

export type BusinessDataIdListResponse = BusinessDataIdListResponses[keyof BusinessDataIdListResponses];

export type BusinessDataErrorsData = {
    body?: Array<BusinessDataErrorsRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/business_data/errors';
};

export type BusinessDataErrorsResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataErrorsResponseInfo | null;
};

export type BusinessDataErrorsResponse = BusinessDataErrorsResponses[keyof BusinessDataErrorsResponses];

export type BusinessDataBusinessListingsLocationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/business_data/business_listings/locations';
};

export type BusinessDataBusinessListingsLocationsResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataBusinessListingsLocationsResponseInfo | null;
};

export type BusinessDataBusinessListingsLocationsResponse = BusinessDataBusinessListingsLocationsResponses[keyof BusinessDataBusinessListingsLocationsResponses];

export type BusinessListingsCategoriesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/business_data/business_listings/categories';
};

export type BusinessListingsCategoriesResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataBusinessListingsCategoriesResponseInfo | null;
};

export type BusinessListingsCategoriesResponse = BusinessListingsCategoriesResponses[keyof BusinessListingsCategoriesResponses];

export type BusinessListingsAvailableFiltersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/business_data/business_listings/available_filters';
};

export type BusinessListingsAvailableFiltersResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataBusinessListingsAvailableFiltersResponseInfo | null;
};

export type BusinessListingsAvailableFiltersResponse = BusinessListingsAvailableFiltersResponses[keyof BusinessListingsAvailableFiltersResponses];

export type BusinessListingsSearchLiveData = {
    body?: Array<BusinessDataBusinessListingsSearchLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/business_data/business_listings/search/live';
};

export type BusinessListingsSearchLiveResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataBusinessListingsSearchLiveResponseInfo | null;
};

export type BusinessListingsSearchLiveResponse = BusinessListingsSearchLiveResponses[keyof BusinessListingsSearchLiveResponses];

export type BusinessListingsCategoriesAggregationLiveData = {
    body?: Array<BusinessDataBusinessListingsCategoriesAggregationLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/business_data/business_listings/categories_aggregation/live';
};

export type BusinessListingsCategoriesAggregationLiveResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataBusinessListingsCategoriesAggregationLiveResponseInfo | null;
};

export type BusinessListingsCategoriesAggregationLiveResponse = BusinessListingsCategoriesAggregationLiveResponses[keyof BusinessListingsCategoriesAggregationLiveResponses];

export type BusinessDataGoogleLocationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/business_data/google/locations';
};

export type BusinessDataGoogleLocationsResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleLocationsResponseInfo | null;
};

export type BusinessDataGoogleLocationsResponse = BusinessDataGoogleLocationsResponses[keyof BusinessDataGoogleLocationsResponses];

export type BusinessDataGoogleLocationsCountryData = {
    body?: never;
    path: {
        /**
         * country ISO code
         * optional field
         * specify the ISO code if you want to filter the list of locations by country
         * example:
         * us
         */
        country: string;
    };
    query?: never;
    url: '/v3/business_data/google/locations/{country}';
};

export type BusinessDataGoogleLocationsCountryResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleLocationsCountryResponseInfo | null;
};

export type BusinessDataGoogleLocationsCountryResponse = BusinessDataGoogleLocationsCountryResponses[keyof BusinessDataGoogleLocationsCountryResponses];

export type BusinessDataGoogleLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/business_data/google/languages';
};

export type BusinessDataGoogleLanguagesResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleLanguagesResponseInfo | null;
};

export type BusinessDataGoogleLanguagesResponse = BusinessDataGoogleLanguagesResponses[keyof BusinessDataGoogleLanguagesResponses];

export type GoogleMyBusinessInfoTaskPostData = {
    body?: Array<BusinessDataGoogleMyBusinessInfoTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/business_data/google/my_business_info/task_post';
};

export type GoogleMyBusinessInfoTaskPostResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleMyBusinessInfoTaskPostResponseInfo | null;
};

export type GoogleMyBusinessInfoTaskPostResponse = GoogleMyBusinessInfoTaskPostResponses[keyof GoogleMyBusinessInfoTaskPostResponses];

export type GoogleMyBusinessInfoTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/business_data/google/my_business_info/tasks_ready';
};

export type GoogleMyBusinessInfoTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleMyBusinessInfoTasksReadyResponseInfo | null;
};

export type GoogleMyBusinessInfoTasksReadyResponse = GoogleMyBusinessInfoTasksReadyResponses[keyof GoogleMyBusinessInfoTasksReadyResponses];

export type BusinessDataTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/business_data/tasks_ready';
};

export type BusinessDataTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataTasksReadyResponseInfo | null;
};

export type BusinessDataTasksReadyResponse = BusinessDataTasksReadyResponses[keyof BusinessDataTasksReadyResponses];

export type GoogleMyBusinessInfoTaskGetData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/business_data/google/my_business_info/task_get/{id}';
};

export type GoogleMyBusinessInfoTaskGetResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleMyBusinessInfoTaskGetResponseInfo | null;
};

export type GoogleMyBusinessInfoTaskGetResponse = GoogleMyBusinessInfoTaskGetResponses[keyof GoogleMyBusinessInfoTaskGetResponses];

export type GoogleMyBusinessInfoLiveData = {
    body?: Array<BusinessDataGoogleMyBusinessInfoLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/business_data/google/my_business_info/live';
};

export type GoogleMyBusinessInfoLiveResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleMyBusinessInfoLiveResponseInfo | null;
};

export type GoogleMyBusinessInfoLiveResponse = GoogleMyBusinessInfoLiveResponses[keyof GoogleMyBusinessInfoLiveResponses];

export type GoogleMyBusinessUpdatesTaskPostData = {
    body?: Array<BusinessDataGoogleMyBusinessUpdatesTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/business_data/google/my_business_updates/task_post';
};

export type GoogleMyBusinessUpdatesTaskPostResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleMyBusinessUpdatesTaskPostResponseInfo | null;
};

export type GoogleMyBusinessUpdatesTaskPostResponse = GoogleMyBusinessUpdatesTaskPostResponses[keyof GoogleMyBusinessUpdatesTaskPostResponses];

export type GoogleMyBusinessUpdatesTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/business_data/google/my_business_updates/tasks_ready';
};

export type GoogleMyBusinessUpdatesTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleMyBusinessUpdatesTasksReadyResponseInfo | null;
};

export type GoogleMyBusinessUpdatesTasksReadyResponse = GoogleMyBusinessUpdatesTasksReadyResponses[keyof GoogleMyBusinessUpdatesTasksReadyResponses];

export type GoogleMyBusinessUpdatesTaskGetData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/business_data/google/my_business_updates/task_get/{id}';
};

export type GoogleMyBusinessUpdatesTaskGetResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleMyBusinessUpdatesTaskGetResponseInfo | null;
};

export type GoogleMyBusinessUpdatesTaskGetResponse = GoogleMyBusinessUpdatesTaskGetResponses[keyof GoogleMyBusinessUpdatesTaskGetResponses];

export type GoogleHotelSearchesTaskPostData = {
    body?: Array<BusinessDataGoogleHotelSearchesTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/business_data/google/hotel_searches/task_post';
};

export type GoogleHotelSearchesTaskPostResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleHotelSearchesTaskPostResponseInfo | null;
};

export type GoogleHotelSearchesTaskPostResponse = GoogleHotelSearchesTaskPostResponses[keyof GoogleHotelSearchesTaskPostResponses];

export type GoogleHotelSearchesTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/business_data/google/hotel_searches/tasks_ready';
};

export type GoogleHotelSearchesTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleHotelSearchesTasksReadyResponseInfo | null;
};

export type GoogleHotelSearchesTasksReadyResponse = GoogleHotelSearchesTasksReadyResponses[keyof GoogleHotelSearchesTasksReadyResponses];

export type GoogleHotelSearchesTaskGetData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/business_data/google/hotel_searches/task_get/{id}';
};

export type GoogleHotelSearchesTaskGetResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleHotelSearchesTaskGetResponseInfo | null;
};

export type GoogleHotelSearchesTaskGetResponse = GoogleHotelSearchesTaskGetResponses[keyof GoogleHotelSearchesTaskGetResponses];

export type GoogleHotelSearchesLiveData = {
    body?: Array<BusinessDataGoogleHotelSearchesLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/business_data/google/hotel_searches/live';
};

export type GoogleHotelSearchesLiveResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleHotelSearchesLiveResponseInfo | null;
};

export type GoogleHotelSearchesLiveResponse = GoogleHotelSearchesLiveResponses[keyof GoogleHotelSearchesLiveResponses];

export type GoogleHotelInfoTaskPostData = {
    body?: Array<BusinessDataGoogleHotelInfoTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/business_data/google/hotel_info/task_post';
};

export type GoogleHotelInfoTaskPostResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleHotelInfoTaskPostResponseInfo | null;
};

export type GoogleHotelInfoTaskPostResponse = GoogleHotelInfoTaskPostResponses[keyof GoogleHotelInfoTaskPostResponses];

export type GoogleHotelInfoTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/business_data/google/hotel_info/tasks_ready';
};

export type GoogleHotelInfoTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleHotelInfoTasksReadyResponseInfo | null;
};

export type GoogleHotelInfoTasksReadyResponse = GoogleHotelInfoTasksReadyResponses[keyof GoogleHotelInfoTasksReadyResponses];

export type GoogleHotelInfoTaskGetAdvancedData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/business_data/google/hotel_info/task_get/advanced/{id}';
};

export type GoogleHotelInfoTaskGetAdvancedResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleHotelInfoTaskGetAdvancedResponseInfo | null;
};

export type GoogleHotelInfoTaskGetAdvancedResponse = GoogleHotelInfoTaskGetAdvancedResponses[keyof GoogleHotelInfoTaskGetAdvancedResponses];

export type GoogleHotelInfoTaskGetHtmlData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 7 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/business_data/google/hotel_info/task_get/html/{id}';
};

export type GoogleHotelInfoTaskGetHtmlResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleHotelInfoTaskGetHtmlResponseInfo | null;
};

export type GoogleHotelInfoTaskGetHtmlResponse = GoogleHotelInfoTaskGetHtmlResponses[keyof GoogleHotelInfoTaskGetHtmlResponses];

export type GoogleHotelInfoLiveAdvancedData = {
    body?: Array<BusinessDataGoogleHotelInfoLiveAdvancedRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/business_data/google/hotel_info/live/advanced';
};

export type GoogleHotelInfoLiveAdvancedResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleHotelInfoLiveAdvancedResponseInfo | null;
};

export type GoogleHotelInfoLiveAdvancedResponse = GoogleHotelInfoLiveAdvancedResponses[keyof GoogleHotelInfoLiveAdvancedResponses];

export type GoogleHotelInfoLiveHtmlData = {
    body?: Array<BusinessDataGoogleHotelInfoLiveHtmlRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/business_data/google/hotel_info/live/html';
};

export type GoogleHotelInfoLiveHtmlResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleHotelInfoLiveHtmlResponseInfo | null;
};

export type GoogleHotelInfoLiveHtmlResponse = GoogleHotelInfoLiveHtmlResponses[keyof GoogleHotelInfoLiveHtmlResponses];

export type GoogleReviewsTaskPostData = {
    body?: Array<BusinessDataGoogleReviewsTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/business_data/google/reviews/task_post';
};

export type GoogleReviewsTaskPostResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleReviewsTaskPostResponseInfo | null;
};

export type GoogleReviewsTaskPostResponse = GoogleReviewsTaskPostResponses[keyof GoogleReviewsTaskPostResponses];

export type GoogleReviewsTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/business_data/google/reviews/tasks_ready';
};

export type GoogleReviewsTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleReviewsTasksReadyResponseInfo | null;
};

export type GoogleReviewsTasksReadyResponse = GoogleReviewsTasksReadyResponses[keyof GoogleReviewsTasksReadyResponses];

export type GoogleReviewsTaskGetData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/business_data/google/reviews/task_get/{id}';
};

export type GoogleReviewsTaskGetResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleReviewsTaskGetResponseInfo | null;
};

export type GoogleReviewsTaskGetResponse = GoogleReviewsTaskGetResponses[keyof GoogleReviewsTaskGetResponses];

export type GoogleExtendedReviewsTaskPostData = {
    body?: Array<BusinessDataGoogleExtendedReviewsTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/business_data/google/extended_reviews/task_post';
};

export type GoogleExtendedReviewsTaskPostResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleExtendedReviewsTaskPostResponseInfo | null;
};

export type GoogleExtendedReviewsTaskPostResponse = GoogleExtendedReviewsTaskPostResponses[keyof GoogleExtendedReviewsTaskPostResponses];

export type GoogleExtendedReviewsTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/business_data/google/extended_reviews/tasks_ready';
};

export type GoogleExtendedReviewsTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleExtendedReviewsTasksReadyResponseInfo | null;
};

export type GoogleExtendedReviewsTasksReadyResponse = GoogleExtendedReviewsTasksReadyResponses[keyof GoogleExtendedReviewsTasksReadyResponses];

export type GoogleExtendedReviewsTaskGetData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/business_data/google/extended_reviews/task_get/{id}';
};

export type GoogleExtendedReviewsTaskGetResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleExtendedReviewsTaskGetResponseInfo | null;
};

export type GoogleExtendedReviewsTaskGetResponse = GoogleExtendedReviewsTaskGetResponses[keyof GoogleExtendedReviewsTaskGetResponses];

export type GoogleQuestionsAndAnswersTaskPostData = {
    body?: Array<BusinessDataGoogleQuestionsAndAnswersTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/business_data/google/questions_and_answers/task_post';
};

export type GoogleQuestionsAndAnswersTaskPostResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleQuestionsAndAnswersTaskPostResponseInfo | null;
};

export type GoogleQuestionsAndAnswersTaskPostResponse = GoogleQuestionsAndAnswersTaskPostResponses[keyof GoogleQuestionsAndAnswersTaskPostResponses];

export type GoogleQuestionsAndAnswersTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/business_data/google/questions_and_answers/tasks_ready';
};

export type GoogleQuestionsAndAnswersTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleQuestionsAndAnswersTasksReadyResponseInfo | null;
};

export type GoogleQuestionsAndAnswersTasksReadyResponse = GoogleQuestionsAndAnswersTasksReadyResponses[keyof GoogleQuestionsAndAnswersTasksReadyResponses];

export type GoogleQuestionsAndAnswersTaskGetData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/business_data/google/questions_and_answers/task_get/{id}';
};

export type GoogleQuestionsAndAnswersTaskGetResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleQuestionsAndAnswersTaskGetResponseInfo | null;
};

export type GoogleQuestionsAndAnswersTaskGetResponse = GoogleQuestionsAndAnswersTaskGetResponses[keyof GoogleQuestionsAndAnswersTaskGetResponses];

export type GoogleQuestionsAndAnswersLiveData = {
    body?: Array<BusinessDataGoogleQuestionsAndAnswersLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/business_data/google/questions_and_answers/live';
};

export type GoogleQuestionsAndAnswersLiveResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataGoogleQuestionsAndAnswersLiveResponseInfo | null;
};

export type GoogleQuestionsAndAnswersLiveResponse = GoogleQuestionsAndAnswersLiveResponses[keyof GoogleQuestionsAndAnswersLiveResponses];

export type TrustpilotSearchTaskPostData = {
    body?: Array<BusinessDataTrustpilotSearchTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/business_data/trustpilot/search/task_post';
};

export type TrustpilotSearchTaskPostResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataTrustpilotSearchTaskPostResponseInfo | null;
};

export type TrustpilotSearchTaskPostResponse = TrustpilotSearchTaskPostResponses[keyof TrustpilotSearchTaskPostResponses];

export type TrustpilotSearchTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/business_data/trustpilot/search/tasks_ready';
};

export type TrustpilotSearchTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataTrustpilotSearchTasksReadyResponseInfo | null;
};

export type TrustpilotSearchTasksReadyResponse = TrustpilotSearchTasksReadyResponses[keyof TrustpilotSearchTasksReadyResponses];

export type TrustpilotSearchTaskGetData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/business_data/trustpilot/search/task_get/{id}';
};

export type TrustpilotSearchTaskGetResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataTrustpilotSearchTaskGetResponseInfo | null;
};

export type TrustpilotSearchTaskGetResponse = TrustpilotSearchTaskGetResponses[keyof TrustpilotSearchTaskGetResponses];

export type TrustpilotReviewsTaskPostData = {
    body?: Array<BusinessDataTrustpilotReviewsTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/business_data/trustpilot/reviews/task_post';
};

export type TrustpilotReviewsTaskPostResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataTrustpilotReviewsTaskPostResponseInfo | null;
};

export type TrustpilotReviewsTaskPostResponse = TrustpilotReviewsTaskPostResponses[keyof TrustpilotReviewsTaskPostResponses];

export type TrustpilotReviewsTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/business_data/trustpilot/reviews/tasks_ready';
};

export type TrustpilotReviewsTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataTrustpilotReviewsTasksReadyResponseInfo | null;
};

export type TrustpilotReviewsTasksReadyResponse = TrustpilotReviewsTasksReadyResponses[keyof TrustpilotReviewsTasksReadyResponses];

export type TrustpilotReviewsTaskGetData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/business_data/trustpilot/reviews/task_get/{id}';
};

export type TrustpilotReviewsTaskGetResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataTrustpilotReviewsTaskGetResponseInfo | null;
};

export type TrustpilotReviewsTaskGetResponse = TrustpilotReviewsTaskGetResponses[keyof TrustpilotReviewsTaskGetResponses];

export type BusinessDataTripadvisorLocationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/business_data/tripadvisor/locations';
};

export type BusinessDataTripadvisorLocationsResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataTripadvisorLocationsResponseInfo | null;
};

export type BusinessDataTripadvisorLocationsResponse = BusinessDataTripadvisorLocationsResponses[keyof BusinessDataTripadvisorLocationsResponses];

export type BusinessDataTripadvisorLocationsCountryData = {
    body?: never;
    path: {
        /**
         * country ISO code
         * optional field
         * specify the ISO code if you want to filter the list of locations by country
         * example:
         * us
         */
        country: string;
    };
    query?: never;
    url: '/v3/business_data/tripadvisor/locations/{country}';
};

export type BusinessDataTripadvisorLocationsCountryResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataTripadvisorLocationsCountryResponseInfo | null;
};

export type BusinessDataTripadvisorLocationsCountryResponse = BusinessDataTripadvisorLocationsCountryResponses[keyof BusinessDataTripadvisorLocationsCountryResponses];

export type BusinessDataTripadvisorLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/business_data/tripadvisor/languages';
};

export type BusinessDataTripadvisorLanguagesResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataTripadvisorLanguagesResponseInfo | null;
};

export type BusinessDataTripadvisorLanguagesResponse = BusinessDataTripadvisorLanguagesResponses[keyof BusinessDataTripadvisorLanguagesResponses];

export type TripadvisorSearchTaskPostData = {
    body?: Array<BusinessDataTripadvisorSearchTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/business_data/tripadvisor/search/task_post';
};

export type TripadvisorSearchTaskPostResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataTripadvisorSearchTaskPostResponseInfo | null;
};

export type TripadvisorSearchTaskPostResponse = TripadvisorSearchTaskPostResponses[keyof TripadvisorSearchTaskPostResponses];

export type TripadvisorSearchTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/business_data/tripadvisor/search/tasks_ready';
};

export type TripadvisorSearchTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataTripadvisorSearchTasksReadyResponseInfo | null;
};

export type TripadvisorSearchTasksReadyResponse = TripadvisorSearchTasksReadyResponses[keyof TripadvisorSearchTasksReadyResponses];

export type TripadvisorSearchTaskGetData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/business_data/tripadvisor/search/task_get/{id}';
};

export type TripadvisorSearchTaskGetResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataTripadvisorSearchTaskGetResponseInfo | null;
};

export type TripadvisorSearchTaskGetResponse = TripadvisorSearchTaskGetResponses[keyof TripadvisorSearchTaskGetResponses];

export type TripadvisorReviewsTaskPostData = {
    body?: Array<BusinessDataTripadvisorReviewsTaskPostRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/business_data/tripadvisor/reviews/task_post';
};

export type TripadvisorReviewsTaskPostResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataTripadvisorReviewsTaskPostResponseInfo | null;
};

export type TripadvisorReviewsTaskPostResponse = TripadvisorReviewsTaskPostResponses[keyof TripadvisorReviewsTaskPostResponses];

export type TripadvisorReviewsTasksReadyData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/business_data/tripadvisor/reviews/tasks_ready';
};

export type TripadvisorReviewsTasksReadyResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataTripadvisorReviewsTasksReadyResponseInfo | null;
};

export type TripadvisorReviewsTasksReadyResponse = TripadvisorReviewsTasksReadyResponses[keyof TripadvisorReviewsTasksReadyResponses];

export type TripadvisorReviewsTaskGetData = {
    body?: never;
    path: {
        /**
         * task identifier
         * unique task identifier in our system in the UUID format
         * you will be able to use it within 30 days to request the results of the task at any time
         */
        id: string;
    };
    query?: never;
    url: '/v3/business_data/tripadvisor/reviews/task_get/{id}';
};

export type TripadvisorReviewsTaskGetResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataTripadvisorReviewsTaskGetResponseInfo | null;
};

export type TripadvisorReviewsTaskGetResponse = TripadvisorReviewsTaskGetResponses[keyof TripadvisorReviewsTaskGetResponses];

export type SocialMediaPinterestLiveData = {
    body?: Array<BusinessDataSocialMediaPinterestLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/business_data/social_media/pinterest/live';
};

export type SocialMediaPinterestLiveResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataSocialMediaPinterestLiveResponseInfo | null;
};

export type SocialMediaPinterestLiveResponse = SocialMediaPinterestLiveResponses[keyof SocialMediaPinterestLiveResponses];

export type SocialMediaFacebookLiveData = {
    body?: Array<BusinessDataSocialMediaFacebookLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/business_data/social_media/facebook/live';
};

export type SocialMediaFacebookLiveResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataSocialMediaFacebookLiveResponseInfo | null;
};

export type SocialMediaFacebookLiveResponse = SocialMediaFacebookLiveResponses[keyof SocialMediaFacebookLiveResponses];

export type SocialMediaRedditLiveData = {
    body?: Array<BusinessDataSocialMediaRedditLiveRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/business_data/social_media/reddit/live';
};

export type SocialMediaRedditLiveResponses = {
    /**
     * Successful operation
     */
    200: BusinessDataSocialMediaRedditLiveResponseInfo | null;
};

export type SocialMediaRedditLiveResponse = SocialMediaRedditLiveResponses[keyof SocialMediaRedditLiveResponses];

export type UserDataData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/appendix/user_data';
};

export type UserDataResponses = {
    /**
     * Successful operation
     */
    200: AppendixUserDataResponseInfo | null;
};

export type UserDataResponse = UserDataResponses[keyof UserDataResponses];

export type AppendixErrorsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/appendix/errors';
};

export type AppendixErrorsResponses = {
    /**
     * Successful operation
     */
    200: AppendixErrorsResponseInfo | null;
};

export type AppendixErrorsResponse = AppendixErrorsResponses[keyof AppendixErrorsResponses];

export type WebhookResendData = {
    body?: Array<AppendixWebhookResendRequestInfo | null>;
    path?: never;
    query?: never;
    url: '/v3/appendix/webhook_resend';
};

export type WebhookResendResponses = {
    /**
     * Successful operation
     */
    200: AppendixWebhookResendResponseInfo | null;
};

export type WebhookResendResponse = WebhookResendResponses[keyof WebhookResendResponses];

export type AppendixStatusData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/v3/appendix/status';
};

export type AppendixStatusResponses = {
    /**
     * Successful operation
     */
    200: AppendixStatusResponseInfo | null;
};

export type AppendixStatusResponse = AppendixStatusResponses[keyof AppendixStatusResponses];
